This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
App.css
App.jsx
assets/react.svg
assets/SVG/emptyState.svg
components/auth/AuthScreen.jsx
components/auth/index.js
components/auth/Login.jsx
components/auth/Register.jsx
components/CommandBar.jsx
components/EmptyState.jsx
components/WindowManager.jsx
components/windows/AudioWindow.jsx
components/windows/ChatWindow.jsx
components/windows/EditorWindow.jsx
components/windows/ExplorerWindow.css
components/windows/ExplorerWindow.jsx
components/windows/imageWindow.jsx
components/windows/index.js
components/windows/PreviewWindow.jsx
components/windows/TerminalWindow.jsx
config/api.js
context/AuthContext.jsx
context/WindowStateContext.jsx
hocs/withCommandHandling.jsx
hocs/withWindowState.jsx
hooks/useForceUpdate.js
hooks/useKeyboardShortcuts.js
hooks/useWindowManager.js
index.html
main.jsx
models/Node.js
styles.css
styles/main.css
utils/constants.js
utils/treeUtils.js
utils/windowSizeConstants.js
utils/windowTypes.js
utils/windowUtils.js

================================================================
Files
================================================================

================
File: App.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

#root {
  width: 100%;
  height: 100%;
}

================
File: App.jsx
================
import React from 'react';
import { WindowManager } from './components/WindowManager';
import { CommandBar } from './components/CommandBar';
import { EmptyState } from './components/EmptyState';
import { AuthScreen } from './components/auth';
import { useWindowManager } from './hooks/useWindowManager';
import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';
import { useAuth } from './context/AuthContext';
import { WINDOW_CONTENT } from './utils/windowTypes';

/**
 * Main application component that composes our window management system.
 * This component is intentionally kept simple, delegating most functionality
 * to specialized components and hooks.
 */
function App() {
  const { isAuthenticated, loading, user, logout } = useAuth();
  
  // Call all hooks at the top level, before any conditional returns
  const {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    createNewWindow,
    splitWindow,
    closeWindow,
    transformWindow,
    handleCommand,
    handleResizeStart,
    handleResizeMove,
    handleResizeEnd,
    hasActiveWindow,
    hasRootNode,
    currentWorkspaceIndex,
    switchWorkspace,
    isResizeMode,
    isMoveMode,
    setIsResizeMode,
    resizeActiveWindow
  } = useWindowManager();

  // Set up keyboard shortcuts - always call this hook, even if we'll return early
  // But don't include move mode props to avoid conflicts with WindowManager
  useKeyboardShortcuts({
    onSplitVertical: () => splitWindow(activeNodeId, 'vertical'),
    onSplitHorizontal: () => splitWindow(activeNodeId, 'horizontal'),
    onClose: () => closeWindow(activeNodeId),
    createNewWindow,
    hasActiveWindow,
    hasRootNode,
    isResizeMode,
    isMoveMode,
    setIsResizeMode,
    resizeActiveWindow,
    activeNodeId
  });
  
  // If authentication is still loading, show a loading screen
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-stone-900">
        <div className="text-teal-500 text-2xl font-mono">Loading...</div>
      </div>
    );
  }
  
  // If not authenticated, show the auth screen
  if (!isAuthenticated) {
    return <AuthScreen />;
  }

  // Define component to render based on whether we have a root node
  const renderContent = () => {
    if (!rootNode) {
      return <EmptyState />;
    }

    // Render the window tree with all necessary props
    return (
      <WindowTreeRenderer
        node={rootNode}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={handleResizeStart}
        onResizeMove={handleResizeMove}
        onResizeEnd={handleResizeEnd}
        isResizeMode={isResizeMode} // Pass isResizeMode to WindowTreeRenderer
        isMoveMode={isMoveMode}
      />
    );
  };

  return (
    <div className="w-full h-screen flex flex-col">
      {/* Global command bar with user info */}
      <CommandBar 
        onCommand={handleCommand}
        currentWorkspaceIndex={currentWorkspaceIndex}
        switchWorkspace={switchWorkspace}
        user={user}
        onLogout={logout}
      />
      
      {/* Main content area */}
      <div className="flex-1 relative">
        {renderContent()}
      </div>
    </div>
  );
}

/**
 * Renders the window tree recursively. This component is kept within App.jsx
 * since it's tightly coupled with the WindowManager's functionality.
 */
const WindowTreeRenderer = ({
  node,
  depth = 0,
  available = { x: 0, y: 0, width: 100, height: 100 },
  activeNodeId,
  setActiveNodeId,
  transformWindow,
  onResizeStart,
  onResizeMove,
  onResizeEnd,
  isResizeMode, // Add isResizeMode prop
  isMoveMode
}) => {
  if (node.type === 'window') {
    const windowContent = WINDOW_CONTENT[node.windowType];
    const Component = windowContent.component;
    const isActive = node.id === activeNodeId;

    return (
      <div
        className={`absolute overflow-hidden border-2 ${
          isActive 
            ? isResizeMode 
              ? 'border-yellow-500'
              : isMoveMode
                ? 'border-blue-500'
                : 'border-teal-500'
            : 'border-stone-600'
        }`}
        style={{
          left: `${available.x}%`,
          top: `${available.y}%`,
          width: `${available.width}%`,
          height: `${available.height}%`,
        }}
        onClick={() => setActiveNodeId(node.id)}
      >
        <Component
          key={`window-${node.id}-${node.windowType}`}
          isActive={isActive}
          nodeId={node.id}
          transformWindow={transformWindow}
        />
      </div>
    );
  }

  // Handle split nodes...
  let firstDimensions, secondDimensions;
  if (node.direction === 'horizontal') {
    firstDimensions = {
      x: available.x,
      y: available.y,
      width: available.width * node.splitRatio,
      height: available.height
    };
    secondDimensions = {
      x: available.x + (available.width * node.splitRatio),
      y: available.y,
      width: available.width * (1 - node.splitRatio),
      height: available.height
    };
  } else {
    firstDimensions = {
      x: available.x,
      y: available.y,
      width: available.width,
      height: available.height * node.splitRatio
    };
    secondDimensions = {
      x: available.x,
      y: available.y + (available.height * node.splitRatio),
      width: available.width,
      height: available.height * (1 - node.splitRatio)
    };
  }

  return (
    <>
      <WindowTreeRenderer
        node={node.first}
        depth={depth + 1}
        available={firstDimensions}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={onResizeStart}
        onResizeMove={onResizeMove}
        onResizeEnd={onResizeEnd}
        isResizeMode={isResizeMode} // Pass down isResizeMode
        isMoveMode={isMoveMode} // Pass down isMoveMode
      />
      
      <div
        className={`absolute z-10 ${
          node.direction === 'horizontal' 
            ? 'w-1 cursor-col-resize hover:bg-teal-500' 
            : 'h-1 cursor-row-resize hover:bg-teal-500'
        }`}
        style={{
          left: node.direction === 'horizontal' ? `${available.x + (available.width * node.splitRatio)}%` : `${available.x}%`,
          top: node.direction === 'horizontal' ? `${available.y}%` : `${available.y + (available.height * node.splitRatio)}%`,
          height: node.direction === 'horizontal' ? `${available.height}%` : '2px',
          width: node.direction === 'horizontal' ? '2px' : `${available.width}%`,
        }}
        onMouseDown={(e) => onResizeStart(e, node)}
      />
      
      <WindowTreeRenderer
        node={node.second}
        depth={depth + 1}
        available={secondDimensions}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={onResizeStart}
        onResizeMove={onResizeMove}
        onResizeEnd={onResizeEnd}
        isResizeMode={isResizeMode} // Pass down isResizeMode
        isMoveMode={isMoveMode} // Pass down isMoveMode
      />
    </>
  );
};

export default App;

================
File: assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: assets/SVG/emptyState.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1781 1145.9">
  <defs>
    <style>
      .cls-1, .cls-2 {
        fill: none;
        stroke: #48c0b2;
        stroke-miterlimit: 10;
      }

      .cls-2 {
        stroke-width: 3px;
      }

      .cls-3 {
        clip-path: url(#clippath);
      }
    </style>
    <clipPath id="clippath">
      <polyline class="cls-1" points="270.6 1145.4 .5 1145.4 .5 .5 1780.5 .5 1780.5 1145.4 270.6 1145.4"/>
    </clipPath>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1">
    <g>
      <g class="cls-3">
        <path class="cls-2" d="M1029.18,973.3c-1.01-7.48-1.99-14.93-2.93-22.34M1044.76,1073.01c1.48,8.41,3.02,16.87,4.6,25.35,2.18,11.57,4.39,23.05,6.69,34.42M1056.05,1132.78v.03M1029.72,972.17l9.78,59.68M982,1151.26c13.28,18.04,34.44,25.19,50.69,18.7,11.91-4.77,17.69-15.46,19.61-19.55M1217.44,708.86c.02-.74.07-1.44.12-2.11.05-.58.1-1.12.17-1.61.93-6.9,3.48-6.88,4.77-14.78,2.69-16.44-6.71-26.62-1.32-32.23,1.75-1.82,4-2.04,6.02-2.45,1.77-.36,3.35-.88,4.27-2.69,1.32-2.64-.39-4.74-.82-11.84-.26-4.19.14-6.95.24-8.56.84-12.18-3.72-37.43-7.1-53.92-.55-2.68-1.06-5.13-1.53-7.26M1211.99,522.22c-2.45-14.09-2.63-17.86-6.16-24.45M1196.66,484.67c-3.5-4.44-9.15-11.86-19.34-25.98-14.91-20.68-15.39-22.33-20.4-26.89-14.95-13.63-23.29-10.35-45.73-24.06-17.35-10.59-13.64-13.32-33.58-27.04-26.08-17.95-45.17-22.03-44.24-29.17.98-7.48,22.53-7.31,25.17-18.88,1.2-5.23-2.13-10.09-3.81-12.58-9.61-14.16-17.61-29.36-26.74-43.83-2.49-3.95-5.06-7.84-7.77-11.65-16.66-23.34-26.02-44-30.13-53.2-7.71-17.25-5.34-16.44-18.12-49.2-14.71-37.72-20.82-46.4-26.12-52.72-10.14-12.08-20.56-19.24-29.17-25.17-12.84-8.84-20.03-13.66-30.03-14.29-9.64-.62-17.93,2.9-31.16,11.43-26.53,17.09-41.13,26.51-52.92,45.48-8.29,13.37-12.96,35.99-22.31,81.24-5.34,25.88-4.14,25.07-6.57,30.31-1.44,3.09-3.21,6.26-5.18,9.46-3.02,4.84-6.56,9.71-10.31,14.43-12.77,16.11-27.83,30.29-32.12,34.32-1.24,1.15-4.56,4.26-6.25,9.34-.14.45-2.76,8.73,1.08,16.47,5.56,11.19,19.1,10.18,19.61,15.24.55,5.66-16.25,9.7-45.48,23.44-21.18,9.95-31.95,15.14-41.77,24.88-7.69,7.65-8.68,11.45-16.9,16.7-4.58,2.92-7.52,3.81-29.82,12.1-13.92,5.17-15.08,5.68-17.04,7.24-8.82,7.07-9.71,16.46-13.45,26.03-6.8,17.47-18.09,22.98-27.73,33.84-9.85,11.09-10.64,19.48-15.41,50.76M1097.89,709.58c-7.45-10.83-12.61-19.96-17.04-31.52-5.23-13.68-5.1-25.4-9.44-25.74-1.49-.12-2.75,1.13-8.44,10.74-1.03,1.75-2.21,3.78-3.57,6.13-4.99,8.63-7.89,13.87-9.64,17.21M1110.05,726.36c1.97,2.63,4.05,5.39,6.26,8.32,2.59,3.45,5.65,7.43,9.18,11.88M706.52,665.13c-5.59-9.99-8.25-15.34-10.43-17.92-1.27-1.53-2.39-2.09-3.84-2.06-.58.02-1.13.12-1.68.31-6.97,2.4-11.34,18.55-17.09,34.2M613.79,672.74c13.47-6.56,26.87-14.26,37.86-23.37,24.39-20.25,34.08-45.2,36.93-53.44.6-1.73,1.15-3.45,1.65-5.13,4.55-15.36,5.13-28.88,4.86-38.04M1062.96,663.06c-10,4.63-17.62,9.58-23.22,13.8M795.98,693.24c-3.57-1.63-7.52-3.47-11.93-5.46-.48-.21-.94-.43-1.41-.62M696.09,647.22c3.81,2.32,9.35,5.63,16.18,9.39,3.64,2.01,6.92,3.74,9.95,5.29M1203.78,571.06c6.04,2.69,12.68,5.25,20.01,7.6h.02M1160.75,541.54c-1.15-1.2-2.23-2.39-3.24-3.54-9.49-10.83-18.21-24.92-36.04-29.57-6.4-1.66-7.43-.41-20.46-.05-2.49.07-5.42.1-8.92.07-19.12-.15-33.41-.38-48.62-6.11-4.67-1.75-6.93-3.09-22.24-12.51-25.4-15.62-46.11-28.5-68.14-40.69-4.55-2.52-8.37-4.58-11.63-6.26-13.2-6.83-17.04-7.62-20.76-7.95-1.77-.15-3.48-.21-5.17-.17-16.53.39-29.31,9.76-43.74,19.01-63.15,40.45-111.87,49.35-130.57,49.53-14.52.12-23.32.21-32.42-5.39-6.16-3.81-11.94-9.92-15.77-7.91-2.08,1.08-1.54,3.48-5.71,10.3-1.9,3.09-2.9,4.67-4.72,6.14-1.25,1-3.64,2.59-10.16,3.72-6.04,1.05-10.74.86-11.1.84-11.57-.43-26.34,11.07-33.65,16.32-4.93,3.52-16.94,9.66-40.96,21.93-9.11,4.65-21.04,10.11-35.85,15.29M1101.01,508.39c-.53,1.06-1.39,2.66-2.57,4.5-2.33,3.62-3.84,4.89-5.01,6.73-2.33,3.64-2.13,7.57-1.99,11.15.21,5.65.38,10.28.46,14.16.17,6.98.1,11.51-.46,15.02-.57,3.57-2.73,7.5-6.74,13.44M967.14,541.29c1.17.14,2.4.31,3.69.53,1.44.24,5.22.7,10.71,2.28,5.51,1.58,12.73,4.27,21.12,8.97,6.88,3.84,19.37,10.74,30.61,24.02,14.74,17.42,14.31,30.41,21.97,30.89,4.99.31,10.86-8.05,22.6-24.75,2.69-3.84,4.98-7.05,6.85-9.85M938.31,526.87c-1.08-4.38-2.32-9.3-6.98-14.35-3.6-3.91-6.21-4.72-7.88-4.96-6.74-.96-12.53,5.54-13.21,6.32-.12.14-.24.27-.34.43M788,582.42c-1.92,1.6-3.76,3.12-5.42,4.53-4.87,4.1-8.36,7.05-8.48,7.16-10.9,9.2-11.81,15.6-16.35,16.17-3.02.38-5.27-1.87-6.57-2.95-29.43-24.39-44.14-36.57-48.24-45.66-1.25-2.78-3.02-6.35-6.68-8.39-.39-.22-.79-.39-1.18-.51-4.19-1.46-9.04,1.41-18.28,4.89-19.15,7.26-21.4,4.12-26.12,9.16-6.09,6.5-2.3,11.84-8.39,24.11-4.2,8.48-9.73,13.45-15.34,18.5-4.77,4.29-12.48,10.31-33.09,19.55-12.8,5.73-20.71,8.25-28.04,10.79-6.45,2.23-12.46,4.48-20.97,8.97-3.35,1.75-6.44,3.5-9.23,5.18M1091.9,544.92c2.76.98,7.19,2.51,12.68,4.29,12.42,4,14.29,4.08,16.46,6.44,4.48,4.89,1.12,9.75,4.05,19.82,2.4,8.27,7.14,13.52,11.53,18.36,7.46,8.24,15.17,12.29,26.03,17.86,10.07,5.18,10.78,4.2,22.58,10.16,8.12,4.08,14.72,7.41,22.03,13.01,5.3,4.07,12.73,10.67,19.94,20.8M1071.41,652.32c2.47-12.17,4.8-24.69,7-37.62.6-3.57,1.2-7.12,1.77-10.66,1.66-10.42,3.17-20.64,4.51-30.65v-.02M690.22,590.79c-.07,7.71-.1,15.48-.07,23.34.05,10.61.19,21.04.41,31.34v.02M1080.18,604.04c3.83,9.52,8.36,16.49,11.82,21.11,7.02,9.35,14.36,15.32,23.46,22.74,5.44,4.43,9.16,7.46,14.59,10.86,9.22,5.78,14.55,7.14,32.31,13.87,18.21,6.92,27.46,10.45,34.89,15.17,9.59,6.07,16.34,12.72,20.49,17.35M923.91,520.13c-.05-3.69-.21-7.83-.46-12.56-.33-6.11-.86-13.2-1.63-21.61-1.27-13.8-3.21-31.13-6.3-51.17M1027.99,276.24c-7.21-4.51-17.85-11.75-29.52-22.05-16.44-14.5-21.67-23.36-41.89-49.87-2.06-2.73-4.31-5.65-6.73-8.77-6.69-8.61-29.7-37.98-64.08-68.06-11.38-9.97-15.27-12.36-20.59-12.6-24.26-1.03-48.62,44.41-59.38,67.25-2.63,5.56-4.44,9.78-5.25,11.69-1.73,4.02-5.42,12.99-12.01,24.61-7.45,13.09-14.9,23.06-20.06,29.46M886.64,70.01c-1.18,1.68-3.91,5.58-7.43,10.57-8.34,11.86-10.16,14.36-11.72,18.6-1.24,3.31-2.63,8.56-2.3,15.72M852.13,375.95c29.5,11.43,40.5,16.54,59.68,15.24,7.6-.51,12.82-1.77,20.64-4.56,2.63-.94,5.56-2.06,8.99-3.38,7.62-2.92,17.66-6.83,32.24-12.06,25.38-9.1,46.26-15.62,59.67-19.65M852.11,375.93c-5.29-2.04-11.17-4.31-17.81-6.76-18.6-6.9-45.66-16.34-79.5-26.03M932.46,386.6c3-2.44,5.99-4.87,8.99-7.31,9.08-7.38,18.14-14.76,27.22-22.14,5.44-4.41,10.86-8.84,16.3-13.25,4.89-3.98,9.76-7.95,14.66-11.93M852.13,375.95s-.02,0-.02-.02c-14.69-10.5-29.38-20.99-44.09-31.49-9.15-6.54-18.31-13.09-27.47-19.63-2.39-1.7-4.79-3.41-7.17-5.11M805.81,182.15c.76,39.26,2.99,64.35,5.89,80.19,1.73,9.58,3.72,15.79,5.77,19.72,1.22,2.35,2.47,3.88,3.69,4.84.58.45,9.32,7.17,16.58,12.96,13.02,10.38,11.74,9.85,13.73,11.07,18.62,11.31,41.97,3.98,44.81,3.04,4.77-1.56,2.32-1.42,16.41-8.37,13.97-6.9,22.77-10.24,28.78-13.45,4.93-2.61,7.96-5.15,10.4-9.49,1.92-3.38,2.66-7.1,4.15-14.59,1.96-9.82,1.9-17.31,1.72-26.87-.27-14.16-.69-26.56-1.13-36.86M951.85,282.64c.14,14.31.43,25.81.84,34.97.02.5.03,1,.07,1.48.55,11.74,1.32,19.51,2.18,24.44.86,4.79,1.8,6.88,2.78,7.34.14.07,1.77.82,3.95,1.99,2.95,1.6,5.3,3.12,7,4.29M808.03,344.44c1.54-.79,3.62-2.15,5.25-4.44.55-.79.98-1.56,1.3-2.33.89-2.02,1.12-3.9,1.22-5.01.33-3.23.7-10.43,1.03-20.59,0-.31.02-.62.03-.94.24-8.08.46-17.93.6-29.05M816.85,311.11c-5.1.45-12.1,1.61-19.92,4.67-7.04,2.75-12.49,6.18-16.37,9.03M984.66,343.53c-1.7-3.59-5.65-10.71-13.64-16.59-7.26-5.34-14.41-7.16-18.26-7.84M1219.69,741.04c.55.12,1.12.26,1.68.43,4.74,1.39,9.11,4.26,10.11,3.04.57-.7-.55-2.15-1.9-6.09-.84-2.42-1.32-4.53-1.63-6.09M803.7,448.11c-32.14-.02-55.62-6.71-71.51-13.16-17.18-6.95-31.16-15.92-49.18-12.01-7.05,1.54-12.49,4.56-27.18,16.59-39.47,32.35-49.7,51.1-78.65,67.22-10.52,5.85-19.65,9.2-24.59,10.86M790.83,429.79c8.37.58,18.91.6,30.89-1.13,10.95-1.6,20.3-4.22,27.75-6.86M845.18,436.66c10.59-3.31,21.91-7.34,33.74-12.29,8.01-3.35,15.55-6.81,22.6-10.3M1085.7,452.69c-45.54.55-72.66-6.23-86.08-10.59-30.31-9.83-45.46-14.74-56.06-20.88-.41-.24-1.13-.65-2.11-1.17-1.9-.96-4.8-2.25-8.48-3.12-10.45-2.49-19.46.15-24.59,1.72-4.55,1.39-11.67,4.19-19.17,10.02M1142.62,457.84c-2.57-3.35-6.49-8.12-11.72-13.45-5.73-5.83-8.6-8.75-11.45-10-9.04-3.98-17.16,2.56-31.18,6.57-7.34,2.11-18.6,4.2-33.74,2.57M1108.68,415.21c9.51,6.06,16.47,10.64,22.12,14.5,3.67,2.51,6.07,4.2,9.92,4.91,5.56,1.01,8.6-1.05,12.8.72,3.41,1.42,5.44,4.48,6.64,6.95M1076.26,416.55c-8.15,1.44-20.23,2.71-34.51.77-11.65-1.6-17.85-4.41-26.17-6.49-11.53-2.87-28.56-4.7-51.62.76M1053.2,403.01c-20.27-.12-41.05.05-62.36.58-16.8.41-33.26,1.01-49.39,1.82-.63.02-1.27.05-1.89.09M1046.52,390.05c-5.97.17-15.05.41-26.12.57-14.23.21-22.63.15-26.89.19-11.74.12-28.95,1.25-52.07,6.09-.62.12-1.25.26-1.89.39M813.52,415.41c14.4-4.75,25.81-5.06,33.75-4.39,9.66.82,19.65,3.55,33.36.19,3.95-.96,7.09-2.16,9.16-3.05M884.84,399.58c-13.92-1.51-28.09-2.92-42.52-4.19-17.25-1.53-34.15-2.78-50.73-3.81M687.68,396.73c28.19,4.46,40.93.76,47.28-3.83,1.18-.84,4.62-3.48,9.92-6.28,7.58-4,14.47-5.89,19.07-6.86M749.08,484.43c-19,.62-29.4-4.72-35.47-10.11-5.89-5.23-8.53-11.26-13.35-10.86-5.73.46-6.14,9.34-14.48,18.1-5.97,6.26-13.3,8.79-27.99,13.85-7.95,2.75-19.13,5.99-33.03,8.08M1184.96,520.09c-1.39-.93-2.63-1.87-3.72-2.78-8.8-7.33-9.92-14.11-18.88-22.02-9.88-8.73-21.45-11.88-29.74-13.16M1038.73,719.52c.65-.12,1.32-.24,1.99-.38h.02M959.76,769.11c12.97-3.09,25.95-6.18,38.9-9.27M816.81,312.06h.02c20.18,5.95,30.96,15.02,37.12,22.5,4.17,5.08,8.31,12,17.35,15.44,5.23,2.01,9.78,1.97,18.1,1.92,8.68-.07,15.55-.12,22.89-3.24,6.42-2.75,8.68-5.9,16.39-12.78,3.28-2.93,7.52-6.5,12.77-10.43,3.35-2.51,7.09-5.15,11.24-7.84M814.58,337.66c9.25,3.31,16.63,7.02,22.02,10.06,12.34,6.98,21.24,14.48,23.25,16.22,7.48,6.38,6.95,7.28,10.86,9.34,2.23,1.17,6.49,3,25.55,2.87,11.79-.1,17.78-.17,21.93-2.11,6.32-2.92,7.95-6.61,15.07-13.73,2.15-2.15,4.86-4.65,8.19-7.38,3.69-2.97,8.15-6.19,13.49-9.39M836.87,202.14c-9.22-2.3-19.58,2.15-19.73,6.01-.26,6.83,31.34,16.77,34.9,11.15,2.13-3.36-4.43-14.5-15.17-17.16ZM835.42,182.7c-6.33-1.06-13.45,1.7-13.44,4,0,4.24,23.9,9.64,25.69,5.9,1.01-2.18-4.77-8.65-12.25-9.9ZM890.26,215.67c3.55,5.61,35.14-4.31,34.9-11.15-.15-3.86-10.52-8.31-19.73-6.01-10.74,2.68-17.3,13.8-15.17,17.16ZM894.64,188.96c1.77,3.74,25.67-1.66,25.69-5.89.02-2.32-7.1-5.06-13.44-4.02-7.5,1.25-13.28,7.74-12.25,9.9ZM482.05,567.99v.02M453.7,901.42l.02.02.15.14M404,611.9h.02M309.46,1053.08h.02M453.71,901.43c-1.73-7.83-4.94-18.17-11.26-29.16-3.55-6.18-7.36-11.31-10.9-15.43M267.4,1153.44c4.29-6.97,7.26-12.78,9.04-16.47,7.1-14.64,8.53-22.5,16.05-43.04,1.13-3.09,2.4-6.47,3.86-10.21,2.25-5.82,3.38-8.72,4.62-11.67,1.46-3.47,2.87-6.64,4.2-9.54,1.58-3.48,3.04-6.59,4.31-9.4v-.02c4.19-9.27,6.28-15.24,3.95-20.63-.34-.81-.82-1.65-1.24-2.75-.33-.84-.6-1.84-.77-3.07-.43-3.28.45-5.01,2.01-11.86,1.15-4.96,1.72-7.43,1.54-8.82-.27-2.32-1.05-3.64-1.92-5.25-.7-1.29-1.46-2.78-2.08-5.1-.79-2.99-.88-5.59-.77-7.4,0-.14,0-.26.02-.38M643.12,699.87c.7-3.83,1.06-7.48-.89-11.67-4.58-9.78-17.47-13.11-22.72-14.47-1.08-.29-2.08-.5-2.99-.65-1-.19-1.89-.29-2.73-.34-5.95-.46-8.96,1.37-18.4-.41-8.73-1.66-9.59-4-21.14-7.69-1.39-.45-2.95-.93-4.68-1.41-10.54-2.97-16.03-3.38-20.2-.6-.7.46-2.4,2.2-5.83,5.68-6.02,6.13-7.71,8.2-8.56,8.24h-.02c-.07,0-.14-.02-.21-.05-1.7-.84,4.63-9.35,1.96-19-.27-1.01-.72-2.18-1.08-3.59-.46-1.7-.79-3.72-.57-6.21.24-2.66.36-4.05,1.2-5.35.55-.84,1.25-1.44,2.11-1.87,2.93-1.54,7.64-1.22,13.32-1.82,3.86-.39,9.1-.77,13.52-2.06,3.98-1.15,7.31-3,8.37-6.28,1.75-5.37.43-13.14-3.71-15.38-2.49-1.34-4.63,1.27-5.83-.7-1.03-1.68-.67-5.71-.31-6.52,1.78-4.07,5.39-4.12,6.44-7.45.31-.98-.03-2.52-.76-5.58-1.46-6.28-2.28-9.58-4.77-10.69-1.8-.82-2.49.41-4.32,0-5.37-1.22-6.37-13.49-9.46-19.44-.91-1.73-1.99-2.93-3.4-3.17-.96-.15-6.62-.65-7.24-1.3-.05-.05-.1-.12-.1-.12-.19-.31-.15-.82-.79-3.6-.21-.82-.27-1.39-.29-1.73-.03-.31-.02-.45-.02-.45,1.73.26,3.48.51,5.22.77-.24-1.66-.65-3.66-1.41-5.82-.84-2.49-1.87-4.53-2.8-6.13-1.48-.63-2.95-1.27-4.43-1.92,0,0-1.01-3.23-2.71-8.37-1.56-4.8-3.69-11.29-6.13-18.4-.84-2.45-1.53-4.5-2.88-7.14,0,0-3.67-7.31-10.19-13.51-4.46-4.26-19.91-14.33-47.12-16.78-4.74-.43-9.82-.62-15.27-.51-3.52.07-8.56.19-14.38.58-19.84,1.32-48.62,5.89-55.91,22.89-1.27,2.97-10.69,26.87-12.2,34.92-.17.94-.86,5.11-1.03,6.14-.02.14-.03.22-.03.22-2.16.65-4.32,1.29-6.49,1.94-1.13,4.32-2.28,8.67-3.41,12.99,1.3-.22,2.59-.45,3.9-.67.6-.1,1.22-.21,1.82-.31.02,3.14-.86,4.68-1.89,5.49-1.68,1.34-3.29.27-6.02,1.51-2.11.96-3.28,2.54-4.74,4.53-.69.94-1.66,2.52-3.6,6.93-2.83,6.37-3.29,9.85-5.63,10.35-1.17.24-1.58-.5-2.71-.1-1.63.57-2.13,2.54-3.23,6.02-2.42,7.76-2.99,7.96-2.51,9.15,1.18,2.97,5.15,2.66,5.82,5.94.17.77.05,1.65-.19,3.41-.36,2.63-.57,4.1-1.61,5.03-1.39,1.2-2.75.1-4.43.89-1.36.65-1.9,2.09-3.31,10.06-1.12,6.3-1.12,7.46-.39,8.73.77,1.39,1.99,2.23,5.11,3.62.43.19.86.38,1.27.55,6.33,2.71,10.09,3.36,10.09,3.36,10.9,1.82,17.38.53,21.21,1.3,1.41.27,2.45.84,3.21,1.92.53.76.7,3.67,1.05,9.49.31,4.93.39,7.38.19,8.97-.93,7.21-4.91,12.58-7.36,15.41-.5.57-.93,1.03-1.25,1.39-1.73,1.87-2.59,2.8-3.23,3.04-.24.09-.48.15-.72.19-8.37,1.48-17.57-23.46-32.38-23.01-3.47.09-7.79,1.6-12.77,3.72-2.3.98-4.75,2.11-7.33,3.29-4.8,2.23-7.41,3.07-10.26,3.86-3.6,1-7.58,1.9-16.87,5.39-3.54,1.32-6.61,2.49-9.28,3.52-15.43,5.95-17.73,7.48-19.46,9.75-5.73,7.52-2.04,15.63-3.64,24.99-.03.27-.09.55-.14.82-1.03,5.11-2.97,6.5-7.28,13.78-2.93,4.94-8.49,14.33-12.08,25.45-2.39,7.36-3.9,15.5-3.19,23.6.88,10.18,4.48,11.65,7.02,18.76.72,2.02,1.36,4.51,1.82,7.77.88,6.19.22,10.54-.98,14.5-2.06,6.93-5.75,12.75-5.65,25.48.05,6.56,1,10.3,1.9,14.11,1,4.2,1.97,8.46,1.7,16.65-.33,10.16-2.01,9.04-3.91,24.42-2.01,16.23-1.49,28.57-.91,42.7.48,11.6,1.15,14,1.51,15.19.41,1.39,2.99,9.68,9.87,16.87,2.18,2.28,4.8,4.46,7.93,6.26.77.46,1.58.89,2.4,1.29,9.73,4.63,20.82,3.79,27.13,3.31,22.84-1.75,25.17-2.27,25.17-2.27,2.57-1.53,5.37-1.77,7.52-1.01,1.05.36,1.94.96,2.57,1.77,1.48,1.85,1.2,4.26,1.1,4.99M585.25,1000.59c-2.32.63-4.05,1.68-4.93,3.64-.7,1.56-.96,3.96-1.01,4.32-.29,2.15.29,4.93,1.61,10.45.82,3.4,1.7,5.83,2.11,7.88.17.81.27,1.53.27,2.25,0,.93-.17,1.82-.58,2.73-1.13,2.51-2.75,2.32-3.81,4.62-2.11,4.53,1.66,10.43,2.95,12.56.33.55.65,1.12.94,1.66.41.77.79,1.56,1.12,2.35M630.16,1163.78c-1.29-2.57-3.19-6.04-5.83-9.92-.72-1.06-1.37-1.97-1.84-2.61M535.6,541.08c-1.3-.26-2.59-.5-3.9-.76-1.82-.34-3.64-.7-5.46-1.05l3.02,12.87c.17.05.34.09.51.14,3.07.77,6.16,1.56,9.23,2.33M313.07,1000.71c13.95,1.75,25.67,2.99,34.63,3.91,2.32.24,6.23.6,10.45-1.2,5.59-2.4,8.41-7.17,9.04-8.13,3.67-5.61,19.19-13.47,67.82-23.97.22-.05.46-.1.7-.15M583.04,1026.88c-4.46,1.08-11.7,2.95-20.52,5.78-15.77,5.05-21.11,8.22-28.61,6.73-7.76-1.56-11.63-6.9-16.7-11.75-24.51-23.56-62.84-22.63-68.01-22.51-6.28.15-23.66.76-41.72,10.45-19.07,10.26-25.52,23.48-43.21,24.13-3.26.12-8.67-.82-19.49-2.81-13.78-2.54-24.97-5.22-32.57-7.17M309.48,1053.1c16.68,4.41,30,8.82,39.31,12.12,13.81,4.89,18.89,7.4,26.74,6.23,11.24-1.66,14.23-8.77,26.92-17.49,3.98-2.71,24.68-16.92,49.23-15.67,21.24,1.08,37.92,13.32,42.21,16.47,14.57,10.71,16.23,19.15,26.92,20.51,8.41,1.06,13.23-3.43,29.74-11.46,13.45-6.54,24.87-10.67,32.24-13.11M451.16,1171.94c25.83,0,47.33-18.53,51.94-43.02.6-3.17.91-6.47.91-9.83,0-29.19-23.66-52.85-52.85-52.85s-52.85,23.66-52.85,52.85c0,4.12.48,8.13,1.37,12,5.42,23.41,26.41,40.86,51.48,40.86ZM584.15,1064.7c-27.03,21.4-54.02,42.8-81.05,64.21M399.68,1131.08c-31.51-22.86-63-45.72-94.5-68.57M411.1,1194.24c-39.54-33.45-79.08-66.89-118.61-100.32M586.33,1100.48c-30.27,29.31-60.56,58.62-90.81,87.93M267.4,1153.44c41.89,67.85,116.18,108.21,194,104.92,104.39-4.43,162.27-85.18,168.76-94.57M388.4,949.48c11.67,6.4,24.3,12.58,37.92,18.31,2.9,1.22,5.8,2.4,8.68,3.52,10.23,4.03,20.34,7.52,30.29,10.55,44.65,13.57,86.09,17.8,120.02,18.17M589.4,905.48c-6.66-1.2-17.02-3.09-29.79-5.46-21.83-4.07-26.14-4.98-33.17-5.71-9.08-.94-22.14-1.56-38.32.34M473.43,897.93c-2.97,6.45-5.8,14.04-7.95,22.67-1.56,6.33-2.54,12.44-3.09,18.28-.81,8.24-.74,15.91-.19,22.81.62,7.83,1.84,14.66,3.09,20.16M601.4,937.56c-12.29-3.41-28.3-7.62-47.21-11.91-10.09-2.3-15.79-3.59-22.46-4.68-15.12-2.49-37.53-4.38-66.24-.36M594.21,961.94c-43.93-7.69-87.86-15.38-131.81-23.06h-.02M462.21,961.69c20.46,3.93,41.22,7.74,62.29,11.43,21.42,3.76,42.58,7.28,63.51,10.59M387.03,741.45c-10.45,4.8-24.01,12.61-36.65,25.07-6.04,5.95-9.7,10.85-15.36,18.41-8.49,11.31-9.68,15.12-10.18,18.02-1.3,7.93,2.04,14,3.86,18.89,3.07,8.22,5.9,21.52,4.26,43.43M541.44,705.39c4.65-6.85,6.9-11.1,6.57-13.99-.31-2.75-1.78-5.34-4.2-7.71-2.3-2.3-5.44-4.41-9.25-6.35-1.1-.55-2.25-1.1-3.45-1.61-6.45-2.87-14.38-5.29-23.03-7.26-17.19-3.96-37.29-6.16-54.78-6.4h-.93c-19.01-.21-36.24,1.87-51.28,4.94-14.64,3-27.18,6.93-37.22,10.64M358.68,682.28c-1.42,1.56-3.23,4.03-3.84,7.33-.03.17-.07.33-.07.5-1.2,7.88,5.22,14.79,11.46,22.41.67.82,1.32,1.61,1.92,2.37,14.93,18.64,11.67,20.49,18.88,26.56,10.83,9.15,19.63,5.18,62.86,5.89,36.26.58,48.34,3.67,59.1-2.25,1.3-.7,2.61-1.56,3.91-2.57,2.27-1.75,4.51-4.17,7.31-7.72,2.32-2.93,5.01-6.62,8.41-11.34.7-.98,1.44-2.01,2.21-3.09.5-.7,1-1.37,1.48-2.04,2.09-2.92,3.98-5.56,5.66-7.95,1.29-1.8,2.44-3.45,3.45-4.96M508.99,745.09c.55,1.01,1.17,2.13,1.85,3.33,2.81,4.99,6.64,11.5,11.48,18.95.94,1.44,1.92,2.93,2.93,4.44,14.16,21.07,17.97,21.79,20.9,31.95,4.99,17.31.34,37.31-.6,41.39-.38,1.6-1.84,7.64-3.12,15.94-.24,1.54-.45,2.97-.65,4.31-1.25,8.46-1.68,13.02-.1,15.41.62.94,1.37,1.63,2.23,2.15,5.42,3.28,15.34-.57,27.37,5.01,5.99,2.78,10.07,7.84,18.12,17.52.31.38.63.77.96,1.17,5.18,6.25,9.76,11.75,13.28,17.52M374.31,629.97c.22,9.11,3.11,13.66,5.73,16.11,1.15,1.08,5.08,3.33,12.97,7.84,3.48,2.01,5.94,3.36,7.31,5.78.19.31.34.65.48,1.01.94,2.37.63,4.72.27,6.21M531.33,630.62c.88,7.04-.69,11.33-2.76,14.07-3.4,4.46-8.67,5.47-13.18,7.04-3.11,1.08-5.87,2.42-7.41,5.32-.33.6-.57,1.22-.74,1.85-.88,3.11-.15,6.52.88,9.39M404,611.9c.09,2.42.46,5.42,1.12,9.27,1.72,10.02,2.99,16.83,4.91,21.62,1.2,2.95,2.64,5.13,4.6,6.81,1.8,1.56,7,2.75,17.38,5.13,10.33,2.37,15.5,3.55,20.39,3.52h.02c8.61-.07,15.1-2.3,20.7-4.22,7.79-2.68,11.69-4,14.76-6.93.91-.86,1.9-1.9,3.45-5.46,1.53-3.45,3.55-9.32,6.5-19.72,1.13-3.95,1.94-7,2.49-9.46,1.2-5.51,1.01-7.93-.38-10.19-2.25-3.67-6.38-4.93-9.58-5.82-18.33-5.18-27.51-7.77-39.45-7.74-1.29,0-19.77.22-36.65,7.65-2.54,1.13-5.97,2.81-8.27,6.42-1.46,2.27-2.15,4.8-1.97,9.11ZM384.27,629.58c-4.19-.14-7.45-.09-9.97.1v.02c-5.92.45-7.81,1.61-8.13,2.85-.17.63.1,1.15.38,3.93.22,2.28.26,4.15.26,5.39M538.37,641.23v-.76c-.02-1.12-.02-2.57.03-4.27.1-3.04.1-3.57.03-3.9-.02-.05-.03-.09-.03-.1-.14-.45-1.1-1.24-7.05-1.8-2.95-.29-7.12-.51-13.02-.63M400.33,659.71c1.01-3.19,1.94-7.07,2.45-11.55.36-3.09.45-5.9.39-8.41M502.57,635.65c0,.12.02.22.03.34.21,2.88.57,6.04,1.17,9.37.91,5.11,2.16,9.64,3.47,13.54v.02M566.27,636.7c-.05,0-.1,0-.17-.02-.27-.02-.58-.05-.89-.09-2.42-.26-5.73-.89-9.4-2.45-2.2-.94-3.62-1.56-5.23-2.95-.86-.76-2.59-2.63-6.09-10.54-1.15-2.61-1.85-4.63-2.11-5.44-1.48-4.32-8.97-25.71-14.83-43.52-.09-.27-.17-.53-.26-.79-.15-.46-.29-.91-.45-1.36-1.63-5.01-2.8-8.77-3.66-11.6-2.81-9.28-2.28-8.79-3.16-9.94-6.64-8.7-18.07-12.03-66.62-11.75-58.12.34-65.83,5.39-70.72,10.93-1.49,1.7-2.81,6.64-4.27,12.84-1.75,7.45-3.71,16.7-6.38,24.21-5.11,14.41-12.39,28.09-16.27,42.88-.36,1.39-1.3,4.86-4.31,6.83-1.46.96-2.73,1.12-7.07,1.78-1.92.31-4.99.79-8.89,1.46M436.93,477.14c.02,15.91.05,31.82.07,47.72h30.07c-.17-15.99-.33-31.99-.5-47.98M404,611.9c-3.81.07-6.59.45-8.27.74-1.15.19-2.11.43-3.21.79-1.73.58-2.81,1.29-3.72,1.82-.51.31-1.03.6-1.61.91-1.01.53-2.23,1.1-4.08,1.73l-.74.27c-.12,2.52.05,7.31,2.16,11.27.38.72.82,1.42,1.36,2.08,1.82,2.27,3.55,2.54,10.57,5.41,1.84.76,4.1,1.7,6.73,2.83,2.08.89,4.36,1.9,6.85,3.04.21.09.39.19.6.27M491.57,641.78s.02,0,.02-.02c2.15-1.42,5.59-3.5,10.11-5.41.31-.14.62-.26.91-.36,6.57-2.69,11.7-3.54,14.59-5.35.45-.26.82-.55,1.13-.88.57-.53.96-1.15,1.2-1.89.39-1.18.96-4.14.98-7.31,0-.94-.03-1.73-.07-2.3l-.72-.51c-.26-.1-.51-.22-.76-.33-.77-.34-1.48-.65-2.09-.96-.89-.41-1.65-.81-2.27-1.12-2.32-1.2-2.92-1.66-4.43-2.01-.82-.21-1.49-.33-3.91-.51-1.51-.1-3.54-.24-5.95-.36M378.41,560.03c1.15,11.57,2.76,23.75,4.96,36.45,1.17,6.78,2.45,13.33,3.81,19.68M516.87,616.47c.6-2.27,1.46-5.68,2.27-9.87,1.82-9.66,1.87-15.99,2.61-28.54.27-4.77.72-11.67,1.44-20.11M361.63,554.84l11.89-3c.07,0,2.92-12.66,2.92-12.66-2.9.58-5.78,1.15-8.67,1.73-.38.07-.76.15-1.13.22M543.91,882.95c-8.8-1.15-16.22-1.51-21.67-1.63-21.83-.43-26.07,3.21-27.53,4.43-.84.7-1.46,1.37-1.94,2.02-1.87,2.47-1.82,4.67-4.65,6.88-.31.24-.65.5-1.05.74-2.18,1.39-4,1.75-13.64,2.54-.46.05-.93.09-1.42.12-13.06,1.03-14.93.91-17.3,2.76-.31.24-.6.5-.84.76-2.92,2.9-2.45,6.38-4.98,11.31-3.24,6.3-7.84,8.13-18.7,14.67-12.78,7.72-34.22,21.93-41.79,21.93-.76,0-1.36-.14-1.82-.43-.21-.12-.91-.63-1.92-.91-.34-.1-.72-.15-1.13-.17-2.51-.1-4.43,1.78-4.79,2.09-2.25,1.97-19.63,9.94-72.21,31.39M541.78,865.4c-9.22-3.74-16.92-5.25-22.26-5.92-15.55-1.97-23.34-2.97-30.44-1.46-1.37.29-4.82,1.12-8.46.24-1.06-.26-2.15-.65-3.19-1.25-1.32-.74-1.78-1.36-2.63-2.01-4.6-3.59-10-.38-19.89,0-10.33.41-17.8-2.56-22.51,1.22-.19.15-.46.38-.84.63-.26.19-.58.38-.96.57-4.46,2.18-9.73-.27-11.02-.82-1.85-.79-11.93-.6-31.99-.19-20.11.43-31.85.86-37.19,6.44-.21.21-.53.57-1.01,1.05-.17.15-.34.34-.55.53-.67.63-1.44,1.3-1.75,1.54-1.89,1.36-5.46-.12-5.94-.31-1.73-.69-4.62-.74-8.2-.38-8.92.93-22.24,4.53-32.98,7.62-15.07,4.34-22.6,6.5-24.59,7.6-10.02,5.49-16.61,13.16-21.31,20.4M254.05,900.9c-2.47,3.76-4.43,7.43-6.13,10.61-2.92,5.53-5.18,11.03-6.9,16.42-3.14,9.75-4.53,19.03-4.99,27.11-.45,7.53-.12,14.02.34,18.83M492.77,887.78c-1.12-5.73-3.12-12.82-6.86-20.39-1.7-3.43-3.5-6.47-5.29-9.13M351.8,873.55c-7.5.67-16.58,1.51-26.91,2.56-12.84,1.29-17.56,1.87-23.99,3.69-4.46,1.29-8.01,2.68-16.2,6.35-7.71,3.47-18.16,8.36-30.63,14.76h-.02M356.4,888.84c-7.58,1.66-18.76,4.15-32.31,7.36-17.42,4.12-20.92,5.2-22.91,5.83-9.28,2.95-13.97,5.27-33.96,14.26-5.97,2.68-15,6.71-26.19,11.63M365.08,911.39c-43.02,14.55-86.04,29.1-129.05,43.66M244.3,980.13c21.83-7.22,44.36-15.2,67.53-24.04,21.78-8.31,42.66-16.82,62.62-25.4M349.4,863.89c.72,3.12,1.53,6.35,2.42,9.66,1.3,4.93,2.83,10.02,4.58,15.29.84,2.49,1.72,5.01,2.66,7.57,1.9,5.22,3.93,10.21,6.02,14.98,3,6.9,6.18,13.33,9.37,19.31,3.41,6.35,6.85,12.17,10.21,17.45M368.15,714.88c-2.57.53-5.17,1.06-7.77,1.63-2.42.51-4.86,1.05-7.31,1.6-.96.21-1.9.41-2.87.63-6.21,1.41-12.32,2.87-18.29,4.36-.02-.02-.02,0-.02,0-2.4.58-4.79,1.2-7.16,1.8M228.11,858.05h.02c15.22-7.17,27.83-11.69,36.67-14.5,11.12-3.55,18.09-5.03,22.91-11.67,4.08-5.59,2.42-9.1,4.63-21.5.34-1.92.76-3.81,1.3-5.71,2.45-8.63,7.29-17.78,17.57-33.07,1.61-2.39,2.97-4.29,3.86-5.49M331.91,723.09c-6.44-7.28-15.22-15.99-26.75-24.39-1.73-1.27-3.54-2.52-5.39-3.78-10.91-7.29-21.28-12.36-29.98-15.87M353.05,718.06c-7.02-8.46-16.23-18.19-27.97-27.85-10.36-8.53-20.39-15.08-29.14-20.06M354.75,690.1c-5.87-5.85-13.85-12.65-24.23-18.79-6.04-3.57-11.81-6.26-16.99-8.32M348.67,730.69c-7.62-2.02-15.6-3.96-23.94-5.78-12.49-2.71-25.76-5.15-39.74-7.12-9.08-1.27-17.9-2.27-26.43-3.04-4.02-.38-7.98-.69-11.86-.96M305.16,698.7c-7.53,1.58-15.98,3.79-25,6.95-8.05,2.8-15.26,5.89-21.55,8.94M336.83,747.8c-10.69-3.64-38.94-12.34-63.44-8.31-2.28.38-9.04,1.61-17.49,3.93-12.17,3.33-21.91,7.31-28.71,10.42M231.02,796.19c7.41-6.26,32.95-27.03,55.77-29.72,17.66-2.08,22.46-1.2,22.46-1.2,2.01.22,3.96.53,5.82.84,6.78,1.12,12.41,2.23,14.88-.89.55-.69.46-.96,1.17-3.47.6-2.16,2.32-8.1,5.71-13.95.67-1.13,1.39-2.28,2.18-3.38,2.59-3.59,5.17-6.38,5.17-6.38,2.21-2.4,4.84-4.86,4.55-7.4-.02-.1-.03-.22-.05-.33-.02-.14-.05-.24-.07-.31M293.4,804.6c-8.44-.43-20.22-.12-33.74,3.17-11.62,2.83-20.99,7.02-27.8,10.69M348.67,730.69l.05-.05c3.88-4.7,7.77-9.4,11.65-14.12.03-.03.07-.09.1-.12M574.25,664.64c-5.2,2.15-11.26,5.13-17.64,9.28-5.03,3.29-9.28,6.66-12.8,9.78M595.39,672.32c-9.11,4.34-19,9.63-29.31,16.03-9.2,5.71-17.38,11.48-24.64,17.04l-.02.02M528.62,723.45c.72.07,1.54.15,2.47.26,2.52.24,5.77.58,9.54,1.01.88.1,1.7.19,2.44.27,6.02.7,8,1,10.97,1.1,7.24.22,12.6-.93,14.93-1.37,6.04-1.12,19.82-2.76,51.67-5.22M616.52,673.08c-14.21,8.67-29.02,18.45-44.17,29.45-1.12.81-2.25,1.63-3.38,2.45-9.11,6.69-17.73,13.37-25.9,20.01l-.02.02M572.33,702.53h.02M559.05,770.89c-.45,9.56-.91,16.95-1.24,21.66-.43,6.33-.94,12.73,1.96,14.17,2.08,1.03,6.5-.17,8.24,1.24.72.58,1.37,1.34,1.37,1.34.31.36.67.81,1.1,1.49,2.61,4.17,2.68,8.19,2.81,15.07.29,14.81.34,16.03,1.6,17.49,2.45,2.87,5.66,2.35,13.47,3.83,4.36,0,8.13.91,11.31,2.09s5.71,2.64,7.58,3.72c1.89,1.1,4.39,2.75,7.43,4.91M520.21,734.79c1.1,1.32,2.08,2.63,2.95,3.9.51.72.98,1.42,1.41,2.11,2.59,4.15,4.14,7.89,5.1,10.91.1.31.19.6.27.89,2.11,7.09,1.58,11.33,4.51,14.26.26.24.53.48.84.72,1.61,1.2,2.9,1.32,14.07,2.37,5.56.51,3.21.51,9.68.94.48.03,1,.07,1.58.1,9.1.57,27.34,4.63,43.26,10.91,4.53,1.78,8.84,3.74,12.92,5.82M603.17,747.04c-10.12-1.48-18.45-1.01-32.35.24-1.68.15-3.45.33-5.32.5-9.15.86-21.28,2.28-35.56,4.82M629.1,828.71c-4.99-3.23-10.55-6.37-16.71-9.18-17.66-8.08-33.65-10.69-44.38-11.57M424.34,568.4c3.93.81,8.29,1.51,12.87,2.01,4.43.48,9.06.79,13.71.82h.02c.36.02.74.02,1.1.02h.46c4.56,0,9.11-.26,13.47-.7,5.87-.57,11.38-1.48,16.08-2.52v-.02c9.15-2.02,15.29-4.62,15.17-6.5-.15-2.08-7.79-3.33-16.73-4.08-4.75-.41-9.88-.67-14.43-.84-6.85-.26-12.41-.31-13.49-.31h-.89c-3.78-.02-9.13.02-14.84.21-4.84.12-9.94.36-14.55.74M422.28,557.21c-8.79.7-15.8,1.9-15.96,3.9-.15,2.09,7.29,5.1,18.02,7.29M482.03,567.99h.02s.04-.04.06-.06M436.83,556.53s-.03.07-.05.11M466.17,557.03c-.04-.11-.08-.23-.12-.34l-.02-.02M465.97,570.49c.11-.29.21-.57.3-.84M451.69,556.32s-.05.07-.08.11M452.5,571.09c-.03-.06-.09-.18-.16-.34M1425.55,888.82l.07-.19M1165.74,535.26l.02.02M1497.52,1015c-.29-.05-.55-.03-.74.1-.15.12-.22.27-.26.33-.72,1.49-5.85,7.05-14.88,19.92-2.83,4.05-5.25,7.64-7.19,10.59-.69,1.05-2.54,3.88-4.99,7.77-2.85,4.55-6.68,10.78-11.15,18.58-.07.1-.1.19-.12.29-.26,1.1.07,2.16.22,2.59.02.05.03.09.05.12.58,1.24,1.68,1.9,2.92,2.61,2.61,1.46,3.91,2.2,5.15,2.63,2.52.89,3.71,18.5.31,78.75-.05.84-.1,1.7-.15,2.56M1497.56,1015.02c.63.12,1.44.58,2.11,1,1.44.86,1.58,1.25,2.15,1.2.89-.07,1.78-1.17,1.66-2.01-.07-.45-.39-.6-1.82-1.75-.91-.76-1.36-1.15-1.56-1.41M1553.53,1039.37c.41-.98.89-2.09,1.46-3.38,3.31-7.55,4.96-11.33,7.31-14.09.5-.58,1.96-2.21,1.56-3.84-.02-.07-.03-.14-.07-.19-.21-.62-.65-1.15-1.12-1.44-1.72-1.08-4.03.69-7.33,1.94-6.76,2.56-13.76,1.39-18.38,1.77-.09.02-.6.05-1.29.05-.46-.02-.79-.02-1.13-.09-.65-.12-1.15-.41-1.48-.65-13.51-9.18-15.48-10.93-15.48-10.93-1.03-.91-2.47-2.23-4.39-2.18-.09.02-.22.02-.43.05-.46.12-1.29.41-2.92,1.3-3.6,1.96-4.36,3.16-5.73,2.83-1.29-.31-1.56-1.48-2.57-1.32-.24.03-.48.15-.7.31-.65.5-1.12,1.41-.98,2.13.02.1.07.22.21.39M1553.53,1039.39c-1.13,2.76-1.58,4.55-1.08,6.25.82,2.76,3.74,4.53,9.54,7.96,4.96,2.93,7.43,4.41,9.64,4.58,3.24.26,6.37-1.13,14.84-8.97,9.97-9.22,17.3-18.17,22.82-25.23,2.11-2.69,4.2-5.54,6.4-8.73,5.94-8.63,4.14-7.04,11.69-19.07.19-.31,2.33-3.72,4.34-8.63,1.32-3.24,1.99-4.91,1.84-6.45-.09-.86-.5-3.21-8.6-9.54-4.96-3.86-7.6-5.89-10.54-6.13-.12,0-.26-.02-.38-.02-.72-.02-3.26-.02-8.08,3.07-8.87,5.7-12.46,13.51-15.62,14.93-.5.24-1,.29-1.51.15-1.18-.33-1.78-1.58-1.84-1.7-.5-1.08-.36-2.59,2.75-7.89,2.61-4.44,3.31-4.77,3.5-6.52.09-1-.62-2.81-2.04-6.38-2.01-5.08-2.93-6.47-4.02-7.64-.82-.91-1.54-1.46-2.61-2.25-6.06-4.51-9.3-6.45-9.3-6.45-9.39-5.61-12.92-7.43-14.48-8.85M1560.79,935.86c-.67-.6-.98-1.13-1.22-1.87-.45-1.34-.43-3.86-.39-8.91.03-3.66-.86-5.73.17-7,.03-.07.1-.14.17-.21.96-.93,2.95-1.36,4.19-1.63,1.42-.31,2.01-.21,2.51-.72.91-.93.46-2.71.14-4.12-1.73-7.62-.74-9.64-2.4-10.45-.96-.48-1.48.12-6.21,1.73-5.47,1.85-6.62,1.65-7.4,2.99-1.24,2.13.89,4.08.07,6.32-.07.14-.12.29-.21.43-.82,1.53-2.16,1.05-6.92,3.33-4.14,1.99-4.75,2.78-6.47,2.73-.77-.02-1.44-.21-2.09-.51M1534.67,917.93c-1.18-.58-2.28-1.61-3.72-2.87-2.54-2.2-6.93-5.1-15.72-10.93-1.08-.72-2.99-2.49-6.06-3.54-1.61-.55-2.99-.76-4.03-.89-1.97-.27-3.21-.22-7.45-.1-5.54.17-5.53.14-5.68.22-2.78,1.53-3.78,6.13-6.02,9.82-.29.48-.89,1.41-1.66,1.65-.14.05-.27.07-.41.07-.15,0-.27-.03-.33-.05-3.79-1.13-3.79-1.92-15.31-5.49-.82-.26-3.11-.94-3.35-2.35-.02-.1-.03-.19-.03-.29-.02-1.75,2.61-2.83,2.61-4.91-.02-1.8-2.06-2.32-9.13-7.1-1.68-1.15-4.58-3.16-8.82-4.96-2.2-.94-2.97-1.06-3.74-.82-1.51.46-2.81,2.45-5.35,6.38-.5.79-1.01,1.6-1.92,1.82-.91.21-1.53-.34-2.97-1.15,0,0-3.59-2.04-8.24-3.28-.41-.1-.65-.17-1.15-.33-.21-.07-.39-.14-.57-.19-1.15-.39-1.41-.58-1.51-.67-.63-.53-.81-1.27-.91-1.61-.5-1.9-1.73-3.62-3.07-6.09-1.36-2.47-2.81-5.66-3.79-10.52-.48-2.44-.65-4.5-.65-6.19,0-4.44,1.18-6.5,1.18-6.5v-.02s.02-.07.02-.07c0-.07,1.96-11.84,2.44-16.15.46-4.1.22-7.1-.09-11.27-.15-2.16-.58-6.64-1.85-12.32-1.8-7.96-3.21-9.1-4.79-15.84-.98-4.24-.51-4.19-1.72-13.99-.07-.5-.12-.98-.17-1.46-1.42-11.43-2.27-17.45-4.82-22.5-3.29-6.56-7.5-10.23-8.72-11.26-3.31-2.76-6.35-4.22-7.36-4.67-5.94-2.69-9.25-1.8-16.71-2.57-.51-.03-1.06-.1-1.63-.17-4.74-.58-12.06-1.56-19.46-5.78-1.2-.69-5.06-2.9-7.76-5.59-1.77-1.77-3.02-3.76-2.69-5.66.46-2.64,3.69-3.41,7.4-5.58,5.99-3.47,10-10.3,17.8-23.82,6.52-11.31,9.78-16.97,11.03-21.42,4.03-14.17,1.39-26.46,6.57-34.58.62-1,1.36-1.9,2.23-2.76.93-.88,2.18-1.9,3.38-3.91,1.7-2.85,1.54-4.82,2.18-16.11.21-3.74.41-6.81,1.46-10.4.51-1.73,1.24-3.6,1.24-3.6,1.22-3.23,2.42-5.41,2.73-6.02,4.03-7.88-.36-24.87-.79-26.46-.53-2.02-.94-3.16-1.03-4.02-.05-.55.02-.98.26-1.44,2.54-5.1,18.04-1.97,23.48-1.05,29.12,4.94,66.21-2.93,89.84-16.41,10.07-5.75,18.81-14.72,36.28-32.66,21-21.57,34.85-40.77,33.53-41.97-1.94-1.78-32.93,37.96-77.93,52.6-5.61,1.82-13.71,4.39-24.69,4.98-11.14.6-13.2-1.49-45.41-6.56-16.85-2.64-25.28-3.96-30.27-3.86-2.63.07-7.26-.33-16.53-1.08-2.51-.21-4.77-.41-7.33-1.49v-.02c-.14-.03-.26-.09-.39-.15-4.67-2.09-7.16-5.66-8.17-6.98-3.83-5.01-9.59-7.69-21.14-13.06-17.9-8.34-44.94-11.51-67.15-3.45-5.49,2.01-11.89,4.32-18.21,10.07-7.16,6.52-6.14,10.06-11.81,13.16-.1.05-.21.1-.29.15-7.09,3.72-10.42-1.2-26.17.63-5.34.63-8.96,1.66-11.65,1.77-1.75.09-3.12-.22-4.34-1.27-.36-.31-.69-.65-.94-1.05-1.65-2.3-1.58-5.82-1.39-10.38.12-3.05.31-7.14.51-11.75.58-12.25,1.32-28.19,1.32-38.3,0-3.47-.09-7.09-.88-7.21-1.18-.17-3.24,7.64-5.15,14.96-1.7,6.57-3.17,12.36-4.46,17.45-5.08,19.97-7.58,29.57-11.7,35.42-.34.48-.69.93-1.05,1.36-1.17,1.41-2.49,2.59-4.02,3.67-3.67,2.59-5.73,2.59-10.21,6.52-1.18,1.03-2.56,2.23-3.93,3.64-1.8,1.77-3.6,3.86-5.01,6.26-1.7,2.92-2.83,6.32-2.64,10.19.36,8.01,6.09,14.88,11.98,17.95.72.38,1.25.6,1.82.84,6.64,2.73,12.05,2.06,19.72,1.29,2.49-.24,5.23-.5,8.34-.65,1.46-.07,2.73-.1,3.83-.1,6.42-.05,8.27.76,16.56.34.63-.03,1.29-.03,1.92,0,3.36.07,6.73.65,10.02.12,1.48-.22,3.83-.7,4.82.5.26.31.39.72.45,1.13.1.93-.22,1.9-.33,2.23,0,.02.21,6.81.6,20.39.6,19.68,1.25,17.52,1.08,26.53-.03,1.34-.07,2.93-.03,4.84,0,1.89.09,4.08.29,6.64.57,6.78.89,10.31,3.14,13.99,2.76,4.56,5.18,3.96,5.9,7.36.81,3.83-2.08,5.42-1.68,11.58.1,1.73.45,3.5.67,4.44.1.46.17.74.17.74.55,2.09,1.08,3.19,1.36,4.03,1.03,3.05-.34,6.09-2.69,11.12-3.21,6.9-7.07,11.27-8.61,12.94-2.59,2.78-4.86,4.55-5.73,5.22-1.82,1.37-3.28,2.47-4.75,3.26-.55.29-1.1.55-1.68.76-2.71.98-4.74.55-7.19-.17-.21-.07-.41-.12-.62-.19-2.61-.79-5.77-1.8-10.69-1.89-5.61-.1-8.41,1.1-9.16,1.44-3.86,1.75-5.65,4.43-7.09,5.95-2.68,2.85-5.95,3.64-9.83,3.83-5.27.24-11.62-.63-18.95,1-10.4,2.32-17.06,8.39-26.7,17.21-3.81,3.48-6.78,6.74-9.52,10.16-2.59,3.23-4.96,6.61-7.69,10.43-5.2,7.31-10.18,14.35-14.55,23.06M1037.38,947.99c-.07.33-.12.62-.17.89-.14.82-.98,5.37-2.68,10.55-1.61,4.91-2.73,8.31-4.8,12.73-.17.36-.36.74-.55,1.13-1.27,2.63-2.9,5.65-5.15,9.52-8.99,15.55-18.45,51.76-4.19,70.77,1.17,1.54.09-.22,20.51,15.92,1.17.93,2.64,2.09,4.41,3.48.53.41,1.1.86,1.7,1.32,3.14,2.44,7.04,5.44,11.6,8.85M1110.77,1115.17c4.6,1.84,8.94,4.34,13.54,6.23,1.1.45,3.57,1.46,4.82,3.86.5.91.69,1.82.74,2.75.05,1.17-.1,2.39-.22,3.72-.33,3.71.38,7.43.46,11.14.1,5.1,39.16,27.49,155.66,83.3M1285.79,1226.16l1.39.67M1441.59,936.46c.03.22.07.43.1.65,1.97,13.01,2.3,20.52,2.15,25.12-.03,1.24-.21,5.97.24,12.22.14,1.94.34,4.05.67,6.37.72,5.3,1.72,9.66,2.51,12.7.45,1.66.82,2.97,1.01,3.59.05.19.1.33.1.34,5.32,17.56,7.4,43.73,7.4,43.73.09.98.21,2.63.34,4.75v.02M1163.18,1030.88c1.48-.72,3.16-1.9,3.6-3.71.43-1.75-.43-3.62-3.04-6.52-1.08-1.2-2.47-2.57-4.2-4.2-7.26-6.81-8.32-6.47-11.34-9.66-2.61-2.76-3.26-4.55-9.71-20.52M1130.75,970.49c-.36-.22-.72-.34-1.12-.38-3.45-.34-7.02,4.82-8.44,8.44-.5,1.24-2.02,5.15-.5,8.94,1.12,2.73,2.85,2.97,5.56,6.5,2.39,3.12,3.26,5.82,3.86,7.24,1.41,3.36,4.07,6.04,7.45,8.67,6.95,5.39,16.95,10.55,25.62,20.97,5.94,7.17,9.64,14.88,14.21,14.04.98-.19,1.78-.72,2.59-1.34M1369.71,1165.93c-103.48-69.21-173-116.26-178.07-121.26-.58-.58-3.24-3.48-6.76-3.38-2.18.07-3.52,1.25-4.84,2.25M1137.6,966.42c1.3-.88,2.37-1.65,3.19-2.28,22.24-16.89,34.56-47.33,36.21-64.47.21-2.11.48-6.5,3.21-11.1,3.12-5.25,7.09-6.83,13.35-11.74,0,0,3.26-2.54,12.56-12.24,25.14-26.19,27.82-56.77,27.82-56.77,1.36-15.48-1.94-30.37-7.84-42.71-3.62-7.65-8.25-14.33-13.39-19.55-.79-.79-2.39-2.42-4.6-4.32-4.94-4.22-12.94-9.78-21.74-10.31-5.8-.34-10.81.81-10.81.81-4.74,1.08-6.5,2.52-12.06,4.34-5.42,1.77-9.35,2.23-11.26,2.57-4.75.84-12.12,3.57-24.04,11.22-3.12,2.01-6.57,4.38-10.38,7.12M1226.93,708.46c3.78,1.99,9.03,4.93,15.03,8.89,21.69,14.29,33.72,28.98,55.19,44.94,0,0,4.36,3.24,15.55,9.44,10.26,5.68,12.65,5.97,14.84,5.53,4.93-1.01,7.71-5.49,12.39-13.02,3.64-5.87,3.43-8.1,3.05-9.34-.88-2.88-3.29-2.63-5.15-5.95-2.28-4.1-1.06-8.92-.15-12.54.51-2.06,1.56-5.22,3.86-8.68M1430.97,1165.07c-.07-.67-.14-1.32-.21-1.99-.14-1.48-.29-2.97-.45-4.44-1.36-13.63-2.75-27.23-4.12-40.86M1410.79,785.45c-.03.15-.05.33-.09.48-1.32,7.21-2.37,13.59-3.21,19-2.78,17.85-2.11,18.09-3.9,24.47-2.27,8.15-4.29,11.24-4.96,18.96-.1,1.3-.15,2.54-.15,3.69-.07,3.96.34,6.9.53,8.27.38,2.81,1.54,15.98,3.26,35.09,3.05,33.94,7.79,86.68,12.84,133.65,1.24,11.6,3.02,27.71,5.39,47.26.74,6.07,1.53,12.48,2.37,19.19M1398.47,852.05c-1.65-.65-3.54-1.36-5.63-2.06-5.18-1.77-11.7-3.6-19.29-4.86-4.29-.7-7.5-1-10.95-1.06-6.07-.15-12.85.39-27.41.58-21.61.27-32.74-.62-41.96.05-4.7.34-8.92,1.1-13.78,2.61-1.99.62-8.56,2.75-15.68,5.18-1.61.55-3.02,1.03-4.26,1.46-9.95,3.47-9.2,3.55-15.65,5.54-1.82.57-1.9.63-2.2.79-7.36,3.88-6.74,18.31-6.28,26.99,1.39,26.58,1.68,53.2,3.05,79.78.6,11.7.51,13.8-.74,16.82-4.31,10.45-15.56,14.05-52.12,28.38-8.7,3.41-16.15,6.25-21.85,8.39M1259.52,853.97v-.02c-1.22-8.51-3.04-20.64-5.53-35.23-3.4-20.09-4.68-25.04-5.78-28.71-1.15-3.86-4.19-13.85-9.95-24.64-1.82-3.41-3.93-6.93-6.33-10.35-3.76-5.34-7.91-9.97-12.24-13.99-14-13.06-29.7-19.65-39.02-22.84M1293.24,844.7c-2.73-17.57-6.9-38.44-13.54-61.57-2.09-7.28-3.84-12.78-5.32-16.99-1.89-5.41-3.29-8.68-4.31-10.78-.45-.91-.81-1.61-1.12-2.16-5.61-10.36-18.89-29.65-50.9-44.15-.15-.09-.31-.15-.46-.22M1392.84,849.99c-1.6-18.69-3.33-35.28-4.98-49.41-1.6-13.83-2.93-23.61-6.92-36.04-2.68-8.36-5.65-15.05-7.86-19.6M1362.6,844.05c-.55-18.64-1.99-34.27-3.36-46.04-1.44-12.29-2.64-22.19-5.8-35.23-.19-.77-.38-1.54-.57-2.3-2.81-11.15-6.02-20.35-8.63-27.1l-.15-.41M1135,948.57c12.54-10.02,17.73-19.63,19.96-24.78,3.45-7.98,5.78-17.01,5.78-17.01,2.08-8.03,2.15-11.75,4.41-18.77,2.08-6.42,4.63-11.38,6.45-14.53M1116.15,866.2c12.25,6.97,20.76,5.92,24.09,5.23,4.44-.91,7.55-2.78,21.73-13.28,17.42-12.92,26.14-19.37,29.67-22.67,8.61-8.03,23-23.9,33.77-51.64M1247.2,671.16c10.9,23.58,19.92,30.79,26.34,32.81,1.56.48,6.11,1.65,11.79,4.68,5.83,3.12,7.65,5.42,12.22,8.44,7.89,5.23,15.48,6.98,19.22,7.81,13.49,2.95,25.38-.24,32.18-2.76M1333.05,668.89c3.04,1.77,7.41-4.27,14.55-3.14,4.08.65,4.99,3,7.12,2.28,3.93-1.36,4.75-10.78,3.33-17.73-.27-1.41-2.85-14.02-9.39-15.07-7.12-1.13-14.84,12.1-16.82,22.39-.34,1.75-1.84,9.49,1.2,11.26ZM1302.3,611.82c-.05.6,3.31,1.25,18.81,3.86,22.65,3.83,24.35,3.91,26.68,3.88,6.11-.1,4.77-.91,24.64-3.84,11.48-1.7,17.14-2.21,17.13-2.92-.03-.91-9.22-1.7-17.04-1.82-12.22-.17-17.59,1.39-20.2-2.04-.39-.51-.94-3.26-2.06-8.75-1.3-6.49-1.6-8.31-2.16-8.32-.86,0-1.68,4.12-2.54,8.51-1.41,7.14-.79,7.38-1.61,8.56-2.63,3.76-9.37,1.82-23.05,1.56-8.25-.15-18.53.33-18.6,1.32ZM1165.76,535.28c-.45,1.66-1,4.48.22,5.37,1.97,1.44,7.34-3.05,8.24-3.81,2.78-2.33,7.09-6.9,9.7-15.39M1191.55,571.13c1.82-.81,3.76-1.89,5.42-3.31,1.73-1.44,3.19-3.26,3.98-5.53.45-1.3.53-2.35.57-2.75.41-4.48,1.87-15.65,4.07-31.59.36-2.56.72-5.25,1.12-8.05M1297.55,717.1c.36-5.46.48-10.28.48-14.31.02-4.14,0-6.23-.36-7.72-1.68-7.02-6.09-7.71-6.26-13.27-.02-.53.43-3.05,1.32-8.08.94-5.29,1-4.99.98-5.34-.07-4.94-8.8-9.66-36.5-21.5-2.92-1.25-7.02-3-10.91-7-4.27-4.39-6.25-9.37-7.22-12.73M1385.98,641.04c-.57.43-1.1.86-1.63,1.29-11.63,9.4-13.99,16.11-13.71,20.7.14,2.59,1.32,7.52-.22,13.69-.36,1.48-.88,3.05-1.53,6.19-.55,2.66-.84,4.74-1.24,7.69-.27,1.99-.6,4.62-.91,7.72M1237.56,573.15c1.12-.29,2.76-.84,4.56-1.87,6.07-3.47,8.37-9.35,12-19.05,2.71-7.24,3.45-11.81,4.89-20.94.53-3.35,1.42-9.7-1.03-10.98-.38-.21-.72-.21-3.24-.29-2.27-.09-4.02-.15-4.93-.21M1395.4,569.72c-.02-.21-.05-.41-.07-.63-1.12-9.87-3.9-22.91-10.91-36.64-2.37-4.63-4.91-8.75-7.45-12.36M1219.62,961.19c-2.59-10-5.63-20.47-9.16-31.37-3.19-9.76-6.52-19.01-9.9-27.75M1211.9,956.13c-1.78-3.76-4-7.83-6.76-12.06-4.8-7.38-9.94-13.2-14.47-17.62M1170.65,935.86c5.8,8.1,11.09,14.16,14.71,18.09,7.38,7.98,12.05,11.63,24.37,23.65,5.71,5.56,10.23,10.16,13.04,13.02M1179.57,963.13c6.44,5.15,10.67,10.04,13.37,13.56,3.26,4.27,4.8,7.29,8.82,11.05,4.03,3.74,8.1,5.95,10.86,7.22M1193.08,1001.48c-1.72-3.93-3.78-8.15-6.26-12.54-3.43-6.04-6.98-11.26-10.38-15.68M1279.7,761.42s.02.02.03.03c1.92,1.73,3.81,3.36,5.66,4.91,7.71,6.42,14.67,11.17,20.11,14.59,19.41,12.17,24.92,10.5,26.55,9.9,5.95-2.23,9.37-8.96,13.27-16.65,2.75-5.42,4.24-10.24,5.06-13.52M1320.96,824.62c-2.76-4.36-5.65-8.79-8.68-13.27-6.42-9.47-12.89-18.31-19.31-26.55M1195.98,884.7c5.75-.93,16.68-3.59,25.57-12.54,5.44-5.49,7.77-10.97,11.82-20.51,2.02-4.75,6.4-15.89,8.68-31.13,1.18-7.88,2.09-18.72.98-31.61M1050.25,1010.88c-3.45,5.73-6.85,13.25-5.9,20.18.19,1.34.53,2.66,1.08,3.95,1.8,4.27,5.29,7.02,9.95,9.23M1180.03,1043.54s-.03.03-.05.03c-6.97,6.49-14.53,14.57-21.81,24.51-16.3,22.26-24.23,44.27-28.3,59.92,0,.02-.02.03-.02.05M1485.95,987.87c.07.1.14.21.19.33.5,1.06-.12,1.9-.74,4.14-.76,2.69-1.22,4.36-.46,5.61.82,1.32,2.52,1.22,2.57,2.35.03.69-.38,1.44-1,1.72-.12.05-.29.1-.65.05-.38-.03-.98-.21-2.01-.58-1.72-.65-2.02-.94-2.59-.79-.88.24-1.61,1.3-1.42,2.02.14.51.7.67,1.61,1.17.69.39,1.65,1.05,2.66,2.09-.03.03-.24.34-.27.39-7.57,11.15-15.82,22.96-15.96,23.13-1.39,2.02-3.12,4.56-5.15,7.53-1.84,2.73-3.91,5.82-6.18,9.2-.21.33-.43.63-.63.96,0,0-.17.26-.46.69-.88,1.32-2.83,4.29-4.65,7.09-4.27,6.56-8.68,13.02-13.14,19.46-4.87,7.05-9.83,14.07-14.79,21.07-13.93,19.75-27.83,39.54-39.92,60.44-.41.7-1.96,3.45-4.02,3.45-1.68,0-2.35-1.85-3.83-1.65-.96.12-1.34,1.01-3.33,4.55-.93,1.63-1.61,2.78-2.08,3.64-.77,1.42-.94,2.02-.67,2.71.53,1.32,2.06,1.48,2.25,2.9.14,1.01-.5,1.87-.79,2.25-8.63,11.45-17.81,23.68-24.13,35.3v.02c-6.44,11.81-8.72,14.09-16.32,24.16-.91,1.2-1.9,2.52-2.99,3.98-.26.36-.6.82-1.2,1.29-2.37,1.84-4.51.43-7,1.68-1.29.65-2.13,2.04-3.78,4.82-1.56,2.63-2.35,3.95-2.42,5.23-.22,4.22,5.08,7.58,9.1,10.12,4.08,2.61,6.33,4.03,9.16,3.47,2.28-.46,4.03-2.4,7.57-6.28,1.44-1.6,2.04-2.51,2.18-3.69.24-1.96-.79-4.19-1.36-4.79-.02-.03-.07-.09-.12-.17-.41-.74.46-1.92.74-2.3,2.15-2.99,30.85-45.7,32-47.43,8.03-12,12.06-17.98,12.06-18.02.05-.19.24-.98.77-1.15,1.15-.38,2.21,2.59,3.9,2.59,1.32,0,1.65-1.82,4.43-5.54,2.25-3,3.36-3.6,3.14-4.84-.31-1.68-2.59-1.73-3.31-3.6-.82-2.18,1.24-4.84,1.82-5.63.55-.72,1.68-2.32,3.35-4.7,5.01-7.14,14.88-21.36,28.11-40.53,8.56-12.41,18.55-26.89,29.58-42.85.81-1.2,1.65-2.42,2.49-3.64M1460.15,947.15c-.26.53-.88.72-1.34,1.61-1.54,2.99-.55,6.35.12,8.53,3.19,10.31,4.79,15.48,6.14,16.8,1.37,1.34,4.63,3.17,11.14,6.88.46.26,2.51,1.41,4.93,3.12,1.75,1.24,1.01.88,3.28,2.54.89.65,1.29.91,1.53,1.22M1425.58,888.84h-.03v-.02c-2.08-.67-5.39-1.48-9.34-1-5.44.65-12.3,3.71-12.34,7.12,0,.1,0,.21.02.31.15,1.27,1.42,2.21,4.53,4.65,10.43,8.22,17.47,11.45,17.09,15.27-.09.81-.48,1.65-1.18,3.12-1.37,2.9-2.66,3.72-2.44,5.18.17,1.25,1.2,2.06,2.08,2.71,8.58,6.5,10.83,7.83,12.01,8.34.12.05.55.19,1.1.45,1.15.53,2.04,1.13,2.71,1.65l.19.12c.81.43,1.36.45,1.72.36.07-.02.14-.03.21-.07.69-.29.74-1,1.75-2.25.58-.72.88-1.08,1.2-1.24.07-.03.15-.05.22-.07,1.49-.31,3.79,2.9,7.69,6.23,4.56,3.86,7.79,5.15,7.48,7.1-.02.1-.03.19-.07.27M1455.34,1044.67c.03,1.06.09,2.15.12,3.21M1484.12,1005.98c4.46,3.02,8.94,6.01,13.4,9.03.02,0,.02.02.03.02M1500.09,1012.05s-.02,0-.02-.02c-4.74-3.31-9.47-6.64-14.21-9.95M1500.85,1009.51c-4.44-3.07-8.89-6.14-13.33-9.22M1485.94,987.86s.02,0,.02.02c8.94,6.18,17.88,12.36,26.82,18.52,0,.02.02.02.02.02M1460.15,947.15s.02-.03.03-.05c8.05-11.94,16.11-23.87,24.14-35.81M1445.08,933.49l19.82-30.32M1563.79,1017.87c3.57-.27,6.13-1.34,7.84-2.32,1.1-.62,2.83-1.77,9.46-10.33,3.38-4.38,4.53-6.13,5.15-7.12,3.28-5.22,3.84-7.69,4.07-8.84.43-2.45.26-4.53.05-5.85M1553.53,1039.37v.02c.39,1.41,1.25,3.55,3.07,4.24,2.75,1.03,6.13-1.87,7.96-3.54,12.63-11.5,26.29-31.13,26.29-31.13,11.57-16.61,14.93-19.77,19.15-30,2.27-5.51,3.62-10.26,4.43-13.54M1550.41,911.99c2.95,1.97,5.9,3.93,8.87,5.89M1534.67,917.93s.03.02.05.03c8.7,5.97,17.37,11.94,26.07,17.9,0,.02.02.02.02.02M1398.88,787.71c-1.96-2.42-4.58-5.22-6.02-4.58-1.77.77-.81,6.32-.24,10.86.77,6.19,1.41,15.29.48,27.01M1437.66,1074.43c-2.2-.07-4.67-.03-7.34.22-3.54.33-6.66.93-9.3,1.61M1455.67,1074.91s.09,0,.12.02c.89.09,1.75.17,2.63.26M1274.79,733.83c-2.18-6.26-5.18-13.47-9.34-21.18-4.41-8.13-9.08-14.9-13.35-20.32M1289.76,749.1c-1.03-2.39-2.54-6.14-4.03-10.93-1.34-4.34-1.61-6.13-2.73-9.42-1-2.95-2.73-7.21-5.78-12.13M1328.03,738.02c-.74,1.87-1.94,4.7-3.69,8.03-2.63,4.99-3.95,6.32-4.99,9.01-1.08,2.8-1.89,7.12-.15,13.52M1419.15,1003.16c5.06-1.37,7.95-3.64,9.66-5.54,1.39-1.53,1.94-2.75,4.1-5.3,2.13-2.52,4.14-4.36,5.54-5.56M1415.68,973.73c-.65-8.72-1.06-15.8-1.32-20.51-.76-13.49-.72-17.76-1.82-24.85-1.27-8.24-3.21-14.76-4.58-18.81M1430.25,1163.13c-10.71-1.61-21.43-3.21-32.16-4.82M1330.05,1233.27c-14.76-2.37-29.5-4.74-44.26-7.1h-.02M1466.84,1159.29c-12.18-.22-24.33-.45-36.52-.65h-.02M619.21,791.71c.46-.69.91-1.36,1.34-2.02,7.72-11.63,13.44-21.31,17.38-28.33.46-.81.93-1.61,1.41-2.44,1.82-3.11,3.91-6.47,7.07-11.5.72-1.15,1.51-2.4,2.37-3.76,2.39-3.76,4.22-6.61,5.75-8.8,2.83-4.05,4.63-5.9,6.88-7.17.34-.22.7-.39,1.08-.58,7.86-3.76,16.11-1.1,17.69-.57.91.31,1.73.65,2.47,1.03,2.32,1.15,3.98,2.59,5.85,4.34,1.75,1.65,3.69,3.57,6.52,5.77,6.42,4.99,10.95,6.4,20.56,10.55,2.21.96,4,1.75,5.54,2.47,5.34,2.51,7.72,4.02,14.31,7.46,3.57,1.87,8.37,4.31,15.53,7.77,1,.48,2.01.96,3,1.46,23.39,11.27,46.52,22.12,66.93,26.79,11.34,2.61,22.17,4.08,22.17,4.08,6.78.93,9.13.98,13.56,1.48.79.09,1.63.19,2.57.33,12.89,1.73,18.07,4.08,28.13,6.35,10.76,2.4,18.5,2.8,32.33,3.47,6.8.33,13.99.69,21.79.58,9.25-.12,19.39-.88,30.85-3.04,7.86-1.48,20.37-3.93,35.26-10.67,14.43-6.54,23.9-13.87,28.26-17.13,4.79-3.59,10.57-7.64,17.57-12.08l1.13-.72c4.74-2.97,10-6.11,15.89-9.39,9.73-5.42,21.14-11.24,34.48-17.31M663.3,1069.47c4.63,9.88,6.18,18.34,6.61,24.69.79,11.21-1.58,19.91,2.57,22.27,3.83,2.18,8.8-3.5,13.27-.86.67.39,1.13.84,1.46,1.37,1.39,2.13.82,5.25,3.91,8.8,3.43,3.91,6.69,3,12.61,6.95,3.98,2.63,6.59,5.73,8.19,7.98M967.83,1086.75c6.83,1.42,10.43.03,12.48-1.58,4.15-3.28,3.35-8.63,8.56-12.41,2.73-1.97,5.29-.53,6.86-2.57,1.85-2.42.55-6.26.17-7.48-3.91-12.9,8.51-25.72,6.81-50.45-.74-10.73-3.35-12.39-1.85-20.42,1.51-8.13,5.49-13.33,10.71-20.4,3.69-5.03,8.65-11.86,14.67-20.47,2.39-3.43,4.94-7.12,7.65-11.1M658.35,720.41c-1.42-.09-3.17-.12-5.2-.03-2.44.12-5.27.43-8.36,1.13-2.13.46-4.36,1.12-6.68,1.99-3.52,1.34-6.57,2.99-9.22,4.72-5.41,3.52-8.99,7.38-10.95,9.75M657.7,695.58c-.72,4.2-1.22,9.71-.57,15.99.07.65.15,1.3.24,1.97.31,2.18.76,4.43,1.41,6.74.72,2.68,1.61,5.11,2.56,7.28M657.14,711.57c-2.56-.03-5.63.12-9.06.7-2.23.36-4.26.86-6.06,1.41-1.22.38-2.35.76-3.36,1.15M694.63,702.96c-2.97-2.3-6.38-4.72-10.28-7.07-3.09-1.87-6.07-3.47-8.87-4.8M682.65,727.56c5.41-3.59,11.12-7.67,16.99-12.29,1.25-.96,2.51-1.97,3.78-3,3.93-3.21,7.62-6.42,11.07-9.56,2.66-2.42,5.18-4.8,7.55-7.14M727.7,702c-6.4,4.51-12.94,9.28-19.58,14.35-.86.65-1.7,1.29-2.54,1.96-5.83,4.46-11.45,8.92-16.83,13.35M668.2,693.33c2.59,3.5,6.5,7.98,12.08,12.2,7.36,5.54,14.53,8.32,19.36,9.75M692.38,686.16c2.51,2.73,5.73,5.82,9.73,8.85.43.33.86.65,1.3.98,3.96,2.92,7.76,5.1,11.07,6.73h.02M702.11,695.01c1-.79,2.11-1.78,3.23-2.97,1.58-1.72,2.76-3.38,3.64-4.82M694.63,669.66c7.36,9.03,13.97,11.63,18.65,12.34,1.22.19,2.25.22,3.21.24,2.59.03,4.56-.24,7.79,1.08,6.11,2.52,6.02,6.38,12.41,9.11,2.71,1.13,5.66,1.37,11.57,1.85,6.92.55,10.59.19,13.27.27,5.41.19,13.01,2.39,22.38,11.5M722.04,668.81c1.13,2.95,2.76,5.92,4.96,6.07,2.18.15,2.92-2.63,5.85-3.29,4-.91,6.3,3.38,9.85,3.43,1.24.02,2.76-.48,4.53-2.23,1.96-1.92,4.2-5.35,6.76-11.27M854.82,686.16c1.56,1.94,3.6,4.19,6.25,6.42,3.35,2.81,6.59,4.72,9.22,5.99M849.75,691.08c4.8,5.35,9.46,8.03,12.78,9.47,4.68,2.04,7.67,2.06,15.67,4.43,5.11,1.53,9.18,3.09,11.77,4.15M876.28,711.57c-4.48.81-10.12,2.25-16.3,4.96-4.94,2.18-9.03,4.63-12.24,6.86M960.46,691.08c-6.06,2.75-12.42,5.9-19.01,9.49-2.21,1.22-4.46,2.47-6.73,3.79-8.46,4.91-16.17,9.94-23.13,14.93-3.91,2.78-7.6,5.56-11.05,8.27M935.93,713.2c1.51-.27,3.38-.69,5.53-1.3,5.05-1.44,11.53-4.05,18.09-8.84,8.12-5.9,12.92-12.66,15.5-16.9M930.5,757.44c4.26.17,7.89-.19,10.95-.81,2.92-.58,5.29-1.41,7.17-2.2,8.32-3.48,8.49-7.1,19.7-12.63,6.37-3.14,8.82-3.21,13.61-6.76,1.39-1.03,2.64-2.09,3.74-3.16,2.52-2.44,4.36-4.86,5.63-6.76M987.6,711.57c10.93-.5,14.79-3.59,16.27-6.37.72-1.34.86-2.57,1.03-5.2.14-1.77.29-4.17.67-7.65.41-3.66.84-6.66,1.15-8.63M928.22,791.9c3.07-1.72,7.55-3.98,13.23-6.02.81-.27,1.63-.55,2.47-.82,6.73-2.18,9.56-2.18,15.41-3.64,12.75-3.17,21.9-8.77,25.69-11.14,3.76-2.35,8.55-5.71,13.64-10.43,2.16-1.99,4.39-4.24,6.62-6.76M727.7,716.82c1.48.41,3.17.93,5.06,1.54,3.78,1.25,8.32,2.93,13.35,5.18,9.16,4.07,15.31,7.96,18.41,9.83,8.01,4.84,20.39,11.09,38.95,16.56M705.56,718.28l.02.02c5.68,5.01,13.73,11.6,24.02,18.45.43.29.84.57,1.27.86,1.54,1,3.12,1.99,4.75,3,18.14,11.22,32.83,16.59,61.43,26.89,23.94,8.61,38.13,13.64,58.88,17.78,32.07,6.4,46.99,4.1,50.95,3.41,14.83-2.54,26.55-7.98,34.56-12.6.94-.55,1.84-1.08,2.68-1.6M938.41,803.24c.89-.34,1.9-.72,3.04-1.1,2.99-1,6.8-2.01,11.24-2.54,5.53-.65,9.13-.26,11.34-.21,6.19.12,12.7-2.39,32.76-19.07,6.86-5.7,15.36-13.09,24.78-22.17M1023.55,725.13c4.84-1.63,9.92-3.48,15.19-5.61.67-.26,1.34-.53,2.02-.81,2.78-1.15,5.61-2.37,8.48-3.66,11.07-5.01,20.87-10.31,29.4-15.46M1049.27,685.71c-5.23,2.68-10.69,5.66-16.3,9.01-8.12,4.84-15.46,9.78-22.05,14.6M1048.64,693.86c-1.1.88-2.15,1.66-3.14,2.37-1.96,1.37-3.69,2.42-5.03,3.19-3.5,1.99-5.37,2.61-8.56,4.72-2.83,1.85-4.91,3.71-6.21,4.99M772.99,657.17c-.31,4.96.02,12.27,3.41,20.01,1.68,3.83,3.83,7.14,6.25,9.99,5.58,6.57,12.58,10.74,18.5,13.32,5.94,2.59,10.78,3.59,11.98,3.81M801.15,700.49c.94-.7,2.28-1.75,3.76-3.21,2.73-2.66,5.92-6.68,8-12.2,2.04-5.41,2.27-10.23,2.15-13.27M997.15,697.52c-.6-2.54-1.41-5.49-2.56-8.68-2.27-6.3-5.83-13.54-11.57-20.47-.05-.07-.1-.12-.15-.19-8.25-9.9-13.13-9.71-20.76-19.48-3.04-3.9-4.72-7.07-5.95-10.24-2.45-6.35-3.07-12.66-8.84-24.47-.89-1.84-1.78-3.64-2.64-5.37-.38-.76-.76-1.49-1.13-2.23-.69-1.34-1.39-2.64-2.09-3.91-1.27-2.32-2.59-4.53-4.03-6.62-.93-1.39-1.9-2.71-2.95-4-2.93-3.62-6.35-6.85-10.62-9.63-5.85-3.81-12.06-6.01-19.44-7.53-6.56-1.37-14.04-2.25-23-3.28-7.12-.82-12.06-.96-15.84-.86-13.4.38-23.39,2.99-26.55,3.86-3.86,1.06-12.39,3.66-22.26,8.99-.58.31-1.15.62-1.68.91-.69.38-1.34.72-1.96,1.06-4.74,2.61-7.34,4.29-8.79,6.59-2.51,4-1.82,12.05-.34,28.01.62,6.61,1.24,11.36-.29,17.8-.86,3.62-1.58,4.38-2.78,8.36-.57,1.89-2.04,7.16-2.35,19.27-.17,6.5-.02,15.24,1.27,25.69M815.08,584.31c.12,1.12.24,2.2.34,3.24,1.08,10.79.91,18,.48,22.82-.46,5.22-.31,8.25,0,14.33.09,1.82.26,4.17,1.06,7.07.94,3.29,2.27,5.68,3.21,7.28,7.74,12.96,14,20.34,16.13,22.7.51.57.79.84.79.84,11.63,11.89,21.86,22.34,37.03,23.77,7.91.76,15.15-1.99,27.82-7.65,1.82-.82,3.74-1.7,5.8-2.63,11.38-5.15,20.11-9.46,26.32-19.05,2.8-4.31,4.56-8.91,5.56-12.08.65-2.06.98-3.5,1.06-3.88.36-1.68.58-3.12.76-4.56.31-3,.36-6.06.86-11.34.65-6.98,1.61-12.68,2.35-16.56M868.88,617.24c3.95,1.06,7.24,1.41,9.35,1.53.94.05,1.63.05,2.04.05,1.2,0,4.1-.05,7.91-.77,3.81-.7,8.55-2.09,13.4-4.74,1.9-1.03,3.83-2.09,5.42-3.23,2.23-1.6,3.84-3.4,3.96-5.61.21-3.81-4.05-6.98-7.81-9.25-.89-.55-1.75-1.05-2.52-1.48-4.86-2.78-9.59-4.1-13.45-4.77-2.95-.5-5.39-.62-6.95-.67-.5-.02-1.05-.03-1.65-.03-2.68-.02-6.19.17-10.18,1-2.95.6-6.16,1.54-9.47,3-5.46,2.37-12.18,5.32-12.41,9.78-.22,4.75,7.05,8.58,12.29,11.31,3.35,1.75,6.59,2.95,9.52,3.74.17.07.36.1.53.14ZM868.47,589.46h-.02c-.88.82-6.45,6.19-6.11,14.66.29,7.22,4.72,11.77,6.01,12.99.09.07.15.14.21.19M888.17,617.93c.77-.76,4.75-4.79,5.66-11.24.15-.96.22-1.96.21-3.02-.02-.65-.05-1.29-.15-1.9-.86-7.46-5.89-11.91-6.71-12.63M878.69,503.22c-.07.17-.15.34-.22.53-.79,1.77-2.01,4.14-3.88,6.69-5.06,6.9-8.6,6.49-10.59,11.15-1.32,3.05-.31,4.43.57,15.7.19,2.39.31,4.53.39,6.38.09,1.78.14,3.29.17,4.46M966.75,633.97c-.21-7.72-1.97-13.3-3.48-16.9-.96-2.3-1.77-3.64-2.76-5.22-1.3-2.01-2.93-4.41-5.68-9.66-2.76-5.27-4.67-9.64-6.44-13.68-2.13-4.86-3.81-9.11-5.1-12.48M877.29,613.22c.14.63.53.79.82,1.94.12.53.15.96.27.96s.21-.43.39-.98c.38-1.18.63-1.27.77-1.85.27-1.08-.57-1.41-.69-2.76,0-.05-.02-.1,0-.14-.1-1.49.91-1.68.98-3.47.07-1.63-.77-1.8-.69-3.52.09-1.48.72-1.51.77-2.95.07-1.77-.96-1.96-.82-3.55.17-1.97,1.32-2.75.94-3.71-.22-.53-.69-.45-1.1-1.32-.22-.5-.26-.93-.39-.93-.14.02-.15.45-.34.94-.38,1.01-.98,1.08-1.18,1.66-.38,1.05,1.17,1.66,1.41,3.31.22,1.49-1.17,1.84-1.1,3.55.03,1.41,1.01,1.49,1.1,2.88.1,1.6-1.1,1.85-1.15,3.57-.07,1.73,1.13,2.01.89,3.62-.02.14-.05.26-.09.38-.27,1.05-1.03,1.37-.81,2.35ZM847.74,862.39c.69-3.78,1.36-7.58,1.99-11.41,2.57-15.43,4.75-31.18,6.49-47.26.14-1.32.27-2.64.41-3.98M858.93,828.3c.93,4.75,2.11,9.85,3.64,15.19,1.06,3.69,2.18,7.17,3.36,10.49,1.2,3.41,2.44,6.62,3.71,9.64M703.09,811.17c.84,5.82,3.62,22.7,11.46,38.37,5.71,11.39,14.12,22.15,26.43,27.56,7.81,3.43,17.38,4.77,26.12,5.99,19.41,2.73,34.99,1.17,44.31.17,7.4-.79,17.23-2.23,28.69-5.1M849.75,1103.59c.22-68.78,3.17-105.81,6.13-127.19.46-3.35,1.84-12.9,2.85-26.08,1.92-25.23,1.17-45.9.21-59.51M783.37,898.09c-2.42,6.25-5.58,15.48-8.13,26.96-3.33,14.96-4.91,22.53-1.29,27.83,4.2,6.16,12.73,7.33,27.83,9.42,10.3,1.42,13.56.41,22.26,2.57,7.98,1.97,14.12,5.05,17.98,7.28M867.28,973.87c3.57-1.82,8.97-4.14,15.84-5.58,7.1-1.48,11.63-1.13,15.84-1.29,2.49-.09,27.01-1.22,36.4-14.98,1.2-1.77,3.48-5.68,2.99-29.1-.27-13.33-1.25-24.37-2.13-32.12M777.81,976.43c2.27,7.21,5.41,18.4,7.64,32.35,4.03,25.35,1.6,37.96,3.48,54.57,1.63,14.35,6.86,34.89,23.77,59.08M842.02,1032.95c-3.23-1.77-7.79-4.08-13.42-6.44-4.1-1.7-7.98-3.31-13.04-4.62-4.17-1.06-10.33-2.25-18.07-2.23M907.52,1026.31c-8.68.57-18.43,1.75-28.97,3.93-6.85,1.41-13.18,3.07-18.98,4.84M886.13,1124.57c15.22-21.5,21.48-40.22,24.4-53.09,3.79-16.77,2.54-26.22,6.85-48.38,3.78-19.39,9.11-34.61,12.84-44.1M952.91,1011.11l-11.46,8.32-15.51,11.27M943.36,1072.77c-.6.74-1.25,1.53-1.9,2.39-3.41,4.41-7.38,10.45-10.67,18.12-2.69,6.26-3.26,9.71-6.13,17.59-2.08,5.71-5.3,13.57-10.28,22.7M783.37,1131.42c-5.49-10.52-8.53-19.41-10.28-25.48-3-10.36-3.41-16.66-7.98-25.95-3.4-6.88-7.33-11.89-10-14.93M752.55,1006.41c2.44,3.47,5.53,7.36,9.4,11.34,3.35,3.43,6.64,6.25,9.64,8.56M874.99,874.96c20.3,3.91,37.46,5.41,50.09,6.01,6.33.29,11.72.36,16.37.26,15.74-.29,22.75-2.51,27.73-4.55,4.89-2.01,14.29-6.54,23.12-15.41,9.27-9.32,14.41-19.96,17.3-29.21,2.4-7.67,3.23-14.38,3.55-18.6.07-.88.1-1.63.14-2.28M794.51,1056.07c4.07,3.5,10.31,8.07,18.83,11.55,11.07,4.55,20.95,5.22,26.98,5.15M859.15,1073.62c9.94-.19,17.66-.29,24.83-.34,4.62-.03,9.64-.03,15.41-2.66,3.28-1.49,5.7-3.33,7.28-4.7M722.14,1125c31.28,8.7,75.71,17.47,129.3,16.7,23-.33,44.22-2.39,63.36-5.35,9.4-1.46,18.29-3.14,26.65-4.96,11.72-2.54,22.38-5.32,31.87-8.1M755.1,905.21l10.42,9.71M763.24,924.34l-13.69-12.85M760.32,937.75l-14.21-14.83M965.9,898.09c-3.17.53-7.24,1.51-11.7,3.41-4.2,1.8-7.57,3.9-10.07,5.71M949.05,916.64l7.43-5.15M949.05,928.91l19.97-12.27M739.44,893.04c-.89,6.42-1.66,13.08-2.28,19.97-1.25,13.88-1.75,26.99-1.72,39.23M1009.54,831.71l.05.34,11.98,75.54M709.18,910.44l5.37-60.9.1-1.2M985.18,943.2v-53.18M637.37,834.71c1.48,3.09,3.72,7.05,7.14,11.14,3.21,3.83,6.49,6.61,9.13,8.56M633.95,924.34c1.12-2.78,2.93-7.09,5.42-12.27,1-2.08,1.9-3.91,2.76-5.58,4.6-8.85,7.62-12.77,12.22-21.98,3.84-7.71,5.94-13.45,9.7-23.72,3.74-10.19,6.47-19.1,8.43-26.08M642.82,928.57c3.59-9.23,7.24-16.53,10.24-21.91,4.03-7.28,5.99-9.54,9.06-16.71,3.76-8.79,4.19-13.23,8.07-23.25,2.76-7.12,5.56-12.68,7.41-16.13M653.21,982c-4.26-11.17-9.63-16.7-13.83-19.7-.96-.69-2.27-1.51-3.9-2.66-1.42-1.03-3.12-2.28-5.1-3.91-4-3.29-6.97-6.35-8.85-8.41M613.39,964.65c-1.06,1.05-2.35,2.4-3.59,4.12-1.12,1.48-2.2,3.23-3.12,5.23-2.33,5.05-2.63,9.37-2.85,11.55-.02.21-.05.41-.09.62-.38,3.28-1.27,7.34-3.21,12.24-1.34,3.41-3.21,7.21-5.77,11.41M591.56,1073.62c1.39-15.36,5.1-24.21,8.41-29.55,1-1.58,3.52-5.37,4.14-10.85.21-1.77.19-3.45.02-5.03-.33-2.99-1.18-5.58-2.01-7.53M611.9,1083.04c1.53-3.6,3.59-9.78,3.05-17.42-.63-9.4-5.11-20.47-8.84-20.27-2.56.14-5.8,5.61-8.79,29.55M621.53,964.65c-2.42,3.23-5.58,8-8.27,14.21-1.41,3.23-2.45,6.32-3.26,9.32-.69,2.63-1.2,5.18-1.56,7.71-.72,4.93-.98,9.71-1.18,14.66-.27,6.37-.51,11.94-.03,17.37.46,5.03,1.53,9.92,3.76,15.17,2.63,6.19,5.95,10.78,8.41,13.69M1112.18,983.93c-.57,5.68-.76,12.03-.29,18.91.05.86.12,1.7.21,2.54.74,8.01,2.27,15.41,4.24,22.07,3.43,11.58,8.15,21.02,12.24,27.92M1107.46,1086.75c1.12-.22,9.94-8,13.83-11.46,1.06-.94,1.75-1.58,1.84-1.65l.02-.02M1103.48,1082.75c2.33-.89,5.68-2.47,9.13-5.29,1.99-1.61,3.57-3.31,4.77-4.84.86-1.05,1.54-2.02,2.08-2.87,4.17-8.15,4.02-13.95,3.14-17.69-1.39-5.9-4.58-6.88-7.71-15.27-1.65-4.43-2.13-7.83-2.52-10.19-.36-2.16-.67-3.43-1.77-3.79-.79-.26-1.94,0-3.64,1.49-2.09,1.84-5.03,5.56-9.2,12.49M1078.24,937.75c-.89-6.02-2.49-15.24-5.44-26.26-2.92-10.78-6.02-19.2-12.94-35.13-3.29-7.62-7.46-16.95-12.9-29.09-4.44-9.95-9.8-21.9-13.56-30.25M1091.62,943.2c-.41-7.02-1.7-18.1-6.13-30.85-5.1-14.62-10.64-20.73-17.56-35.81-.91-1.97-1.89-4.22-2.9-6.71-3.14-7.72-6.59-17.88-9.23-30.41M1085.63,818.88c-2.88,2.71-5.92,5.85-8.99,9.42-3.33,3.88-6.16,7.64-8.56,11.12M1070.65,973.87c7.76-7.55,14.62-11.79,19.55-14.28,2.57-1.3,6.25-2.93,10.31-6.5,4.02-3.5,6.57-7.24,8.1-9.88M1090.63,1037.23c2.15-1.72,4.93-4.24,7.71-7.71,1.2-1.49,2.97-3.74,4.68-6.86M611.25,1098.23c2.11-4.74,4.26-10.43,6.01-16.97,1.92-7.26,2.92-13.85,3.41-19.41M735.44,758.16c-4.58,3.31-9.52,7.24-14.59,11.91-1.63,1.51-3.19,3-4.68,4.5-3.91,3.93-7.34,7.76-10.3,11.34M723.86,793.19c2.21-1.46,4.53-3.07,6.92-4.82,3.07-2.28,6.25-4.8,9.49-7.6,5.32-4.6,9.87-9.13,13.71-13.37l.02-.02M1078.24,799.74c.38-6.64-.15-12.05-.74-15.84-.7-4.58-1.7-8.15-3.6-14.96-1.34-4.79-2.56-8.73-3.47-11.5M671.48,735.96c-2.85,1.73-6.92,4.6-10.71,9.13-.31.38-.67.82-1.05,1.32-1.54,2.01-3.52,5.08-5.39,9.71-1.06,2.66-2.11,5.83-2.99,9.63-.1.39-.19.79-.27,1.18-3.79,17.13-1.82,33.43.19,43.69.19.84.34,1.65.51,2.4M627.57,813.02c1.9,7.09,2.35,12.63,1.53,15.68v.02c-.76,2.78-1.77,5.03-1.77,5.03-2.13,4.5-5.01,6.8-9.64,16.66-1.2,2.56-2.16,4.96-3,7.48-1.92,5.89-3.07,12.42-4.8,23.24-3.83,23.9-4.98,34.24-6.23,43.04-.55,3.91-1.12,7.52-1.96,11.88-.1.51-.21,1.03-.29,1.51-2.59,13.01-4.82,18.12-7.19,24.39-1.73,4.58-3.54,9.8-5.65,19.2-.19.86-.38,1.72-.55,2.56-1.18,5.65-2.06,10.98-2.69,16.34-.02.19-.03.38-.07.55-1.03,8.96-1.41,17.98-1.48,28.54-.05,7.12.03,14.95.15,23.92.03,1.32.05,2.66.07,4.02.03,2.61.09,5.17.15,7.64.39,14.28,1.29,26.39,2.18,35.78.86,8.94,1.73,15.38,2.23,18.81,1.82,12.8,3.91,23.66,5.71,31.97h40.52c8.7-16.82,14.45-31.8,18.28-43.38,2.21-6.71,6.81-21.26,10.23-38.41,1.99-10.07,3.59-21.02,4.05-31.82.17-4.27.46-15.1,0-28.54-.41-11.89-.93-12.01-.86-15.99.43-25.62,22.07-30.94,34.53-66.22,2.39-6.71,4.77-15.51,8-15.41,3.04.1,3.78,8.08,10.28,17.69,4.02,5.95,8.49,9.97,11.62,12.42,3.09,7.93,6.64,18.83,8.92,32.11,2.64,15.29,4.55,26.41,2.01,40.53-2.76,15.31-8.85,23.46-5.42,37.1,1.22,4.84,3.16,8.55,4.56,10.85.48,5.23.51,12.15-1.15,19.99-.77,3.72-1.82,7.05-2.9,9.92-3.52,4.1-8.12,10.47-11.36,19.19-1.92,5.13-2.92,9.83-3.43,13.71-3.41,5.23-6.83,10.45-10.23,15.68-2.3,3.52-4.6,7.05-6.9,10.57h279.15l-.02-.03-10.83-27.94c1.41-14.09-.91-24.4-3.43-31.4-.67-1.85-1.37-3.55-2.06-5.13-3.43-7.81-6.69-12.7-4.79-19.41,1.65-5.77,5.46-7.02,8.29-15.14,1.94-5.59,2.09-10.67,1.92-14.12-1.65-8.82-2.73-16.22-3.43-21.62-1.63-12.51-1.37-15.14-1.06-17.06.6-3.74,1.41-4.99,5.94-17.73,1.75-4.89,2.97-7.98,3.76-10.81,4.65-16.58,1.99-21.38,6.73-27.66.26-.34.53-.69.84-1.03,6.01-6.95,10.74-4.02,19.55-11.55,11.69-10,11.5-22.15,15.86-21.98,4.51.17,5.94,14.26,12.48,31.21,1,2.57,2.11,5.22,3.36,7.89.03.09.07.17.12.24,6.9,14.55,15.87,24.97,22.7,31.73-2.99,12.12-4.46,22.77-5.15,31.56-.34,4.19-.5,7.95-.55,11.24-.14,8.12.29,13.52,1,21.73.65,7.53,1.54,17.44,2.42,33.94.09,1.77.19,3.43.26,4.99.6,11.38.91,17.95.6,24.69-.39,8.97-1.34,17.31-2.61,24.9-1.06,6.42-2.35,12.32-3.74,17.64-.07.29-.14.57-.21.84h47.95l10.73-36.09,12.36-41.53,5.44-18.28,4.58-15.43c1.75-8.32,3.45-18.43,4.41-30.03.34-4.26.6-8.72.74-13.35.09-3.02.19-6.47.19-10.3,0-5.77-.19-12.41-.89-19.84-.53-5.53-1.36-11.5-2.59-17.85-.27-1.36-.55-2.73-.86-4.12-2.59-11.91-3.48-10.35-7.95-27.13-6.25-23.46-6.38-33.51-10.06-51.12-.29-1.46-.62-2.95-.98-4.51-2.52-11.19-6.95-27.39-15.12-46.68,1.85-6.16,3.86-15.08,3.78-25.9-.03-3.59-.26-6.38-.57-9.06-.43-3.88-.98-7.52-1.13-12.99-.21-6.62.19-15.8,2.78-26.94,2.83-5.66,4.43-10.18,5.15-13.76,1.18-5.75.19-9.18-1.44-11.36-1.65-2.2-3.16-2.06-10.73-5.42-.41-.17-.82-.36-1.27-.57-10.62-4.84-11.51-6.74-17.98-9.42-.45-.19-.91-.38-1.42-.57-10.23-3.93-11.21-1.36-18.26-4.56-5.01-2.28-7.17-5.13-9.2-8.07-2.21-3.21-4.26-6.54-9.64-9.35-.12-.07-.24-.12-.36-.19-4.94-2.49-9.63-3.04-18.76-4.08-7.24-.84-13.35-.81-17.71-.58-2.85-6.37-6.71-15.43-10.85-26.55-4.84-13.04-7.28-19.58-8.27-25.96-.91-5.8-.39-6.73-.86-32.83-.24-13.42-.39-14.67-.63-16.1-.81-4.68-3.04-17.78-12.78-27.58-.46-.46-1.37-1.08-2.75-1.89-4.07-2.37-12.24-6.35-25.23-12.66-.15-.07-.31-.15-.46-.22-1.12-.55-2.16-1.05-3.14-1.53-7.34-3.57-10.86-5.18-14.4-6.74l-.82-.36c-5.27-2.3-9.87-4.15-13.2-5.46-2.44-.96-4.2-1.63-5.08-1.96-6.95-2.59-15.8-5.63-26.34-8.6-.63-.17-1.27-.36-1.92-.53-16.53,11.05-30.82,17.8-41.1,21.97-12.99,5.29-23.87,8.22-33.39,19.13-5.9,6.76-8.58,13.52-9.99,17.13-2.9,7.45-3.88,14.14-4.07,20.97-.19,6.33.33,12.8.65,20.13.48,11.19.63,27.49-1.15,47.95-3.83,2.18-8.7,4.62-14.52,6.68-4.58,1.65-9.75,3.04-15.44,3.9-1.24.19-2.42.34-3.55.45-12.03,1.25-19.05-.98-31.76.38-.86.09-1.75.19-2.66.31-4.8.67-8.96,1.63-13.04,2.93-3.88,1.22-7.67,2.73-11.89,4.53-2.02.88-4.17,1.8-6.45,2.81-5.25,2.3-10.16,4.74-14.71,7.19-13.42,7.26-23.66,14.78-30.36,20.2-2.21,1.78-4.03,3.35-5.46,4.58-4.14,3.6-7.96,6.92-11.46,10-1.97,1.75-3.83,3.43-5.56,5.05-10.49,9.78-16.85,17.78-17.47,27.54-.05.63-.05,1.27-.05,1.92.07,4.86,1.48,10.45,2.88,14.91.86,2.73,1.72,5.03,2.27,6.5,2.64,7.16,5.8,12.96,8.55,17.35.6.94,1.17,1.82,1.72,2.63.24.46.46.91.69,1.36,3.96,7.88,6.71,15.19,8.36,21.31ZM687.2,1116.95c.31,6.86.33,14.43-.15,22.58-.74,12.65-4.91,19.32-2.28,21.43,1.78,1.42,6.52.86,20.25-9.71"/>
      </g>
      <polyline class="cls-1" points="270.6 1145.4 .5 1145.4 .5 .5 1780.5 .5 1780.5 1145.4 270.6 1145.4"/>
    </g>
  </g>
</svg>

================
File: components/auth/AuthScreen.jsx
================
import React from 'react';
import { Login } from './Login';

export function AuthScreen() {
  return <Login />;
}

================
File: components/auth/index.js
================
export { AuthScreen } from './AuthScreen';
export { Login } from './Login';

================
File: components/auth/Login.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export function Login() {
  const { login, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    await login(username, password);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-stone-900">
      <div className="bg-stone-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">Login to SLUMTERM</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-stone-700 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-stone-700 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-mono text-sm py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <p className="text-stone-400 text-sm font-mono">
            Contact administrator if you need an account
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: components/auth/Register.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export function Register({ onSwitchToLogin }) {
  const { register, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    setPasswordError('');
    
    // Validate passwords match
    if (password !== confirmPassword) {
      setPasswordError('Passwords do not match');
      return;
    }
    
    // Validate password strength
    if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      return;
    }
    
    const result = await register(username, email, password);
    if (result.success) {
      setSuccess(true);
      // Reset form
      setUsername('');
      setEmail('');
      setPassword('');
      setConfirmPassword('');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">Create an Account</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {passwordError && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {passwordError}
          </div>
        )}
        
        {success && (
          <div className="bg-green-900 text-white p-3 rounded mb-4">
            Registration successful! You can now login.
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="email">
              Email
            </label>
            <input
              id="email"
              type="email"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <p className="text-gray-400 text-xs mt-1">Must be at least 8 characters long</p>
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-300 mb-2" htmlFor="confirmPassword">
              Confirm Password
            </label>
            <input
              id="confirmPassword"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <button
            onClick={onSwitchToLogin}
            className="text-teal-400 hover:text-teal-300 text-sm"
          >
            Already have an account? Login
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: components/CommandBar.jsx
================
import React, { useState, useEffect, useRef } from 'react';

export const CommandBar = ({ 
  onCommand, 
  currentWorkspaceIndex = 0,
  switchWorkspace,
  user,
  onLogout
}) => {
  console.log('CommandBar render, currentWorkspaceIndex:', currentWorkspaceIndex);
  const [command, setCommand] = useState('');
  const inputRef = useRef(null);

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && command.trim()) {
      onCommand(command.trim());
      setCommand('');
    }
  };

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === '/' && document.activeElement !== inputRef.current) {
        e.preventDefault();
        inputRef.current?.focus();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, []);

  return (
    <div className="w-full bg-stone-800 p-2 flex items-center gap-2">
      <div className="flex gap-2 items-center pr-2 border-r border-stone-600">
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 0 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(0)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 1 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(1)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 2 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(2)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 3 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(3)} />
      </div>
      <span className="text-gray-400 text-sm font-mono">$</span>
      <input
        ref={inputRef}
        type="text"
        value={command}
        onChange={(e) => setCommand(e.target.value)} 
        onKeyDown={handleKeyDown}
        placeholder="Press '/' to focus"
        className="flex-1 bg-stone-700 text-white px-4 py-1 rounded text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      
      {/* User info and logout */}
      {user && (
        <div className="flex items-center border-l border-stone-600 ml-2 pl-2">
          <span className="text-white text-sm font-mono mr-2">
            {user?.username || 'User'}
          </span>
          <button 
            onClick={onLogout}
            className="bg-stone-700 hover:bg-stone-600 text-white text-sm px-2 py-1 rounded"
          >
            Logout
          </button>
        </div>
      )}
    </div>
  );
};

export default CommandBar;

================
File: components/EmptyState.jsx
================
import React from 'react';
import emptyStateSvg from '../assets/SVG/emptyState.svg';

export const EmptyState = () => (
  <div className="absolute inset-0 flex flex-col items-center justify-center bg-stone-950">
    <img 
      src={emptyStateSvg} 
      alt="Empty State" 
      className="w-1/4 h-auto"
    />
    <h2 className="text-xl font-semibold text-teal-400 mt-4">SLUMNET</h2>
  </div>
);

export default EmptyState;

================
File: components/WindowManager.jsx
================
import React, { useState, useCallback, useEffect } from 'react';
import { WINDOW_CONTENT } from '../utils/windowTypes';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowManager } from '../hooks/useWindowManager';
import { useKeyboardShortcuts } from '../hooks/useKeyboardShortcuts';
import { CommandBar } from './CommandBar';
import EmptyState from './EmptyState';

export const WindowManager = ({ defaultLayout = null }) => {
  const [dragState, setDragState] = useState(null);
  const [notification, setNotification] = useState(null);
  const [flashingWindowIds, setFlashingWindowIds] = useState(new Set());
  
  // Function to flash a window's border red
  const flashWindowBorder = useCallback((windowId) => {
    setFlashingWindowIds(prev => {
      const newSet = new Set(prev);
      newSet.add(windowId);
      return newSet;
    });
    
    // Remove the window from flashing state after 500ms
    setTimeout(() => {
      setFlashingWindowIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(windowId);
        return newSet;
      });
    }, 500);
  }, []);

  const {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    splitWindow,
    createNewWindow,
    closeWindow,
    transformWindow,
    currentWorkspaceIndex,
    workspaceCount,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  } = useWindowManager({ 
    defaultLayout,
    onFlashBorder: flashWindowBorder
  });
  
  // Override window.alert to use our notification system
  useEffect(() => {
    const originalAlert = window.alert;
    window.alert = (message) => {
      console.log('Alert:', message);
      
      // If the message is about splitting or creating windows, flash the active window border
      if (message.includes('split') || message.includes('create')) {
        if (activeNodeId) {
          flashWindowBorder(activeNodeId);
        }
      } else {
        // For other alerts, show the notification
        setNotification(message);
        setTimeout(() => setNotification(null), 3000); // Hide after 3 seconds
      }
    };
    
    return () => {
      window.alert = originalAlert;
    };
  }, [activeNodeId, flashWindowBorder]);

  // Log when component mounts
  useEffect(() => {
    console.log('WindowManager component mounted');
    console.log('setIsMoveMode is a function:', typeof setIsMoveMode === 'function');
    console.log('Initial isMoveMode state:', isMoveMode);
  }, [isMoveMode]);
  
  // Log move mode state changes
  useEffect(() => {
    console.log('Move mode changed to:', isMoveMode);
  }, [isMoveMode]);

  // Add keyboard shortcuts
  useKeyboardShortcuts({
    onSplitVertical: () => splitWindow(activeNodeId, 'vertical'),
    onSplitHorizontal: () => splitWindow(activeNodeId, 'horizontal'),
    onClose: () => closeWindow(activeNodeId),
    createNewWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows,
    activeNodeId
  });

  // Command handling for terminal
  const handleCommand = useCallback((command) => {
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();

    switch (cmd) {
      case 'split':
        if (activeNodeId) {
          const direction = parts[1] === 'vertical' ? 'vertical' : 'horizontal';
          splitWindow(activeNodeId, direction);
        }
        break;
      case 'close':
        if (activeNodeId) {
          closeWindow(activeNodeId);
        }
        break;
    }
  }, [activeNodeId, splitWindow, closeWindow]);

  // Resize handling
  const handleResizeStart = useCallback((e, split) => {
    e.preventDefault();
    e.stopPropagation();
    const rect = e.currentTarget.getBoundingClientRect();
    setDragState({
      split,
      initialPos: {
        x: e.clientX,
        y: e.clientY
      },
      initialRatio: split.splitRatio
    });
  }, []);

  // Helper function to convert percentage-based bounds to pixel dimensions
  const calculatePixelDimensions = useCallback((bounds) => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    return {
      width: (bounds.width / 100) * windowWidth,
      height: (bounds.height / 100) * windowHeight
    };
  }, []);
  
  // Helper function to check if a window tree would have any windows smaller than the minimum size
  const hasWindowsBelowMinSize = useCallback((root) => {
    if (!root) return false;
    
    // Import constants directly here to avoid dependency issues
    const MIN_WINDOW_WIDTH_PX = 300;
    const MIN_WINDOW_HEIGHT_PX = 200;
    
    // Calculate the bounds of all windows
    const allWindows = getWindowBounds(root);
    
    // Check if any window would be smaller than the minimum size
    return allWindows.some(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      const isTooSmall = pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
                         pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
      
      if (isTooSmall) {
        console.log('Window too small:', window.id);
        console.log('Dimensions:', pixelDimensions);
      }
      
      return isTooSmall;
    });
  }, [calculatePixelDimensions]);

  const handleResizeMove = useCallback((e) => {
    if (!dragState) return;

    const { split, initialPos, initialRatio } = dragState;
    const delta = split.direction === 'horizontal' 
      ? (e.clientX - initialPos.x) / window.innerWidth 
      : (e.clientY - initialPos.y) / window.innerHeight;

    const newRatio = Math.max(0.1, Math.min(0.9, initialRatio + delta));
    
    // Store the original ratio
    const originalRatio = split.splitRatio;
    
    // Apply the new ratio
    split.splitRatio = newRatio;
    
    // Check if this would result in windows that are too small, but don't block the resize
    if (hasWindowsBelowMinSize(rootNode)) {
      console.log('Windows are below minimum size, but resize is allowed');
    }
    
    // If we get here, the resize is allowed
    // Force a re-render
    setDragState(prev => ({ ...prev }));
  }, [dragState, rootNode, hasWindowsBelowMinSize, activeNodeId, flashWindowBorder]);

  const handleResizeEnd = useCallback(() => {
    setDragState(null);
  }, []);

  useEffect(() => {
    if (dragState) {
      window.addEventListener('mousemove', handleResizeMove);
      window.addEventListener('mouseup', handleResizeEnd);
      return () => {
        window.removeEventListener('mousemove', handleResizeMove);
        window.removeEventListener('mouseup', handleResizeEnd);
      };
    }
  }, [dragState, handleResizeMove, handleResizeEnd]);

  // Window tree renderer
  const WindowTreeRenderer = ({ node, depth = 0, available = { x: 0, y: 0, width: 100, height: 100 } }) => {
    if (!node) return null;

    if (node.type === 'window') {
      const windowContent = WINDOW_CONTENT[node.windowType];
      if (!windowContent) {
        console.error('No window content found for type:', node.windowType);
        return null;
      }
      const Component = windowContent.component;
      const isActive = node.id === activeNodeId;
  
      // Check if this window is currently flashing
      const isFlashing = flashingWindowIds.has(node.id);
      
      // Check if this is the first selected window in move mode
      const isFirstSelectedWindow = isMoveMode && moveSourceWindowId === node.id;
      
      return (
        <div
          className={`absolute overflow-hidden border-2 ${
            isFlashing ? 'border-red-600' : 
            isFirstSelectedWindow ? 'border-blue-500' :
            isActive ? (
              isMoveMode ? 'border-green-500' : 
              isResizeMode ? 'border-yellow-500' : 
              'border-teal-500'
            ) : 'border-stone-600'
          } ${isFlashing ? 'animate-pulse' : ''}`}
          style={{
            left: `${available.x}%`,
            top: `${available.y}%`,
            width: `${available.width}%`,
            height: `${available.height}%`,
            transition: 'border-color 0.2s ease-in-out'
          }}
          onClick={() => setActiveNodeId(node.id)}
        >
          <Component 
            key={`window-${node.id}-${node.windowType}`}
            onCommand={handleCommand} 
            isActive={isActive}
            nodeState={node.state}
            nodeId={node.id}
            transformWindow={transformWindow}
            onStateChange={(newState) => {
              updateTerminalState(node.id, newState);
            }}
          />
        </div>
      );
    }

    // Calculate split dimensions
    let firstDimensions, secondDimensions;
    if (node.direction === 'horizontal') {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width * node.splitRatio,
        height: available.height
      };
      secondDimensions = {
        x: available.x + (available.width * node.splitRatio),
        y: available.y,
        width: available.width * (1 - node.splitRatio),
        height: available.height
      };
    } else {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width,
        height: available.height * node.splitRatio
      };
      secondDimensions = {
        x: available.x,
        y: available.y + (available.height * node.splitRatio),
        width: available.width,
        height: available.height * (1 - node.splitRatio)
      };
    }

    return (
      <div className="absolute inset-0" style={{ pointerEvents: 'none' }}>
        <WindowTreeRenderer 
          node={node.first} 
          depth={depth + 1} 
          available={firstDimensions} 
        />
        <div
          className="absolute bg-stone-700 hover:bg-stone-500 transition-colors"
          style={{
            left: node.direction === 'horizontal' ? `${firstDimensions.width}%` : 0,
            top: node.direction === 'vertical' ? `${firstDimensions.height}%` : 0,
            width: node.direction === 'horizontal' ? '4px' : '100%',
            height: node.direction === 'vertical' ? '4px' : '100%',
            cursor: node.direction === 'horizontal' ? 'col-resize' : 'row-resize',
            pointerEvents: 'auto',
            zIndex: 10
          }}
          onMouseDown={(e) => handleResizeStart(e, node)}
        />
        <WindowTreeRenderer 
          node={node.second} 
          depth={depth + 1} 
          available={secondDimensions}
        />
      </div>
    );
  };

  return (
    <div className="w-full h-screen flex flex-col">
      <CommandBar
        onCommand={handleCommand}
        currentWorkspaceIndex={currentWorkspaceIndex}
        switchWorkspace={switchWorkspace}
      />
      <div className="flex-1 relative bg-stone-900">
        {rootNode ? (
          <WindowTreeRenderer
            node={rootNode}
            terminalStates={terminalStates}
            updateTerminalState={updateTerminalState}
          />
        ) : (
          <EmptyState />
        )}
        
        {/* Notification system */}
        {notification && (
          <div 
            className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50"
            style={{ maxWidth: '80%' }}
          >
            {notification}
          </div>
        )}
      </div>
    </div>
  );
};

export default WindowManager;

================
File: components/windows/AudioWindow.jsx
================
import React, { useRef, useState, useEffect, useCallback } from 'react';
import { Play, Pause, Volume2 } from 'lucide-react';

const AudioWindow = ({ nodeId, onCommand, windowState, updateWindowState }) => {
  const canvasRef = useRef(null);
  const audioRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const animationRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(windowState?.isPlaying || false);
  const [currentTime, setCurrentTime] = useState(windowState?.currentTime || 0);

  // Define draw function outside of other functions to avoid dependency issues
  const draw = useCallback(() => {
    if (!canvasRef.current || !analyserRef.current) {
      console.error('Cannot draw: canvas or analyser is null');
      return;
    }

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const analyser = analyserRef.current;
    
    // Make sure canvas dimensions are set correctly
    if (canvas.width === 0 || canvas.height === 0) {
      canvas.width = canvas.offsetWidth || 300;
      canvas.height = canvas.offsetHeight || 150;
    }
    
    // Use a smaller FFT size for better visualization
    analyser.fftSize = 512;
    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    const drawFrame = () => {
      // Cancel any existing animation frame
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      
      // Request next frame
      animationRef.current = requestAnimationFrame(drawFrame);
      
      // Get frequency data
      analyser.getByteFrequencyData(dataArray);

      // Clear canvas
      ctx.fillStyle = 'rgb(28, 25, 23)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Draw visualizer
      const barWidth = (canvas.width / bufferLength) * 2.5;
      let barHeight;
      let x = 0;

      for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i] * 1.5;
        
        // Make sure we have a minimum height for bars
        if (barHeight < 1) barHeight = 1;
        
        const gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);
        gradient.addColorStop(0, '#14b8a6');
        gradient.addColorStop(1, '#2dd4bf');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

        x += barWidth + 1;
      }
    };

    // Start the animation
    drawFrame();
    
    console.log('Visualization started');
    
    // Return a cleanup function
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
    };
  }, []);

  // Track if audio element has been connected to a source
  const sourceConnectedRef = useRef(false);

  // Setup audio with Web Audio API for visualization
  const setupAudio = useCallback(async () => {
    try {
      const audio = audioRef.current;
      if (!audio) {
        console.error('Audio element reference is null');
        return false;
      }
      
      // Force reset the sourceConnected flag if we're having issues
      if (audioContextRef.current?.state === 'closed') {
        sourceConnectedRef.current = false;
      }
      
      // Create new AudioContext if needed
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Creating new AudioContext');
        
        // Create new AudioContext
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Create and configure analyser
        const analyser = audioContext.createAnalyser();
        analyser.fftSize = 256; // Smaller FFT size for better visualization
        analyser.smoothingTimeConstant = 0.8; // Add smoothing
        
        // Resume audio context (needed due to browser autoplay policies)
        await audioContext.resume();
        
        // Create a new MediaElementSource and connect it
        try {
          console.log('Creating new MediaElementSource');
          const source = audioContext.createMediaElementSource(audio);
          source.connect(analyser);
          analyser.connect(audioContext.destination);
          sourceConnectedRef.current = true;
          
          // Store references
          audioContextRef.current = audioContext;
          analyserRef.current = analyser;
          
          console.log('Audio setup complete with new AudioContext');
        } catch (sourceError) {
          console.error('Error creating MediaElementSource:', sourceError);
          return false;
        }
      } else {
        // If AudioContext exists but is suspended, resume it
        if (audioContextRef.current.state === 'suspended') {
          console.log('Resuming suspended AudioContext');
          await audioContextRef.current.resume();
        }
        
        console.log('Using existing AudioContext');
      }
      
      // Restore playback position from window state
      if (windowState?.currentTime) {
        audio.currentTime = windowState.currentTime;
      }
      
      return true;
    } catch (error) {
      console.error('Error setting up audio:', error);
      return false;
    }
  }, [windowState]);

  // Initialize audio on mount or when windowState changes
  useEffect(() => {
    const initializeAudio = async () => {
      // Set up the audio context
      const success = await setupAudio();
      
      // If setup was successful and we should be playing, start playback
      if (success && windowState?.isPlaying) {
        try {
          await audioRef.current.play();
          draw();
        } catch (error) {
          console.error('Error auto-playing audio:', error);
          setIsPlaying(false);
        }
      }
    };

    if (audioRef.current && 
        (!audioContextRef.current || audioContextRef.current.state === 'closed')) {
      initializeAudio();
    }

    return () => {
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        try {
          audioContextRef.current.close();
        } catch (error) {
          console.error('Error closing AudioContext:', error);
        }
      }
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [windowState, setupAudio, draw]);

  // Toggle play/pause
  const togglePlay = useCallback(async () => {
    if (!audioRef.current) return;

    try {
      console.log('Toggle play clicked, current state:', isPlaying);
      
      // Make sure audio context is initialized and running
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Setting up audio again');
        const success = await setupAudio();
        if (!success) {
          console.error('Failed to set up audio');
          return;
        }
      } else if (audioContextRef.current.state === 'suspended') {
        console.log('Resuming suspended AudioContext');
        await audioContextRef.current.resume();
      }

      if (isPlaying) {
        console.log('Pausing audio');
        audioRef.current.pause();
        if (animationRef.current) {
          cancelAnimationFrame(animationRef.current);
          animationRef.current = null;
        }
      } else {
        console.log('Starting audio playback');
        try {
          // Start visualization before playing to ensure it's ready
          if (analyserRef.current && !animationRef.current) {
            console.log('Starting visualization');
            draw();
          }
          
          // Play the audio
          const playPromise = audioRef.current.play();
          if (playPromise) {
            await playPromise;
            console.log('Audio playback started successfully');
            
            // Make sure visualization is running
            if (!animationRef.current && analyserRef.current) {
              console.log('Starting visualization after successful play');
              draw();
            }
          }
        } catch (playError) {
          console.error('Error playing audio:', playError);
        }
      }
      
      setIsPlaying(!isPlaying);
    } catch (error) {
      console.error('Error in togglePlay:', error);
    }
  }, [isPlaying, setupAudio, draw]);

  // Handle canvas resize
  useEffect(() => {
    const resizeCanvas = () => {
      const canvas = canvasRef.current;
      if (!canvas) return;
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    return () => window.removeEventListener('resize', resizeCanvas);
  }, []);

  // Update current time when playing
  useEffect(() => {
    if (!audioRef.current) return;
    
    const updateTime = () => {
      setCurrentTime(audioRef.current.currentTime);
    };
    
    audioRef.current.addEventListener('timeupdate', updateTime);
    return () => {
      audioRef.current?.removeEventListener('timeupdate', updateTime);
    };
  }, []);
  
  // Start visualization when audio is playing
  useEffect(() => {
    // If audio is playing but visualization is not running, start it
    if (isPlaying && audioRef.current && analyserRef.current && !animationRef.current) {
      console.log('Starting visualization due to isPlaying state change');
      draw();
    }
    
    // If audio is not playing but visualization is running, stop it
    if (!isPlaying && animationRef.current) {
      console.log('Stopping visualization due to isPlaying state change');
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
  }, [isPlaying, draw]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        isPlaying,
        currentTime
      });
    }
  }, [isPlaying, currentTime, updateWindowState]);

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
      <div className="flex-1 relative">
        <canvas 
          ref={canvasRef}
          className="absolute inset-0 w-full h-full"
        />
      </div>

      <div className="border-t border-stone-700">
        <div className="flex items-center gap-4 mb-4">
          <button 
            onClick={togglePlay}
            className="p-2 hover:bg-stone-800 rounded-full transition-colors"
          >
            {isPlaying ? <Pause size={24} /> : <Play size={24} />}
          </button>
          <Volume2 size={24} />
        </div>

        <audio
          ref={audioRef}
          src="scamming-on-runescape.mp3"
          preload="auto"
          crossOrigin="anonymous"
          onPlay={() => setIsPlaying(true)}
          onPause={() => setIsPlaying(false)}
          onEnded={() => setIsPlaying(false)}
        />

        <div className="p-2 flex items-center gap-2 border-t border-stone-700">
          <span>$</span>
          <input
            type="text"
            className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && e.target.value.trim()) {
                onCommand(e.target.value.trim());
                e.target.value = '';
              }
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default AudioWindow;

================
File: components/windows/ChatWindow.jsx
================
import React, { useState, useEffect, useRef, useMemo } from 'react';
import { io } from 'socket.io-client';
import axios from 'axios';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';

const ChatWindow = ({ isActive, nodeId }) => {
  const { user } = useAuth();
  const [rooms, setRooms] = useState([]);
  const [activeRoom, setActiveRoom] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [charCount, setCharCount] = useState(0);
  const [newRoomName, setNewRoomName] = useState('');
  const [socket, setSocket] = useState(null);
  const messagesEndRef = useRef(null);
  
  const MAX_CHARS = 500; // Maximum character limit

  // Connect to WebSocket server
  useEffect(() => {
    const socketInstance = io(API_CONFIG.BASE_URL.replace('/api', ''));
    setSocket(socketInstance);

    return () => {
      socketInstance.disconnect();
    };
  }, []);

  // Fetch available rooms
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(`${API_CONFIG.BASE_URL}/chat/rooms`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setRooms(response.data);
        
        // If there are rooms and no active room, set the first one as active
        if (response.data.length > 0 && !activeRoom) {
          setActiveRoom(response.data[0]);
        }
      } catch (error) {
        console.error('Failed to fetch rooms:', error);
      }
    };

    fetchRooms();
  }, [activeRoom]);

  // Join room and fetch messages
  useEffect(() => {
    if (!activeRoom || !socket) return;

    // Join the room via WebSocket
    socket.emit('join_room', activeRoom.id);

    // Fetch messages for the room
    const fetchMessages = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setMessages(response.data);
      } catch (error) {
        console.error('Failed to fetch messages:', error);
      }
    };

    fetchMessages();

    // Listen for new messages
    const handleNewMessage = (message) => {
      setMessages((prev) => [...prev, message]);
    };

    socket.on('new_message', handleNewMessage);

    return () => {
      // Leave the room when component unmounts or room changes
      socket.emit('leave_room', activeRoom.id);
      socket.off('new_message', handleNewMessage);
    };
  }, [activeRoom, socket]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleMessageChange = (e) => {
    const value = e.target.value;
    if (value.length <= MAX_CHARS) {
      setNewMessage(value);
      setCharCount(value.length);
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim() || !activeRoom) return;

    try {
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
        { message: newMessage },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setNewMessage('');
      setCharCount(0);
    } catch (error) {
      console.error('Failed to send message:', error);
    }
  };

  const handleCreateRoom = async (e) => {
    e.preventDefault();
    if (!newRoomName.trim()) return;

    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms`,
        { name: newRoomName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setRooms((prev) => [response.data, ...prev]);
      setNewRoomName('');
      setActiveRoom(response.data);
    } catch (error) {
      console.error('Failed to create room:', error);
    }
  };

  const joinRoom = async (room) => {
    try {
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${room.id}/join`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setActiveRoom(room);
    } catch (error) {
      console.error('Failed to join room:', error);
    }
  };

  return (
    <div className="flex h-full">
      {/* Room sidebar */}
      <div className="w-1/9 max-w-[20%] min-w-[10%] bg-stone-900 border-r border-stone-700 flex flex-col">
        <div className="p-2 border-b border-stone-700">
          <h3 className="text-teal-400 font-medium text-sm">Channels</h3>
        </div>
        <div className="flex-1 overflow-y-auto">
          {rooms.map((room) => (
            <div
              key={room.id}
              className={`text-sm p-2 cursor-pointer hover:bg-stone-700 ${
                activeRoom?.id === room.id ? 'bg-stone-800' : ''
              }`}
              onClick={() => joinRoom(room)}
            >
              <div className="text-white">{room.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Chat area */}
      <div className="flex-1 flex flex-col">
        {activeRoom ? (
          <>
            <div className="p-2 bg-stone-900 border-b border-stone-700 font-mono text-sm">
              <h3 className="text-teal-400 font-medium">{activeRoom.name}</h3>
            </div>
            <div className="flex-1 overflow-y-auto p-4 bg-stone-900">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`mb-1 ${
                    msg.user_id === user.id ? 'text-right' : ''
                  }`}
                >
                  <div
                    className={`hover:bg-stone-800 inline-block rounded-lg px-4 py-2 w-[100%] break-all overflow-wrap break-word hyphens-auto overflow-hidden whitespace-pre-wrap ${
                      msg.user_id === user.id
                        ? 'bg-teal-600 text-white'
                        : 'text-white'
                    }`}
                    style={{ wordBreak: 'break-word', overflowWrap: 'break-word' }}
                  >
                    <div className="text-teal-400 flex font-medium text-s mb-1">
                      {msg.username}
                      <div className="text-xs text-white opacity-75 mt-1 ml-3">
                        {(() => {
                          // Ensure UTC interpretation by appending 'Z' if not already present
                          const timestamp = msg.created_at.endsWith('Z') ? 
                            msg.created_at : 
                            msg.created_at + 'Z';
                          
                          const msgDate = new Date(timestamp);
                          
                          return msgDate.toLocaleTimeString('en-US', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: 'numeric',
                            minute: '2-digit',
                            timeZoneName: 'short',
                            hour12: false
                          });
                        })()}
                      </div>
                    </div>
                    <div>{msg.message}</div>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            <form
              onSubmit={handleSendMessage}
              className="p-2 bg-stone-900 border-t border-stone-700 flex"
            >
              <div className="flex-1 flex flex-col">
                <input
                  type="text"
                  value={newMessage}
                  onChange={handleMessageChange}
                  className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none focus:ring-1 focus:ring-teal-400"
                  maxLength={MAX_CHARS}
                />

              </div>
            </form>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-stone-900">
            <div className="text-stone-500">
              Select a channel to start chatting
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatWindow;

================
File: components/windows/EditorWindow.jsx
================
import React, { useState, useEffect } from 'react';

const EditorWindow = ({ nodeId, onCommand, windowState, updateWindowState }) => {
  // Use state from windowState or default value
  const [text, setText] = useState(windowState?.text || `function hello() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhello();`);
  const [command, setCommand] = useState('');
  
  // Sync with external state when it changes
  useEffect(() => {
    if (windowState && windowState.text !== undefined) {
      setText(windowState.text);
    }
  }, [windowState]);
  
  // Update window state when text changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({ text });
    }
  }, [text, updateWindowState]);
  
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && command.trim()) {
      onCommand(command.trim());
      setCommand('');
    }
  };

  const handleTextChange = (e) => {
    setText(e.target.value);
  };

  return (
    <div className="p-4 font-mono text-sm h-full flex flex-col bg-white">
      <div className="flex-1">
        <textarea
          className="w-full h-full text-gray-800 resize-none focus:outline-none"
          value={text}
          onChange={handleTextChange}
          autoFocus
        />
      </div>

      {/* Command input */}
      <div className="mt-2 flex items-center gap-2">
        <span className="text-gray-400">$</span>
        <input
          type="text"
          value={command}
          onChange={(e) => setCommand(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 bg-gray-100 px-2 py-1 rounded text-sm focus:outline-none"
          placeholder="Type a command..."
        />
      </div>
    </div>
  );
};

export default EditorWindow;

================
File: components/windows/ExplorerWindow.css
================
/* Markdown content styling */
.markdown-content {
    color: #f0f9ff; /* Light blue-white for readability */
    line-height: 1.6;
    font-family: 'Oxygen Mono', monospace;
    padding: 1rem;
  }
  
  /* Header styles with clear size differences */
  .markdown-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    color: #2dd4bf; /* Teal accent color */
    border-bottom: 1px solid #44403c;
    padding-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h3 {
    font-size: 1.75rem;
    font-weight: 600;
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h4 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Paragraph styling */
  .markdown-content p {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Make sure the code blocks stand out */
  .markdown-content pre {
    background-color: #1c1917; /* Darker background for code */
    border-radius: 0.25rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
    font-family: 'Oxygen Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
  }
  
  .markdown-content code {
    font-family: 'Oxygen Mono', monospace;
    background-color: #1c1917;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  /* Add some spacing between sections */
  .markdown-content br + h1,
  .markdown-content br + h2,
  .markdown-content br + h3,
  .markdown-content br + h4,
  .markdown-content br + h5,
  .markdown-content br + h6 {
    margin-top: 0.5rem;
  }
  
  /* Lists */
  .markdown-content ul, .markdown-content ol {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    padding-left: 2rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content li {
    margin-top: 0.25rem;
    margin-bottom: 0.25rem;
  }
  
  /* Links */
  .markdown-content a {
    color: #14b8a6;
    text-decoration: underline;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content a:hover {
    color: #2dd4bf;
  }

================
File: components/windows/ExplorerWindow.jsx
================
import React, { useState, useEffect } from 'react';
import { FolderOpen, FileText, ChevronRight, ChevronDown, File, Coffee, Code, BookOpen } from 'lucide-react';
import showdown from 'showdown';
import './ExplorerWindow.css';

const ExplorerWindow = ({ nodeId, onCommand, transformWindow, windowState, updateWindowState }) => {
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isLoading, setIsLoading] = useState(true);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  
  // Initialize Showdown converter for Markdown
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true
  });

  // Function to fetch directory contents from the server
  const fetchDirectoryContents = async (path = '/') => {
    try {
      setIsLoading(true);
      setErrorMessage('');
      
      // In a real implementation, we would call an API endpoint
      // Since we can't do that directly in this example, I'll simulate a response
      
      // For development with Vite, we could use:
      // const response = await fetch(`/api/files?path=${encodeURIComponent(path)}`);
      // const data = await response.json();
      
      // Simulate server response with a directory structure
      setTimeout(() => {
        // This simulates the files in your project root
        // In a real implementation, this would come from your server
        const projectFiles = [
          {
            name: 'docs',
            type: 'directory',
            path: '/docs',
            children: [
              { name: 'introduction.md', type: 'file', path: '/docs/introduction.md' },
              { name: 'getting-started.md', type: 'file', path: '/docs/getting-started.md' },
              { name: 'api-reference.md', type: 'file', path: '/docs/api-reference.md' }
            ]
          },
          {
            name: 'src',
            type: 'directory',
            path: '/src',
            children: [
              { name: 'App.jsx', type: 'file', path: '/src/App.jsx' },
              { name: 'main.jsx', type: 'file', path: '/src/main.jsx' },
              { name: 'styles.css', type: 'file', path: '/src/styles.css' },
              { 
                name: 'components', 
                type: 'directory', 
                path: '/src/components',
                children: [
                  { name: 'WindowManager.jsx', type: 'file', path: '/src/components/WindowManager.jsx' },
                  { name: 'CommandBar.jsx', type: 'file', path: '/src/components/CommandBar.jsx' }
                ]
              }
            ]
          },
          { name: 'README.md', type: 'file', path: '/README.md' },
          { name: 'package.json', type: 'file', path: '/package.json' }
        ];
        
        setFiles(projectFiles);
        setCurrentPath(path);
        setIsLoading(false);
      }, 300);
    } catch (error) {
      console.error('Error fetching directory contents:', error);
      setErrorMessage('Failed to load files. Please try again.');
      setIsLoading(false);
    }
  };

  // Function to fetch file content
  const fetchFileContent = async (filePath) => {
    try {
      setIsLoading(true);
      setErrorMessage('');
      
      // In a real implementation, we would call an API endpoint
      // Since we can't do that directly in this example, I'll simulate content for markdown files
      
      setTimeout(() => {
        // Sample content for markdown files
        let content = '';
        
        if (filePath === '/README.md') {
          content = `# SLUMTERM
          
## Overview
i can render markdown now nerd

its over`;
        } 
        else if (filePath === '/docs/introduction.md') {
          content = `# Introduction to Window Manager
          
The Window Manager is a React-based system for creating flexible, multi-pane layouts.

## Core Concepts
- **Windows**: Individual content panes
- **Splits**: Divisions between windows
- **Workspaces**: Collections of window arrangements

## Architecture
The system uses a binary tree structure to represent the layout hierarchy.`;
        }
        else if (filePath === '/docs/getting-started.md') {
          content = `# Getting Started
          
## Installation
\`\`\`bash
npm install
npm run dev
\`\`\`

## Basic Usage
- **Ctrl+Enter**: Create new window or split vertically
- **Ctrl+Shift+Enter**: Split horizontally
- **Ctrl+Backspace**: Close window
- **Ctrl+Q**: Toggle resize mode`;
        }
        else if (filePath === '/docs/api-reference.md') {
          content = `# API Reference
          
## Components

### WindowManager
The main component that manages the window hierarchy.

\`\`\`jsx
<WindowManager defaultLayout={layout} />
\`\`\`

### CommandBar
Provides a command interface for controlling the window manager.

\`\`\`jsx
<CommandBar onCommand={handleCommand} />
\`\`\``;
        }
        else {
          // For non-markdown files, show a placeholder message
          content = `Content for ${filePath} would be displayed here.`;
        }
        
        setFileContent(content);
        setIsLoading(false);
      }, 300);
    } catch (error) {
      console.error('Error fetching file content:', error);
      setErrorMessage('Failed to load file content. Please try again.');
      setIsLoading(false);
    }
  };

  // Load initial directory contents
  useEffect(() => {
    fetchDirectoryContents();
  }, []);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, updateWindowState]);

  // Toggle folder expansion
  const toggleFolder = (folderPath) => {
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: !prev[folderPath]
    }));
  };

  // Handle file selection
  const handleFileSelect = (file) => {
    setSelectedFile(file);
    
    // If it's a markdown file, fetch its content and show preview
    if (file.name.endsWith('.md')) {
      fetchFileContent(file.path);
      setShowPreview(true);
    } else {
      setFileContent('');
      setShowPreview(false);
    }
  };

  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    if (fileName.endsWith('.md')) return <FileText size={16} className="mr-2" />;
    if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return <Code size={16} className="mr-2" />;
    if (fileName.endsWith('.json')) return <Coffee size={16} className="mr-2" />;
    if (fileName.endsWith('.css')) return <BookOpen size={16} className="mr-2" />;
    return <File size={16} className="mr-2" />;
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center py-1 px-1 rounded hover:bg-stone-700 cursor-pointer ${isExpanded ? 'text-teal-300' : 'text-teal-400'}`}
              onClick={() => toggleFolder(item.path)}
            >
              {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
              <FolderOpen size={16} className="ml-1 mr-2" />
              <span className="text-sm">{item.name}</span>
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
          >
            {getFileIcon(item.name)}
            <span className="text-sm">{item.name}</span>
          </div>
        );
      }
    });
  };

  // Handle command input
  const handleCommand = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      onCommand(cmd);
      e.target.value = '';
      
      // Example commands:
      // - refresh: refresh file list
      // - preview: toggle markdown preview
      if (cmd === 'refresh') {
        fetchDirectoryContents(currentPath);
      } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
        setShowPreview(!showPreview);
      }
    }
  };

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden">
        {/* File tree panel */}
        <div className="w-1/3 border-r border-stone-700 flex flex-col overflow-hidden">
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center">
            <span>PROJECT FILES</span>
          </div>
          
          <div className="flex-1 overflow-auto">
            {isLoading && !fileContent ? (
              <div className="flex items-center justify-center h-full">
                <span className="text-teal-300">Loading...</span>
              </div>
            ) : errorMessage ? (
              <div className="p-2 text-red-400">{errorMessage}</div>
            ) : (
              <div className="p-2 font-mono">
                {renderFileTree(files)}
              </div>
            )}
          </div>
          
          <div className="p-2 border-t border-stone-700 text-xs">
            {selectedFile ? selectedFile.path : currentPath}
          </div>
        </div>
        
        {/* File preview panel - only shown for markdown files */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {selectedFile && showPreview ? (
            <>
              <div className="p-2 border-b border-stone-700 font-mono text-sm">
                <span>{selectedFile.name}</span>
              </div>
              
              <div className="flex-1 overflow-auto p-4">
                {isLoading ? (
                  <div className="flex items-center justify-center h-full">
                    <span className="text-teal-300">Loading content...</span>
                  </div>
                ) : (
                  <div className="markdown-preview text-teal-50">
                    {selectedFile.name.endsWith('.md') ? (
                      <div 
                        dangerouslySetInnerHTML={{ 
                          __html: converter.makeHtml(fileContent) 
                        }} 
                        className="markdown-content"
                      />
                    ) : (
                      <pre className="font-mono text-sm whitespace-pre-wrap">
                        {fileContent}
                      </pre>
                    )}
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="flex items-center justify-center h-full text-stone-600">
              <div className="text-center">
                <FileText size={48} className="mx-auto mb-4" />
                <p>Select a markdown file to preview</p>
                <p className="text-xs mt-2">Use the 'preview' command to toggle preview mode</p>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Command input */}
      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="text-teal-400">$</span>
        <input
          type="text"
          onKeyDown={handleCommand}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none focus:ring-1 focus:ring-teal-500"
          autoFocus
        />
      </div>
    </div>
  );
};

export default ExplorerWindow;

================
File: components/windows/imageWindow.jsx
================
import React, { useState, useEffect } from 'react';
import { Image as ImageIcon } from 'lucide-react';
import dhakmir from '../../assets/dhakmir-01.png';  // Default image
import martell from '../../assets/Martell2.png';    // Alternative image

const ImageWindow = ({ nodeId, onCommand, windowState, updateWindowState }) => {
  // Use state from windowState or initialize with defaults
  const [imageSrc, setImageSrc] = useState(windowState?.imageSrc || dhakmir);
  const [imageAlt, setImageAlt] = useState(windowState?.imageAlt || 'dhakmir');

  // Update window state when image changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        imageSrc,
        imageAlt
      });
    }
  }, [imageSrc, imageAlt, updateWindowState]);

  // Handle image switching command
  const handleImageCommand = (command) => {
    if (command === 'switch') {
      if (imageSrc === dhakmir) {
        setImageSrc(martell);
        setImageAlt('martell');
      } else {
        setImageSrc(dhakmir);
        setImageAlt('dhakmir');
      }
      return true;
    }
    return false;
  };

  return (
    <div className="h-full w-full flex flex-col bg-stone-900">
      {/* Container div with relative positioning */}
      <div className="flex-1 relative">
        {/* Image absolutely positioned to fill space while staying centered */}
        <img 
          src={imageSrc} 
          alt={imageAlt} 
          className="absolute inset-0 w-full h-full object-contain m-auto"
        />
      </div>

      {/* Command input */}
      <div className="p-4 flex items-center gap-2">
        <span className="text-teal-400">$</span>
        <input
          type="text"
          className="flex-1 bg-transparent outline-none text-teal-400 font-mono"
          onKeyDown={(e) => {
            if (e.key === 'Enter' && e.target.value.trim()) {
              const command = e.target.value.trim();
              // First try our custom image commands
              const handled = handleImageCommand(command);
              // If not handled, pass to the general command handler
              if (!handled) {
                onCommand(command);
              }
              e.target.value = '';
            }
          }}
        />
      </div>
      <div className="p-2 text-xs text-teal-600 text-center">
        Type "switch" to toggle between images
      </div>
    </div>
  );
};

export default ImageWindow;

================
File: components/windows/index.js
================
import TerminalWindow from './TerminalWindow';
import ExplorerWindow from './ExplorerWindow';
import EditorWindow from './EditorWindow';
import PreviewWindow from './PreviewWindow';
import ImageWindow from './imageWindow';
import withCommandHandling from '../../hocs/withCommandHandling';
import withWindowState from '../../hocs/withWindowState';
import AudioWindow from './AudioWindow';
import ChatWindow from './ChatWindow';
import { WINDOW_TYPES } from '../../utils/constants';

// Create enhanced versions of each window component by wrapping them with both HOCs
// First apply withCommandHandling, then withWindowState to provide state management
export const EnhancedTerminalWindow = withWindowState(withCommandHandling(TerminalWindow), WINDOW_TYPES.TERMINAL);
export const EnhancedExplorerWindow = withWindowState(withCommandHandling(ExplorerWindow), WINDOW_TYPES.EXPLORER);
export const EnhancedEditorWindow = withWindowState(withCommandHandling(EditorWindow), WINDOW_TYPES.EDITOR);
export const EnhancedPreviewWindow = withWindowState(withCommandHandling(PreviewWindow), WINDOW_TYPES.CHART);
export const EnhancedImageWindow = withWindowState(withCommandHandling(ImageWindow), WINDOW_TYPES.IMAGE);
export const EnhancedAudioWindow = withWindowState(withCommandHandling(AudioWindow), WINDOW_TYPES.AUDIO);
export const EnhancedChatWindow = withWindowState(withCommandHandling(ChatWindow), WINDOW_TYPES.CHAT);

// Also export the base components in case they're needed
export { TerminalWindow, ExplorerWindow, EditorWindow, PreviewWindow, ChatWindow };

================
File: components/windows/PreviewWindow.jsx
================
import React, { useState } from 'react';

const PreviewWindow = ({ nodeId, onCommand }) => {
  const [command, setCommand] = useState('');
  
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && command.trim()) {
      onCommand(command.trim());
      setCommand('');
    }
  };

  return (
    <div className="p-4 h-full flex flex-col bg-stone-900">
      <div className="flex-1">
        <h1 className="text-2xl text-teal-400 font-mono">Pretend this is a chart</h1>
        <p className="mt-2 text-teal-400 font-mono text-sm">
          these would be the different components
        </p>
      </div>

      {/* Command input */}
      {/* <div className="mt-2 flex items-center gap-2">
        <span className="mr-2">$</span>
        <input
          type="text"
          value={command}
          onChange={(e) => setCommand(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 bg-transparent outline-none text-teal-400"
          placeholder="Type a command..."
        />
      </div> */}
    </div>
  );
};

export default PreviewWindow;

================
File: components/windows/TerminalWindow.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { WINDOW_TYPES } from '../../utils/windowTypes';

const TerminalWindow = ({ onCommand, isActive, nodeId, transformWindow, windowState, updateWindowState }) => {
  // Refs for managing focus and scrolling
  const terminalRef = useRef(null);
  const inputRef = useRef(null);

  // Terminal state - use windowState if available
  const [history, setHistory] = useState(
    windowState?.history || ['SLUMNET TERMINAL - Type "help" for available commands.']
  );
  const [commandHistory, setCommandHistory] = useState(windowState?.commandHistory || []);
  const [currentInput, setCurrentInput] = useState(windowState?.currentInput || '');
  const [historyIndex, setHistoryIndex] = useState(windowState?.historyIndex || -1);

  // Auto-focus when terminal becomes active
  useEffect(() => {
    if (isActive) {
      inputRef.current?.focus();
    }
  }, [isActive]);

  // Auto-scroll to bottom when new output is added
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [history]);

  // Update window state when terminal state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        history,
        commandHistory,
        currentInput,
        historyIndex
      });
    }
  }, [history, commandHistory, currentInput, historyIndex, updateWindowState]);

  const handleTerminalClick = () => {
    inputRef.current?.focus();
  };

  const executeCommand = (command) => {
    setHistory(prev => [...prev, `$ ${command}`]);
    setCommandHistory(prev => [...prev, command]);
  
    const cmd = command.toLowerCase();
  
    if (Object.keys(WINDOW_TYPES).some(type => type.toLowerCase() === cmd)) {
      const requestedType = WINDOW_TYPES[cmd.toUpperCase()];
      transformWindow(nodeId, requestedType);
      return;
    }
  
    let response;
    switch (cmd) {
      case 'help':
        response = [
          'Available commands:',
          '  explorer     - Transform into file explorer',
          '  editor       - Transform into code editor',
          '  terminal     - Transform into terminal',
          '  preview      - Transform into preview window',
          '  help         - Show this help message',
          '  clear        - Clear terminal output',
          '',
          'Keyboard shortcuts:',
          '  Ctrl + Enter       - Split vertically',
          '  Ctrl + Shift + Enter - Split horizontally',
          '  Ctrl + Backspace   - Close window',
          '  /                  - Focus command bar'
        ].join('\n');
        break;
  
      case 'clear':
        setHistory(['Terminal cleared']);
        return;
  
      case 'version':
        response = 'SLUMNET Terminal v1.0.0';
        break;
  
      default:
        response = `Unknown command: ${command}`;
    }
  
    setHistory(prev => [...prev, response]);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && currentInput.trim()) {
      executeCommand(currentInput.trim());
      setCurrentInput('');
      setHistoryIndex(-1);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        const newIndex = historyIndex + 1;
        setHistoryIndex(newIndex);
        setCurrentInput(commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex > -1) {
        const newIndex = historyIndex - 1;
        setHistoryIndex(newIndex);
        setCurrentInput(newIndex === -1 ? '' : commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    }
  };

  return (
    <div 
      className="bg-stone-900 text-teal-400 font-mono text-sm h-full flex flex-col"
      onClick={handleTerminalClick}
    >
      <div ref={terminalRef} className="p-2 flex-1 overflow-auto whitespace-pre-wrap">
        {history.map((line, i) => (
          <div key={i}>{line}</div>
        ))}
      </div>

      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="mr-2">$</span>
        <input
          ref={inputRef}
          type="text"
          value={currentInput}
          onChange={(e) => setCurrentInput(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          autoFocus
        />
      </div>
    </div>
  );
};

export default TerminalWindow;

================
File: config/api.js
================
// API configuration
const API_CONFIG = {
  // Use environment variable with fallback
  BASE_URL: import.meta.env.VITE_API_BASE_URL || '/api',
  
  // Endpoints
  ENDPOINTS: {
    LOGIN: '/login',
    REGISTER: '/register',
    PROFILE: '/profile',
    // Chat endpoints
    CHAT_ROOMS: '/chat/rooms',
    CHAT_MESSAGES: '/chat/rooms/:id/messages',
    CHAT_JOIN: '/chat/rooms/:id/join'
  }
};

export default API_CONFIG;

================
File: context/AuthContext.jsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import API_CONFIG from '../config/api';

// Create the authentication context
const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Check if user is already logged in on component mount
  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      fetchUserProfile(token);
    } else {
      setLoading(false);
    }
  }, []);

  // Fetch user profile using the token
  const fetchUserProfile = async (token) => {
    try {
      const response = await axios.get(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PROFILE}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setUser(response.data);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch user profile:', err);
      localStorage.removeItem('auth_token');
      setError('Session expired. Please login again.');
    } finally {
      setLoading(false);
    }
  };

  // Login function
  const login = async (username, password) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {
        username,
        password
      });
      
      const { token } = response.data;
      localStorage.setItem('auth_token', token);
      
      await fetchUserProfile(token);
      return { success: true };
    } catch (err) {
      setLoading(false);
      const message = err.response?.data?.message || 'Login failed';
      setError(message);
      return { success: false, message };
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('auth_token');
    setUser(null);
    setError(null);
  };

  // Clear any authentication errors
  const clearError = () => {
    setError(null);
  };

  // Context value
  const value = {
    user,
    loading,
    error,
    login,
    logout,
    clearError,
    isAuthenticated: !!user
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

// Custom hook to use the auth context
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: context/WindowStateContext.jsx
================
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';

// Create context
const WindowStateContext = createContext();

// Initial state with different content types
const initialState = {
  windowStates: {}
};

// Context provider component
export function WindowStateProvider({ children }) {
  // Use a ref to store the state to avoid re-renders
  const stateRef = useRef(initialState);
  
  // Use useState just to trigger re-renders when needed
  const [, forceUpdate] = useState({});
  
  // Add a ref to track if we should update localStorage
  const isInitialMount = useRef(true);
  const saveTimeoutRef = useRef(null);

  // Load initial state from localStorage once on mount
  useEffect(() => {
    try {
      const savedState = localStorage.getItem('windowStates');
      if (savedState) {
        const parsedState = JSON.parse(savedState);
        if (parsedState && parsedState.windowStates) {
          // Update the state ref directly
          stateRef.current = parsedState;
          // Force a re-render
          forceUpdate({});
        }
      }
      // Mark initial load as complete
      isInitialMount.current = false;
    } catch (error) {
      console.error('Failed to load window states from localStorage:', error);
      isInitialMount.current = false;
    }
  }, []); // Empty dependency array means this runs once on mount

  // Save to localStorage with debounce
  const saveToLocalStorage = useCallback(() => {
    // Skip saving on initial load
    if (isInitialMount.current) {
      return;
    }
    
    // Clear any existing timeout
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    // Set a new timeout to save the state after a delay
    saveTimeoutRef.current = setTimeout(() => {
      try {
        localStorage.setItem('windowStates', JSON.stringify(stateRef.current));
      } catch (error) {
        console.error('Failed to save window states to localStorage:', error);
      }
    }, 500); // 500ms debounce
  }, []);

  // Action creators
  const setWindowState = useCallback((windowId, windowType, content) => {
    // Update the state ref directly
    stateRef.current = {
      ...stateRef.current,
      windowStates: {
        ...stateRef.current.windowStates,
        [windowId]: {
          type: windowType,
          content
        }
      }
    };
    
    // Save to localStorage
    saveToLocalStorage();
    
    // Force a re-render
    forceUpdate({});
  }, [saveToLocalStorage]);

  const removeWindowState = useCallback((windowId) => {
    // Create a new state object
    const newState = {
      ...stateRef.current,
      windowStates: { ...stateRef.current.windowStates }
    };
    
    // Delete the window state
    delete newState.windowStates[windowId];
    
    // Update the state ref
    stateRef.current = newState;
    
    // Save to localStorage
    saveToLocalStorage();
    
    // Force a re-render
    forceUpdate({});
  }, [saveToLocalStorage]);

  const getWindowState = useCallback((windowId) => {
    return stateRef.current.windowStates[windowId] || null;
  }, []);

  // Create a stable context value
  const contextValue = useMemo(() => ({
    windowStates: stateRef.current.windowStates,
    setWindowState,
    removeWindowState,
    getWindowState
  }), [setWindowState, removeWindowState, getWindowState]);

  return (
    <WindowStateContext.Provider value={contextValue}>
      {children}
    </WindowStateContext.Provider>
  );
}

// Custom hook to use the window state context
export function useWindowState() {
  const context = useContext(WindowStateContext);
  if (!context) {
    throw new Error('useWindowState must be used within a WindowStateProvider');
  }
  return context;
}

================
File: hocs/withCommandHandling.jsx
================
import React from 'react';
import { WINDOW_TYPES } from '../utils/windowTypes';

/**
 * Higher-Order Component that adds command handling capabilities to window components.
 * This HOC provides a standardized way to handle commands across different window types,
 * particularly focusing on window transformation commands.
 *
 * @param {React.Component} WrappedComponent - The window component to enhance with command handling
 * @returns {React.Component} - A new component with command handling capabilities
 */
const withCommandHandling = (WrappedComponent) => {
  // Return a new component that includes the command handling functionality
  return function WithCommandHandling({ 
    transformWindow, // Function to change window type
    nodeId,         // Unique identifier for the window
    ...props        // All other props passed to the window
  }) {
    /**
     * Handles commands entered in the window.
     * Currently supports window transformation commands (e.g., 'terminal', 'editor', etc.)
     * Can be extended to handle other command types in the future.
     *
     * @param {string} command - The command string to process
     * @returns {boolean} - Whether the command was handled
     */
    const handleCommand = (command) => {
      // Convert command to lowercase for case-insensitive comparison
      const cmd = command.toLowerCase();
      
      // Check if the command matches any window type
      // This allows commands like 'terminal', 'editor', 'explorer', 'preview'
      const isWindowTypeCommand = Object.keys(WINDOW_TYPES).some(
        type => type.toLowerCase() === cmd
      );

      if (isWindowTypeCommand) {
        // Get the actual window type constant from our types enum
        const requestedType = WINDOW_TYPES[cmd.toUpperCase()];
        
        // Log the transformation request for debugging
        console.log(`Transforming window ${nodeId} to ${requestedType}`);
        
        // Execute the transformation
        transformWindow(nodeId, requestedType);
        
        // Return true to indicate the command was handled
        return true;
      }
      
      // Return false if the command wasn't handled by this HOC
      // This allows the wrapped component to handle other commands if needed
      return false;
    };
    
    // Render the wrapped component with both the original props
    // and our new command handler
    return (
      <WrappedComponent 
        {...props} 
        transformWindow={transformWindow}
        nodeId={nodeId}
        onCommand={handleCommand}
      />
    );
  };
};

export default withCommandHandling;

================
File: hocs/withWindowState.jsx
================
import React, { useCallback, useMemo } from 'react';
import { useWindowState } from '../context/WindowStateContext';

/**
 * Higher-Order Component that adds state management capabilities to window components.
 * This HOC provides a standardized way to manage window state across different window types.
 *
 * @param {React.Component} WrappedComponent - The window component to enhance with state management
 * @param {string} windowType - The type of window from WINDOW_TYPES
 * @returns {React.Component} - A new component with state management capabilities
 */
const withWindowState = (WrappedComponent, windowType) => {
  return function WithWindowState({ 
    nodeId,
    ...props
  }) {
    // Access the window state context
    const { getWindowState, setWindowState } = useWindowState();
    
    // Get the current state or use an empty object if none exists
    // Use useMemo to avoid recreating the object on every render
    const currentState = useMemo(() => {
      return getWindowState(nodeId)?.content || {};
    }, [getWindowState, nodeId]);
    
    // Create an updater function for the component to use
    // Use useCallback to avoid recreating the function on every render
    const updateWindowState = useCallback((updates) => {
      // Get the latest state to ensure we're working with current data
      const latestState = getWindowState(nodeId)?.content || {};
      
      // Allow both object and function updaters
      const newContent = typeof updates === 'function'
        ? updates(latestState)
        : { ...latestState, ...updates };
        
      setWindowState(nodeId, windowType, newContent);
    }, [getWindowState, setWindowState, nodeId, windowType]);
    
    return (
      <WrappedComponent
        {...props}
        nodeId={nodeId}
        windowState={currentState}
        updateWindowState={updateWindowState}
      />
    );
  };
};

export default withWindowState;

================
File: hooks/useForceUpdate.js
================
import { useState } from 'react';

export function useForceUpdate() {
    const [state, setState] = useState(0);
    return () => setState((state) => state + 1);
  }

================
File: hooks/useKeyboardShortcuts.js
================
import { useEffect } from 'react';
import { WINDOW_TYPES } from '../utils/windowTypes';

/**
 * A custom hook that manages keyboard shortcuts for window operations.
 * This hook centralizes all keyboard-related logic for the window manager.
 * 
 * @param {Object} handlers - Object containing callback functions for various window operations
 * @param {Function} handlers.onSplitVertical - Handler for vertical split command
 * @param {Function} handlers.onSplitHorizontal - Handler for horizontal split command
 * @param {Function} handlers.onClose - Handler for window close command
 * @param {Function} handlers.createNewWindow - Handler for creating new windows
 * @param {boolean} hasActiveWindow - Whether there is currently an active window
 * @param {boolean} hasRootNode - Whether there is a root node in the tree
 */
export const useKeyboardShortcuts = ({
  onSplitVertical,
  onSplitHorizontal,
  onClose,
  createNewWindow,
  hasActiveWindow,
  hasRootNode,
  isResizeMode = false,
  setIsResizeMode = () => console.warn('setIsResizeMode not provided'),
  resizeActiveWindow = () => console.warn('resizeActiveWindow not provided'),
  isMoveMode = false,
  setIsMoveMode = () => console.warn('setIsMoveMode not provided'),
  moveSourceWindowId = null,
  setMoveSourceWindowId = () => console.warn('setMoveSourceWindowId not provided'),
  swapWindows = () => console.warn('swapWindows not provided'),
  activeNodeId = null
}) => {
  // Log the props for debugging
  console.log('useKeyboardShortcuts props:', {
    isResizeMode,
    isMoveMode,
    moveSourceWindowId,
    activeNodeId,
    hasSetIsResizeMode: typeof setIsResizeMode === 'function',
    hasSetIsMoveMode: typeof setIsMoveMode === 'function',
    hasSetMoveSourceWindowId: typeof setMoveSourceWindowId === 'function',
    hasSwapWindows: typeof swapWindows === 'function'
  });
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Handle resize mode toggle
      if (e.ctrlKey && e.key === 'q') {
        e.preventDefault();
        setIsResizeMode(!isResizeMode);
        // Exit move mode if it's active
        if (isMoveMode) {
          setIsMoveMode(false);
          setMoveSourceWindowId(null);
        }
        return;
      }

      // Handle move mode toggle
      if (e.ctrlKey && e.key === 'm') {
        e.preventDefault();
        e.stopPropagation(); // Stop event propagation to prevent multiple handlers
        console.log('Move mode toggle pressed in useKeyboardShortcuts');
        console.log('setIsMoveMode type:', typeof setIsMoveMode);
        console.log('Current isMoveMode:', isMoveMode);
        console.log('Component ID:', Math.random()); // Add a random ID to identify which instance is handling the event
        
        // Check if setIsMoveMode is a function before calling it
        if (typeof setIsMoveMode === 'function') {
          // Toggle move mode with a direct call to ensure it works
          const newMoveMode = !isMoveMode;
          console.log('Setting move mode to:', newMoveMode);
          setIsMoveMode(newMoveMode);
          
          // Reset source window when toggling off
          if (isMoveMode && typeof setMoveSourceWindowId === 'function') {
            setMoveSourceWindowId(null);
          }
          
          // Exit resize mode if it's active
          if (isResizeMode && typeof setIsResizeMode === 'function') {
            setIsResizeMode(false);
          }
        } else {
          console.error('setIsMoveMode is not a function');
        }
        return;
      }

      // Handle move mode Enter key
      if (isMoveMode && e.key === 'Enter') {
        e.preventDefault();
        console.log('Enter key pressed in move mode');
        
        if (!moveSourceWindowId) {
          // First window selection
          console.log('Selected first window for move:', activeNodeId);
          if (typeof setMoveSourceWindowId === 'function') {
            setMoveSourceWindowId(activeNodeId);
          } else {
            console.error('setMoveSourceWindowId is not a function');
          }
        } else {
          // Second window selection - perform the swap
          console.log('Selected second window for move:', activeNodeId);
          if (typeof swapWindows === 'function') {
            swapWindows(moveSourceWindowId, activeNodeId);
          } else {
            console.error('swapWindows is not a function');
          }
        }
        return;
      }

      // Handle resize mode arrow keys
      if (isResizeMode && !e.ctrlKey) {
        switch (e.key) {
          case 'ArrowLeft':
            e.preventDefault();
            resizeActiveWindow('left');
            break;
          case 'ArrowRight':
            e.preventDefault();
            resizeActiveWindow('right');
            break;
          case 'ArrowUp':
            e.preventDefault();
            resizeActiveWindow('up');
            break;
          case 'ArrowDown':
            e.preventDefault();
            resizeActiveWindow('down');
            break;
        }
        return;
      }

      // Handle other keyboard shortcuts...
      if (e.ctrlKey) {
        if (e.key === 'Enter') {
          e.preventDefault();
          if (e.shiftKey) {
            hasActiveWindow ? onSplitVertical() : createNewWindow();
          } else {
            hasActiveWindow ? onSplitHorizontal() : createNewWindow();
          }
        } else if ((e.key === 'Backspace' || e.key === 'Delete') && hasActiveWindow && hasRootNode) {
          e.preventDefault();
          onClose();
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [
    onSplitVertical,
    onSplitHorizontal,
    onClose,
    createNewWindow,
    hasActiveWindow,
    hasRootNode,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows,
    activeNodeId
  ]);
};

================
File: hooks/useWindowManager.js
================
import { useState, useCallback, useEffect, useRef } from 'react';
import { Node } from '../models/Node';
import { WINDOW_TYPES } from '../utils/windowTypes';
import { 
  splitNodeById, 
  removeNodeById, 
  findNodeById, 
  findAllWindowIds,
  updateSplitRatio,
} from '../utils/treeUtils';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowState } from '../context/WindowStateContext';
import { 
  MIN_WINDOW_WIDTH_PX, 
  MIN_WINDOW_HEIGHT_PX 
} from '../utils/windowSizeConstants';

export const useWindowManager = ({ defaultLayout = null, onFlashBorder = null } = {}) => {
  // Workspace state
  const [workspaces, setWorkspaces] = useState([
    { id: 1, name: 'Main', root: defaultLayout, activeNodeId: null, terminalStates: {} },
    { id: 2, name: 'Code', root: null, activeNodeId: null, terminalStates: {} },
    { id: 3, name: 'Terminal', root: null, activeNodeId: null, terminalStates: {} },
    { id: 4, name: 'Preview', root: null, activeNodeId: null, terminalStates: {} }
  ]);
  const [currentWorkspaceIndex, setCurrentWorkspaceIndex] = useState(0);
  const [isResizeMode, setIsResizeMode] = useState(false);
  const [isMoveMode, setIsMoveMode] = useState(false);
  const [moveSourceWindowId, setMoveSourceWindowId] = useState(null);

  // Get current workspace data directly from workspaces array
  const currentWorkspace = workspaces[currentWorkspaceIndex];
  const rootNode = currentWorkspace.root;
  const activeNodeId = currentWorkspace.activeNodeId;
  const terminalStates = currentWorkspace.terminalStates;

  // Create setActiveNodeId function that updates the workspace
  const setActiveNodeId = useCallback((nodeId) => {
    setWorkspaces(prev => {
      const updated = [...prev];
      updated[currentWorkspaceIndex] = {
        ...updated[currentWorkspaceIndex],
        activeNodeId: nodeId
      };
      return updated;
    });
  }, [currentWorkspaceIndex]);

  // Update workspace state
  const updateWorkspace = useCallback((updater) => {
    setWorkspaces(prev => {
      const updated = [...prev];
      if (typeof updater === 'function') {
        updated[currentWorkspaceIndex] = {
          ...updated[currentWorkspaceIndex],
          ...updater(updated[currentWorkspaceIndex])
        };
      } else {
        updated[currentWorkspaceIndex] = {
          ...updated[currentWorkspaceIndex],
          ...updater
        };
      }
      return updated;
    });
  }, [currentWorkspaceIndex]);

  const switchWorkspace = useCallback((target) => {
    console.log('Switching to:', target);
    if (typeof target === 'number' && target >= 0 && target < 4) {
      setCurrentWorkspaceIndex(target);
    } else if (target === 'right' || target === 'left') {
      setCurrentWorkspaceIndex(prev => {
        const newIndex = target === 'right' 
          ? (prev + 1) % 4 
          : prev - 1 < 0 ? 3 : prev - 1;
        console.log('New index:', newIndex);
        return newIndex;
      });
    }
  }, [setCurrentWorkspaceIndex]);

  useEffect(() => {
    const handleWorkspaceKeys = (e) => {
      if (e.ctrlKey && e.altKey) {
        switch (e.key) {
          case 'ArrowRight':
            e.preventDefault();
            switchWorkspace('right');
            break;
          case 'ArrowLeft':
            e.preventDefault();
            switchWorkspace('left');
            break;
          // Removed 'n' key handler for creating new workspaces
        }
      }
    };

    window.addEventListener('keydown', handleWorkspaceKeys);
    return () => window.removeEventListener('keydown', handleWorkspaceKeys);
  }, [switchWorkspace]);

  // Window navigation functions
  const navigateToWindow = useCallback((direction) => {
    if (!activeNodeId || !rootNode) return;
  
    const allWindows = getWindowBounds(rootNode);
    const activeWindow = allWindows.find(w => w.id === activeNodeId);
    if (!activeWindow) return;
  
    // Filter out the active window
    const otherWindows = allWindows.filter(w => w.id !== activeNodeId);
    
    // If no other windows, nothing to navigate to
    if (otherWindows.length === 0) return;
    
    // Calculate the active window's center
    const activeBounds = activeWindow.bounds;
    
    // Helper function to calculate overlap percentage between windows
    const calculateOverlap = (window1, window2, isHorizontal) => {
      if (isHorizontal) {
        // Calculate horizontal overlap
        const overlapStart = Math.max(window1.left, window2.left);
        const overlapEnd = Math.min(window1.right, window2.right);
        if (overlapEnd <= overlapStart) return 0; // No overlap
        
        const overlapWidth = overlapEnd - overlapStart;
        const window1Width = window1.right - window1.left;
        
        return overlapWidth / window1Width;
      } else {
        // Calculate vertical overlap
        const overlapStart = Math.max(window1.top, window2.top);
        const overlapEnd = Math.min(window1.bottom, window2.bottom);
        if (overlapEnd <= overlapStart) return 0; // No overlap
        
        const overlapHeight = overlapEnd - overlapStart;
        const window1Height = window1.bottom - window1.top;
        
        return overlapHeight / window1Height;
      }
    };
    
    // Find windows in the specified direction with a more relaxed approach
    let candidateWindows = [];
    const tolerance = 0.1; // 10% tolerance for adjacency
    
    switch (direction) {
      case 'up':
        // Windows that are above the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be above the active window
          if (bounds.bottom > activeBounds.top) return false;
          
          // Calculate horizontal overlap
          const overlap = calculateOverlap(activeBounds, bounds, true);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'down':
        // Windows that are below the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be below the active window
          if (bounds.top < activeBounds.bottom) return false;
          
          // Calculate horizontal overlap
          const overlap = calculateOverlap(activeBounds, bounds, true);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'left':
        // Windows that are to the left of the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be to the left of the active window
          if (bounds.right > activeBounds.left) return false;
          
          // Calculate vertical overlap
          const overlap = calculateOverlap(activeBounds, bounds, false);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'right':
        // Windows that are to the right of the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be to the right of the active window
          if (bounds.left < activeBounds.right) return false;
          
          // Calculate vertical overlap
          const overlap = calculateOverlap(activeBounds, bounds, false);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
    }
    
    // If no candidates found, return
    if (candidateWindows.length === 0) return;
    
    // Calculate scores for each candidate window based on:
    // 1. Overlap percentage (higher is better)
    // 2. Distance from active window (lower is better)
    const scoredWindows = candidateWindows.map(window => {
      const bounds = window.bounds;
      let overlapScore = 0;
      let distanceScore = 0;
      
      switch (direction) {
        case 'up':
          overlapScore = calculateOverlap(activeBounds, bounds, true);
          distanceScore = activeBounds.top - bounds.bottom;
          break;
          
        case 'down':
          overlapScore = calculateOverlap(activeBounds, bounds, true);
          distanceScore = bounds.top - activeBounds.bottom;
          break;
          
        case 'left':
          overlapScore = calculateOverlap(activeBounds, bounds, false);
          distanceScore = activeBounds.left - bounds.right;
          break;
          
        case 'right':
          overlapScore = calculateOverlap(activeBounds, bounds, false);
          distanceScore = bounds.left - activeBounds.right;
          break;
      }
      
      // Normalize distance score (closer is better)
      const normalizedDistanceScore = 1 / (1 + distanceScore);
      
      // Calculate final score with higher weight on overlap
      const finalScore = (overlapScore * 0.7) + (normalizedDistanceScore * 0.3);
      
      return {
        window,
        overlapScore,
        distanceScore,
        finalScore
      };
    });
    
    // Sort by final score (higher is better)
    scoredWindows.sort((a, b) => b.finalScore - a.finalScore);
    
    // Select the window with the highest score
    const nextWindow = scoredWindows[0].window;
    
    if (nextWindow) {
      setActiveNodeId(nextWindow.id);
    }
  }, [activeNodeId, rootNode, setActiveNodeId]);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (!e.ctrlKey) return;
  
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          navigateToWindow('left');
          break;
        case 'ArrowRight':
          e.preventDefault();
          navigateToWindow('right');
          break;
        case 'ArrowUp':
          e.preventDefault();
          navigateToWindow('up');
          break;
        case 'ArrowDown':
          e.preventDefault();
          navigateToWindow('down');
          break;
      }
    };
  
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [navigateToWindow]);

  // Get window state management functions
  const { getWindowState, setWindowState, removeWindowState } = useWindowState();

  // Helper function to convert percentage-based bounds to pixel dimensions
  const calculatePixelDimensions = useCallback((bounds) => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    const pixelDimensions = {
      width: (bounds.width / 100) * windowWidth,
      height: (bounds.height / 100) * windowHeight
    };
    
    console.log('Window dimensions (percentage):', bounds);
    console.log('Window dimensions (pixels):', pixelDimensions);
    console.log('Minimum required:', MIN_WINDOW_WIDTH_PX, 'x', MIN_WINDOW_HEIGHT_PX);
    console.log('Is too small:', 
      pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
      pixelDimensions.height < MIN_WINDOW_HEIGHT_PX
    );
    
    return pixelDimensions;
  }, []);

  // Helper function to check if a resize operation would result in windows that are too small
  const wouldViolateMinSize = useCallback((root, direction, affectedSplits, resizeStep) => {
    console.log('Checking if resize would violate minimum size...');
    console.log('Direction:', direction);
    console.log('Affected splits:', affectedSplits.length);
    console.log('Browser window size:', window.innerWidth, 'x', window.innerHeight);
    
    // Create a deep copy of the root to simulate the resize
    const simulatedRoot = JSON.parse(JSON.stringify(root));
    
    // Apply the resize to the simulated root
    affectedSplits.forEach(({ node: originalNode, targetInFirst, isRightSide, isBottomSide }) => {
      // Find the corresponding node in the simulated root
      const simulatedNode = findNodeById(simulatedRoot, originalNode.id);
      if (!simulatedNode) return;
      
      console.log('Simulating resize on node:', simulatedNode.id);
      console.log('Original split ratio:', simulatedNode.splitRatio);
      
      // Determine effective direction
      let effectiveDirection = direction;
      if (isRightSide && (direction === 'left' || direction === 'right')) {
        effectiveDirection = direction === 'left' ? 'right' : 'left';
      }
      if (isBottomSide && (direction === 'up' || direction === 'down')) {
        effectiveDirection = direction === 'up' ? 'down' : 'up';
      }
      
      console.log('Effective direction:', effectiveDirection);
      
      // Apply the resize
      switch (effectiveDirection) {
        case 'left': // Shrink width
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          } else {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          }
          break;
          
        case 'right': // Grow width
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          } else {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          }
          break;
          
        case 'up': // Shrink height
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          } else {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          }
          break;
          
        case 'down': // Grow height
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          } else {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          }
          break;
      }
      
      console.log('New split ratio:', simulatedNode.splitRatio);
    });
    
    // Calculate the bounds of all windows after the simulated resize
    const simulatedWindows = getWindowBounds(simulatedRoot);
    console.log('Number of windows to check:', simulatedWindows.length);
    
    // Check if any window would be smaller than the minimum size
    const tooSmallWindows = simulatedWindows.filter(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
             pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
    });
    
    const wouldViolate = tooSmallWindows.length > 0;
    console.log('Windows that would be too small:', tooSmallWindows.length);
    console.log('Would violate minimum size:', wouldViolate);
    
    return wouldViolate;
  }, [calculatePixelDimensions]);

  // Define splitWindow before createNewWindow since createNewWindow depends on it
  const splitWindow = useCallback((nodeId, direction, newWindow = null) => {
    // Create a new terminal window if one wasn't provided
    if (!newWindow) {
      newWindow = Node.createWindow(Date.now(), WINDOW_TYPES.TERMINAL);
      
      // Initialize terminal state with default content
      const initialContent = {
        history: ['Welcome to the Terminal! Type "help" for available commands.'],
        commandHistory: []
      };
      
      // Set the initial window state for the terminal
      setWindowState(newWindow.id, WINDOW_TYPES.TERMINAL, initialContent);
      
      // Also update the workspace terminal states
      updateWorkspace(workspace => ({
        ...workspace,
        terminalStates: {
          ...workspace.terminalStates,
          [newWindow.id]: {
            history: initialContent.history,
            commandHistory: initialContent.commandHistory
          }
        }
      }));
    }
    
    // Check if splitting would result in windows that are too small
    const simulatedRoot = JSON.parse(JSON.stringify(rootNode));
    const simulatedSplitRoot = splitNodeById(simulatedRoot, nodeId, direction, JSON.parse(JSON.stringify(newWindow)));
    
    // Calculate the bounds of all windows after the simulated split
    const simulatedWindows = getWindowBounds(simulatedSplitRoot);
    console.log('Simulating split - number of windows:', simulatedWindows.length);
    
    // Check if any window would be smaller than the minimum size
    const tooSmallWindows = simulatedWindows.filter(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
             pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
    });
    
    const wouldViolate = tooSmallWindows.length > 0;
    console.log('Split would create windows that are too small:', wouldViolate);
    
    if (wouldViolate) {
      console.log('Split blocked: would result in windows smaller than minimum size');
      // Flash the active window border to indicate we've hit the minimum size
      if (onFlashBorder && activeNodeId) {
        onFlashBorder(activeNodeId);
      }
      return;
    }
  
    updateWorkspace(workspace => ({
      ...workspace,
      root: splitNodeById(workspace.root, nodeId, direction, newWindow)
    }));
  }, [updateWorkspace, getWindowState, setWindowState, rootNode, calculatePixelDimensions]);

  const createNewWindow = useCallback((windowType) => {
    const newNode = Node.createWindow(Date.now(), windowType || WINDOW_TYPES.TERMINAL);
    
    // Initialize window state based on window type
    const initialContent = {};
    
    if (windowType === WINDOW_TYPES.TERMINAL) {
      // Initialize terminal state
      initialContent.history = ['Welcome to the Terminal! Type "help" for available commands.'];
      initialContent.commandHistory = [];
      
      updateWorkspace(workspace => ({
        ...workspace,
        terminalStates: {
          ...workspace.terminalStates,
          [newNode.id]: {
            history: initialContent.history,
            commandHistory: initialContent.commandHistory
          }
        }
      }));
    } else if (windowType === WINDOW_TYPES.EDITOR) {
      // Initialize editor state with default content
      initialContent.text = `function hello() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhello();`;
    } else if (windowType === WINDOW_TYPES.EXPLORER) {
      // Initialize explorer state
      initialContent.currentPath = '/';
      initialContent.selectedItem = null;
    }
    
    // Set the initial window state
    setWindowState(newNode.id, newNode.windowType, initialContent);
    
    if (!rootNode) {
      // First window, always allowed
      updateWorkspace({
        root: newNode,
        activeNodeId: newNode.id
      });
      return;
    }
    
    if (!activeNodeId) {
      // No active window, but we have a root - this is unusual
      // Let's check if we can add a window without violating minimum size
      const simulatedRoot = JSON.parse(JSON.stringify(rootNode));
      const simulatedWindows = getWindowBounds(simulatedRoot);
      
      // Check if existing windows are already too small
      const tooSmallWindows = simulatedWindows.filter(window => {
        const pixelDimensions = calculatePixelDimensions(window.bounds);
        return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
               pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
      });
      
      if (tooSmallWindows.length > 0) {
        console.log('Cannot create new window: existing windows are already too small');
        // Flash the active window border to indicate we've hit the minimum size
        if (onFlashBorder && activeNodeId) {
          onFlashBorder(activeNodeId);
        }
        return;
      }
      
      updateWorkspace({
        root: newNode,
        activeNodeId: newNode.id
      });
      return;
    }
    
    // Use splitWindow which already has minimum size checks
    splitWindow(activeNodeId, 'vertical', newNode);
    setActiveNodeId(newNode.id);
  }, [rootNode, activeNodeId, updateWorkspace, setActiveNodeId, setWindowState, calculatePixelDimensions, splitWindow]);

  const closeWindow = useCallback((nodeId) => {
    // Clean up window state when closing a window
    removeWindowState(nodeId);
    
    if (rootNode.type === 'window' && rootNode.id === nodeId) {
      updateWorkspace({
        root: null,
        activeNodeId: null
      });
      return;
    }

    const newRoot = JSON.parse(JSON.stringify(rootNode));
    const result = removeNodeById(newRoot, nodeId);
    
    if (activeNodeId === nodeId && result) {
      const nextWindowId = findAllWindowIds(result)[0] || null;
      updateWorkspace({
        root: result,
        activeNodeId: nextWindowId
      });
    } else {
      updateWorkspace({
        root: result
      });
    }
  }, [rootNode, activeNodeId, updateWorkspace, removeWindowState]);

  const transformWindow = useCallback((nodeId, newType) => {
    const newRoot = JSON.parse(JSON.stringify(rootNode));
    
    // Get the current window state before transformation
    const currentWindowState = getWindowState(nodeId);
    
    const updateNodeInTree = (node) => {
      if (!node) return null;
      
      if (node.type === 'window' && node.id === nodeId) {
        // Update the window type
        node.windowType = newType;
        
        // Update the window state with the new type but preserve content
        if (currentWindowState) {
          setWindowState(nodeId, newType, currentWindowState.content);
        }
        
        return true;
      }
      
      if (node.type === 'split') {
        return updateNodeInTree(node.first) || updateNodeInTree(node.second);
      }
      
      return false;
    };
    
    const updated = updateNodeInTree(newRoot);
    if (updated) {
      updateWorkspace({
        root: newRoot
      });
    }
  }, [rootNode, updateWorkspace, getWindowState, setWindowState]);

  const handleCommand = useCallback((command) => {
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();

    switch (cmd) {
      case 'split':
        if (activeNodeId) {
          const direction = parts[1] === 'vertical' ? 'vertical' : 'horizontal';
          splitWindow(activeNodeId, direction);
        }
        break;
      case 'close':
        if (activeNodeId) {
          closeWindow(activeNodeId);
        }
        break;
    }
  }, [activeNodeId, splitWindow, closeWindow]);

  const resizeActiveWindow = useCallback((direction) => {
    if (!activeNodeId || !rootNode || !isResizeMode) return;
  
    updateWorkspace(workspace => {
      const newRoot = JSON.parse(JSON.stringify(workspace.root));
      
      // Helper function to find all affected splits and determine if window is in second child
      const findAffectedSplits = (node, targetId) => {
        if (!node) return [];
        
        const splits = [];
        if (node.type === 'split') {
          const targetInFirst = findNodeById(node.first, targetId);
          const targetInSecond = findNodeById(node.second, targetId);
          
          if (targetInFirst || targetInSecond) {
            // Add this split if it matches our resize direction
            if ((direction === 'left' || direction === 'right') && node.direction === 'horizontal') {
              splits.push({ 
                node, 
                targetInFirst: !!targetInFirst,
                // If this is a horizontal split and window is in second child, it's on the right side
                isRightSide: !!targetInSecond && node.direction === 'horizontal'
              });
            }
            if ((direction === 'up' || direction === 'down') && node.direction === 'vertical') {
              splits.push({ 
                node, 
                targetInFirst: !!targetInFirst,
                isRightSide: !!targetInSecond && node.direction === 'horizontal',
                isBottomSide: !!targetInSecond && node.direction === 'vertical'
              });
            }
          }
          
          splits.push(...findAffectedSplits(node.first, targetId));
          splits.push(...findAffectedSplits(node.second, targetId));
        }
        
        return splits;
      };
  
      const affectedSplits = findAffectedSplits(newRoot, activeNodeId);
      const resizeStep = 0.05;
      
      // We no longer block resize operations based on minimum size
      // Just log that windows will be below minimum size
      const willViolateMinSize = wouldViolateMinSize(newRoot, direction, affectedSplits, resizeStep);
      if (willViolateMinSize) {
        console.log('Windows will be below minimum size, but resize is allowed');
      }
  
      // Apply resize to all affected splits
      affectedSplits.forEach(({ node, targetInFirst, isRightSide, isBottomSide }) => {
        // Determine if we need to invert the direction based on window position
        let effectiveDirection = direction;
        if (isRightSide && (direction === 'left' || direction === 'right')) {
          effectiveDirection = direction === 'left' ? 'right' : 'left';
        }
        if (isBottomSide && (direction === 'up' || direction === 'down')) {
          effectiveDirection = direction === 'up' ? 'down' : 'up';
        }
        
        switch (effectiveDirection) {
          case 'left': // Shrink width
            if (targetInFirst) {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            } else {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            }
            break;
            
          case 'right': // Grow width
            if (targetInFirst) {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            } else {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            }
            break;
            
          case 'up': // Shrink height
            if (targetInFirst) {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            } else {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            }
            break;
            
          case 'down': // Grow height
            if (targetInFirst) {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            } else {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            }
            break;
        }
      });
  
      return { ...workspace, root: newRoot };
    });
  }, [activeNodeId, rootNode, isResizeMode, updateWorkspace, wouldViolateMinSize]);
  
  // Function to swap two windows in the tree
  const swapWindows = useCallback((sourceId, targetId) => {
    if (!sourceId || !targetId || sourceId === targetId) return;

    console.log('Swapping windows:', sourceId, targetId);

    updateWorkspace(workspace => {
      const newRoot = JSON.parse(JSON.stringify(workspace.root));
      
      // Find the nodes to swap
      const sourceNode = findNodeById(newRoot, sourceId);
      const targetNode = findNodeById(newRoot, targetId);
      
      if (!sourceNode || !targetNode) {
        console.log('Could not find one or both nodes to swap');
        return workspace;
      }
      
      // Swap the window types and states
      const tempWindowType = sourceNode.windowType;
      const tempState = sourceNode.state;
      
      sourceNode.windowType = targetNode.windowType;
      sourceNode.state = targetNode.state;
      
      targetNode.windowType = tempWindowType;
      targetNode.state = tempState;
      
      return { ...workspace, root: newRoot };
    });
    
    // Exit move mode after swapping
    setIsMoveMode(false);
    setMoveSourceWindowId(null);
  }, [updateWorkspace]);

  // Add direct keyboard event listener for move mode
  useEffect(() => {
    const handleMoveKeyDown = (e) => {
      // Handle move mode toggle
      if (e.ctrlKey && e.key === 'm') {
        e.preventDefault();
        e.stopPropagation(); // Stop event propagation to prevent multiple handlers
        console.log('Move mode toggle pressed directly in useWindowManager');
        console.log('Current isMoveMode:', isMoveMode);
        
        // Toggle move mode
        setIsMoveMode(!isMoveMode);
        
        // Reset source window when toggling off
        if (isMoveMode) {
          setMoveSourceWindowId(null);
        }
      }
      
      // Handle move mode Enter key
      if (isMoveMode && e.key === 'Enter') {
        e.preventDefault();
        e.stopPropagation();
        console.log('Enter key pressed in move mode');
        
        if (!moveSourceWindowId) {
          // First window selection
          console.log('Selected first window for move:', activeNodeId);
          setMoveSourceWindowId(activeNodeId);
        } else {
          // Second window selection - perform the swap
          console.log('Selected second window for move:', activeNodeId);
          swapWindows(moveSourceWindowId, activeNodeId);
        }
      }
    };
    
    // Add the event listener with capture: true to ensure it runs before other listeners
    window.addEventListener('keydown', handleMoveKeyDown, { capture: true });
    return () => window.removeEventListener('keydown', handleMoveKeyDown, { capture: true });
  }, [isMoveMode, moveSourceWindowId, activeNodeId, setIsMoveMode, setMoveSourceWindowId, swapWindows]);

  // Debug checks for modes
  useEffect(() => {
    console.log('Resize mode:', isResizeMode);
  }, [isResizeMode]);

  useEffect(() => {
    console.log('Move mode:', isMoveMode);
    if (!isMoveMode) {
      setMoveSourceWindowId(null);
    }
  }, [isMoveMode]);

  // Function to update terminal state
  const updateTerminalState = useCallback((terminalId, newState) => {
    updateWorkspace(workspace => ({
      ...workspace,
      terminalStates: {
        ...workspace.terminalStates,
        [terminalId]: newState
      }
    }));
  }, [updateWorkspace]);

  return {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    createNewWindow,
    splitWindow,
    closeWindow,
    transformWindow,
    handleCommand,
    navigateToWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    currentWorkspaceIndex,
    workspaceCount: 4,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  };
};

================
File: index.html
================
// index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Oxygen+Mono&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Window Manager</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles.css'
import './App.css'
import { WindowStateProvider } from './context/WindowStateContext'
import { AuthProvider } from './context/AuthContext'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthProvider>
      <WindowStateProvider>
        <App />
      </WindowStateProvider>
    </AuthProvider>
  </React.StrictMode>,
)

================
File: models/Node.js
================
/**
 * Node class representing a window or split in the window management system.
 * Forms the foundation of our tree-based window layout structure.
 */
export class Node {
  constructor(id, type) {
    this.id = id;
    this.type = type;
    this.windowType = null;
    this.direction = null;
    this.first = null;
    this.second = null;
    this.splitRatio = 0.5;
    this.minimumSize = 20;
    this.state = null;
  }

  static createWindow(id, windowType, state = null) {
    const node = new Node(id, 'window');
    node.windowType = windowType;
    node.state = state;
    return node;
  }

  static createSplit(direction, first, second, ratio = 0.5) {
    const node = new Node(Date.now(), 'split');
    node.direction = direction;
    node.first = first;
    node.second = second;
    node.splitRatio = ratio;
    return node;
  }
}

================
File: styles.css
================
@import "tailwindcss";

@tailwind base;

@layer base {
  html {
    font-family: 'Oxygen Mono', monospace;
  }
}
@tailwind components;
@tailwind utilities;

html, body, #root {
  width: 100%;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* Custom scrollbar styling to match the application theme */
::-webkit-scrollbar {
  width: 8px;  /* for vertical scrollbars */
  height: 8px; /* for horizontal scrollbars */
}

::-webkit-scrollbar-track {
  background: #292524; /* stone-800 */
}

::-webkit-scrollbar-thumb {
  background: #44403c; /* stone-700 */
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #14b8a6; /* teal-500 */
}

/* Firefox scrollbar styling */
* {
  scrollbar-width: thin;
  scrollbar-color: #44403c #292524; /* thumb and track color */
}

.window-container {
  position: absolute;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.window-content {
  flex: 1;
  overflow: auto;
}

.resize-handle {
  position: absolute;
  z-index: 10;
  background-color: transparent;
  transition: background-color 0.2s;
}

.resize-handle:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.resize-handle.horizontal {
  cursor: col-resize;
  width: 4px;
  height: 100%;
}

.resize-handle.vertical {
  cursor: row-resize;
  width: 100%;
  height: 4px;
}

================
File: styles/main.css
================
/* This imports all of Tailwind's utility classes */
@import "tailwindcss";

/* You can add any custom CSS below this line */

================
File: utils/constants.js
================
// src/utils/constants.js
export const WINDOW_TYPES = {
    EXPLORER: 'explorer',
    EDITOR: 'editor',
    TERMINAL: 'terminal',
    CHART: 'chart',
    IMAGE: 'image',
    AUDIO: 'audio',
    CHAT: 'chat'  // Add chat window type
  };

================
File: utils/treeUtils.js
================
import { Node } from '../models/Node';

/**
 * Splits a window by ID, ensuring only the target window is affected
 * @param {Node} node - Current node in the tree
 * @param {string} targetId - ID of the window to split
 * @param {string} direction - Split direction ('vertical' or 'horizontal')
 * @param {Node} newWindow - New window to insert
 * @returns {Node} Updated tree structure
 */
export const findFirstWindowId = (node) => {
  if (!node) return null;
  if (node.type === 'window') return node.id;
  return findFirstWindowId(node.first) || findFirstWindowId(node.second);
};

/**
 * Creates a new split by ID, inserting a new window at the specified location
 */
export const splitNodeById = (node, targetId, direction, newWindow) => {
    if (!node) return null;
  
    // If this is the node we want to split
    if (node.id === targetId && node.type === 'window') {
      // Create a new split with the current window and new window
      return Node.createSplit(direction, node, newWindow);
    }
  
    // If this is a split node, recursively check its children
    if (node.type === 'split') {
      // Check if target is in first child
      if (findNodeById(node.first, targetId)) {
        return {
          ...node,
          first: splitNodeById(node.first, targetId, direction, newWindow)
        };
      }
      
      // Check if target is in second child
      if (findNodeById(node.second, targetId)) {
        return {
          ...node,
          second: splitNodeById(node.second, targetId, direction, newWindow)
        };
      }
    }
  
    // If we haven't found the target node, return the original node unchanged
    return node;
  };

export const removeNodeById = (node, targetId) => {
  if (!node) return null;

  if (node.type === 'split') {
    // Only remove if the child is a window node with matching ID
    if (node.first.type === 'window' && node.first.id === targetId) {
      return node.second;
    }
    if (node.second.type === 'window' && node.second.id === targetId) {
      return node.first;
    }

    const firstResult = removeNodeById(node.first, targetId);
    if (firstResult !== node.first) {
      node.first = firstResult;
      return node;
    }

    const secondResult = removeNodeById(node.second, targetId);
    if (secondResult !== node.second) {
      node.second = secondResult;
      return node;
    }
  }

  return node;
};

export const findNodeById = (node, targetId) => {
  if (!node) return null;
  
  if (node.id === targetId && node.type === 'window') return node;
  
  if (node.type === 'split') {
    const firstResult = findNodeById(node.first, targetId);
    if (firstResult) return firstResult;
    
    const secondResult = findNodeById(node.second, targetId);
    if (secondResult) return secondResult;
  }
  
  return null;
};

export const findAllWindowIds = (node) => {
  if (!node) return [];
  if (node.type === 'window') return [node.id];
  return [...findAllWindowIds(node.first), ...findAllWindowIds(node.second)];
};

export const updateSplitRatio = (node, splitId, newRatio) => {
  if (!node) return;

  if (node.type === 'split' && node.id === splitId) {
    node.splitRatio = Math.max(0.2, Math.min(0.8, newRatio));
    return;
  }

  if (node.type === 'split') {
    updateSplitRatio(node.first, splitId, newRatio);
    updateSplitRatio(node.second, splitId, newRatio);
  }
};

================
File: utils/windowSizeConstants.js
================
/**
 * Constants for window size constraints
 * These values define the minimum sizes for windows to ensure they remain usable
 */

// Minimum window dimensions in percentage of screen size
export const MIN_WINDOW_WIDTH_PERCENT = 30; // 30% of screen width
export const MIN_WINDOW_HEIGHT_PERCENT = 30; // 30% of screen height

// Minimum window dimensions in pixels (used for absolute size checks)
export const MIN_WINDOW_WIDTH_PX = 300; // 300px minimum width
export const MIN_WINDOW_HEIGHT_PX = 200; // 200px minimum height

// Maximum number of windows total (regardless of arrangement)
export const MAX_HORIZONTAL_WINDOWS = 4; // Maximum windows total
export const MAX_VERTICAL_WINDOWS = 4;   // Maximum windows total

================
File: utils/windowTypes.js
================
// src/utils/windowTypes.js
import { FolderOpen, Code, Terminal as TerminalIcon, Eye, MessageSquare } from 'lucide-react';
import { WINDOW_TYPES } from './constants';

// Import individually to avoid circular dependency
import { 
  EnhancedTerminalWindow,
  EnhancedEditorWindow,
  EnhancedExplorerWindow,
  EnhancedPreviewWindow,
  EnhancedImageWindow,
  EnhancedAudioWindow,
  EnhancedChatWindow
} from '../components/windows';

export { WINDOW_TYPES };

export const WINDOW_CONTENT = {
  [WINDOW_TYPES.EXPLORER]: {
    title: 'File Explorer',
    icon: FolderOpen,
    component: EnhancedExplorerWindow
  },
  [WINDOW_TYPES.EDITOR]: {
    title: 'Code Editor',
    icon: Code,
    component: EnhancedEditorWindow
  },
  [WINDOW_TYPES.TERMINAL]: {
    title: 'Terminal',
    icon: TerminalIcon,
    component: EnhancedTerminalWindow
  },
  [WINDOW_TYPES.CHART]: {
    title: 'Chart',
    icon: Eye,
    component: EnhancedPreviewWindow
  },
  [WINDOW_TYPES.IMAGE]: {
    title: 'Image',
    icon: Eye,
    component: EnhancedImageWindow
  },
  [WINDOW_TYPES.AUDIO]: {
    title: 'Audio Player',
    icon: Eye,
    component: EnhancedAudioWindow
  },
  [WINDOW_TYPES.CHAT]: {
    title: 'Chat',
    icon: MessageSquare,
    component: EnhancedChatWindow
  }
};

================
File: utils/windowUtils.js
================
/**
 * Contains utility functions for window-specific calculations and operations.
 * These functions focus on spatial relationships and window bounds rather than
 * tree structure manipulation.
 */

/**
 * Calculates the bounds of windows in the tree. Each window gets its position
 * and size as percentages of the available space.
 * 
 * @param {Node} node - The node to calculate bounds for
 * @param {Object} available - The available space in percentages
 * @returns {Array} Array of objects containing window IDs and their bounds
 */
export const getWindowBounds = (node, available = { x: 0, y: 0, width: 100, height: 100 }) => {
    if (node.type === 'window') {
      return [{
        id: node.id,
        bounds: {
          left: available.x,
          top: available.y,
          right: available.x + available.width,
          bottom: available.y + available.height,
          width: available.width,
          height: available.height,
          centerX: available.x + (available.width / 2),
          centerY: available.y + (available.height / 2)
        }
      }];
    }
  
    // For split nodes, recursively get bounds of children
    const bounds = [];
    
    if (node.direction === 'horizontal') {
      const firstHalf = {
        x: available.x,
        y: available.y,
        width: available.width * node.splitRatio,
        height: available.height
      };
      const secondHalf = {
        x: available.x + (available.width * node.splitRatio),
        y: available.y,
        width: available.width * (1 - node.splitRatio),
        height: available.height
      };
      bounds.push(...getWindowBounds(node.first, firstHalf));
      bounds.push(...getWindowBounds(node.second, secondHalf));
    } else {
      const firstHalf = {
        x: available.x,
        y: available.y,
        width: available.width,
        height: available.height * node.splitRatio
      };
      const secondHalf = {
        x: available.x,
        y: available.y + (available.height * node.splitRatio),
        width: available.width,
        height: available.height * (1 - node.splitRatio)
      };
      bounds.push(...getWindowBounds(node.first, firstHalf));
      bounds.push(...getWindowBounds(node.second, secondHalf));
    }
  
    return bounds;
  };
  
  /**
   * Determines if two windows are adjacent in a specific direction.
   * Uses a small tolerance value to account for floating-point calculations.
   * 
   * @param {Object} window1 - First window with bounds
   * @param {Object} window2 - Second window with bounds
   * @param {string} direction - Direction to check ('left', 'right', 'up', 'down')
   * @returns {boolean} Whether the windows are adjacent
   */
  export const areWindowsAdjacent = (window1, window2, direction) => {
    const tolerance = 0.01; // 1% tolerance for floating point comparisons
    
    switch (direction) {
      case 'left':
        return Math.abs(window1.bounds.left - window2.bounds.right) < tolerance &&
               !(window1.bounds.bottom < window2.bounds.top || window1.bounds.top > window2.bounds.bottom);
      case 'right':
        return Math.abs(window1.bounds.right - window2.bounds.left) < tolerance &&
               !(window1.bounds.bottom < window2.bounds.top || window1.bounds.top > window2.bounds.bottom);
      case 'up':
        return Math.abs(window1.bounds.top - window2.bounds.bottom) < tolerance &&
               !(window1.bounds.right < window2.bounds.left || window1.bounds.left > window2.bounds.right);
      case 'down':
        return Math.abs(window1.bounds.bottom - window2.bounds.top) < tolerance &&
               !(window1.bounds.right < window2.bounds.left || window1.bounds.left > window2.bounds.right);
      default:
        return false;
    }
  };
  
  /**
   * Finds the next window in a specified direction from the active window.
   * 
   * @param {Node} rootNode - The root node of the window tree
   * @param {string} activeNodeId - ID of the currently active window
   * @param {string} direction - Direction to look for the next window
   * @returns {string|null} ID of the next window, or null if none found
   */
  export const findNextWindow = (rootNode, activeNodeId, direction) => {
    const allWindows = getWindowBounds(rootNode);
    const activeWindow = allWindows.find(w => w.id === activeNodeId);
    if (!activeWindow) return null;
  
    const adjacentWindows = allWindows.filter(w => 
      w.id !== activeNodeId && areWindowsAdjacent(activeWindow, w, direction)
    );
  
    if (adjacentWindows.length === 0) return null;
  
    // Sort adjacent windows based on position and direction
    let nextWindow;
    switch (direction) {
      case 'left':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerX !== b.bounds.centerX
            ? b.bounds.centerX - a.bounds.centerX
            : a.bounds.centerY - b.bounds.centerY
        )[0];
        break;
      case 'right':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerX !== b.bounds.centerX
            ? a.bounds.centerX - b.bounds.centerX
            : a.bounds.centerY - b.bounds.centerY
        )[0];
        break;
      case 'up':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerY !== b.bounds.centerY
            ? b.bounds.centerY - a.bounds.centerY
            : a.bounds.centerX - b.bounds.centerX
        )[0];
        break;
      case 'down':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerY !== b.bounds.centerY
            ? a.bounds.centerY - b.bounds.centerY
            : a.bounds.centerX - b.bounds.centerX
        )[0];
        break;
    }
  
    return nextWindow?.id || null;
  };



================================================================
End of Codebase
================================================================
