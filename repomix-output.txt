This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.env.development
.git_disabled/COMMIT_EDITMSG
.git_disabled/config
.git_disabled/description
.git_disabled/HEAD
.git_disabled/hooks/applypatch-msg.sample
.git_disabled/hooks/commit-msg.sample
.git_disabled/hooks/fsmonitor-watchman.sample
.git_disabled/hooks/post-update.sample
.git_disabled/hooks/pre-applypatch.sample
.git_disabled/hooks/pre-commit.sample
.git_disabled/hooks/pre-merge-commit.sample
.git_disabled/hooks/pre-push.sample
.git_disabled/hooks/pre-rebase.sample
.git_disabled/hooks/pre-receive.sample
.git_disabled/hooks/prepare-commit-msg.sample
.git_disabled/hooks/push-to-checkout.sample
.git_disabled/hooks/sendemail-validate.sample
.git_disabled/hooks/update.sample
.git_disabled/info/exclude
.git_disabled/refs/heads/master
.github/workflows/deploy.yml
.gitignore
docs/map-editor/fonts/OpenSans-Bold-webfont.svg
docs/map-editor/fonts/OpenSans-BoldItalic-webfont.svg
docs/map-editor/fonts/OpenSans-Italic-webfont.svg
docs/map-editor/fonts/OpenSans-Light-webfont.svg
docs/map-editor/fonts/OpenSans-LightItalic-webfont.svg
docs/map-editor/fonts/OpenSans-Regular-webfont.svg
docs/map-editor/global.html
docs/map-editor/index.html
docs/map-editor/LayerPanel.jsx.html
docs/map-editor/MapCanvas.jsx.html
docs/map-editor/MapPropertiesPanel.jsx.html
docs/map-editor/MapToolbar.jsx.html
docs/map-editor/scripts/linenumber.js
docs/map-editor/scripts/prettify/Apache-License-2.0.txt
docs/map-editor/scripts/prettify/lang-css.js
docs/map-editor/scripts/prettify/prettify.js
docs/map-editor/styles/jsdoc-default.css
docs/map-editor/styles/prettify-jsdoc.css
docs/map-editor/styles/prettify-tomorrow.css
docs/map-editor/TilePalette.jsx.html
docs/map-editor/TilesetSelector.jsx.html
eslint.config.js
index.html
jsoncanvas-main/_config.yml
jsoncanvas-main/.gitignore
jsoncanvas-main/.layouts/404.html
jsoncanvas-main/.layouts/canvas.html
jsoncanvas-main/.layouts/docs.html
jsoncanvas-main/.layouts/head.html
jsoncanvas-main/.layouts/nav.html
jsoncanvas-main/404.md
jsoncanvas-main/assets/canvas.js
jsoncanvas-main/assets/icon.svg
jsoncanvas-main/assets/prism.js
jsoncanvas-main/assets/style.css
jsoncanvas-main/CNAME
jsoncanvas-main/docs/apps.md
jsoncanvas-main/Gemfile
jsoncanvas-main/LICENSE
jsoncanvas-main/logo.svg
jsoncanvas-main/readme.md
jsoncanvas-main/sample.canvas
jsoncanvas-main/spec/1.0.md
package.json
public/agooba_favicon.svg
public/images/tileset-placeholder.txt
public/markdown_test/demo-text-file.txt
public/markdown_test/README.md
public/markdown_test/test-document.prosemirror
public/sample.canvas
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/assets/SVG/emptyState.svg
src/components/auth/AuthScreen.jsx
src/components/auth/index.js
src/components/auth/Login.jsx
src/components/auth/Register.jsx
src/components/CommandBar.jsx
src/components/EmptyState.jsx
src/components/repomix-output.txt
src/components/WindowManager.jsx
src/components/windows/AdminWindow.jsx
src/components/windows/AudioWindow.jsx
src/components/windows/CanvasPreview.jsx
src/components/windows/CanvasWindow.jsx
src/components/windows/ChatWindow.jsx
src/components/windows/DiceRollGif.jsx
src/components/windows/explorer/api/fileOperations.js
src/components/windows/explorer/components/canvas/CanvasContainer.jsx
src/components/windows/explorer/components/canvas/CanvasEditor.jsx
src/components/windows/explorer/components/canvas/TextNode.jsx
src/components/windows/explorer/components/CanvasEditor.jsx
src/components/windows/explorer/components/CommandInput.jsx
src/components/windows/explorer/components/dialogs/FileDialogs.jsx
src/components/windows/explorer/components/FileContent.jsx
src/components/windows/explorer/components/FileTree.jsx
src/components/windows/explorer/components/MapEditor.jsx
src/components/windows/explorer/components/nodes/index.js
src/components/windows/explorer/components/nodes/TextNode.jsx
src/components/windows/explorer/components/ProseMirrorEditor.css
src/components/windows/explorer/components/ProseMirrorEditor.jsx
src/components/windows/explorer/components/StorageStats.jsx
src/components/windows/explorer/ExplorerWindow.jsx
src/components/windows/explorer/README.md
src/components/windows/explorer/repomix-output.txt
src/components/windows/explorer/state/useExplorerState.js
src/components/windows/explorer/utils/canvasUtils.js
src/components/windows/explorer/utils/fileUtils.js
src/components/windows/explorer/utils/markdownUtils.js
src/components/windows/ExplorerWindow-fix.jsx
src/components/windows/ExplorerWindow.css
src/components/windows/ExplorerWindow.jsx
src/components/windows/GameWindow.jsx
src/components/windows/index.js
src/components/windows/mapeditor/components/OpacitySlider.jsx
src/components/windows/mapeditor/jsdoc.json
src/components/windows/mapeditor/LayerPanel.jsx
src/components/windows/mapeditor/MAP_EDITOR_DOCUMENTATION.md
src/components/windows/mapeditor/MapCanvas.jsx
src/components/windows/mapeditor/MapPropertiesPanel.jsx
src/components/windows/mapeditor/MapToolbar.jsx
src/components/windows/mapeditor/README.md
src/components/windows/mapeditor/styles/RangeSlider.css
src/components/windows/mapeditor/TilePalette.jsx
src/components/windows/mapeditor/utils/dynamicTileRegistry.js
src/components/windows/mapeditor/utils/mapUtils.js
src/components/windows/mapeditor/utils/tileRegistry.js
src/components/windows/MarketplaceWindow.jsx
src/components/windows/TerminalWindow.jsx
src/config/api.js
src/context/ActiveUsersContext.jsx
src/context/AnnouncementContext.jsx
src/context/AuthContext.jsx
src/context/PartyContext.jsx
src/context/SocketContext.jsx
src/context/WindowStateContext.jsx
src/context/WorkspaceContext.jsx
src/db/db-config.js
src/db/db-operations.js
src/db/db.js
src/hocs/withCommandHandling.jsx
src/hocs/withCommandInput.jsx
src/hocs/withWindowState.jsx
src/hooks/swapWindows.js
src/hooks/useForceUpdate.js
src/hooks/useKeyboardShortcuts.js
src/hooks/useWindowManager.js
src/main.jsx
src/models/Node.js
src/services/indexedDBService.js
src/styles.css
src/styles/main.css
src/utils/cacheManager.js
src/utils/canvasNodeTypes.js
src/utils/commandAliases.js
src/utils/constants.js
src/utils/debugLogger.js
src/utils/diceUtils.js
src/utils/globalPolyfill.js
src/utils/terminal/command-system-documentation.md
src/utils/terminal/Command.js
src/utils/terminal/commandLoader.js
src/utils/terminal/commands/admin/AdminCommand.js
src/utils/terminal/commands/admin/AnnouncementCommand.js
src/utils/terminal/commands/admin/DebugCommand.js
src/utils/terminal/commands/core/ClearCommand.js
src/utils/terminal/commands/core/HelpCommand.js
src/utils/terminal/commands/core/VersionCommand.js
src/utils/terminal/commands/vtt/LegacyPartyCommands.js
src/utils/terminal/commands/vtt/PartyCommand.js
src/utils/terminal/commands/vtt/RollCommand.js
src/utils/terminal/commands/window/ChatCommand.js
src/utils/terminal/commands/window/ExplorerCommand.js
src/utils/terminal/commands/window/GameCommand.js
src/utils/terminal/commands/window/MarketplaceCommand.js
src/utils/terminal/commands/window/TerminalCommand.js
src/utils/terminal/commands/window/WindowCommand.js
src/utils/terminal/executor.js
src/utils/terminal/parser/parser.js
src/utils/terminal/parser/tokenizer.js
src/utils/terminal/registry.js
src/utils/treeUtils.js
src/utils/windowSizeConstants.js
src/utils/windowTypes.js
src/utils/windowUtils.js
vite.config.js

================================================================
Files
================================================================

================
File: .env.development
================
VITE_API_BASE_URL=http://45.45.239.125:3001/api
VITE_SOCKET_URL=http://45.45.239.125:3001

================
File: .git_disabled/COMMIT_EDITMSG
================
Initial commit

================
File: .git_disabled/config
================
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true

================
File: .git_disabled/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: .git_disabled/HEAD
================
ref: refs/heads/master

================
File: .git_disabled/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: .git_disabled/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: .git_disabled/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: .git_disabled/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: .git_disabled/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: .git_disabled/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: .git_disabled/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: .git_disabled/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: .git_disabled/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: .git_disabled/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: .git_disabled/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: .git_disabled/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: .git_disabled/hooks/sendemail-validate.sample
================
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

================
File: .git_disabled/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: .git_disabled/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: .git_disabled/refs/heads/master
================
c1ae64f6e95b0e8b3693241e4b425b28768fe423

================
File: .github/workflows/deploy.yml
================
name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create production environment file
      run: |
        echo "VITE_API_BASE_URL=/api" > .env.production
        echo "VITE_SOCKET_URL=" >> .env.production
      
    - name: Build project
      run: npm run build

    - name: Debug Secrets
      run: |
        if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "SSH_PRIVATE_KEY is set"
        else
          echo "SSH_PRIVATE_KEY is not set"
        fi
        
        if [ -n "${{ secrets.SERVER_USERNAME }}" ]; then
          echo "SERVER_USERNAME is set"
        else
          echo "SERVER_USERNAME is not set"
        fi
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add known hosts
        ssh-keyscan -p 8190 -H 45.45.239.125 >> ~/.ssh/known_hosts
        
        # Create SSH config
        echo "Host deployment-server" > ~/.ssh/config
        echo "    HostName 45.45.239.125" >> ~/.ssh/config
        echo "    Port 8190" >> ~/.ssh/config
        echo "    User ${{ secrets.SERVER_USERNAME }}" >> ~/.ssh/config
        echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
        echo "    StrictHostKeyChecking yes" >> ~/.ssh/config
        
    - name: Deploy with SSH
      run: |
        # Test SSH connection
        ssh deployment-server "echo SSH connection successful"
        
        # Create remote directory
        ssh deployment-server "mkdir -p /var/www/public_site"
        
        # Clear old files
        ssh deployment-server "rm -rf /var/www/public_site/*"
        
        # Copy files
        scp -r dist/* deployment-server:/var/www/public_site/
        
        # Set cache control headers for index.html
        ssh deployment-server "echo 'Cache-Control: no-cache, no-store, must-revalidate' > /var/www/public_site/.htaccess"
        ssh deployment-server "echo 'Pragma: no-cache' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo 'Expires: 0' >> /var/www/public_site/.htaccess"
        
        # Set long-term caching for hashed assets
        ssh deployment-server "echo '<FilesMatch \"\.([0-9a-f]{8,})\.((js|css|jpg|jpeg|png|gif|webp|svg|woff2))$\">' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo '  Header set Cache-Control \"public, max-age=31536000, immutable\"' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo '</FilesMatch>' >> /var/www/public_site/.htaccess"

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.aider*

================
File: docs/map-editor/fonts/OpenSans-Bold-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sansbold" horiz-adv-x="1169" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb01;" horiz-adv-x="1417" d="M41 0zM778 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM940 1407q0 149 166 149t166 -149q0 -71 -41.5 -110.5t-124.5 -39.5q-166 0 -166 150zM1258 0h-305v1118 h305v-1118z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1417" d="M41 0zM778 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM1258 0h-305v1556h305v-1556z" />
<glyph unicode="&#xfb03;" horiz-adv-x="2208" d="M41 0zM778 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM1571 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224 q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM1730 1407q0 149 166 149t166 -149q0 -71 -41.5 -110.5t-124.5 -39.5q-166 0 -166 150zM2048 0h-305v1118h305v-1118z" />
<glyph unicode="&#xfb04;" horiz-adv-x="2208" d="M41 0zM778 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM1571 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224 q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229zM2048 0h-305v1556h305v-1556z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="586" d="M416 485h-244l-51 977h346zM117 143q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5z" />
<glyph unicode="&#x22;" horiz-adv-x="967" d="M412 1462l-41 -528h-197l-41 528h279zM834 1462l-41 -528h-197l-41 528h279z" />
<glyph unicode="#" horiz-adv-x="1323" d="M999 844l-47 -232h258v-206h-297l-77 -406h-220l78 406h-194l-76 -406h-215l74 406h-238v206h277l47 232h-252v209h289l77 407h219l-77 -407h198l78 407h215l-78 -407h240v-209h-279zM539 612h196l47 232h-196z" />
<glyph unicode="$" d="M1092 457q0 -159 -115 -255.5t-322 -115.5v-205h-137v201q-244 5 -428 86v264q87 -43 209.5 -76t218.5 -39v310l-67 26q-198 78 -280.5 169.5t-82.5 226.5q0 145 113.5 238.5t316.5 113.5v153h137v-149q229 -10 414 -92l-94 -234q-156 64 -320 78v-295 q195 -75 277.5 -130t121 -121t38.5 -154zM791 442q0 42 -34 71t-102 60v-249q136 23 136 118zM389 1049q0 -44 30.5 -72.5t98.5 -58.5v235q-129 -19 -129 -104z" />
<glyph unicode="%" horiz-adv-x="1845" d="M315 1024q0 -127 22.5 -189.5t72.5 -62.5q96 0 96 252q0 250 -96 250q-50 0 -72.5 -61.5t-22.5 -188.5zM758 1026q0 -230 -89 -345.5t-261 -115.5q-165 0 -255 118.5t-90 342.5q0 457 345 457q169 0 259.5 -118.5t90.5 -338.5zM1446 1462l-811 -1462h-240l811 1462h240z M1339 440q0 -127 22.5 -189.5t72.5 -62.5q96 0 96 252q0 250 -96 250q-50 0 -72.5 -61.5t-22.5 -188.5zM1782 442q0 -229 -89 -344.5t-261 -115.5q-165 0 -255 118.5t-90 341.5q0 457 345 457q169 0 259.5 -118.5t90.5 -338.5z" />
<glyph unicode="&#x26;" horiz-adv-x="1536" d="M1536 0h-377l-115 113q-191 -133 -432 -133q-244 0 -387 112t-143 303q0 137 60.5 233.5t207.5 180.5q-75 86 -109 164.5t-34 171.5q0 152 116.5 245t311.5 93q186 0 297.5 -86.5t111.5 -231.5q0 -119 -69 -217.5t-223 -187.5l284 -277q71 117 123 301h318 q-36 -135 -99 -263.5t-143 -227.5zM403 424q0 -86 64.5 -137t165.5 -51q126 0 227 61l-332 330q-58 -44 -91.5 -92t-33.5 -111zM762 1133q0 53 -36 83.5t-93 30.5q-67 0 -105.5 -32t-38.5 -91q0 -88 95 -194q86 48 132 94.5t46 108.5z" />
<glyph unicode="'" horiz-adv-x="545" d="M412 1462l-41 -528h-197l-41 528h279z" />
<glyph unicode="(" horiz-adv-x="694" d="M82 561q0 265 77.5 496t223.5 405h250q-141 -193 -213 -424t-72 -475q0 -245 73.5 -473.5t209.5 -413.5h-248q-147 170 -224 397t-77 488z" />
<glyph unicode=")" horiz-adv-x="694" d="M612 561q0 -263 -77.5 -490t-223.5 -395h-248q135 184 209 412.5t74 474.5q0 244 -72 475t-213 424h250q147 -175 224 -406.5t77 -494.5z" />
<glyph unicode="*" horiz-adv-x="1116" d="M688 1556l-41 -368l373 104l33 -252l-340 -24l223 -297l-227 -121l-156 313l-137 -311l-236 119l221 297l-338 26l39 250l365 -104l-41 368h262z" />
<glyph unicode="+" d="M475 612h-387v219h387v390h219v-390h387v-219h-387v-385h-219v385z" />
<glyph unicode="," horiz-adv-x="594" d="M459 215q-52 -202 -176 -479h-220q65 266 101 502h280z" />
<glyph unicode="-" horiz-adv-x="659" d="M61 424v250h537v-250h-537z" />
<glyph unicode="." horiz-adv-x="584" d="M117 143q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5z" />
<glyph unicode="/" horiz-adv-x="846" d="M836 1462l-545 -1462h-277l545 1462h277z" />
<glyph unicode="0" d="M1096 731q0 -383 -125.5 -567t-386.5 -184q-253 0 -381.5 190t-128.5 561q0 387 125 570.5t385 183.5q253 0 382.5 -192t129.5 -562zM381 731q0 -269 46.5 -385.5t156.5 -116.5q108 0 156 118t48 384q0 269 -48.5 386.5t-155.5 117.5q-109 0 -156 -117.5t-47 -386.5z" />
<glyph unicode="1" d="M846 0h-309v846l3 139l5 152q-77 -77 -107 -101l-168 -135l-149 186l471 375h254v-1462z" />
<glyph unicode="2" d="M1104 0h-1022v215l367 371q163 167 213 231.5t72 119.5t22 114q0 88 -48.5 131t-129.5 43q-85 0 -165 -39t-167 -111l-168 199q108 92 179 130t155 58.5t188 20.5q137 0 242 -50t163 -140t58 -206q0 -101 -35.5 -189.5t-110 -181.5t-262.5 -265l-188 -177v-14h637v-260z " />
<glyph unicode="3" d="M1047 1135q0 -137 -83 -233t-233 -132v-6q177 -22 268 -107.5t91 -230.5q0 -211 -153 -328.5t-437 -117.5q-238 0 -422 79v263q85 -43 187 -70t202 -27q153 0 226 52t73 167q0 103 -84 146t-268 43h-111v237h113q170 0 248.5 44.5t78.5 152.5q0 166 -208 166 q-72 0 -146.5 -24t-165.5 -83l-143 213q200 144 477 144q227 0 358.5 -92t131.5 -256z" />
<glyph unicode="4" d="M1137 303h-176v-303h-302v303h-624v215l641 944h285v-919h176v-240zM659 543v248q0 62 5 180t8 137h-8q-37 -82 -89 -160l-268 -405h352z" />
<glyph unicode="5" d="M614 934q212 0 337.5 -119t125.5 -326q0 -245 -151 -377t-432 -132q-244 0 -394 79v267q79 -42 184 -68.5t199 -26.5q283 0 283 232q0 221 -293 221q-53 0 -117 -10.5t-104 -22.5l-123 66l55 745h793v-262h-522l-27 -287l35 7q61 14 151 14z" />
<glyph unicode="6" d="M72 621q0 434 183.5 646t549.5 212q125 0 196 -15v-247q-89 20 -176 20q-159 0 -259.5 -48t-150.5 -142t-59 -267h13q99 170 317 170q196 0 307 -123t111 -340q0 -234 -132 -370.5t-366 -136.5q-162 0 -282.5 75t-186 219t-65.5 347zM600 227q99 0 152 66.5t53 189.5 q0 107 -49.5 168.5t-149.5 61.5q-94 0 -160.5 -61t-66.5 -142q0 -119 62.5 -201t158.5 -82z" />
<glyph unicode="7" d="M227 0l549 1200h-721v260h1049v-194l-553 -1266h-324z" />
<glyph unicode="8" d="M586 1481q210 0 338.5 -95.5t128.5 -257.5q0 -112 -62 -199.5t-200 -156.5q164 -88 235.5 -183.5t71.5 -209.5q0 -180 -141 -289.5t-371 -109.5q-240 0 -377 102t-137 289q0 125 66.5 222t213.5 171q-125 79 -180 169t-55 197q0 157 130 254t339 97zM358 389 q0 -86 60 -134t164 -48q115 0 172 49.5t57 130.5q0 67 -56.5 125.5t-183.5 124.5q-213 -98 -213 -248zM584 1255q-79 0 -127.5 -40.5t-48.5 -108.5q0 -60 38.5 -107.5t139.5 -97.5q98 46 137 94t39 111q0 69 -50 109t-128 40z" />
<glyph unicode="9" d="M1098 838q0 -432 -182 -645t-551 -213q-130 0 -197 14v248q84 -21 176 -21q155 0 255 45.5t153 143t61 268.5h-12q-58 -94 -134 -132t-190 -38q-191 0 -301 122.5t-110 340.5q0 235 133.5 371.5t363.5 136.5q162 0 283.5 -76t186.5 -220.5t65 -344.5zM569 1231 q-96 0 -150 -66t-54 -190q0 -106 49 -168t149 -62q94 0 161 61.5t67 141.5q0 119 -62.5 201t-159.5 82z" />
<glyph unicode=":" horiz-adv-x="584" d="M117 143q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5zM117 969q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -81 -46.5 -125.5t-127.5 -44.5q-84 0 -130 44t-46 126z" />
<glyph unicode=";" horiz-adv-x="594" d="M444 238l15 -23q-52 -202 -176 -479h-220q65 266 101 502h280zM117 969q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -81 -46.5 -125.5t-127.5 -44.5q-84 0 -130 44t-46 126z" />
<glyph unicode="&#x3c;" d="M1081 203l-993 438v143l993 496v-240l-684 -317l684 -281v-239z" />
<glyph unicode="=" d="M88 805v219h993v-219h-993zM88 418v219h993v-219h-993z" />
<glyph unicode="&#x3e;" d="M88 442l684 281l-684 317v240l993 -496v-143l-993 -438v239z" />
<glyph unicode="?" horiz-adv-x="977" d="M276 485v74q0 96 41 167t150 151q105 75 138.5 122t33.5 105q0 65 -48 99t-134 34q-150 0 -342 -98l-109 219q223 125 473 125q206 0 327.5 -99t121.5 -264q0 -110 -50 -190t-190 -180q-96 -71 -121.5 -108t-25.5 -97v-60h-265zM244 143q0 84 45 127t131 43 q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5z" />
<glyph unicode="@" horiz-adv-x="1837" d="M1735 752q0 -144 -46 -263.5t-130 -187.5t-195 -68q-74 0 -131 35.5t-82 93.5h-16q-108 -129 -275 -129q-177 0 -279 106.5t-102 291.5q0 211 134 340t350 129q86 0 189.5 -16.5t170.5 -39.5l-23 -489q0 -139 76 -139q64 0 102 93.5t38 244.5q0 161 -67 284.5 t-188.5 188.5t-277.5 65q-202 0 -351 -83t-228.5 -239.5t-79.5 -361.5q0 -276 147.5 -423.5t427.5 -147.5q106 0 233 23.5t250 68.5v-192q-214 -91 -475 -91q-380 0 -592.5 200t-212.5 556q0 247 108.5 448.5t309 316t461.5 114.5q220 0 393 -90t267 -256t94 -383zM711 627 q0 -211 172 -211q90 0 137 63.5t57 206.5l13 221q-51 11 -115 11q-125 0 -194.5 -78t-69.5 -213z" />
<glyph unicode="A" horiz-adv-x="1413" d="M1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381z" />
<glyph unicode="B" horiz-adv-x="1376" d="M184 1462h455q311 0 451.5 -88.5t140.5 -281.5q0 -131 -61.5 -215t-163.5 -101v-10q139 -31 200.5 -116t61.5 -226q0 -200 -144.5 -312t-392.5 -112h-547v1462zM494 883h180q126 0 182.5 39t56.5 129q0 84 -61.5 120.5t-194.5 36.5h-163v-325zM494 637v-381h202 q128 0 189 49t61 150q0 182 -260 182h-192z" />
<glyph unicode="C" horiz-adv-x="1305" d="M805 1225q-175 0 -271 -131.5t-96 -366.5q0 -489 367 -489q154 0 373 77v-260q-180 -75 -402 -75q-319 0 -488 193.5t-169 555.5q0 228 83 399.5t238.5 263t364.5 91.5q213 0 428 -103l-100 -252q-82 39 -165 68t-163 29z" />
<glyph unicode="D" horiz-adv-x="1516" d="M1397 745q0 -361 -205.5 -553t-593.5 -192h-414v1462h459q358 0 556 -189t198 -528zM1075 737q0 471 -416 471h-165v-952h133q448 0 448 481z" />
<glyph unicode="E" horiz-adv-x="1147" d="M1026 0h-842v1462h842v-254h-532v-321h495v-254h-495v-377h532v-256z" />
<glyph unicode="F" horiz-adv-x="1124" d="M489 0h-305v1462h838v-254h-533v-377h496v-253h-496v-578z" />
<glyph unicode="G" horiz-adv-x="1483" d="M739 821h580v-758q-141 -46 -265.5 -64.5t-254.5 -18.5q-331 0 -505.5 194.5t-174.5 558.5q0 354 202.5 552t561.5 198q225 0 434 -90l-103 -248q-160 80 -333 80q-201 0 -322 -135t-121 -363q0 -238 97.5 -363.5t283.5 -125.5q97 0 197 20v305h-277v258z" />
<glyph unicode="H" horiz-adv-x="1567" d="M1382 0h-309v631h-579v-631h-310v1462h310v-573h579v573h309v-1462z" />
<glyph unicode="I" horiz-adv-x="678" d="M184 0v1462h310v-1462h-310z" />
<glyph unicode="J" horiz-adv-x="678" d="M31 -430q-105 0 -183 22v258q80 -20 146 -20q102 0 146 63.5t44 198.5v1370h310v-1368q0 -256 -117 -390t-346 -134z" />
<glyph unicode="K" horiz-adv-x="1360" d="M1360 0h-352l-383 616l-131 -94v-522h-310v1462h310v-669l122 172l396 497h344l-510 -647z" />
<glyph unicode="L" horiz-adv-x="1157" d="M184 0v1462h310v-1206h593v-256h-903z" />
<glyph unicode="M" horiz-adv-x="1931" d="M803 0l-352 1147h-9q19 -350 19 -467v-680h-277v1462h422l346 -1118h6l367 1118h422v-1462h-289v692q0 49 1.5 113t13.5 340h-9l-377 -1145h-284z" />
<glyph unicode="N" horiz-adv-x="1665" d="M1481 0h-394l-636 1106h-9q19 -293 19 -418v-688h-277v1462h391l635 -1095h7q-15 285 -15 403v692h279v-1462z" />
<glyph unicode="O" horiz-adv-x="1630" d="M1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5z" />
<glyph unicode="P" horiz-adv-x="1286" d="M494 774h102q143 0 214 56.5t71 164.5q0 109 -59.5 161t-186.5 52h-141v-434zM1194 1006q0 -236 -147.5 -361t-419.5 -125h-133v-520h-310v1462h467q266 0 404.5 -114.5t138.5 -341.5z" />
<glyph unicode="Q" horiz-adv-x="1630" d="M1511 733q0 -258 -91.5 -432.5t-268.5 -255.5l352 -393h-397l-268 328h-23q-336 0 -516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5z" />
<glyph unicode="R" horiz-adv-x="1352" d="M494 813h100q147 0 217 49t70 154q0 104 -71.5 148t-221.5 44h-94v-395zM494 561v-561h-310v1462h426q298 0 441 -108.5t143 -329.5q0 -129 -71 -229.5t-201 -157.5q330 -493 430 -637h-344l-349 561h-165z" />
<glyph unicode="S" horiz-adv-x="1128" d="M1047 406q0 -198 -142.5 -312t-396.5 -114q-234 0 -414 88v288q148 -66 250.5 -93t187.5 -27q102 0 156.5 39t54.5 116q0 43 -24 76.5t-70.5 64.5t-189.5 99q-134 63 -201 121t-107 135t-40 180q0 194 131.5 305t363.5 111q114 0 217.5 -27t216.5 -76l-100 -241 q-117 48 -193.5 67t-150.5 19q-88 0 -135 -41t-47 -107q0 -41 19 -71.5t60.5 -59t196.5 -102.5q205 -98 281 -196.5t76 -241.5z" />
<glyph unicode="T" horiz-adv-x="1186" d="M748 0h-310v1204h-397v258h1104v-258h-397v-1204z" />
<glyph unicode="U" horiz-adv-x="1548" d="M1374 1462v-946q0 -162 -72.5 -284t-209.5 -187t-324 -65q-282 0 -438 144.5t-156 395.5v942h309v-895q0 -169 68 -248t225 -79q152 0 220.5 79.5t68.5 249.5v893h309z" />
<glyph unicode="V" horiz-adv-x="1331" d="M1018 1462h313l-497 -1462h-338l-496 1462h313l275 -870q23 -77 47.5 -179.5t30.5 -142.5q11 92 75 322z" />
<glyph unicode="W" horiz-adv-x="1980" d="M1608 0h-353l-198 768q-11 41 -37.5 169.5t-30.5 172.5q-6 -54 -30 -173.5t-37 -170.5l-197 -766h-352l-373 1462h305l187 -798q49 -221 71 -383q6 57 27.5 176.5t40.5 185.5l213 819h293l213 -819q14 -55 35 -168t32 -194q10 78 32 194.5t40 188.5l186 798h305z" />
<glyph unicode="X" horiz-adv-x="1366" d="M1366 0h-354l-340 553l-340 -553h-332l485 754l-454 708h342l315 -526l309 526h334l-459 -725z" />
<glyph unicode="Y" horiz-adv-x="1278" d="M639 860l305 602h334l-485 -893v-569h-308v559l-485 903h336z" />
<glyph unicode="Z" horiz-adv-x="1186" d="M1137 0h-1088v201l701 1005h-682v256h1050v-200l-700 -1006h719v-256z" />
<glyph unicode="[" horiz-adv-x="678" d="M627 -324h-484v1786h484v-211h-224v-1364h224v-211z" />
<glyph unicode="\" horiz-adv-x="846" d="M289 1462l545 -1462h-277l-545 1462h277z" />
<glyph unicode="]" horiz-adv-x="678" d="M51 -113h223v1364h-223v211h484v-1786h-484v211z" />
<glyph unicode="^" horiz-adv-x="1090" d="M8 520l438 950h144l495 -950h-239l-322 643l-280 -643h-236z" />
<glyph unicode="_" horiz-adv-x="842" d="M846 -324h-850v140h850v-140z" />
<glyph unicode="`" horiz-adv-x="1243" d="M707 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="a" horiz-adv-x="1237" d="M870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48t-65 -134 q0 -129 148 -129q106 0 169.5 61t63.5 162v92z" />
<glyph unicode="b" horiz-adv-x="1296" d="M782 1139q198 0 310 -154.5t112 -423.5q0 -277 -115.5 -429t-314.5 -152q-197 0 -309 143h-21l-51 -123h-233v1556h305v-362q0 -69 -12 -221h12q107 166 317 166zM684 895q-113 0 -165 -69.5t-54 -229.5v-33q0 -180 53.5 -258t169.5 -78q94 0 149.5 86.5t55.5 251.5 t-56 247.5t-153 82.5z" />
<glyph unicode="c" horiz-adv-x="1053" d="M614 -20q-522 0 -522 573q0 285 142 435.5t407 150.5q194 0 348 -76l-90 -236q-72 29 -134 47.5t-124 18.5q-238 0 -238 -338q0 -328 238 -328q88 0 163 23.5t150 73.5v-261q-74 -47 -149.5 -65t-190.5 -18z" />
<glyph unicode="d" horiz-adv-x="1296" d="M514 -20q-197 0 -309.5 153t-112.5 424q0 275 114.5 428.5t315.5 153.5q211 0 322 -164h10q-23 125 -23 223v358h306v-1556h-234l-59 145h-13q-104 -165 -317 -165zM621 223q117 0 171.5 68t59.5 231v33q0 180 -55.5 258t-180.5 78q-102 0 -158.5 -86.5t-56.5 -251.5 t57 -247.5t163 -82.5z" />
<glyph unicode="e" horiz-adv-x="1210" d="M623 922q-97 0 -152 -61.5t-63 -174.5h428q-2 113 -59 174.5t-154 61.5zM666 -20q-270 0 -422 149t-152 422q0 281 140.5 434.5t388.5 153.5q237 0 369 -135t132 -373v-148h-721q5 -130 77 -203t202 -73q101 0 191 21t188 67v-236q-80 -40 -171 -59.5t-222 -19.5z" />
<glyph unicode="f" horiz-adv-x="793" d="M778 889h-264v-889h-305v889h-168v147l168 82v82q0 191 94 279t301 88q158 0 281 -47l-78 -224q-92 29 -170 29q-65 0 -94 -38.5t-29 -98.5v-70h264v-229z" />
<glyph unicode="g" horiz-adv-x="1157" d="M1133 1118v-155l-175 -45q48 -75 48 -168q0 -180 -125.5 -280.5t-348.5 -100.5l-55 3l-45 5q-47 -36 -47 -80q0 -66 168 -66h190q184 0 280.5 -79t96.5 -232q0 -196 -163.5 -304t-469.5 -108q-234 0 -357.5 81.5t-123.5 228.5q0 101 63 169t185 97q-47 20 -82 65.5 t-35 96.5q0 64 37 106.5t107 83.5q-88 38 -139.5 122t-51.5 198q0 183 119 283t340 100q47 0 111.5 -8.5t82.5 -12.5h390zM270 -158q0 -63 60.5 -99t169.5 -36q164 0 257 45t93 123q0 63 -55 87t-170 24h-158q-84 0 -140.5 -39.5t-56.5 -104.5zM381 752q0 -91 41.5 -144 t126.5 -53q86 0 126 53t40 144q0 202 -166 202q-168 0 -168 -202z" />
<glyph unicode="h" horiz-adv-x="1346" d="M1192 0h-305v653q0 242 -180 242q-128 0 -185 -87t-57 -282v-526h-305v1556h305v-317q0 -37 -7 -174l-7 -90h16q102 164 324 164q197 0 299 -106t102 -304v-729z" />
<glyph unicode="i" horiz-adv-x="625" d="M147 1407q0 149 166 149t166 -149q0 -71 -41.5 -110.5t-124.5 -39.5q-166 0 -166 150zM465 0h-305v1118h305v-1118z" />
<glyph unicode="j" horiz-adv-x="625" d="M70 -492q-117 0 -201 25v240q70 -19 143 -19q77 0 112.5 43t35.5 127v1194h305v-1239q0 -178 -103 -274.5t-292 -96.5zM147 1407q0 149 166 149t166 -149q0 -71 -41.5 -110.5t-124.5 -39.5q-166 0 -166 150z" />
<glyph unicode="k" horiz-adv-x="1270" d="M453 608l133 170l313 340h344l-444 -485l471 -633h-352l-322 453l-131 -105v-348h-305v1556h305v-694l-16 -254h4z" />
<glyph unicode="l" horiz-adv-x="625" d="M465 0h-305v1556h305v-1556z" />
<glyph unicode="m" horiz-adv-x="2011" d="M1161 0h-305v653q0 121 -40.5 181.5t-127.5 60.5q-117 0 -170 -86t-53 -283v-526h-305v1118h233l41 -143h17q45 77 130 120.5t195 43.5q251 0 340 -164h27q45 78 132.5 121t197.5 43q190 0 287.5 -97.5t97.5 -312.5v-729h-306v653q0 121 -40.5 181.5t-127.5 60.5 q-112 0 -167.5 -80t-55.5 -254v-561z" />
<glyph unicode="n" horiz-adv-x="1346" d="M1192 0h-305v653q0 121 -43 181.5t-137 60.5q-128 0 -185 -85.5t-57 -283.5v-526h-305v1118h233l41 -143h17q51 81 140.5 122.5t203.5 41.5q195 0 296 -105.5t101 -304.5v-729z" />
<glyph unicode="o" horiz-adv-x="1268" d="M403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z" />
<glyph unicode="p" horiz-adv-x="1296" d="M774 -20q-197 0 -309 143h-16q16 -140 16 -162v-453h-305v1610h248l43 -145h14q107 166 317 166q198 0 310 -153t112 -425q0 -179 -52.5 -311t-149.5 -201t-228 -69zM684 895q-113 0 -165 -69.5t-54 -229.5v-33q0 -180 53.5 -258t169.5 -78q205 0 205 338 q0 165 -50.5 247.5t-158.5 82.5z" />
<glyph unicode="q" horiz-adv-x="1296" d="M623 219q116 0 170 66.5t59 232.5v37q0 180 -55.5 258t-178.5 78q-215 0 -215 -338q0 -168 53.5 -251t166.5 -83zM514 -20q-198 0 -310 152.5t-112 424.5q0 274 114.5 428t313.5 154q106 0 185 -40t139 -124h8l27 143h258v-1610h-306v469q0 61 13 168h-13 q-49 -81 -130 -123t-187 -42z" />
<glyph unicode="r" horiz-adv-x="930" d="M784 1139q62 0 103 -9l-23 -286q-37 10 -90 10q-146 0 -227.5 -75t-81.5 -210v-569h-305v1118h231l45 -188h15q52 94 140.5 151.5t192.5 57.5z" />
<glyph unicode="s" horiz-adv-x="1018" d="M940 332q0 -172 -119.5 -262t-357.5 -90q-122 0 -208 16.5t-161 48.5v252q85 -40 191.5 -67t187.5 -27q166 0 166 96q0 36 -22 58.5t-76 51t-144 66.5q-129 54 -189.5 100t-88 105.5t-27.5 146.5q0 149 115.5 230.5t327.5 81.5q202 0 393 -88l-92 -220q-84 36 -157 59 t-149 23q-135 0 -135 -73q0 -41 43.5 -71t190.5 -89q131 -53 192 -99t90 -106t29 -143z" />
<glyph unicode="t" horiz-adv-x="889" d="M631 223q80 0 192 35v-227q-114 -51 -280 -51q-183 0 -266.5 92.5t-83.5 277.5v539h-146v129l168 102l88 236h195v-238h313v-229h-313v-539q0 -65 36.5 -96t96.5 -31z" />
<glyph unicode="u" horiz-adv-x="1346" d="M952 0l-41 143h-16q-49 -78 -139 -120.5t-205 -42.5q-197 0 -297 105.5t-100 303.5v729h305v-653q0 -121 43 -181.5t137 -60.5q128 0 185 85.5t57 283.5v526h305v-1118h-234z" />
<glyph unicode="v" horiz-adv-x="1165" d="M426 0l-426 1118h319l216 -637q36 -121 45 -229h6q5 96 45 229l215 637h319l-426 -1118h-313z" />
<glyph unicode="w" horiz-adv-x="1753" d="M1079 0l-86 391l-116 494h-7l-204 -885h-328l-318 1118h304l129 -495q31 -133 63 -367h6q4 76 35 241l16 85l138 536h336l131 -536q4 -22 12.5 -65t16.5 -91.5t14.5 -95t7.5 -74.5h6q9 72 32 197.5t33 169.5l134 495h299l-322 -1118h-332z" />
<glyph unicode="x" horiz-adv-x="1184" d="M389 571l-360 547h346l217 -356l219 356h346l-364 -547l381 -571h-347l-235 383l-236 -383h-346z" />
<glyph unicode="y" horiz-adv-x="1165" d="M0 1118h334l211 -629q27 -82 37 -194h6q11 103 43 194l207 629h327l-473 -1261q-65 -175 -185.5 -262t-281.5 -87q-79 0 -155 17v242q55 -13 120 -13q81 0 141.5 49.5t94.5 149.5l18 55z" />
<glyph unicode="z" horiz-adv-x="999" d="M938 0h-883v180l518 705h-487v233h834v-198l-504 -687h522v-233z" />
<glyph unicode="{" horiz-adv-x="807" d="M287 270q0 87 -65.5 133t-190.5 46v239q126 0 191 44t65 126v8v318q0 153 97 215.5t341 62.5v-225q-99 -3 -136.5 -38t-37.5 -103v-299q-6 -188 -234 -222v-12q234 -35 234 -212v-9v-299q0 -68 37 -103t137 -38v-226q-244 0 -341 62.5t-97 216.5v315z" />
<glyph unicode="|" horiz-adv-x="1128" d="M455 1550h219v-2015h-219v2015z" />
<glyph unicode="}" horiz-adv-x="807" d="M520 -45q0 -112 -41 -169t-135.5 -83.5t-261.5 -26.5v226q99 2 136.5 36t37.5 105v299v11q0 86 59 139.5t174 70.5v12q-227 34 -233 222v299q0 70 -37 104t-137 37v225q167 0 262 -26.5t135.5 -84t40.5 -167.5v-318v-10q0 -84 61.5 -126t194.5 -42v-239 q-125 0 -190.5 -41t-65.5 -138v-315z" />
<glyph unicode="~" d="M322 672q-55 0 -117.5 -33.5t-116.5 -87.5v231q103 109 256 109q73 0 137.5 -16t139.5 -48q129 -55 227 -55q53 0 116 32t117 89v-231q-101 -109 -256 -109q-66 0 -126 13t-150 50q-131 56 -227 56z" />
<glyph unicode="&#xa1;" horiz-adv-x="586" d="M168 606h244l51 -975h-346zM467 948q0 -84 -45 -127t-131 -43q-83 0 -128.5 44t-45.5 126q0 81 46.5 125.5t127.5 44.5q84 0 130 -44t46 -126z" />
<glyph unicode="&#xa2;" d="M563 176q-420 59 -420 565q0 261 104.5 403t315.5 173v166h178v-158q166 -9 299 -74l-90 -235q-72 29 -134 47t-124 18q-121 0 -179 -83.5t-58 -254.5q0 -327 237 -327q82 0 148 15.5t166 60.5v-254q-127 -61 -265 -70v-188h-178v196z" />
<glyph unicode="&#xa3;" d="M700 1483q195 0 390 -82l-93 -230q-157 64 -272 64q-78 0 -120 -44.5t-42 -127.5v-193h375v-219h-375v-143q0 -170 -151 -248h718v-260h-1048v248q103 44 141.5 101t38.5 157v145h-178v219h178v195q0 201 114.5 309.5t323.5 108.5z" />
<glyph unicode="&#xa4;" d="M188 723q0 102 54 197l-129 127l147 147l127 -127q91 53 197 53q105 0 196 -55l127 129l150 -143l-129 -129q53 -89 53 -199q0 -107 -53 -199l125 -125l-146 -145l-127 125q-95 -51 -196 -51q-115 0 -199 51l-125 -123l-145 145l127 125q-54 93 -54 197zM395 723 q0 -77 54.5 -132.5t134.5 -55.5q81 0 136.5 55t55.5 133q0 80 -56.5 135t-135.5 55q-78 0 -133.5 -56t-55.5 -134z" />
<glyph unicode="&#xa5;" d="M584 860l264 602h313l-383 -747h195v-178h-246v-138h246v-178h-246v-221h-287v221h-247v178h247v138h-247v178h190l-377 747h316z" />
<glyph unicode="&#xa6;" horiz-adv-x="1128" d="M455 1550h219v-815h-219v815zM455 350h219v-815h-219v815z" />
<glyph unicode="&#xa7;" horiz-adv-x="995" d="M121 805q0 79 36 144.5t97 105.5q-133 84 -133 233q0 131 111.5 210t293.5 79q170 0 363 -84l-82 -190q-68 32 -138.5 57.5t-148.5 25.5q-81 0 -118 -23t-37 -71q0 -49 49.5 -86t163.5 -82q163 -64 240 -148.5t77 -193.5q0 -177 -125 -260q62 -40 93.5 -92.5t31.5 -126.5 q0 -148 -119.5 -235.5t-320.5 -87.5q-203 0 -349 79v207q81 -41 180 -69.5t169 -28.5q194 0 194 117q0 39 -18.5 63t-63.5 49.5t-125 59.5q-183 74 -252 152.5t-69 195.5zM344 827q0 -67 65 -119t181 -98q78 57 78 146q0 68 -50.5 115t-183.5 96q-37 -14 -63.5 -53.5 t-26.5 -86.5z" />
<glyph unicode="&#xa8;" horiz-adv-x="1243" d="M279 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM682 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M895 1010q-97 0 -150 -74t-53 -205q0 -280 203 -280q57 0 123 15t123 44v-191q-120 -57 -252 -57q-204 0 -316 125t-112 346q0 220 110.5 342.5t309.5 122.5q149 0 305 -78l-74 -168q-113 58 -217 58zM100 731q0 200 100 375t275 276t377 101q200 0 375 -100t276 -275 t101 -377q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM242 731q0 -164 82 -305.5t224 -223t304 -81.5q164 0 305.5 82t223 224t81.5 304q0 164 -82 305.5t-224 223t-304 81.5q-164 0 -305.5 -82t-223 -224t-81.5 -304z" />
<glyph unicode="&#xaa;" horiz-adv-x="784" d="M561 764l-31 110q-43 -58 -105 -90t-136 -32q-117 0 -179.5 58.5t-62.5 164.5q0 109 82.5 163.5t267.5 63.5l99 4q0 117 -127 117q-81 0 -217 -61l-66 135q66 32 145.5 57t178.5 25q137 0 211.5 -71t74.5 -202v-442h-135zM252 977q0 -38 23 -56t55 -18q77 0 121.5 41.5 t44.5 106.5v36l-99 -6q-145 -10 -145 -104z" />
<glyph unicode="&#xab;" horiz-adv-x="1260" d="M82 573l371 455l219 -119l-279 -348l279 -348l-219 -119l-371 453v26zM588 573l370 455l220 -119l-279 -348l279 -348l-220 -119l-370 453v26z" />
<glyph unicode="&#xac;" d="M1081 248h-219v364h-774v219h993v-583z" />
<glyph unicode="&#xad;" horiz-adv-x="659" d="M61 424zM61 424v250h537v-250h-537z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M1157 905q0 -170 -143 -233l237 -400h-254l-178 338h-47v-338h-229v916h264q181 0 265.5 -70t84.5 -213zM772 778h31q66 0 94.5 28.5t28.5 94.5q0 65 -28 92t-97 27h-29v-242zM100 731q0 200 100 375t275 276t377 101q200 0 375 -100t276 -275t101 -377q0 -197 -97 -370 t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM242 731q0 -164 82 -305.5t224 -223t304 -81.5q164 0 305.5 82t223 224t81.5 304q0 164 -82 305.5t-224 223t-304 81.5q-164 0 -305.5 -82t-223 -224t-81.5 -304z" />
<glyph unicode="&#xaf;" horiz-adv-x="1024" d="M1030 1556h-1036v201h1036v-201z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M92 1137q0 92 46 172t126 127t174 47q92 0 172.5 -46t127 -127t46.5 -173q0 -93 -46.5 -173.5t-126.5 -125.5t-173 -45q-145 0 -245.5 99.5t-100.5 244.5zM283 1137q0 -64 44.5 -109t110.5 -45t111 46t45 108q0 63 -45.5 110t-110.5 47q-64 0 -109.5 -46t-45.5 -111z" />
<glyph unicode="&#xb1;" d="M475 674h-387v219h387v389h219v-389h387v-219h-387v-385h-219v385zM88 0v219h993v-219h-993z" />
<glyph unicode="&#xb2;" horiz-adv-x="776" d="M702 586h-647v168l224 219q102 100 130.5 144.5t28.5 94.5q0 38 -24 58t-64 20q-81 0 -180 -88l-123 152q147 129 336 129q137 0 216 -66.5t79 -183.5q0 -85 -47 -160t-176 -192l-105 -95h352v-200z" />
<glyph unicode="&#xb3;" horiz-adv-x="776" d="M666 1249q0 -143 -170 -198v-13q94 -20 146 -75t52 -134q0 -121 -88 -190.5t-274 -69.5q-143 0 -273 70v190q148 -90 271 -90q143 0 143 107q0 53 -44 79.5t-122 26.5h-112v160h92q83 0 123.5 26t40.5 83q0 38 -25 63t-76 25q-47 0 -89 -19t-99 -59l-101 141 q62 47 137.5 78t178.5 31q127 0 208 -64t81 -168z" />
<glyph unicode="&#xb4;" horiz-adv-x="1243" d="M332 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xb5;" horiz-adv-x="1352" d="M465 465q0 -121 44 -181.5t138 -60.5q126 0 183 86.5t57 282.5v526h305v-1118h-231l-43 150h-15q-42 -85 -102 -127.5t-148 -42.5q-62 0 -114 23t-84 67l5 -85l5 -157v-320h-305v1610h305v-653z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1167 -260h-161v1616h-166v-1616h-162v819q-62 -18 -146 -18q-216 0 -317.5 125t-101.5 376q0 260 109 387t341 127h604v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="584" d="M117 723q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -81 -46.5 -125.5t-127.5 -44.5q-84 0 -130 44t-46 126z" />
<glyph unicode="&#xb8;" horiz-adv-x="420" d="M418 -250q0 -128 -75.5 -185t-233.5 -57q-78 0 -146 21v168q27 -7 72.5 -14t70.5 -7q72 0 72 62q0 83 -166 108l78 154h193l-27 -61q74 -24 118 -74.5t44 -114.5z" />
<glyph unicode="&#xb9;" horiz-adv-x="776" d="M584 586h-238v446l3 112l5 95q-27 -36 -75 -78l-78 -61l-109 127l301 235h191v-876z" />
<glyph unicode="&#xba;" horiz-adv-x="795" d="M737 1116q0 -171 -91.5 -267.5t-250.5 -96.5q-153 0 -245.5 98.5t-92.5 265.5q0 169 89.5 266t252.5 97q152 0 245 -98.5t93 -264.5zM260 1116q0 -100 32.5 -150.5t104.5 -50.5t103.5 50.5t31.5 150.5t-31.5 149.5t-103.5 49.5t-104.5 -49.5t-32.5 -149.5z" />
<glyph unicode="&#xbb;" horiz-adv-x="1260" d="M1178 547l-371 -453l-219 119l278 348l-278 348l219 119l371 -455v-26zM672 547l-371 -453l-219 119l278 348l-278 348l219 119l371 -455v-26z" />
<glyph unicode="&#xbc;" horiz-adv-x="1804" d="M46 0zM538 586h-238v446l3 112l5 95q-27 -36 -75 -78l-78 -61l-109 127l301 235h191v-876zM1370 1462l-811 -1462h-239l811 1462h239zM1682 152h-125v-151h-238v151h-383v154l385 577h236v-563h125v-168zM1319 320v164q0 86 6 184q-9 -26 -35.5 -80t-41.5 -77l-127 -191 h198z" />
<glyph unicode="&#xbd;" horiz-adv-x="1804" d="M46 0zM538 586h-238v446l3 112l5 95q-27 -36 -75 -78l-78 -61l-109 127l301 235h191v-876zM1370 1462l-811 -1462h-239l811 1462h239zM1716 1h-647v168l224 219q102 100 130.5 144.5t28.5 94.5q0 38 -24 58t-64 20q-81 0 -180 -88l-123 152q147 129 336 129 q137 0 216 -66.5t79 -183.5q0 -85 -47 -160t-176 -192l-105 -95h352v-200z" />
<glyph unicode="&#xbe;" horiz-adv-x="1804" d="M90 0zM697 1249q0 -143 -170 -198v-13q94 -20 146 -75t52 -134q0 -121 -88 -190.5t-274 -69.5q-143 0 -273 70v190q148 -90 271 -90q143 0 143 107q0 53 -44 79.5t-122 26.5h-112v160h92q83 0 123.5 26t40.5 83q0 38 -25 63t-76 25q-47 0 -89 -19t-99 -59l-101 141 q62 47 137.5 78t178.5 31q127 0 208 -64t81 -168zM1441 1462l-811 -1462h-239l811 1462h239zM1712 152h-125v-151h-238v151h-383v154l385 577h236v-563h125v-168zM1349 320v164q0 86 6 184q-9 -26 -35.5 -80t-41.5 -77l-127 -191h198z" />
<glyph unicode="&#xbf;" horiz-adv-x="977" d="M713 606v-74q0 -98 -44.5 -169t-152.5 -148q-109 -78 -137.5 -122t-28.5 -107q0 -57 43.5 -94t132.5 -37q79 0 169 29t186 71l102 -221q-98 -56 -221.5 -90.5t-229.5 -34.5q-220 0 -345.5 96.5t-125.5 265.5q0 108 48.5 187t191.5 184q95 70 121.5 107t26.5 98v59h264z M745 948q0 -84 -45 -127t-131 -43q-83 0 -128.5 44t-45.5 126q0 81 46.5 125.5t127.5 44.5q84 0 130 -44t46 -126z" />
<glyph unicode="&#xc0;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM713 1579q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xc1;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM541 1579v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xc2;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM938 1579q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xc3;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM543 1684q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16 q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#xc4;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM365 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM768 1743 q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xc5;" horiz-adv-x="1413" d="M0 0zM1079 0l-106 348h-533l-106 -348h-334l516 1468h379l518 -1468h-334zM899 608q-147 473 -165.5 535t-26.5 98q-33 -128 -189 -633h381zM959 1567q0 -108 -71 -174t-183 -66t-180 64t-68 174q0 108 67.5 172.5t180.5 64.5q110 0 182 -66t72 -169zM801 1565 q0 45 -27 70.5t-69 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69 26t27 71z" />
<glyph unicode="&#xc6;" horiz-adv-x="1950" d="M1829 0h-873v348h-491l-150 -348h-315l655 1462h1174v-254h-563v-321h526v-254h-526v-377h563v-256zM578 608h378v590h-127z" />
<glyph unicode="&#xc7;" horiz-adv-x="1305" d="M119 0zM805 1225q-175 0 -271 -131.5t-96 -366.5q0 -489 367 -489q154 0 373 77v-260q-180 -75 -402 -75q-319 0 -488 193.5t-169 555.5q0 228 83 399.5t238.5 263t364.5 91.5q213 0 428 -103l-100 -252q-82 39 -165 68t-163 29zM959 -250q0 -128 -75.5 -185t-233.5 -57 q-78 0 -146 21v168q27 -7 72.5 -14t70.5 -7q72 0 72 62q0 83 -166 108l78 154h193l-27 -61q74 -24 118 -74.5t44 -114.5z" />
<glyph unicode="&#xc8;" horiz-adv-x="1147" d="M184 0zM1026 0h-842v1462h842v-254h-532v-321h495v-254h-495v-377h532v-256zM634 1579q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xc9;" horiz-adv-x="1147" d="M184 0zM1026 0h-842v1462h842v-254h-532v-321h495v-254h-495v-377h532v-256zM424 1579v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xca;" horiz-adv-x="1147" d="M175 0zM1026 0h-842v1462h842v-254h-532v-321h495v-254h-495v-377h532v-256zM841 1579q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xcb;" horiz-adv-x="1147" d="M184 0zM1026 0h-842v1462h842v-254h-532v-321h495v-254h-495v-377h532v-256zM272 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM675 1743q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99 q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xcc;" horiz-adv-x="678" d="M0 0zM184 0v1462h310v-1462h-310zM317 1579q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xcd;" horiz-adv-x="678" d="M167 0zM184 0v1462h310v-1462h-310zM167 1579v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xce;" horiz-adv-x="678" d="M0 0zM184 0v1462h310v-1462h-310zM570 1579q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xcf;" horiz-adv-x="678" d="M0 0zM184 0v1462h310v-1462h-310zM-3 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM400 1743q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5 t-40.5 100.5z" />
<glyph unicode="&#xd0;" horiz-adv-x="1516" d="M47 850h137v612h459q358 0 556 -189t198 -528q0 -361 -205.5 -553t-593.5 -192h-414v596h-137v254zM1075 737q0 232 -104 351.5t-314 119.5h-163v-358h237v-254h-237v-340h131q450 0 450 481z" />
<glyph unicode="&#xd1;" horiz-adv-x="1665" d="M184 0zM1481 0h-394l-636 1106h-9q19 -293 19 -418v-688h-277v1462h391l635 -1095h7q-15 285 -15 403v692h279v-1462zM668 1684q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149 q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#xd2;" horiz-adv-x="1630" d="M119 0zM1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5zM824 1579q-63 44 -185 142.5t-190 164.5v21h342 q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xd3;" horiz-adv-x="1630" d="M119 0zM1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5zM658 1579v27q172 200 235 301h342v-21 q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xd4;" horiz-adv-x="1630" d="M119 0zM1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5zM1047 1579q-157 93 -234 176q-78 -81 -229 -176h-203 v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xd5;" horiz-adv-x="1630" d="M119 0zM1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5zM652 1684q-31 0 -59.5 -26.5t-41.5 -80.5h-149 q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#xd6;" horiz-adv-x="1630" d="M119 0zM1511 733q0 -363 -180 -558t-516 -195t-516 195t-180 560t180.5 557.5t517.5 192.5t515.5 -194t178.5 -558zM444 733q0 -245 93 -369t278 -124q371 0 371 493q0 494 -369 494q-185 0 -279 -124.5t-94 -369.5zM474 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37 t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM877 1743q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xd7;" d="M428 723l-299 301l152 154l301 -299l305 299l153 -150l-305 -305l301 -303l-149 -152l-305 301l-301 -299l-150 152z" />
<glyph unicode="&#xd8;" horiz-adv-x="1630" d="M1511 733q0 -363 -180 -558t-516 -195q-197 0 -336 65l-90 -135l-162 108l90 136q-198 194 -198 581q0 365 180.5 557.5t517.5 192.5q198 0 344 -70l84 125l160 -104l-88 -131q194 -194 194 -572zM444 733q0 -191 56 -307l506 756q-84 45 -189 45q-185 0 -279 -124.5 t-94 -369.5zM1186 733q0 180 -51 297l-500 -751q76 -39 180 -39q371 0 371 493z" />
<glyph unicode="&#xd9;" horiz-adv-x="1548" d="M174 0zM1374 1462v-946q0 -162 -72.5 -284t-209.5 -187t-324 -65q-282 0 -438 144.5t-156 395.5v942h309v-895q0 -169 68 -248t225 -79q152 0 220.5 79.5t68.5 249.5v893h309zM750 1579q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xda;" horiz-adv-x="1548" d="M174 0zM1374 1462v-946q0 -162 -72.5 -284t-209.5 -187t-324 -65q-282 0 -438 144.5t-156 395.5v942h309v-895q0 -169 68 -248t225 -79q152 0 220.5 79.5t68.5 249.5v893h309zM602 1579v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xdb;" horiz-adv-x="1548" d="M174 0zM1374 1462v-946q0 -162 -72.5 -284t-209.5 -187t-324 -65q-282 0 -438 144.5t-156 395.5v942h309v-895q0 -169 68 -248t225 -79q152 0 220.5 79.5t68.5 249.5v893h309zM1006 1579q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357 q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xdc;" horiz-adv-x="1548" d="M174 0zM1374 1462v-946q0 -162 -72.5 -284t-209.5 -187t-324 -65q-282 0 -438 144.5t-156 395.5v942h309v-895q0 -169 68 -248t225 -79q152 0 220.5 79.5t68.5 249.5v893h309zM433 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5 q-64 0 -101.5 35t-37.5 98zM836 1743q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xdd;" horiz-adv-x="1278" d="M0 0zM639 860l305 602h334l-485 -893v-569h-308v559l-485 903h336zM461 1579v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xde;" horiz-adv-x="1286" d="M1194 770q0 -229 -142.5 -353t-404.5 -124h-153v-293h-310v1462h310v-229h178q254 0 388 -119t134 -344zM494 543h100q145 0 216 52.5t71 174.5q0 107 -63.5 159t-199.5 52h-124v-438z" />
<glyph unicode="&#xdf;" horiz-adv-x="1456" d="M1249 1241q0 -64 -21 -112.5t-53 -86.5t-69 -67t-69 -53t-53 -45t-21 -43q0 -27 26.5 -53t92.5 -66q146 -91 198.5 -140t78 -110t25.5 -139q0 -172 -116.5 -259t-343.5 -87q-99 0 -171 14.5t-132 48.5v242q53 -36 135.5 -61t146.5 -25q168 0 168 123q0 41 -16 66.5 t-57 55.5t-115 72q-126 72 -175 131.5t-49 140.5q0 64 35 117t105 102q77 55 108 95t31 86q0 60 -63.5 100.5t-163.5 40.5q-116 0 -181 -52.5t-65 -148.5v-1128h-305v1139q0 201 146.5 314.5t404.5 113.5q244 0 391 -88.5t147 -237.5z" />
<glyph unicode="&#xe0;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM614 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xe1;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM441 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xe2;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM843 1240q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xe3;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM467 1346q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36 t-73 16.5z" />
<glyph unicode="&#xe4;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM285 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM688 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36 q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xe5;" horiz-adv-x="1237" d="M86 0zM870 0l-59 152h-8q-77 -97 -158.5 -134.5t-212.5 -37.5q-161 0 -253.5 92t-92.5 262q0 178 124.5 262.5t375.5 93.5l194 6v49q0 170 -174 170q-134 0 -315 -81l-101 206q193 101 428 101q225 0 345 -98t120 -298v-745h-213zM780 518l-118 -4q-133 -4 -198 -48 t-65 -134q0 -129 148 -129q106 0 169.5 61t63.5 162v92zM883 1479q0 -108 -71 -174t-183 -66t-180 64t-68 174q0 108 67.5 172.5t180.5 64.5q110 0 182 -66t72 -169zM725 1477q0 45 -27 70.5t-69 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69 26t27 71z" />
<glyph unicode="&#xe6;" horiz-adv-x="1878" d="M1329 -20q-137 0 -249.5 50.5t-184.5 155.5q-98 -117 -196.5 -161.5t-256.5 -44.5q-161 0 -258.5 94.5t-97.5 259.5q0 178 121 262.5t362 93.5l191 6v84q0 69 -44.5 102t-121.5 33q-140 0 -305 -77l-99 202q189 101 422 101q227 0 342 -131q66 64 152.5 96.5t206.5 32.5 q221 0 349 -137.5t128 -370.5v-148h-723q5 -130 77 -203t202 -73q196 0 380 88v-236q-79 -39 -171 -59t-226 -20zM760 518l-113 -4q-124 -4 -186 -47.5t-62 -134.5q0 -129 140 -129q101 0 161 61t60 162v92zM1307 922q-217 0 -234 -236h430q-2 112 -55 174t-141 62z" />
<glyph unicode="&#xe7;" horiz-adv-x="1053" d="M92 0zM614 -20q-522 0 -522 573q0 285 142 435.5t407 150.5q194 0 348 -76l-90 -236q-72 29 -134 47.5t-124 18.5q-238 0 -238 -338q0 -328 238 -328q88 0 163 23.5t150 73.5v-261q-74 -47 -149.5 -65t-190.5 -18zM805 -250q0 -128 -75.5 -185t-233.5 -57q-78 0 -146 21 v168q27 -7 72.5 -14t70.5 -7q72 0 72 62q0 83 -166 108l78 154h193l-27 -61q74 -24 118 -74.5t44 -114.5z" />
<glyph unicode="&#xe8;" horiz-adv-x="1210" d="M92 0zM623 922q-97 0 -152 -61.5t-63 -174.5h428q-2 113 -59 174.5t-154 61.5zM666 -20q-270 0 -422 149t-152 422q0 281 140.5 434.5t388.5 153.5q237 0 369 -135t132 -373v-148h-721q5 -130 77 -203t202 -73q101 0 191 21t188 67v-236q-80 -40 -171 -59.5t-222 -19.5z M620 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xe9;" horiz-adv-x="1210" d="M92 0zM623 922q-97 0 -152 -61.5t-63 -174.5h428q-2 113 -59 174.5t-154 61.5zM666 -20q-270 0 -422 149t-152 422q0 281 140.5 434.5t388.5 153.5q237 0 369 -135t132 -373v-148h-721q5 -130 77 -203t202 -73q101 0 191 21t188 67v-236q-80 -40 -171 -59.5t-222 -19.5z M447 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xea;" horiz-adv-x="1210" d="M92 0zM623 922q-97 0 -152 -61.5t-63 -174.5h428q-2 113 -59 174.5t-154 61.5zM666 -20q-270 0 -422 149t-152 422q0 281 140.5 434.5t388.5 153.5q237 0 369 -135t132 -373v-148h-721q5 -130 77 -203t202 -73q101 0 191 21t188 67v-236q-80 -40 -171 -59.5t-222 -19.5z M860 1241q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xeb;" horiz-adv-x="1210" d="M92 0zM623 922q-97 0 -152 -61.5t-63 -174.5h428q-2 113 -59 174.5t-154 61.5zM666 -20q-270 0 -422 149t-152 422q0 281 140.5 434.5t388.5 153.5q237 0 369 -135t132 -373v-148h-721q5 -130 77 -203t202 -73q101 0 191 21t188 67v-236q-80 -40 -171 -59.5t-222 -19.5z M297 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM700 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xec;" horiz-adv-x="625" d="M0 0zM465 0h-305v1118h305v-1118zM274 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xed;" horiz-adv-x="625" d="M145 0zM465 0h-305v1118h305v-1118zM145 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xee;" horiz-adv-x="625" d="M0 0zM465 0h-305v1118h305v-1118zM544 1241q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xef;" horiz-adv-x="625" d="M0 0zM465 0h-305v1118h305v-1118zM-29 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM374 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5 t-40.5 100.5z" />
<glyph unicode="&#xf0;" horiz-adv-x="1268" d="M510 1303q-80 53 -152 92l101 176q144 -65 258 -141l225 139l100 -154l-170 -104q156 -143 230 -324.5t74 -413.5q0 -280 -145 -436.5t-400 -156.5q-245 0 -392 137t-147 372q0 233 130 369.5t351 136.5q205 0 275 -98l8 4q-67 162 -192 281l-230 -142l-100 156zM864 532 q0 108 -61 173t-168 65q-121 0 -176.5 -68.5t-55.5 -214.5q0 -140 60 -211t172 -71q123 0 176 82t53 245z" />
<glyph unicode="&#xf1;" horiz-adv-x="1346" d="M160 0zM1192 0h-305v653q0 121 -43 181.5t-137 60.5q-128 0 -185 -85.5t-57 -283.5v-526h-305v1118h233l41 -143h17q51 81 140.5 122.5t203.5 41.5q195 0 296 -105.5t101 -304.5v-729zM508 1346q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82 q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#xf2;" horiz-adv-x="1268" d="M92 0zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z M612 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xf3;" horiz-adv-x="1268" d="M92 0zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z M467 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xf4;" horiz-adv-x="1268" d="M92 0zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z M864 1241q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xf5;" horiz-adv-x="1268" d="M92 0zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z M469 1346q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#xf6;" horiz-adv-x="1268" d="M92 0zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1176 561q0 -273 -144 -427t-401 -154q-161 0 -284 70.5t-189 202.5t-66 308q0 274 143 426t402 152q161 0 284 -70t189 -201t66 -307z M291 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM694 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xf7;" d="M88 612v219h993v-219h-993zM444 373q0 76 37 113.5t103 37.5t102.5 -39t36.5 -112q0 -70 -37 -111t-102 -41t-102.5 39t-37.5 113zM444 1071q0 75 37 113.5t103 38.5q67 0 103 -40.5t36 -111.5q0 -70 -37 -110.5t-102 -40.5t-102.5 39t-37.5 112z" />
<glyph unicode="&#xf8;" horiz-adv-x="1268" d="M1176 561q0 -273 -144 -427t-401 -154q-126 0 -234 45l-67 -101l-154 105l68 100q-152 156 -152 432q0 274 143 426t402 152q132 0 248 -52l55 82l152 -108l-58 -84q142 -155 142 -416zM403 561q0 -94 19 -166l317 475q-43 23 -106 23q-122 0 -176 -82.5t-54 -249.5z M864 561q0 81 -12 141l-309 -462q38 -15 92 -15q122 0 175.5 84.5t53.5 251.5z" />
<glyph unicode="&#xf9;" horiz-adv-x="1346" d="M154 0zM952 0l-41 143h-16q-49 -78 -139 -120.5t-205 -42.5q-197 0 -297 105.5t-100 303.5v729h305v-653q0 -121 43 -181.5t137 -60.5q128 0 185 85.5t57 283.5v526h305v-1118h-234zM620 1241q-63 44 -185 142.5t-190 164.5v21h342q63 -101 235 -301v-27h-202z" />
<glyph unicode="&#xfa;" horiz-adv-x="1346" d="M154 0zM952 0l-41 143h-16q-49 -78 -139 -120.5t-205 -42.5q-197 0 -297 105.5t-100 303.5v729h305v-653q0 -121 43 -181.5t137 -60.5q128 0 185 85.5t57 283.5v526h305v-1118h-234zM498 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5h-203z" />
<glyph unicode="&#xfb;" horiz-adv-x="1346" d="M154 0zM952 0l-41 143h-16q-49 -78 -139 -120.5t-205 -42.5q-197 0 -297 105.5t-100 303.5v729h305v-653q0 -121 43 -181.5t137 -60.5q128 0 185 85.5t57 283.5v526h305v-1118h-234zM901 1241q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357 q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#xfc;" horiz-adv-x="1346" d="M154 0zM952 0l-41 143h-16q-49 -78 -139 -120.5t-205 -42.5q-197 0 -297 105.5t-100 303.5v729h305v-653q0 -121 43 -181.5t137 -60.5q128 0 185 85.5t57 283.5v526h305v-1118h-234zM326 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5 t-103 -36.5q-64 0 -101.5 35t-37.5 98zM729 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#xfd;" horiz-adv-x="1165" d="M0 0zM0 1118h334l211 -629q27 -82 37 -194h6q11 103 43 194l207 629h327l-473 -1261q-65 -175 -185.5 -262t-281.5 -87q-79 0 -155 17v242q55 -13 120 -13q81 0 141.5 49.5t94.5 149.5l18 55zM393 1241v27q172 200 235 301h342v-21q-52 -52 -177.5 -154.5t-196.5 -152.5 h-203z" />
<glyph unicode="&#xfe;" horiz-adv-x="1296" d="M465 973q50 81 131 123.5t186 42.5q198 0 310 -154.5t112 -423.5q0 -273 -111.5 -427t-310.5 -154q-213 0 -317 137h-14l7 -62l7 -94v-453h-305v2048h305v-391l-7 -120l-7 -72h14zM684 895q-113 0 -165 -69.5t-54 -229.5v-33q0 -180 53.5 -258t169.5 -78q205 0 205 338 q0 165 -50.5 247.5t-158.5 82.5z" />
<glyph unicode="&#xff;" horiz-adv-x="1165" d="M0 0zM0 1118h334l211 -629q27 -82 37 -194h6q11 103 43 194l207 629h327l-473 -1261q-65 -175 -185.5 -262t-281.5 -87q-79 0 -155 17v242q55 -13 120 -13q81 0 141.5 49.5t94.5 149.5l18 55zM243 1405q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5 t-103 -36.5q-64 0 -101.5 35t-37.5 98zM646 1405q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#x131;" horiz-adv-x="625" d="M465 0h-305v1118h305v-1118z" />
<glyph unicode="&#x152;" horiz-adv-x="1993" d="M1872 0h-873q-38 -9 -109 -14.5t-116 -5.5q-319 0 -487 197t-168 558q0 363 169.5 556.5t487.5 193.5q61 0 127 -7t101 -16h868v-254h-563v-321h526v-254h-526v-377h563v-256zM776 1227q-166 0 -252 -125.5t-86 -368.5q0 -244 86 -368.5t250 -124.5q65 0 126 10.5 t99 28.5v907q-35 19 -101.5 30t-121.5 11z" />
<glyph unicode="&#x153;" horiz-adv-x="2003" d="M1446 -20q-271 0 -420 155q-141 -155 -391 -155q-162 0 -286 70t-190.5 202t-66.5 309q0 277 141.5 427.5t399.5 150.5q112 0 212 -39.5t171 -116.5q144 156 383 156q244 0 380 -135t136 -373v-148h-746v-8q7 -127 81.5 -197.5t207.5 -70.5q107 0 200 21t193 67v-236 q-81 -39 -175.5 -59t-229.5 -20zM403 561q0 -166 54.5 -251t177.5 -85q122 0 175.5 84.5t53.5 251.5q0 166 -54 249t-177 83q-122 0 -176 -82.5t-54 -249.5zM1405 922q-94 0 -156 -57.5t-71 -178.5h450q-2 111 -60.5 173.5t-162.5 62.5z" />
<glyph unicode="&#x178;" horiz-adv-x="1278" d="M0 0zM639 860l305 602h334l-485 -893v-569h-308v559l-485 903h336zM297 1743q0 65 37.5 100t101.5 35q66 0 103.5 -37t37.5 -98q0 -60 -38 -96.5t-103 -36.5q-64 0 -101.5 35t-37.5 98zM700 1743q0 70 40.5 102.5t100.5 32.5q65 0 103.5 -36t38.5 -99q0 -61 -39 -97 t-103 -36q-60 0 -100.5 32.5t-40.5 100.5z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1243" d="M852 1241q-157 93 -234 176q-78 -81 -229 -176h-203v27q189 189 256 301h357q31 -52 107.5 -141.5t148.5 -159.5v-27h-203z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M842 1479q0 -108 -71 -174t-183 -66t-180 64t-68 174q0 108 67.5 172.5t180.5 64.5q110 0 182 -66t72 -169zM684 1477q0 45 -27 70.5t-69 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69 26t27 71z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1243" d="M457 1346q-31 0 -59.5 -26.5t-41.5 -80.5h-149q11 145 82.5 227t189.5 82q41 0 80.5 -16.5t78 -36t75.5 -35.5t73 -16q31 0 59.5 26t41.5 80h149q-11 -145 -83.5 -227t-188.5 -82q-41 0 -80.5 16.5t-78 36t-75.5 36t-73 16.5z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="659" d="M61 424v250h537v-250h-537z" />
<glyph unicode="&#x2011;" horiz-adv-x="659" d="M61 424v250h537v-250h-537z" />
<glyph unicode="&#x2012;" horiz-adv-x="659" d="M61 424v250h537v-250h-537z" />
<glyph unicode="&#x2013;" horiz-adv-x="1024" d="M82 436v230h860v-230h-860z" />
<glyph unicode="&#x2014;" horiz-adv-x="2048" d="M82 436v230h1884v-230h-1884z" />
<glyph unicode="&#x2018;" horiz-adv-x="444" d="M39 961l-14 22q22 91 72.5 228.5t103.5 250.5h219q-66 -267 -101 -501h-280z" />
<glyph unicode="&#x2019;" horiz-adv-x="444" d="M406 1462l14 -22q-50 -197 -176 -479h-219q69 296 100 501h281z" />
<glyph unicode="&#x201a;" horiz-adv-x="596" d="M459 215q-52 -202 -176 -479h-220q65 266 101 502h280z" />
<glyph unicode="&#x201c;" horiz-adv-x="911" d="M492 983q22 91 72.5 228.5t103.5 250.5h219q-66 -267 -101 -501h-280zM25 983q22 91 72.5 228.5t103.5 250.5h219q-66 -267 -101 -501h-280z" />
<glyph unicode="&#x201d;" horiz-adv-x="911" d="M420 1440q-50 -197 -176 -479h-219q69 296 100 501h281zM887 1440q-50 -197 -176 -479h-219q69 296 100 501h280z" />
<glyph unicode="&#x201e;" horiz-adv-x="1061" d="M459 215q-52 -202 -176 -479h-220q65 266 101 502h280zM926 215q-52 -202 -176 -479h-220q65 266 101 502h280z" />
<glyph unicode="&#x2022;" horiz-adv-x="770" d="M98 748q0 154 74 235.5t213 81.5q137 0 212 -82t75 -235q0 -152 -75.5 -235t-211.5 -83q-138 0 -212.5 83t-74.5 235z" />
<glyph unicode="&#x2026;" horiz-adv-x="1751" d="M117 143q0 84 45 127t131 43q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5zM700 143q0 84 45 127t132 43q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-85 0 -131 44.5t-46 125.5zM1284 143q0 84 45 127t131 43 q83 0 128.5 -44t45.5 -126q0 -79 -46 -124.5t-128 -45.5q-84 0 -130 44.5t-46 125.5z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="754" d="M82 573l371 455l219 -119l-279 -348l279 -348l-219 -119l-371 453v26z" />
<glyph unicode="&#x203a;" horiz-adv-x="754" d="M672 547l-371 -453l-219 119l278 348l-278 348l219 119l371 -455v-26z" />
<glyph unicode="&#x2044;" horiz-adv-x="266" d="M657 1462l-811 -1462h-239l811 1462h239z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="776" d="M758 737h-125v-151h-238v151h-383v154l385 577h236v-563h125v-168zM395 905v164q0 86 6 184q-9 -26 -35.5 -80t-41.5 -77l-127 -191h198z" />
<glyph unicode="&#x20ac;" d="M803 1225q-122 0 -201 -70.5t-102 -204.5h403v-176h-418l-2 -35v-47l2 -33h355v-178h-338q51 -243 321 -243q143 0 275 57v-256q-116 -59 -293 -59q-245 0 -403 133t-199 368h-137v178h118q-4 23 -4 62l2 53h-116v176h133q37 242 199 382.5t405 140.5q188 0 352 -82 l-98 -232q-69 31 -129 48.5t-125 17.5z" />
<glyph unicode="&#x2122;" horiz-adv-x="1534" d="M381 741h-168v572h-197v149h564v-149h-199v-572zM956 741l-165 529h-7l4 -111v-418h-163v721h247l160 -510l170 510h240v-721h-168v408l4 121h-6l-174 -529h-142z" />
<glyph unicode="&#xe000;" horiz-adv-x="1120" d="M0 1120h1120v-1120h-1120v1120z" />
<glyph horiz-adv-x="1296" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
</font>
</defs></svg>

================
File: docs/map-editor/fonts/OpenSans-BoldItalic-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sansbold_italic" horiz-adv-x="1128" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb01;" horiz-adv-x="1352" d="M0 0zM-45 -492q-104 0 -174 25v242q61 -21 115 -21q61 0 107 40t65 130l204 965h-163l30 145l183 84l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49l-80 -224q-69 31 -133 31q-57 0 -92 -40t-47 -105l-12 -62h219l-49 -229h-220l-215 -1010q-77 -371 -403 -371z M1065 1380q0 87 47.5 131.5t134.5 44.5q73 0 111 -31t38 -89q0 -80 -44 -129.5t-136 -49.5q-151 0 -151 123zM1081 0h-301l237 1118h301z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1352" d="M0 0zM-45 -492q-104 0 -174 25v242q61 -21 115 -21q61 0 107 40t65 130l204 965h-163l30 145l183 84l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49l-80 -224q-69 31 -133 31q-57 0 -92 -40t-47 -105l-12 -62h219l-49 -229h-220l-215 -1010q-77 -371 -403 -371z M1081 0h-301l330 1556h301z" />
<glyph unicode="&#xfb03;" horiz-adv-x="2048" d="M-45 -492q-104 0 -174 25v242q61 -21 115 -21q61 0 107 40t65 130l204 965h-163l30 145l183 84l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49l-80 -224q-69 31 -133 31q-57 0 -92 -40t-47 -105l-12 -62h395l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49 l-79 -224q-69 31 -134 31q-57 0 -91.5 -40t-47.5 -105l-12 -62h219l-49 -229h-219l-215 -1010q-77 -371 -404 -371q-104 0 -174 25v242q61 -21 115 -21q136 0 172 170l205 965h-396l-215 -1010q-77 -371 -403 -371zM1778 0h-301l237 1118h301zM1761 1380q0 87 48 131.5 t135 44.5q73 0 111 -31t38 -89q0 -80 -44 -129.5t-136 -49.5q-152 0 -152 123z" />
<glyph unicode="&#xfb04;" horiz-adv-x="2048" d="M-45 -492q-104 0 -174 25v242q61 -21 115 -21q61 0 107 40t65 130l204 965h-163l30 145l183 84l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49l-80 -224q-69 31 -133 31q-57 0 -92 -40t-47 -105l-12 -62h395l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49 l-79 -224q-69 31 -134 31q-57 0 -91.5 -40t-47.5 -105l-12 -62h219l-49 -229h-219l-215 -1010q-77 -371 -404 -371q-104 0 -174 25v242q61 -21 115 -21q136 0 172 170l205 965h-396l-215 -1010q-77 -371 -403 -371zM1778 0h-301l329 1556h301z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="586" d="M391 485h-241l157 977h340zM25 115q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5z" />
<glyph unicode="&#x22;" horiz-adv-x="928" d="M549 1462l-152 -528h-196l71 528h277zM954 1462l-151 -528h-199l74 528h276z" />
<glyph unicode="#" horiz-adv-x="1323" d="M1036 846l-69 -232h258l-19 -206h-297l-116 -408h-220l117 408h-194l-115 -408h-215l113 408h-238l18 206h277l70 232h-252l18 209h289l119 407h217l-117 -407h199l116 407h215l-116 -407h239l-18 -209h-279zM553 614h197l69 232h-196z" />
<glyph unicode="$" d="M1034 496q0 -184 -125.5 -291.5t-367.5 -124.5l-39 -199h-140l44 201q-209 12 -355 86v266q198 -107 404 -117l71 322q-163 61 -241 151t-78 214q0 173 127 279.5t350 121.5l35 151h139l-33 -151q166 -22 295 -90l-106 -232q-132 65 -242 74l-63 -299q131 -51 195 -99.5 t97 -113t33 -149.5zM594 322q63 9 102 45t39 98q0 46 -24.5 75.5t-59.5 43.5zM633 1157q-62 -7 -96.5 -41t-34.5 -94q0 -79 80 -111z" />
<glyph unicode="%" horiz-adv-x="1753" d="M518 1274q-63 0 -110.5 -128.5t-47.5 -277.5q0 -96 56 -96q65 0 112 131t47 275q0 96 -57 96zM821 1165q0 -166 -56 -310t-151 -217t-217 -73q-139 0 -210.5 83.5t-71.5 236.5q0 169 55.5 311.5t148.5 214.5t216 72q137 0 211.5 -80t74.5 -238zM1554 1462l-1083 -1462 h-240l1088 1462h235zM1376 690q-39 0 -75 -56t-59 -154t-23 -195t55 -97q41 0 77 55t59.5 154.5t23.5 196.5q0 96 -58 96zM1679 590q0 -167 -54 -313.5t-148 -220.5t-215 -74q-144 0 -216.5 78.5t-72.5 222.5q0 177 53 322.5t148 219.5t219 74q137 0 211.5 -78.5 t74.5 -230.5z" />
<glyph unicode="&#x26;" horiz-adv-x="1450" d="M1325 0h-350l-72 98q-175 -118 -403 -118q-209 0 -320.5 97.5t-111.5 280.5q0 145 78.5 248.5t273.5 200.5q-76 130 -76 258q0 195 117.5 307.5t316.5 112.5q169 0 266 -82.5t97 -224.5q0 -280 -365 -426l195 -263q44 57 80.5 121.5t78.5 173.5h300q-133 -313 -310 -497z M541 623q-88 -51 -123 -104.5t-35 -131.5q0 -65 45.5 -108t116.5 -43q115 0 221 59zM662 920q113 59 155.5 111t42.5 112q0 57 -30 82.5t-70 25.5q-66 0 -102.5 -46.5t-36.5 -119.5q0 -46 12 -92t29 -73z" />
<glyph unicode="'" horiz-adv-x="522" d="M549 1462l-152 -528h-196l71 528h277z" />
<glyph unicode="(" horiz-adv-x="694" d="M74 281q0 339 122.5 626.5t381.5 554.5h262q-255 -278 -377.5 -573.5t-122.5 -618.5q0 -308 117 -594h-234q-149 266 -149 605z" />
<glyph unicode=")" horiz-adv-x="694" d="M618 858q0 -342 -124 -630.5t-379 -551.5h-262q499 545 499 1192q0 307 -116 594h233q149 -264 149 -604z" />
<glyph unicode="*" horiz-adv-x="1116" d="M885 1522l-113 -353l387 29l-18 -254l-338 43l160 -336l-246 -73l-90 337l-197 -278l-207 164l275 248l-326 92l86 237l338 -174l33 369z" />
<glyph unicode="+" d="M475 612h-366v219h366v369h219v-369h367v-219h-367v-364h-219v364z" />
<glyph unicode="," horiz-adv-x="569" d="M377 238l8 -23q-118 -255 -262 -479h-225q74 167 194 502h285z" />
<glyph unicode="-" horiz-adv-x="659" d="M41 424l53 250h524l-53 -250h-524z" />
<glyph unicode="." horiz-adv-x="584" d="M25 115q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5z" />
<glyph unicode="/" horiz-adv-x="862" d="M1014 1462l-809 -1462h-295l809 1462h295z" />
<glyph unicode="0" d="M1110 1012q0 -470 -168.5 -751t-472.5 -281q-198 0 -300.5 122t-102.5 365q0 297 84 537t228 360.5t333 120.5q399 0 399 -473zM684 1235q-80 0 -149.5 -104t-117.5 -302t-48 -368q0 -115 27.5 -173.5t97.5 -58.5q81 0 150.5 106t116 301t46.5 386q0 111 -30.5 162 t-92.5 51z" />
<glyph unicode="1" d="M688 0h-305l180 829q35 152 76 287q-9 -8 -61.5 -47t-262.5 -170l-133 215l566 348h249z" />
<glyph unicode="2" d="M913 0h-962l43 213l477 424q180 159 248.5 254.5t68.5 179.5q0 75 -41 114.5t-110 39.5q-66 0 -135.5 -33.5t-171.5 -118.5l-146 203q132 112 252 159.5t250 47.5q190 0 301 -98t111 -259q0 -107 -41 -201t-122.5 -188t-266.5 -245l-269 -222v-10h568z" />
<glyph unicode="3" d="M1104 1149q0 -156 -94.5 -262t-261.5 -135v-4q131 -26 198.5 -106.5t67.5 -201.5q0 -133 -74 -238t-212 -163.5t-327 -58.5q-239 0 -387 79v267q84 -50 182 -75.5t191 -25.5q158 0 243 63.5t85 176.5q0 172 -258 172h-138l46 221h73q167 0 263 62t96 172q0 67 -43 104 t-121 37q-134 0 -287 -100l-127 204q124 81 232.5 113.5t246.5 32.5q190 0 298 -90.5t108 -243.5z" />
<glyph unicode="4" d="M1028 303h-170l-63 -303h-293l63 303h-590l48 234l770 925h311l-195 -919h170zM616 543l58 248q12 58 40 164t42 141h-6q-35 -63 -132 -181l-313 -372h311z" />
<glyph unicode="5" d="M623 922q183 0 289 -103t106 -287q0 -167 -71.5 -292t-208.5 -192.5t-330 -67.5q-117 0 -218.5 23t-162.5 58v269q174 -99 352 -99q154 0 241 71t87 194q0 94 -57.5 141t-166.5 47q-102 0 -213 -33l-104 78l207 733h755l-55 -262h-489l-88 -293q72 15 127 15z" />
<glyph unicode="6" d="M88 469q0 202 61 395.5t167.5 335t256.5 213.5t357 72q125 0 223 -27l-51 -246q-84 25 -191 25q-194 0 -313.5 -108t-185.5 -345h4q115 166 311 166q157 0 242.5 -97t85.5 -273q0 -169 -71 -313.5t-190.5 -215.5t-277.5 -71q-212 0 -320 127t-108 362zM530 227 q99 0 161.5 94t62.5 236q0 71 -33.5 113.5t-102.5 42.5q-60 0 -114.5 -35.5t-87.5 -95.5t-33 -160q0 -91 40 -143t107 -52z" />
<glyph unicode="7" d="M78 0l737 1202h-629l56 260h975l-41 -194l-752 -1268h-346z" />
<glyph unicode="8" d="M721 1485q123 0 215.5 -42t141 -118t48.5 -174q0 -134 -80.5 -233.5t-230.5 -151.5q217 -141 217 -365q0 -122 -63.5 -218.5t-181 -149.5t-273.5 -53q-214 0 -336.5 100t-122.5 270q0 298 348 426q-165 132 -165 299q0 119 58 212.5t168 145.5t257 52zM582 643 q-116 -45 -173 -107t-57 -153q0 -81 50 -128.5t135 -47.5q93 0 147.5 53.5t54.5 138.5q0 73 -36.5 131.5t-120.5 112.5zM694 1260q-76 0 -121 -46.5t-45 -119.5q0 -132 123 -201q185 72 185 221q0 68 -39.5 107t-102.5 39z" />
<glyph unicode="9" d="M1092 1001q0 -280 -99 -533t-264 -370.5t-403 -117.5q-128 0 -240 32v256q111 -41 227 -41q121 0 207.5 49t144 138.5t99.5 257.5h-4q-111 -158 -295 -158q-163 0 -252.5 103.5t-89.5 285.5q0 166 73 305.5t196 208t286 68.5q203 0 308.5 -123t105.5 -361zM645 1237 q-65 0 -115.5 -42t-78 -114t-27.5 -153q0 -87 37.5 -131.5t105.5 -44.5q60 0 111.5 36.5t82 100t30.5 158.5q0 84 -35.5 137t-110.5 53z" />
<glyph unicode=":" horiz-adv-x="584" d="M207 940q0 92 55.5 145.5t149.5 53.5q68 0 108.5 -38.5t40.5 -107.5q0 -86 -54.5 -140t-144.5 -54q-72 0 -113.5 36.5t-41.5 104.5zM25 115q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5z" />
<glyph unicode=";" horiz-adv-x="584" d="M385 215q-118 -255 -262 -479h-225q74 167 194 502h285zM207 940q0 92 55.5 145.5t149.5 53.5q68 0 108.5 -38.5t40.5 -107.5q0 -86 -54.5 -140t-144.5 -54q-72 0 -113.5 36.5t-41.5 104.5z" />
<glyph unicode="&#x3c;" d="M1061 203l-952 438v143l952 496v-240l-643 -317l643 -281v-239z" />
<glyph unicode="=" d="M109 807v217h952v-217h-952zM109 418v219h952v-219h-952z" />
<glyph unicode="&#x3e;" d="M109 442l643 281l-643 317v240l952 -496v-143l-952 -438v239z" />
<glyph unicode="?" horiz-adv-x="940" d="M260 485l14 78q19 103 73.5 177t172.5 155q124 84 157.5 127t33.5 96q0 119 -133 119q-50 0 -106.5 -16t-201.5 -84l-92 221q230 125 445 125q177 0 280 -87.5t103 -244.5q0 -83 -28.5 -149.5t-82.5 -123t-190 -147.5q-64 -43 -96.5 -73t-52.5 -64.5t-38 -108.5h-258z M166 115q0 91 55 144.5t150 53.5q68 0 108.5 -38t40.5 -107q0 -87 -55 -141t-143 -54q-74 0 -115 38t-41 104z" />
<glyph unicode="@" horiz-adv-x="1753" d="M1733 840q0 -173 -64 -321t-177.5 -231t-254.5 -83q-88 0 -144.5 38.5t-72.5 108.5h-6q-50 -77 -113 -112t-147 -35q-127 0 -198 79.5t-71 229.5q0 147 67.5 276.5t187.5 205t268 75.5q185 0 327 -55l-106 -420q-11 -44 -19 -76.5t-8 -64.5q0 -68 58 -68q66 0 124 64 t92.5 171t34.5 214q0 213 -123.5 325.5t-359.5 112.5q-203 0 -366.5 -94t-255 -266t-91.5 -392q0 -243 134 -380.5t376 -137.5q117 0 219.5 20t221.5 66v-186q-230 -90 -465 -90q-217 0 -378 85.5t-246 241.5t-85 359q0 279 120.5 497t343 341.5t497.5 123.5 q318 0 499 -163.5t181 -458.5zM995 889q-82 0 -145.5 -51.5t-100 -137t-36.5 -174.5q0 -65 24.5 -102t69.5 -37q141 0 213 270l57 222q-36 10 -82 10z" />
<glyph unicode="A" horiz-adv-x="1286" d="M842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333z" />
<glyph unicode="B" horiz-adv-x="1270" d="M788 1462q229 0 346 -81.5t117 -243.5q0 -150 -83 -247.5t-236 -129.5v-6q100 -26 159.5 -96.5t59.5 -180.5q0 -229 -153 -353t-423 -124h-522l309 1462h426zM545 883h149q121 0 181.5 48.5t60.5 139.5q0 137 -170 137h-152zM412 256h180q117 0 183.5 58t66.5 161 q0 162 -183 162h-165z" />
<glyph unicode="C" horiz-adv-x="1253" d="M905 1227q-132 0 -237.5 -81t-169.5 -238.5t-64 -338.5q0 -167 68.5 -248t218.5 -81q146 0 338 77v-260q-199 -77 -400 -77q-254 0 -395 149.5t-141 423.5q0 262 104 482.5t278 335t400 114.5q125 0 222 -22.5t208 -82.5l-118 -250q-106 59 -175 78t-137 19z" />
<glyph unicode="D" horiz-adv-x="1386" d="M1323 909q0 -280 -98 -486.5t-283.5 -314.5t-437.5 -108h-451l309 1462h396q270 0 417.5 -143t147.5 -410zM518 256q148 0 258 76t172 223.5t62 337.5q0 154 -72.5 234.5t-208.5 80.5h-115l-202 -952h106z" />
<glyph unicode="E" horiz-adv-x="1110" d="M870 0h-817l309 1462h818l-54 -254h-512l-67 -321h477l-55 -254h-477l-80 -377h512z" />
<glyph unicode="F" horiz-adv-x="1087" d="M358 0h-305l309 1462h814l-54 -254h-508l-79 -377h473l-56 -253h-473z" />
<glyph unicode="G" horiz-adv-x="1413" d="M754 821h563l-162 -762q-134 -46 -248.5 -62.5t-242.5 -16.5q-259 0 -400 147t-141 422q0 268 107 484.5t301 334t448 117.5q218 0 410 -99l-115 -251q-74 40 -148 64t-161 24q-153 0 -273.5 -83t-189 -236.5t-68.5 -330.5q0 -172 72.5 -252.5t222.5 -80.5q76 0 170 24 l66 299h-267z" />
<glyph unicode="H" horiz-adv-x="1434" d="M1135 0h-306l134 631h-471l-134 -631h-305l309 1462h306l-121 -573h471l121 573h305z" />
<glyph unicode="I" horiz-adv-x="659" d="M53 0l312 1462h305l-312 -1462h-305z" />
<glyph unicode="J" horiz-adv-x="678" d="M-135 -430q-94 0 -187 27v253q88 -20 164 -20q99 0 160.5 60.5t89.5 191.5l293 1380h305l-303 -1423q-52 -245 -175.5 -357t-346.5 -112z" />
<glyph unicode="K" horiz-adv-x="1255" d="M1141 0h-338l-211 592l-125 -70l-109 -522h-305l309 1462h306l-152 -702l158 205l409 497h361l-594 -700z" />
<glyph unicode="L" horiz-adv-x="1061" d="M53 0l309 1462h306l-256 -1206h512l-54 -256h-817z" />
<glyph unicode="M" horiz-adv-x="1802" d="M838 369l551 1093h423l-309 -1462h-280l145 692q53 247 105 441h-5l-569 -1133h-281l-61 1133h-4q-11 -88 -38 -231t-187 -902h-275l309 1462h404l68 -1093h4z" />
<glyph unicode="N" horiz-adv-x="1546" d="M1247 0h-342l-356 1106h-6l-4 -32q-32 -216 -66 -386l-145 -688h-275l309 1462h357l340 -1077h4q12 76 39 217t180 860h274z" />
<glyph unicode="O" horiz-adv-x="1495" d="M1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246t56 357 q0 142 -65 219.5t-183 77.5z" />
<glyph unicode="P" horiz-adv-x="1188" d="M522 774h56q142 0 223.5 69t81.5 185q0 180 -195 180h-74zM1190 1036q0 -241 -169.5 -378.5t-467.5 -137.5h-86l-109 -520h-305l309 1462h338q242 0 366 -106.5t124 -319.5z" />
<glyph unicode="Q" horiz-adv-x="1495" d="M1432 938q0 -316 -122.5 -555.5t-334.5 -337.5l254 -393h-359l-178 328h-26q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87 t155.5 246t56 357q0 142 -65 219.5t-183 77.5z" />
<glyph unicode="R" horiz-adv-x="1247" d="M530 813h78q131 0 204 57t73 174q0 82 -47.5 123t-149.5 41h-74zM477 561l-119 -561h-305l309 1462h359q237 0 356 -102t119 -299q0 -158 -83 -271.5t-239 -168.5l261 -621h-332l-207 561h-119z" />
<glyph unicode="S" horiz-adv-x="1085" d="M946 432q0 -209 -148 -330.5t-401 -121.5q-221 0 -356 90v274q193 -108 358 -108q112 0 175 42.5t63 116.5q0 43 -13.5 75.5t-38.5 60.5t-124 102q-138 99 -194 196t-56 209q0 129 62 230.5t176.5 158t263.5 56.5q217 0 397 -99l-109 -233q-156 74 -288 74 q-83 0 -136 -45t-53 -119q0 -61 33 -106.5t148 -120.5q121 -80 181 -176.5t60 -225.5z" />
<glyph unicode="T" horiz-adv-x="1087" d="M571 0h-305l254 1204h-352l55 258h1010l-55 -258h-353z" />
<glyph unicode="U" horiz-adv-x="1415" d="M1434 1462l-201 -946q-57 -266 -218 -401t-419 -135q-212 0 -333.5 113.5t-121.5 307.5q0 72 15 138l196 923h305l-194 -919q-17 -74 -17 -125q0 -178 189 -178q123 0 195 76.5t104 228.5l194 917h306z" />
<glyph unicode="V" horiz-adv-x="1208" d="M535 299q78 221 110 283l432 880h316l-748 -1462h-334l-127 1462h295l51 -880q4 -45 4 -133q-2 -103 -6 -150h7z" />
<glyph unicode="W" horiz-adv-x="1831" d="M1006 1018q-46 -146 -115 -299l-324 -719h-338l-45 1462h287l6 -798q0 -52 -4 -173t-10 -174h6q22 64 67 180.5t60 145.5l369 819h270l21 -873q0 -146 -9 -272h6q43 129 131 349l330 796h309l-647 -1462h-346l-22 721l-2 139q0 88 4 158h-4z" />
<glyph unicode="X" horiz-adv-x="1241" d="M1124 0h-331l-172 543l-396 -543h-342l576 764l-238 698h320l153 -518l363 518h344l-545 -725z" />
<glyph unicode="Y" horiz-adv-x="1155" d="M627 870l374 592h342l-618 -903l-119 -559h-303l119 559l-236 903h312z" />
<glyph unicode="Z" horiz-adv-x="1098" d="M920 0h-981l38 201l777 1005h-543l53 256h936l-41 -202l-782 -1004h596z" />
<glyph unicode="[" horiz-adv-x="678" d="M436 -324h-473l381 1786h473l-45 -211h-215l-291 -1364h215z" />
<glyph unicode="\" horiz-adv-x="862" d="M481 1462l224 -1462h-267l-217 1462h260z" />
<glyph unicode="]" horiz-adv-x="678" d="M-92 -113h213l291 1364h-215l45 211h473l-381 -1786h-471z" />
<glyph unicode="^" horiz-adv-x="1081" d="M20 520l619 950h147l277 -950h-223l-174 633l-402 -633h-244z" />
<glyph unicode="_" horiz-adv-x="819" d="M635 -324h-821l30 140h822z" />
<glyph unicode="`" horiz-adv-x="1135" d="M934 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="a" horiz-adv-x="1217" d="M406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44z" />
<glyph unicode="b" horiz-adv-x="1219" d="M813 1139q146 0 230.5 -108t84.5 -298t-68 -367.5t-187 -281.5t-263 -104q-194 0 -276 163h-8l-58 -143h-231l330 1556h301l-62 -288q-41 -182 -84 -299h8q78 98 142.5 134t140.5 36zM692 895q-68 0 -130 -65t-102 -180.5t-40 -250.5q0 -80 37 -128t102 -48q67 0 128 69 t98.5 189.5t37.5 237.5q0 176 -131 176z" />
<glyph unicode="c" horiz-adv-x="989" d="M506 -20q-201 0 -308.5 107.5t-107.5 303.5q0 212 74.5 385.5t209.5 268t308 94.5q182 0 328 -72l-92 -229q-54 23 -106 40t-118 17q-85 0 -153.5 -64t-107 -175.5t-38.5 -239.5q0 -96 45.5 -144.5t126.5 -48.5q76 0 141 23.5t134 58.5v-246q-152 -79 -336 -79z" />
<glyph unicode="d" horiz-adv-x="1217" d="M406 -20q-147 0 -231.5 107t-84.5 300q0 196 71.5 374.5t188.5 278t258 99.5q82 0 141.5 -37t112.5 -127h8l2 28q6 110 25 195l76 358h301l-330 -1556h-229l14 145h-4q-71 -87 -148.5 -126t-170.5 -39zM532 223q66 0 128.5 68.5t100.5 182.5t38 245q0 80 -37.5 128 t-102.5 48q-68 0 -129.5 -72t-98 -190t-36.5 -234q0 -176 137 -176z" />
<glyph unicode="e" horiz-adv-x="1141" d="M696 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95zM532 -20q-210 0 -326 113t-116 319q0 207 82.5 377.5t223.5 260t319 89.5q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-477 -101.5h-51l-2 -21v-20q0 -91 51.5 -143.5t147.5 -52.5 q87 0 158 19t172 67v-227q-172 -86 -390 -86z" />
<glyph unicode="f" horiz-adv-x="764" d="M-45 -492q-104 0 -174 25v242q61 -21 115 -21q61 0 107 40t65 130l204 965h-163l30 145l183 84l18 84q41 190 138.5 277.5t273.5 87.5q131 0 235 -49l-80 -224q-69 31 -133 31q-57 0 -92 -40t-47 -105l-12 -62h219l-49 -229h-220l-215 -1010q-77 -371 -403 -371z" />
<glyph unicode="g" horiz-adv-x="1108" d="M1186 1116l-35 -166l-174 -41q16 -52 16 -118q0 -195 -121 -308.5t-329 -113.5q-59 0 -99 10q-84 -27 -84 -78q0 -34 30 -49t89 -23l137 -18q163 -21 237.5 -84.5t74.5 -183.5q0 -211 -156 -323t-446 -112q-208 0 -324.5 75.5t-116.5 207.5q0 102 68.5 175.5t214.5 121.5 q-74 47 -74 133q0 71 44.5 122.5t146.5 98.5q-65 49 -96 112t-31 153q0 199 125.5 315.5t341.5 116.5q83 0 166 -23h395zM365 -6q-106 -14 -160.5 -57t-54.5 -109q0 -115 194 -115q151 0 228 45t77 127q0 39 -32.5 60t-137.5 35zM614 948q-77 0 -124.5 -76.5t-47.5 -191.5 q0 -119 103 -119q75 0 121.5 76.5t46.5 193.5t-99 117z" />
<glyph unicode="h" horiz-adv-x="1237" d="M977 0h-301l137 653q16 68 16 119q0 123 -108 123q-92 0 -167 -114t-118 -318l-98 -463h-301l330 1556h301q-39 -181 -60 -278t-86 -309h8q62 77 138 123.5t176 46.5q138 0 213.5 -83.5t75.5 -238.5q0 -73 -23 -180z" />
<glyph unicode="i" horiz-adv-x="608" d="M322 1380q0 87 47.5 131.5t134.5 44.5q73 0 111 -31t38 -89q0 -80 -44 -129.5t-136 -49.5q-151 0 -151 123zM338 0h-301l237 1118h301z" />
<glyph unicode="j" horiz-adv-x="608" d="M-90 -492q-104 0 -174 25v242q61 -21 114 -21q137 0 173 170l253 1194h302l-265 -1239q-77 -371 -403 -371zM324 1380q0 87 47.5 131.5t134.5 44.5q73 0 111 -31t38 -89q0 -80 -44 -129.5t-136 -49.5q-151 0 -151 123z" />
<glyph unicode="k" horiz-adv-x="1163" d="M920 1118h344l-498 -504l285 -614h-336l-183 420l-120 -72l-74 -348h-301l330 1556h301l-148 -694q-8 -41 -29 -117l-28 -102h4z" />
<glyph unicode="l" horiz-adv-x="608" d="M338 0h-301l330 1556h301z" />
<glyph unicode="m" horiz-adv-x="1853" d="M844 1139q219 0 262 -228h6q68 110 160.5 169t197.5 59q136 0 207.5 -85t71.5 -237q0 -76 -23 -180l-133 -637h-301l138 653q16 68 16 119q0 123 -98 123q-92 0 -166.5 -112t-118.5 -318l-96 -465h-301l137 653q16 68 16 119q0 123 -98 123q-92 0 -167 -114t-118 -318 l-98 -463h-301l237 1118h230l-21 -207h6q146 228 355 228z" />
<glyph unicode="n" horiz-adv-x="1237" d="M977 0h-301l137 653q16 68 16 119q0 123 -108 123q-92 0 -167 -114t-118 -318l-98 -463h-301l237 1118h230l-21 -207h6q146 228 355 228q138 0 213.5 -83.5t75.5 -238.5q0 -73 -23 -180z" />
<glyph unicode="o" horiz-adv-x="1198" d="M805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5q196 0 310 -118 t114 -325z" />
<glyph unicode="p" horiz-adv-x="1219" d="M813 1139q146 0 230.5 -107.5t84.5 -300.5q0 -191 -68.5 -367.5t-187.5 -280t-262 -103.5q-83 0 -143 37t-111 126h-8q-12 -159 -43 -295l-72 -340h-301l342 1610h230l-17 -170h9q138 191 317 191zM692 895q-68 0 -131.5 -67.5t-102 -180t-38.5 -248.5q0 -80 37 -128 t102 -48q67 0 128 69t98.5 189.5t37.5 237.5q0 176 -131 176z" />
<glyph unicode="q" horiz-adv-x="1217" d="M391 -20q-88 0 -156 47.5t-106.5 138.5t-38.5 219q0 198 72 377.5t189 278t257 98.5q86 0 152.5 -37.5t124.5 -126.5h8l57 143h232l-342 -1610h-301q47 218 73 337.5t84 304.5h-8q-72 -94 -143 -132t-154 -38zM535 223q64 0 127.5 70t100 181t36.5 245q0 80 -37.5 128 t-102.5 48q-68 0 -129.5 -72t-98 -190t-36.5 -234q0 -88 36.5 -132t103.5 -44z" />
<glyph unicode="r" horiz-adv-x="862" d="M842 1139q59 0 96 -11l-66 -290q-45 16 -100 16q-116 0 -203.5 -91.5t-124.5 -262.5l-106 -500h-301l237 1118h230l-21 -207h6q147 228 353 228z" />
<glyph unicode="s" horiz-adv-x="969" d="M829 369q0 -188 -124.5 -288.5t-346.5 -100.5q-107 0 -186.5 15t-148.5 50v248q157 -90 319 -90q80 0 131 32.5t51 88.5q0 43 -37 77t-131 86q-121 68 -169 135.5t-48 159.5q0 170 110.5 263.5t315.5 93.5q201 0 363 -95l-99 -215q-140 84 -258 84q-57 0 -92 -25.5 t-35 -68.5q0 -39 32 -68.5t120 -74.5q123 -63 178 -137t55 -170z" />
<glyph unicode="t" horiz-adv-x="840" d="M514 223q65 0 162 35v-225q-111 -53 -266 -53q-150 0 -220.5 63t-70.5 195q0 50 12 112l115 539h-152l29 147l196 84l132 236h194l-49 -238h283l-50 -229h-282l-115 -539q-6 -30 -6 -53q0 -74 88 -74z" />
<glyph unicode="u" horiz-adv-x="1237" d="M262 1118h301l-137 -653q-16 -68 -16 -119q0 -123 108 -123q92 0 167 114t118 318l98 463h301l-237 -1118h-230l21 207h-6q-145 -227 -355 -227q-138 0 -211 82.5t-73 238.5q0 93 24 213z" />
<glyph unicode="v" horiz-adv-x="1049" d="M455 301q55 153 92 223l297 594h323l-604 -1118h-323l-138 1118h295l45 -586q7 -133 7 -231h6z" />
<glyph unicode="w" horiz-adv-x="1614" d="M856 860q-62 -178 -123 -319l-233 -541h-324l-51 1118h281l4 -495l-4 -167l-7 -171h4q6 20 14 41.5t51 136.5t46 119l231 536h328v-536q0 -142 -10 -297h6l28 80q73 208 95 258l219 495h307l-530 -1118h-330l-6 520q0 155 10 340h-6z" />
<glyph unicode="x" horiz-adv-x="1087" d="M379 573l-225 545h321l115 -334l244 334h354l-467 -561l244 -557h-326l-125 342l-264 -342h-350z" />
<glyph unicode="y" horiz-adv-x="1063" d="M102 1118h295l56 -518q14 -122 14 -293h6q20 51 44 119.5t65 153.5l260 538h327l-680 -1278q-177 -332 -483 -332q-90 0 -147 19v240q68 -13 116 -13q84 0 147.5 48t117.5 149l26 49z" />
<glyph unicode="z" horiz-adv-x="932" d="M748 0h-795l35 180l575 705h-397l51 233h750l-43 -200l-566 -685h439z" />
<glyph unicode="{" horiz-adv-x="727" d="M201 319q0 140 -209 140l45 229q122 0 192.5 41.5t92.5 138.5l61 285q38 170 131 239.5t270 69.5h84l-49 -225q-90 -2 -130.5 -34.5t-55.5 -106.5l-66 -297q-45 -207 -276 -236v-8q85 -26 126.5 -82.5t41.5 -134.5q0 -44 -15 -113l-36 -178q-7 -28 -7 -51q0 -54 33.5 -74 t91.5 -20v-226h-53q-167 0 -253.5 63.5t-86.5 184.5q0 57 14 125l39 184q15 69 15 86z" />
<glyph unicode="|" d="M455 1550h219v-2015h-219v2015z" />
<glyph unicode="}" horiz-adv-x="727" d="M256 1462q340 0 340 -248q0 -56 -14 -124l-39 -185q-15 -69 -15 -86q0 -139 209 -139l-45 -229q-122 0 -192.5 -42t-91.5 -139l-62 -284q-37 -170 -130.5 -240t-270.5 -70h-45v226q93 3 137 35.5t59 105.5l66 297q25 111 95 166t181 69v9q-168 51 -168 217q0 43 15 112 l37 179q6 30 6 51q0 54 -36.5 74t-109.5 20l41 225h33z" />
<glyph unicode="~" d="M342 672q-54 0 -116.5 -33t-116.5 -88v231q101 109 256 109q64 0 117 -14t139 -50q64 -27 111 -41t95 -14q51 0 112 30.5t122 90.5v-231q-103 -109 -256 -109q-59 0 -109 11.5t-147 51.5q-89 38 -127 47t-80 9z" />
<glyph unicode="&#xa1;" horiz-adv-x="586" d="M182 606h242l-158 -977h-340zM549 977q0 -92 -55.5 -145.5t-149.5 -53.5q-68 0 -108.5 38t-40.5 108q0 85 54 139.5t144 54.5q73 0 114.5 -37t41.5 -104z" />
<glyph unicode="&#xa2;" d="M575 -20h-188l49 210q-134 36 -203 136t-69 258q0 193 62.5 355t178 262.5t267.5 123.5l33 158h188l-35 -158q118 -14 225 -65l-92 -230q-53 23 -105 40t-118 17q-133 0 -216 -143t-83 -336q0 -96 45 -144t127 -48q75 0 140 23.5t134 58.5v-246q-136 -71 -299 -80z" />
<glyph unicode="&#xa3;" d="M872 1485q195 0 369 -86l-113 -232q-141 68 -237 68q-75 0 -123 -39.5t-68 -132.5l-47 -229h299l-45 -220h-299l-18 -84q-42 -195 -209 -270h655l-55 -260h-993l49 246q196 48 244 264l22 104h-192l45 220h192l49 247q41 197 162 300.5t313 103.5z" />
<glyph unicode="&#xa4;" d="M190 723q0 102 54 197l-129 127l147 147l127 -127q91 53 197 53q105 0 196 -55l127 129l150 -143l-129 -129q53 -89 53 -199q0 -107 -53 -199l125 -125l-146 -145l-127 125q-95 -51 -196 -51q-115 0 -199 51l-125 -123l-145 145l127 125q-54 93 -54 197zM397 723 q0 -77 54.5 -132.5t134.5 -55.5q81 0 136.5 55t55.5 133q0 80 -56.5 135t-135.5 55q-78 0 -133.5 -56t-55.5 -134z" />
<glyph unicode="&#xa5;" d="M608 872l371 590h311l-506 -747h203l-39 -178h-252l-28 -138h252l-37 -178h-252l-47 -221h-291l47 221h-252l37 178h252l29 138h-252l39 178h196l-192 747h297z" />
<glyph unicode="&#xa6;" d="M455 1550h219v-815h-219v815zM455 350h219v-815h-219v815z" />
<glyph unicode="&#xa7;" horiz-adv-x="995" d="M150 760q0 89 47.5 163t154.5 142q-42 34 -70 84.5t-28 107.5q0 149 117 234.5t313 85.5q172 0 344 -88l-82 -193q-147 84 -282 84q-144 0 -144 -106q0 -43 40.5 -76t127.5 -72q242 -106 242 -303q0 -188 -193 -303q38 -35 64 -85.5t26 -108.5q0 -161 -126 -253.5 t-345 -92.5q-204 0 -336 75v224q172 -105 345 -105q99 0 144.5 35t45.5 92q0 39 -33 72.5t-127 79.5q-117 57 -181 131t-64 176zM506 967q-51 -25 -82 -70.5t-31 -99.5t43.5 -96.5t143.5 -88.5q49 31 75.5 78.5t26.5 95.5q0 109 -176 181z" />
<glyph unicode="&#xa8;" horiz-adv-x="1135" d="M397 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM799 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M932 1010q-111 0 -163 -73t-52 -214q0 -134 55.5 -203t159.5 -69q43 0 108.5 15.5t124.5 43.5v-191q-131 -57 -262 -57q-196 0 -307 122.5t-111 336.5q0 225 117.5 351t325.5 126q142 0 284 -72l-75 -174q-114 58 -205 58zM125 731q0 200 100 375t275 276t377 101 q199 0 373.5 -99t276 -275.5t101.5 -377.5q0 -199 -98.5 -373t-272.5 -276t-380 -102q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM266 731q0 -164 81.5 -305t224 -223t305.5 -82q167 0 308 83t221.5 223.5t80.5 303.5t-80.5 303.5t-222 223.5t-307.5 83 q-164 0 -306.5 -82.5t-223.5 -223.5t-81 -304z" />
<glyph unicode="&#xaa;" horiz-adv-x="772" d="M369 752q-103 0 -160 70t-57 198q0 117 46 228t123 171t177 60q120 0 180 -103h6l39 90h154l-158 -702h-154l8 92h-2q-80 -104 -202 -104zM442 903q45 0 84 41.5t65.5 120t26.5 154.5q0 106 -88 106q-73 0 -123.5 -96t-50.5 -215q0 -111 86 -111z" />
<glyph unicode="&#xab;" horiz-adv-x="1151" d="M72 569l401 463l191 -155l-279 -334l135 -350l-246 -103l-202 461v18zM559 569l402 463l190 -155l-279 -334l136 -350l-246 -103l-203 461v18z" />
<glyph unicode="&#xac;" d="M1061 248h-219v364h-733v219h952v-583z" />
<glyph unicode="&#xad;" horiz-adv-x="659" d="M41 424zM41 424l53 250h524l-53 -250h-524z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M1237 899q0 -86 -44 -149.5t-130 -96.5l197 -360h-254l-138 297h-67v-297h-230v874h308q173 0 265.5 -67.5t92.5 -200.5zM801 758h51q72 0 113 31t41 92q0 59 -35.5 88.5t-116.5 29.5h-53v-241zM125 731q0 200 100 375t275 276t377 101q199 0 373.5 -99t276 -275.5 t101.5 -377.5q0 -199 -98.5 -373t-272.5 -276t-380 -102q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM266 731q0 -164 81.5 -305t224 -223t305.5 -82q167 0 308 83t221.5 223.5t80.5 303.5t-80.5 303.5t-222 223.5t-307.5 83q-164 0 -306.5 -82.5t-223.5 -223.5t-81 -304z " />
<glyph unicode="&#xaf;" horiz-adv-x="1024" d="M1030 1556h-1036l45 201h1036z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M164 1137q0 93 46.5 173.5t127.5 126.5t172 46q93 0 173.5 -47t126.5 -127t46 -172q0 -93 -46 -173t-126 -125.5t-174 -45.5q-93 0 -173 45t-126.5 125t-46.5 174zM354 1137q0 -63 45.5 -108.5t110.5 -45.5q66 0 111 46t45 108q0 63 -45.5 110t-110.5 47t-110.5 -47.5 t-45.5 -109.5z" />
<glyph unicode="&#xb1;" d="M475 674h-366v219h366v369h219v-369h367v-219h-367v-365h-219v365zM109 0v219h952v-219h-952z" />
<glyph unicode="&#xb2;" horiz-adv-x="776" d="M707 586h-648l35 166l273 219q111 91 141 122t44.5 59t14.5 56q0 42 -25.5 62t-60.5 20q-86 0 -188 -82l-100 158q74 57 156 87t192 30q123 0 196.5 -63t73.5 -160q0 -70 -22 -123t-70 -103.5t-189 -152.5l-129 -95h347z" />
<glyph unicode="&#xb3;" horiz-adv-x="776" d="M813 1270q0 -87 -51 -145.5t-166 -88.5v-4q154 -33 154 -176q0 -131 -107 -209t-285 -78q-75 0 -145.5 15.5t-120.5 40.5v192q125 -72 254 -72q76 0 125 30.5t49 88.5q0 37 -26 62.5t-88 25.5h-127l34 160h90q84 0 132.5 28t48.5 85q0 40 -26 60t-71 20q-86 0 -188 -66 l-82 150q142 92 313 92q130 0 206.5 -55.5t76.5 -155.5z" />
<glyph unicode="&#xb4;" horiz-adv-x="1135" d="M483 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xb5;" horiz-adv-x="1249" d="M424 348q0 -60 31.5 -92.5t79.5 -32.5q90 0 162.5 106.5t117.5 319.5l98 469h301l-237 -1118h-229l18 176h-6q-117 -196 -266 -196q-51 0 -89.5 19.5t-58.5 47.5h-6q-8 -66 -21.5 -139t-82.5 -400h-304l342 1610h301l-135 -645q-16 -70 -16 -125z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1202 -260h-162v1616h-166v-1616h-161v819q-62 -18 -146 -18q-216 0 -318 125t-102 376q0 256 107.5 385t343.5 129h604v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="584" d="M131 553zM131 695q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5z" />
<glyph unicode="&#xb8;" horiz-adv-x="420" d="M262 -250q0 -116 -83 -179t-234 -63q-86 0 -152 23v168q63 -23 125 -23q102 0 102 82q0 34 -31 56.5t-110 31.5l96 154h185l-39 -72q141 -49 141 -178z" />
<glyph unicode="&#xb9;" horiz-adv-x="776" d="M528 1462h207l-186 -876h-246l84 397q24 109 55 207q-16 -15 -80 -60l-131 -81l-102 165z" />
<glyph unicode="&#xba;" horiz-adv-x="754" d="M809 1194q0 -128 -48.5 -232.5t-132.5 -157t-196 -52.5q-134 0 -202 75t-68 211q0 197 104 319t277 122q129 0 197.5 -73.5t68.5 -211.5zM522 1315q-64 0 -107.5 -89.5t-43.5 -199.5q0 -111 80 -111q63 0 105 85.5t42 207.5q0 107 -76 107z" />
<glyph unicode="&#xbb;" horiz-adv-x="1151" d="M1079 535l-401 -463l-191 155l279 334l-135 350l246 103l202 -461v-18zM592 535l-402 -463l-190 155l279 334l-136 350l246 103l203 -461v-18z" />
<glyph unicode="&#xbc;" horiz-adv-x="1804" d="M97 0zM1500 1462l-1084 -1462h-239l1087 1462h236zM496 1462h207l-186 -876h-246l84 397q24 109 55 207q-16 -15 -80 -60l-131 -81l-102 165zM1573 152h-119l-32 -151h-238l33 151h-373l31 174l475 557h260l-121 -563h119zM1252 320l58 231l22 74q-13 -20 -43 -58 t-211 -247h174z" />
<glyph unicode="&#xbd;" horiz-adv-x="1804" d="M97 0zM1588 1h-648l35 166l273 219q111 91 141 122t44.5 59t14.5 56q0 42 -25.5 62t-60.5 20q-86 0 -188 -82l-100 158q74 57 156 87t192 30q123 0 196.5 -63t73.5 -160q0 -70 -22 -123t-70 -103.5t-189 -152.5l-129 -95h347zM496 1462h207l-186 -876h-246l84 397 q24 109 55 207q-16 -15 -80 -60l-131 -81l-102 165zM1500 1462l-1084 -1462h-239l1087 1462h236z" />
<glyph unicode="&#xbe;" horiz-adv-x="1804" d="M133 0zM1633 1462l-1084 -1462h-239l1087 1462h236zM1634 152h-119l-32 -151h-238l33 151h-373l31 174l475 557h260l-121 -563h119zM1313 320l58 231l22 74q-13 -20 -43 -58t-211 -247h174zM854 1270q0 -87 -51 -145.5t-166 -88.5v-4q154 -33 154 -176q0 -131 -107 -209 t-285 -78q-75 0 -145.5 15.5t-120.5 40.5v192q125 -72 254 -72q76 0 125 30.5t49 88.5q0 37 -26 62.5t-88 25.5h-127l34 160h90q84 0 132.5 28t48.5 85q0 40 -26 60t-71 20q-86 0 -188 -66l-82 150q142 92 313 92q130 0 206.5 -55.5t76.5 -155.5z" />
<glyph unicode="&#xbf;" horiz-adv-x="940" d="M678 606l-14 -78q-19 -105 -76.5 -180t-169.5 -151q-122 -83 -156.5 -126t-34.5 -98q0 -118 133 -118q50 0 106.5 16t201.5 84l92 -221q-221 -125 -445 -125q-177 0 -280 87.5t-103 244.5q0 82 28.5 148.5t83.5 124t189 146.5q93 62 128 106.5t51 106.5l8 33h258z M772 977q0 -92 -55.5 -145.5t-149.5 -53.5q-68 0 -108.5 38t-40.5 108q0 86 54.5 140t143.5 54q73 0 114.5 -37t41.5 -104z" />
<glyph unicode="&#xc0;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM965 1579h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xc1;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM735 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xc2;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM1235 1579h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z " />
<glyph unicode="&#xc3;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM999 1579q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5 t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xc4;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM516 1720q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM918 1720q0 78 42 118t120 40 q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xc5;" horiz-adv-x="1286" d="M0 0zM842 348h-473l-172 -348h-320l766 1468h373l147 -1468h-297zM827 608l-26 350q-10 131 -10 253v36q-44 -120 -109 -254l-188 -385h333zM1087 1567q0 -107 -70 -173.5t-184 -66.5q-110 0 -179 63.5t-69 174.5q0 109 68.5 173t179.5 64q110 0 182 -65t72 -170z M930 1565q0 45 -27.5 70.5t-69.5 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69.5 26t27.5 71z" />
<glyph unicode="&#xc6;" horiz-adv-x="1833" d="M1593 0h-817l74 348h-426l-219 -348h-328l922 1462h1104l-54 -254h-512l-67 -321h477l-55 -254h-478l-79 -377h512zM905 608l127 600h-80l-364 -600h317z" />
<glyph unicode="&#xc7;" horiz-adv-x="1253" d="M123 0zM905 1227q-132 0 -237.5 -81t-169.5 -238.5t-64 -338.5q0 -167 68.5 -248t218.5 -81q146 0 338 77v-260q-199 -77 -400 -77q-254 0 -395 149.5t-141 423.5q0 262 104 482.5t278 335t400 114.5q125 0 222 -22.5t208 -82.5l-118 -250q-106 59 -175 78t-137 19z M825 -250q0 -116 -83 -179t-234 -63q-86 0 -152 23v168q63 -23 125 -23q102 0 102 82q0 34 -31 56.5t-110 31.5l96 154h185l-39 -72q141 -49 141 -178z" />
<glyph unicode="&#xc8;" horiz-adv-x="1110" d="M53 0zM870 0h-817l309 1462h818l-54 -254h-512l-67 -321h477l-55 -254h-477l-80 -377h512zM906 1579h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xc9;" horiz-adv-x="1110" d="M53 0zM870 0h-817l309 1462h818l-54 -254h-512l-67 -321h477l-55 -254h-477l-80 -377h512zM608 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xca;" horiz-adv-x="1110" d="M53 0zM870 0h-817l309 1462h818l-54 -254h-512l-67 -321h477l-55 -254h-477l-80 -377h512zM1177 1579h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xcb;" horiz-adv-x="1110" d="M53 0zM870 0h-817l309 1462h818l-54 -254h-512l-67 -321h477l-55 -254h-477l-80 -377h512zM438 1720q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM840 1720q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5 t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xcc;" horiz-adv-x="659" d="M53 0zM53 0l312 1462h305l-312 -1462h-305zM667 1579h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xcd;" horiz-adv-x="659" d="M53 0zM53 0l312 1462h305l-312 -1462h-305zM414 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xce;" horiz-adv-x="659" d="M53 0zM53 0l312 1462h305l-312 -1462h-305zM937 1579h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xcf;" horiz-adv-x="659" d="M53 0zM53 0l312 1462h305l-312 -1462h-305zM222 1720q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM624 1720q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xd0;" horiz-adv-x="1386" d="M1323 909q0 -280 -98 -486.5t-283.5 -314.5t-437.5 -108h-451l125 596h-141l55 254h139l131 612h396q270 0 417.5 -143t147.5 -410zM518 256q148 0 258 76t172 223.5t62 337.5q0 154 -72.5 234.5t-208.5 80.5h-115l-75 -358h237l-55 -254h-238l-71 -340h106z" />
<glyph unicode="&#xd1;" horiz-adv-x="1546" d="M53 0zM1247 0h-342l-356 1106h-6l-4 -32q-32 -216 -66 -386l-145 -688h-275l309 1462h357l340 -1077h4q12 76 39 217t180 860h274zM1114 1579q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36 t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xd2;" horiz-adv-x="1495" d="M123 0zM1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246 t56 357q0 142 -65 219.5t-183 77.5zM1053 1579h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xd3;" horiz-adv-x="1495" d="M123 0zM1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246 t56 357q0 142 -65 219.5t-183 77.5zM753 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xd4;" horiz-adv-x="1495" d="M123 0zM1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246 t56 357q0 142 -65 219.5t-183 77.5zM1308 1579h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xd5;" horiz-adv-x="1495" d="M123 0zM1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246 t56 357q0 142 -65 219.5t-183 77.5zM1071 1579q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xd6;" horiz-adv-x="1495" d="M123 0zM1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q255 0 395 -144t140 -403zM872 1227q-121 0 -222 -91.5t-158.5 -251.5t-57.5 -347q0 -147 66.5 -222t187.5 -75t220.5 87t155.5 246 t56 357q0 142 -65 219.5t-183 77.5zM585 1720q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM987 1720q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xd7;" d="M428 723l-299 301l152 154l301 -299l305 299l153 -150l-305 -305l301 -303l-149 -152l-305 301l-301 -299l-150 152z" />
<glyph unicode="&#xd8;" horiz-adv-x="1495" d="M1432 938q0 -283 -99 -506.5t-271 -337.5t-396 -114q-180 0 -304 71l-108 -137l-154 115l121 151q-98 138 -98 357q0 265 99 487.5t273 341.5t402 119q182 0 305 -76l105 131l151 -117l-117 -145q91 -134 91 -340zM870 1233q-126 0 -229 -91.5t-160 -252.5t-57 -352 q0 -32 8 -101l596 754q-69 43 -158 43zM1133 930l-5 80l-589 -740q59 -37 153 -37q124 0 226 89t158.5 247.5t56.5 360.5z" />
<glyph unicode="&#xd9;" horiz-adv-x="1415" d="M141 0zM1434 1462l-201 -946q-57 -266 -218 -401t-419 -135q-212 0 -333.5 113.5t-121.5 307.5q0 72 15 138l196 923h305l-194 -919q-17 -74 -17 -125q0 -178 189 -178q123 0 195 76.5t104 228.5l194 917h306zM1002 1579h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311 q36 -148 115 -303v-25z" />
<glyph unicode="&#xda;" horiz-adv-x="1415" d="M141 0zM1434 1462l-201 -946q-57 -266 -218 -401t-419 -135q-212 0 -333.5 113.5t-121.5 307.5q0 72 15 138l196 923h305l-194 -919q-17 -74 -17 -125q0 -178 189 -178q123 0 195 76.5t104 228.5l194 917h306zM757 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5 t-194 -158.5h-209v25z" />
<glyph unicode="&#xdb;" horiz-adv-x="1415" d="M141 0zM1434 1462l-201 -946q-57 -266 -218 -401t-419 -135q-212 0 -333.5 113.5t-121.5 307.5q0 72 15 138l196 923h305l-194 -919q-17 -74 -17 -125q0 -178 189 -178q123 0 195 76.5t104 228.5l194 917h306zM1284 1579h-198q-63 53 -162 168q-105 -88 -232 -168h-217 v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xdc;" horiz-adv-x="1415" d="M141 0zM1434 1462l-201 -946q-57 -266 -218 -401t-419 -135q-212 0 -333.5 113.5t-121.5 307.5q0 72 15 138l196 923h305l-194 -919q-17 -74 -17 -125q0 -178 189 -178q123 0 195 76.5t104 228.5l194 917h306zM565 1720q0 78 42.5 118t119.5 40q133 0 133 -108 q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM967 1720q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xdd;" horiz-adv-x="1155" d="M186 0zM627 870l374 592h342l-618 -903l-119 -559h-303l119 559l-236 903h312zM606 1604q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xde;" horiz-adv-x="1188" d="M1143 807q0 -243 -170.5 -378.5t-466.5 -135.5h-86l-62 -293h-305l309 1462h306l-50 -229h35q242 0 366 -106.5t124 -319.5zM475 547h55q139 0 222.5 66.5t83.5 185.5q0 180 -195 180h-74z" />
<glyph unicode="&#xdf;" horiz-adv-x="1350" d="M846 1567q208 0 331 -90t123 -240q0 -114 -49 -192t-178 -152q-73 -42 -96 -68.5t-23 -54.5q0 -23 22 -49.5t79 -69.5q107 -83 144.5 -150.5t37.5 -150.5q0 -170 -123.5 -270t-337.5 -100q-187 0 -297 61v240q128 -78 258 -78q101 0 148 33t47 86q0 40 -26.5 75 t-108.5 97q-94 72 -129 130t-35 126q0 84 45 145t162 127q66 37 104.5 76t38.5 96q0 62 -39.5 98.5t-124.5 36.5q-96 0 -156 -51.5t-85 -171.5l-254 -1219q-43 -198 -147 -288.5t-277 -90.5q-90 0 -160 25v242q61 -21 115 -21q133 0 170 178l254 1207q47 224 182 326 t385 102z" />
<glyph unicode="&#xe0;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM869 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xe1;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM598 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xe2;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM1120 1240h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xe3;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM884 1241q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xe4;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM397 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM799 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xe5;" horiz-adv-x="1217" d="M90 0zM406 -20q-147 0 -231.5 106.5t-84.5 298.5q0 198 72 377.5t189 278t257 98.5q97 0 167.5 -42t109.5 -122h8l57 143h232l-238 -1118h-229l14 145h-4q-134 -165 -319 -165zM524 223q69 0 133 67t103 181.5t39 259.5q0 71 -38.5 117.5t-101.5 46.5q-68 0 -129.5 -72 t-98 -190t-36.5 -234q0 -88 33.5 -132t95.5 -44zM1023 1479q0 -107 -70 -173.5t-184 -66.5q-110 0 -179 63.5t-69 174.5q0 109 68.5 173t179.5 64q110 0 182 -65t72 -170zM866 1477q0 45 -27.5 70.5t-69.5 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69.5 26t27.5 71z " />
<glyph unicode="&#xe6;" horiz-adv-x="1786" d="M1206 -20q-109 0 -179.5 27t-117.5 87l-16 -94h-188l14 145h-6q-71 -88 -146.5 -126.5t-167.5 -38.5q-146 0 -227.5 109t-81.5 296q0 200 68.5 375.5t185 277t258.5 101.5q96 0 160.5 -38.5t114.5 -125.5h6l57 143h188l-18 -90q44 49 120.5 80t168.5 31 q157 0 246.5 -83.5t89.5 -221.5q0 -187 -167 -288.5t-476 -101.5h-52l-2 -19v-19q0 -96 55.5 -147.5t159.5 -51.5q66 0 152 23t162 63v-227q-179 -86 -361 -86zM518 223q72 0 134 68t99 184.5t37 243.5q0 80 -33 128t-102 48q-68 0 -128 -69t-95 -185.5t-35 -241.5 q0 -84 32.5 -130t90.5 -46zM1341 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95z" />
<glyph unicode="&#xe7;" horiz-adv-x="989" d="M90 0zM506 -20q-201 0 -308.5 107.5t-107.5 303.5q0 212 74.5 385.5t209.5 268t308 94.5q182 0 328 -72l-92 -229q-54 23 -106 40t-118 17q-85 0 -153.5 -64t-107 -175.5t-38.5 -239.5q0 -96 45.5 -144.5t126.5 -48.5q76 0 141 23.5t134 58.5v-246q-152 -79 -336 -79z M653 -250q0 -116 -83 -179t-234 -63q-86 0 -152 23v168q63 -23 125 -23q102 0 102 82q0 34 -31 56.5t-110 31.5l96 154h185l-39 -72q141 -49 141 -178z" />
<glyph unicode="&#xe8;" horiz-adv-x="1141" d="M90 0zM696 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95zM532 -20q-210 0 -326 113t-116 319q0 207 82.5 377.5t223.5 260t319 89.5q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-477 -101.5h-51l-2 -21v-20q0 -91 51.5 -143.5 t147.5 -52.5q87 0 158 19t172 67v-227q-172 -86 -390 -86zM849 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xe9;" horiz-adv-x="1141" d="M90 0zM696 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95zM532 -20q-210 0 -326 113t-116 319q0 207 82.5 377.5t223.5 260t319 89.5q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-477 -101.5h-51l-2 -21v-20q0 -91 51.5 -143.5 t147.5 -52.5q87 0 158 19t172 67v-227q-172 -86 -390 -86zM528 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xea;" horiz-adv-x="1141" d="M90 0zM696 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95zM532 -20q-210 0 -326 113t-116 319q0 207 82.5 377.5t223.5 260t319 89.5q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-477 -101.5h-51l-2 -21v-20q0 -91 51.5 -143.5 t147.5 -52.5q87 0 158 19t172 67v-227q-172 -86 -390 -86zM1101 1241h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xeb;" horiz-adv-x="1141" d="M90 0zM696 922q-88 0 -166 -80t-102 -195h45q155 0 241.5 48.5t86.5 131.5q0 95 -105 95zM532 -20q-210 0 -326 113t-116 319q0 207 82.5 377.5t223.5 260t319 89.5q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-477 -101.5h-51l-2 -21v-20q0 -91 51.5 -143.5 t147.5 -52.5q87 0 158 19t172 67v-227q-172 -86 -390 -86zM365 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM767 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xec;" horiz-adv-x="608" d="M37 0zM338 0h-301l237 1118h301zM579 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xed;" horiz-adv-x="608" d="M37 0zM338 0h-301l237 1118h301zM291 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xee;" horiz-adv-x="608" d="M36 0zM338 0h-301l237 1118h301zM845 1241h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xef;" horiz-adv-x="608" d="M37 0zM338 0h-301l237 1118h301zM126 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM528 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xf0;" horiz-adv-x="1182" d="M618 1309q-34 34 -124 80l118 186q134 -61 232 -139l237 131l76 -152l-192 -106q81 -107 113 -235t32 -279q0 -249 -69.5 -432.5t-203.5 -283t-323 -99.5q-216 0 -329 110t-113 316q0 165 64.5 301t180.5 212t265 76q83 0 151.5 -31t114.5 -94h6q-20 213 -117 310 l-231 -131l-88 147zM528 205q66 0 122.5 55.5t89 148.5t32.5 193q0 77 -38.5 122.5t-108.5 45.5q-73 0 -130 -53t-88.5 -143t-31.5 -197q0 -81 39 -126.5t114 -45.5z" />
<glyph unicode="&#xf1;" horiz-adv-x="1237" d="M37 0zM977 0h-301l137 653q16 68 16 119q0 123 -108 123q-92 0 -167 -114t-118 -318l-98 -463h-301l237 1118h230l-21 -207h6q146 228 355 228q138 0 213.5 -83.5t75.5 -238.5q0 -73 -23 -180zM909 1241q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28 t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xf2;" horiz-adv-x="1198" d="M90 0zM805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5 q196 0 310 -118t114 -325zM845 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311q36 -148 115 -303v-25z" />
<glyph unicode="&#xf3;" horiz-adv-x="1198" d="M90 0zM805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5 q196 0 310 -118t114 -325zM571 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xf4;" horiz-adv-x="1198" d="M90 0zM805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5 q196 0 310 -118t114 -325zM1109 1241h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xf5;" horiz-adv-x="1198" d="M90 0zM805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5 q196 0 310 -118t114 -325zM865 1241q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#xf6;" horiz-adv-x="1198" d="M90 0zM805 696q0 197 -143 197q-75 0 -134.5 -61t-97 -179t-37.5 -243q0 -185 150 -185q75 0 135 61.5t93.5 171t33.5 238.5zM1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-195 0 -311.5 117.5t-116.5 312.5q0 213 71.5 379.5t206.5 258t316 91.5 q196 0 310 -118t114 -325zM386 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM788 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xf7;" d="M109 612v219h952v-219h-952zM444 373q0 76 37 113.5t103 37.5t102.5 -39t36.5 -112q0 -70 -37 -111t-102 -41t-102.5 39t-37.5 113zM444 1071q0 75 37 113.5t103 38.5q67 0 103 -40.5t36 -111.5q0 -70 -37 -110.5t-102 -40.5t-102.5 39t-37.5 112z" />
<glyph unicode="&#xf8;" horiz-adv-x="1198" d="M1108 696q0 -211 -70.5 -374t-203.5 -252.5t-316 -89.5q-123 0 -225 53l-109 -135l-141 108l119 148q-72 107 -72 256q0 213 71.5 379.5t206.5 258t316 91.5q131 0 227 -56l70 88l145 -110l-84 -105q66 -107 66 -260zM662 903q-81 0 -144.5 -62.5t-98 -169.5t-34.5 -233 v-12l365 453q-35 24 -88 24zM543 215q114 0 193 133t79 318v16l-358 -444q11 -8 35.5 -15.5t50.5 -7.5z" />
<glyph unicode="&#xf9;" horiz-adv-x="1237" d="M111 0zM262 1118h301l-137 -653q-16 -68 -16 -119q0 -123 108 -123q92 0 167 114t118 318l98 463h301l-237 -1118h-230l21 207h-6q-145 -227 -355 -227q-138 0 -211 82.5t-73 238.5q0 93 24 213zM845 1241h-184q-71 69 -138.5 153.5t-103.5 153.5v21h311 q36 -148 115 -303v-25z" />
<glyph unicode="&#xfa;" horiz-adv-x="1237" d="M111 0zM262 1118h301l-137 -653q-16 -68 -16 -119q0 -123 108 -123q92 0 167 114t118 318l98 463h301l-237 -1118h-230l21 207h-6q-145 -227 -355 -227q-138 0 -211 82.5t-73 238.5q0 93 24 213zM610 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209 v25z" />
<glyph unicode="&#xfb;" horiz-adv-x="1237" d="M111 0zM262 1118h301l-137 -653q-16 -68 -16 -119q0 -123 108 -123q92 0 167 114t118 318l98 463h301l-237 -1118h-230l21 207h-6q-145 -227 -355 -227q-138 0 -211 82.5t-73 238.5q0 93 24 213zM1143 1241h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25 q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#xfc;" horiz-adv-x="1237" d="M111 0zM262 1118h301l-137 -653q-16 -68 -16 -119q0 -123 108 -123q92 0 167 114t118 318l98 463h301l-237 -1118h-230l21 207h-6q-145 -227 -355 -227q-138 0 -211 82.5t-73 238.5q0 93 24 213zM411 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5 t-121 -43.5q-135 0 -135 110zM813 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#xfd;" horiz-adv-x="1063" d="M0 0zM102 1118h295l56 -518q14 -122 14 -293h6q20 51 44 119.5t65 153.5l260 538h327l-680 -1278q-177 -332 -483 -332q-90 0 -147 19v240q68 -13 116 -13q84 0 147.5 48t117.5 149l26 49zM497 1266q79 88 222 303h335v-17q-46 -56 -154 -152.5t-194 -158.5h-209v25z" />
<glyph unicode="&#xfe;" horiz-adv-x="1219" d="M813 1139q150 0 232.5 -106.5t82.5 -301.5q0 -199 -69 -381t-182 -276t-250 -94q-178 0 -271 163h-8q-12 -159 -43 -295l-72 -340h-301l435 2048h301l-66 -307q-29 -131 -80 -280h8q131 170 283 170zM682 895q-71 0 -130 -65t-95.5 -184.5t-36.5 -246.5q0 -80 33.5 -128 t105.5 -48q69 0 129 65t97.5 183.5t37.5 247.5q0 88 -37.5 132t-103.5 44z" />
<glyph unicode="&#xff;" horiz-adv-x="1063" d="M0 0zM102 1118h295l56 -518q14 -122 14 -293h6q20 51 44 119.5t65 153.5l260 538h327l-680 -1278q-177 -332 -483 -332q-90 0 -147 19v240q68 -13 116 -13q84 0 147.5 48t117.5 149l26 49zM310 1382q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5 q-135 0 -135 110zM712 1382q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5q-135 0 -135 110z" />
<glyph unicode="&#x131;" horiz-adv-x="608" d="M338 0h-301l237 1118h301z" />
<glyph unicode="&#x152;" horiz-adv-x="1845" d="M1606 0h-760q-93 -20 -180 -20q-256 0 -399.5 147.5t-143.5 409.5q0 265 99 487.5t273 341.5t402 119q140 0 209 -23h809l-53 -254h-512l-68 -321h477l-55 -254h-477l-80 -377h512zM688 240q88 0 158 32l194 916q-62 39 -168 39q-121 0 -222 -91.5t-158.5 -251.5 t-57.5 -347q0 -147 66.5 -222t187.5 -75z" />
<glyph unicode="&#x153;" horiz-adv-x="1806" d="M1198 -20q-116 0 -208 38.5t-138 106.5q-63 -68 -147 -106.5t-207 -38.5q-187 0 -297.5 117t-110.5 317q0 216 69 380.5t200 254.5t309 90q209 0 313 -160q154 160 399 160q177 0 276 -81.5t99 -223.5q0 -187 -167 -288.5t-476 -101.5h-51l-2 -21v-20q0 -91 51 -143.5 t147 -52.5q87 0 158 19t172 67v-227q-93 -46 -185.5 -66t-203.5 -20zM645 893q-71 0 -127 -60.5t-90.5 -176.5t-34.5 -242q0 -91 36.5 -140t109.5 -49q109 0 179 134.5t70 336.5q0 96 -37 146.5t-106 50.5zM1362 922q-88 0 -165.5 -78.5t-102.5 -196.5h45q155 0 241 48.5 t86 131.5q0 95 -104 95z" />
<glyph unicode="&#x178;" horiz-adv-x="1155" d="M186 0zM627 870l374 592h342l-618 -903l-119 -559h-303l119 559l-236 903h312zM432 1720q0 78 42.5 118t119.5 40q133 0 133 -108q0 -73 -39 -116.5t-121 -43.5q-135 0 -135 110zM834 1720q0 78 42 118t120 40q65 0 99 -28t34 -80q0 -73 -39.5 -116.5t-120.5 -43.5 q-135 0 -135 110z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1135" d="M1120 1241h-198q-63 53 -162 168q-105 -88 -232 -168h-217v25q63 57 153 147t142 156h338q22 -54 74 -142.5t102 -160.5v-25z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M1034 1479q0 -107 -70 -173.5t-184 -66.5q-110 0 -179 63.5t-69 174.5q0 109 68.5 173t179.5 64q110 0 182 -65t72 -170zM877 1477q0 45 -27.5 70.5t-69.5 25.5t-69 -25.5t-27 -70.5t24 -71t72 -26q42 0 69.5 26t27.5 71z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1135" d="M866 1241q-49 0 -86.5 16.5t-69.5 36t-61.5 36t-62.5 16.5q-31 0 -55.5 -28t-38.5 -79h-177q59 309 281 309q49 0 87.5 -16.5t71.5 -36t62 -35.5t60 -16q34 0 58 25.5t46 80.5h172q-66 -309 -287 -309z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="659" d="M41 424l53 250h524l-53 -250h-524z" />
<glyph unicode="&#x2011;" horiz-adv-x="659" d="M41 424l53 250h524l-53 -250h-524z" />
<glyph unicode="&#x2012;" horiz-adv-x="659" d="M41 424l53 250h524l-53 -250h-524z" />
<glyph unicode="&#x2013;" horiz-adv-x="983" d="M41 436l49 230h852l-49 -230h-852z" />
<glyph unicode="&#x2014;" horiz-adv-x="1966" d="M41 436l49 230h1835l-49 -230h-1835z" />
<glyph unicode="&#x2018;" horiz-adv-x="440" d="M123 961l-8 22q103 227 262 479h225q-91 -213 -194 -501h-285z" />
<glyph unicode="&#x2019;" horiz-adv-x="440" d="M586 1462l8 -22q-103 -227 -262 -479h-226q89 206 195 501h285z" />
<glyph unicode="&#x201a;" horiz-adv-x="569" d="M377 238l8 -23q-103 -227 -262 -479h-225q88 207 194 502h285z" />
<glyph unicode="&#x201c;" horiz-adv-x="887" d="M569 961l-8 22q103 227 262 479h226q-97 -227 -195 -501h-285zM123 961l-8 22q103 227 262 479h225q-91 -213 -194 -501h-285z" />
<glyph unicode="&#x201d;" horiz-adv-x="887" d="M586 1462l8 -22q-103 -227 -262 -479h-226q89 206 195 501h285zM1032 1462l8 -22q-103 -227 -262 -479h-225q23 53 46.5 111t148.5 390h284z" />
<glyph unicode="&#x201e;" horiz-adv-x="1018" d="M377 238l8 -23q-103 -227 -262 -479h-225q88 207 194 502h285zM825 238l9 -23q-100 -221 -263 -479h-225q24 57 49 118.5t146 383.5h284z" />
<glyph unicode="&#x2022;" horiz-adv-x="739" d="M104 686q0 106 42.5 194t120 136.5t182.5 48.5q120 0 182.5 -67t62.5 -191q0 -177 -91.5 -277t-248.5 -100q-117 0 -183.5 67t-66.5 189z" />
<glyph unicode="&#x2026;" horiz-adv-x="1706" d="M25 0zM25 115q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5zM586 115q0 90 53.5 144t150.5 54q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5zM1147 115q0 90 53.5 144t150.5 54 q68 0 109 -38t41 -107q0 -87 -55 -141t-144 -54q-73 0 -114 37.5t-41 104.5z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="664" d="M72 569l401 463l191 -155l-279 -334l135 -350l-246 -103l-202 461v18z" />
<glyph unicode="&#x203a;" horiz-adv-x="664" d="M592 535l-402 -463l-190 155l279 334l-136 350l246 103l203 -461v-18z" />
<glyph unicode="&#x2044;" horiz-adv-x="256" d="M791 1462l-1084 -1462h-239l1087 1462h236z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="776" d="M776 737h-119l-32 -151h-238l33 151h-373l31 174l475 557h260l-121 -563h119zM455 905l58 231l22 74q-13 -20 -43 -58t-211 -247h174z" />
<glyph unicode="&#x20ac;" d="M899 1237q-97 0 -176 -74.5t-135 -212.5h348l-39 -176h-360q-11 -34 -25 -115h299l-37 -178h-280q0 -120 44.5 -181.5t147.5 -61.5q133 0 283 63v-258q-126 -63 -330 -63q-446 0 -446 501h-152l37 178h127q9 67 22 115h-125l39 176h135q87 252 250.5 393.5t374.5 141.5 q100 0 179 -23t165 -80l-125 -223q-87 49 -131 63.5t-90 14.5z" />
<glyph unicode="&#x2122;" horiz-adv-x="1534" d="M471 741h-168v572h-197v149h564v-149h-199v-572zM1047 741l-166 529h-7l5 -111v-418h-164v721h248l159 -510l170 510h240v-721h-168v408l4 121h-6l-174 -529h-141z" />
<glyph unicode="&#xe000;" horiz-adv-x="1120" d="M0 1120h1120v-1120h-1120v1120z" />
<glyph horiz-adv-x="1217" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
</font>
</defs></svg>

================
File: docs/map-editor/fonts/OpenSans-Italic-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sansitalic" horiz-adv-x="1128" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb01;" horiz-adv-x="1165" d="M0 0zM-104 -492q-69 0 -125 21v141q64 -22 112 -22q76 0 117 62t66 177l227 1082h-193l13 67l206 66l23 100q46 200 127.5 282.5t241.5 82.5q40 0 98 -11.5t90 -25.5l-43 -129q-76 29 -137 29q-87 0 -133.5 -48.5t-75.5 -177.5l-25 -108h238l-25 -127h-237l-232 -1098 q-39 -189 -120 -276t-213 -87zM870 0h-168l234 1096h168zM983 1376q0 56 32 91.5t83 35.5q88 0 88 -90q0 -55 -33.5 -93t-77.5 -38q-40 0 -66 24.5t-26 69.5z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1165" d="M0 0zM-104 -492q-69 0 -125 21v141q64 -22 112 -22q76 0 117 62t66 177l227 1082h-193l13 67l206 66l23 100q46 200 127.5 282.5t241.5 82.5q40 0 98 -11.5t90 -25.5l-43 -129q-76 29 -137 29q-87 0 -133.5 -48.5t-75.5 -177.5l-25 -108h238l-25 -127h-237l-232 -1098 q-39 -189 -120 -276t-213 -87zM868 0h-168l332 1556h168z" />
<glyph unicode="&#xfb03;" horiz-adv-x="1815" d="M545 -492q-71 0 -125 21v141q61 -22 115 -22q68 0 111 57.5t69 181.5l227 1082h-481l-232 -1098q-39 -189 -120 -276t-213 -87q-69 0 -125 21v141q64 -22 112 -22q70 0 114 58t69 181l227 1082h-193l13 67l206 66l23 100q46 200 127.5 282.5t241.5 82.5q40 0 98 -11.5 t90 -25.5l-43 -129q-76 29 -137 29q-87 0 -133.5 -48.5t-75.5 -177.5l-25 -108h482l24 108q45 197 126 280t243 83q41 0 97.5 -11t92.5 -26l-45 -129q-76 29 -137 29q-89 0 -135 -51t-74 -175l-24 -108h239l-26 -127h-238l-231 -1098q-43 -195 -123.5 -279t-210.5 -84z M1522 0h-168l233 1096h168zM1634 1376q0 54 32 90.5t83 36.5q88 0 88 -90q0 -55 -33.5 -93t-77.5 -38q-38 0 -65 24.5t-27 69.5z" />
<glyph unicode="&#xfb04;" horiz-adv-x="1815" d="M1520 0h-168l331 1556h168zM545 -492q-71 0 -125 21v141q61 -22 115 -22q68 0 111 57.5t69 181.5l227 1082h-481l-232 -1098q-39 -189 -120 -276t-213 -87q-69 0 -125 21v141q64 -22 112 -22q70 0 114 58t69 181l227 1082h-193l13 67l206 66l23 100q46 200 127.5 282.5 t241.5 82.5q40 0 98 -11.5t90 -25.5l-43 -129q-76 29 -137 29q-87 0 -133.5 -48.5t-75.5 -177.5l-25 -108h482l24 108q45 197 126 280t243 83q41 0 97.5 -11t92.5 -26l-45 -129q-76 29 -137 29q-89 0 -135 -51t-74 -175l-24 -108h239l-26 -127h-238l-231 -1098 q-43 -195 -123.5 -279t-210.5 -84z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="530" d="M555 1462l-274 -1059h-109q49 307 176 1059h207zM43 78q0 76 39.5 120t107.5 44q45 0 73 -27.5t28 -81.5q0 -68 -39 -115t-105 -47q-49 0 -76.5 28t-27.5 79z" />
<glyph unicode="&#x22;" horiz-adv-x="791" d="M485 1462l-153 -528h-107l72 528h188zM834 1462l-154 -528h-107l72 528h189z" />
<glyph unicode="#" horiz-adv-x="1323" d="M1036 899l-98 -340h285l-13 -129h-309l-125 -430h-139l129 430h-303l-127 -430h-133l121 430h-261l13 129h284l101 340h-277l13 127h301l123 436h139l-125 -436h305l127 436h133l-125 -436h264l-12 -127h-291zM500 559h303l96 340h-303z" />
<glyph unicode="$" d="M942 492q0 -162 -112.5 -263t-309.5 -123l-49 -225h-133l49 223q-195 14 -315 72v154q82 -41 175.5 -63.5t166.5 -22.5l98 452q-139 49 -201.5 123.5t-62.5 188.5q0 159 108 255t299 113l39 176h133l-39 -178q159 -12 283 -76l-63 -135q-121 63 -248 72l-94 -440 q149 -55 212.5 -125t63.5 -178zM549 250q107 13 170 75t63 154q0 54 -33 96t-114 74zM627 1235q-108 -11 -167 -69t-59 -156q0 -53 34.5 -97.5t107.5 -70.5z" />
<glyph unicode="%" horiz-adv-x="1624" d="M1468 1462l-1085 -1462h-152l1086 1462h151zM1284 772q-67 0 -119.5 -64.5t-84 -188.5t-31.5 -240q0 -173 106 -173q65 0 117 65t86.5 198.5t34.5 236.5q0 166 -109 166zM1532 621q0 -107 -31.5 -236t-82 -217.5t-121 -138t-156.5 -49.5q-110 0 -171 74.5t-61 219.5 q0 166 50.5 318.5t136.5 228.5t200 76q116 0 176 -71.5t60 -204.5zM543 1358q-66 0 -119 -63t-85 -187.5t-32 -243.5q0 -172 107 -172q52 0 94 39.5t73.5 114t50.5 175t19 171.5q0 166 -108 166zM791 1206q0 -108 -32 -237.5t-82.5 -217.5t-120.5 -137t-157 -49 q-109 0 -170 75t-61 220q0 166 50.5 318.5t136.5 228.5t200 76q116 0 176 -72t60 -205z" />
<glyph unicode="&#x26;" horiz-adv-x="1372" d="M737 1348q-105 0 -163 -60t-58 -170q0 -120 82 -235q139 71 191 110t83 85t31 104q0 77 -42.5 121.5t-123.5 44.5zM471 119q87 0 168 33t195 124l-306 433q-128 -67 -184 -116t-85.5 -107.5t-29.5 -131.5q0 -106 66.5 -170.5t175.5 -64.5zM66 342q0 148 90 257.5 t303 211.5q-103 165 -103 309q0 164 106 264.5t281 100.5q149 0 236.5 -79t87.5 -212q0 -78 -32.5 -137t-87.5 -108t-127.5 -90t-153.5 -83l278 -389q127 110 199 295h168q-101 -236 -283 -412l203 -270h-201l-117 166q-120 -100 -230 -143t-247 -43q-168 0 -269 96 t-101 266z" />
<glyph unicode="'" horiz-adv-x="444" d="M485 1462l-153 -528h-107l72 528h188z" />
<glyph unicode="(" horiz-adv-x="584" d="M82 272q0 339 120 627t384 563h157q-246 -270 -371.5 -570t-125.5 -618q0 -339 114 -598h-131q-147 266 -147 596z" />
<glyph unicode=")" horiz-adv-x="584" d="M500 864q0 -341 -121.5 -629.5t-382.5 -558.5h-156q496 551 496 1188q0 341 -113 598h131q146 -269 146 -598z" />
<glyph unicode="*" horiz-adv-x="1130" d="M854 1528l-123 -383l422 18l-8 -157l-393 47l180 -383l-166 -52l-113 406l-258 -344l-116 121l309 284l-373 109l55 154l371 -185l41 400z" />
<glyph unicode="+" d="M516 651h-389v142h389v391h141v-391h390v-142h-390v-387h-141v387z" />
<glyph unicode="," horiz-adv-x="492" d="M291 238l8 -23q-113 -235 -270 -479h-129q126 286 204 502h187z" />
<glyph unicode="-" horiz-adv-x="639" d="M55 469l35 158h479l-34 -158h-480z" />
<glyph unicode="." horiz-adv-x="518" d="M43 74q0 77 40.5 122.5t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77z" />
<glyph unicode="/" horiz-adv-x="717" d="M893 1462l-813 -1462h-174l813 1462h174z" />
<glyph unicode="0" d="M1092 1014q0 -295 -78.5 -539t-214 -369.5t-314.5 -125.5q-176 0 -270 127.5t-94 369.5q0 270 82 514.5t216.5 369t307.5 124.5q365 0 365 -471zM717 1341q-113 0 -209 -115.5t-155.5 -323t-59.5 -423.5q0 -172 50 -264t161 -92q115 0 209 114t150.5 328t56.5 453 q0 323 -203 323z" />
<glyph unicode="1" d="M588 0h-172l196 913q59 261 88 359q-50 -53 -139 -111l-178 -110l-80 127l449 284h149z" />
<glyph unicode="2" d="M911 0h-899l31 147l465 420q102 93 176.5 163.5t123 133t72 124t23.5 136.5q0 99 -60 157t-163 58q-77 0 -150.5 -28.5t-162.5 -96.5l-82 115q191 154 413 154q176 0 278.5 -88.5t102.5 -243.5q0 -111 -39.5 -204t-131 -197t-294.5 -281l-352 -307v-8h678z" />
<glyph unicode="3" d="M1073 1159q0 -156 -101 -264.5t-280 -140.5v-9q124 -23 195 -106.5t71 -208.5q0 -133 -62 -234.5t-181 -158.5t-283 -57q-210 0 -385 79v164q94 -49 199 -75.5t190 -26.5q162 0 252 79.5t90 217.5q0 131 -79 198.5t-220 67.5h-131l31 143h139q165 0 274 87t109 227 q0 92 -58 146t-157 54q-80 0 -157 -27t-175 -93l-80 118q195 144 424 144q179 0 277 -87t98 -237z" />
<glyph unicode="4" d="M1067 334h-233l-72 -334h-164l74 334h-656l29 158l834 978h196l-207 -983h232zM705 487q46 220 78 373t116 445h-8q-17 -29 -66.5 -96.5t-72.5 -96.5l-533 -625h486z" />
<glyph unicode="5" d="M598 893q182 0 289.5 -104.5t107.5 -282.5q0 -161 -73 -283t-204 -182.5t-308 -60.5q-193 0 -330 79v164q164 -102 334 -102q191 0 298 96t107 268q0 126 -73.5 199.5t-204.5 73.5q-48 0 -97 -6.5t-139 -30.5l-74 57l197 684h668l-33 -153h-522l-127 -439q87 23 184 23z " />
<glyph unicode="6" d="M133 424q0 209 60.5 415t163.5 351.5t246 219t327 73.5q111 0 184 -23l-35 -145q-68 22 -170 22q-212 0 -356.5 -149t-212.5 -443h8q59 79 146.5 126t193.5 47q154 0 244 -98.5t90 -270.5q0 -161 -66.5 -294.5t-180.5 -204t-261 -70.5q-182 0 -281.5 115t-99.5 329z M532 121q94 0 167.5 54t114 149t40.5 208q0 248 -221 248q-66 0 -128 -28.5t-110 -76t-72 -104.5t-24 -155q0 -137 60.5 -216t172.5 -79z" />
<glyph unicode="7" d="M174 0l768 1313h-719l31 149h891l-27 -139l-764 -1323h-180z" />
<glyph unicode="8" d="M741 1485q174 0 271.5 -86.5t97.5 -235.5q0 -129 -78 -225t-266 -176q127 -78 180 -165t53 -202q0 -122 -60 -217.5t-172.5 -146.5t-264.5 -51q-190 0 -298 98.5t-108 267.5q0 148 95 256t296 184q-95 69 -135.5 144.5t-40.5 171.5q0 111 54.5 198.5t153.5 136t222 48.5z M608 700q-185 -60 -261.5 -143.5t-76.5 -202.5q0 -107 69 -170t181 -63q139 0 222 74t83 196q0 99 -52 174t-165 135zM729 1341q-114 0 -182 -65.5t-68 -175.5q0 -82 39 -144t127 -116q161 60 228 131.5t67 173.5q0 90 -57.5 143t-153.5 53z" />
<glyph unicode="9" d="M1067 1034q0 -194 -56 -406.5t-147.5 -360t-221.5 -217.5t-302 -70q-136 0 -242 34v158q134 -47 246 -47q202 0 327 141t189 441h-10q-51 -75 -132.5 -118.5t-180.5 -43.5q-169 0 -261 98.5t-92 288.5q0 153 64.5 280.5t180 199t259.5 71.5q180 0 279.5 -114.5 t99.5 -334.5zM682 1341q-150 0 -241 -113t-91 -290q0 -124 54.5 -190t162.5 -66q76 0 140 28.5t108.5 81.5t65 114t20.5 151q0 131 -59 207.5t-160 76.5z" />
<glyph unicode=":" horiz-adv-x="518" d="M43 74q0 77 40.5 122.5t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77zM203 956q0 77 40 122.5t111 45.5q97 0 97 -104q0 -73 -41.5 -119.5t-106.5 -46.5q-46 0 -73 26.5t-27 75.5z" />
<glyph unicode=";" horiz-adv-x="518" d="M291 238l8 -23q-113 -235 -270 -479h-129q126 286 204 502h187zM203 956q0 77 40 122.5t111 45.5q97 0 97 -104q0 -73 -41.5 -119.5t-106.5 -46.5q-46 0 -73 26.5t-27 75.5z" />
<glyph unicode="&#x3c;" d="M1040 242l-919 422v98l919 479v-149l-747 -371l747 -328v-151z" />
<glyph unicode="=" d="M127 858v139h920v-139h-920zM127 444v142h920v-142h-920z" />
<glyph unicode="&#x3e;" d="M121 393l745 328l-745 371v149l919 -479v-98l-919 -422v151z" />
<glyph unicode="?" horiz-adv-x="874" d="M260 403q22 130 72.5 213.5t165.5 174.5q128 100 168 144t63 94t23 112q0 93 -51.5 143.5t-147.5 50.5q-81 0 -155 -25.5t-140 -56.5l-61 129q92 51 192 76t182 25q167 0 259 -84t92 -238q0 -123 -65.5 -226.5t-225.5 -223.5q-125 -91 -169 -147.5t-67 -160.5h-135z M158 74q0 77 40 122.5t111 45.5q44 0 70.5 -26t26.5 -79q0 -73 -41.5 -119.5t-106.5 -46.5q-46 0 -73 26t-27 77z" />
<glyph unicode="@" horiz-adv-x="1735" d="M1679 852q0 -179 -55 -324t-155 -227t-222 -82q-197 0 -213 184h-8q-111 -184 -291 -184q-115 0 -180.5 75.5t-65.5 209.5q0 157 68 284t188.5 199t260.5 72q65 0 127.5 -12t150.5 -48q-64 -242 -98 -368t-31 -172q0 -117 102 -117q78 0 141.5 67t100.5 183.5t37 243.5 q0 239 -128 367t-370 128q-228 0 -406.5 -107t-277 -295.5t-98.5 -416.5q0 -270 143.5 -418.5t409.5 -148.5q197 0 420 86v-127q-219 -90 -443 -90q-314 0 -494.5 184.5t-180.5 505.5q0 261 126.5 485.5t343.5 347.5t486 123q191 0 329 -75.5t210.5 -213.5t72.5 -319z M985 938q-94 0 -174 -55t-126 -153t-46 -212q0 -93 33 -134.5t98 -41.5q187 0 272 315l70 258q-63 23 -127 23z" />
<glyph unicode="A" horiz-adv-x="1137" d="M813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394z" />
<glyph unicode="B" horiz-adv-x="1225" d="M770 1462q432 0 432 -336q0 -141 -87 -238t-245 -126v-10q115 -32 176.5 -110.5t61.5 -188.5q0 -212 -152 -332.5t-407 -120.5h-463l309 1462h375zM434 836h248q156 0 249 73t93 199q0 104 -66.5 155.5t-209.5 51.5h-211zM287 145h266q181 0 278 80.5t97 227.5 q0 116 -74.5 177.5t-214.5 61.5h-236z" />
<glyph unicode="C" horiz-adv-x="1198" d="M942 1331q-174 0 -311.5 -97t-218 -284.5t-80.5 -408.5q0 -187 97.5 -298.5t268.5 -111.5q139 0 322 57v-149q-86 -31 -164 -45t-188 -14q-242 0 -380 149.5t-138 407.5q0 261 105.5 485.5t283.5 342.5t403 118q197 0 348 -80l-69 -141q-138 69 -279 69z" />
<glyph unicode="D" horiz-adv-x="1364" d="M1300 877q0 -261 -105 -461t-300 -308t-457 -108h-352l309 1462h342q276 0 419.5 -149.5t143.5 -435.5zM449 147q202 0 355 91.5t234.5 258.5t81.5 382t-103 325.5t-302 110.5h-178l-250 -1168h162z" />
<glyph unicode="E" horiz-adv-x="1047" d="M821 0h-735l309 1462h735l-32 -153h-566l-98 -469h527l-29 -152h-529l-114 -536h565z" />
<glyph unicode="F" horiz-adv-x="967" d="M258 0h-172l309 1462h735l-30 -153h-568l-110 -533h528l-32 -153h-529z" />
<glyph unicode="G" horiz-adv-x="1386" d="M821 766h459l-154 -711q-216 -75 -419 -75q-264 0 -410.5 144.5t-146.5 403.5q0 269 101.5 489.5t281.5 343t399 122.5q117 0 219.5 -20t206.5 -64l-66 -152q-77 34 -165.5 59t-194.5 25q-169 0 -307.5 -101.5t-215.5 -283.5t-77 -407q0 -190 102.5 -299t286.5 -109 q154 0 260 39l96 444h-289z" />
<glyph unicode="H" horiz-adv-x="1389" d="M1085 0h-167l143 688h-660l-145 -688h-170l309 1462h170l-131 -622h660l133 622h168z" />
<glyph unicode="I" horiz-adv-x="559" d="M86 0l311 1462h168l-311 -1462h-168z" />
<glyph unicode="J" horiz-adv-x="547" d="M-166 -385q-105 0 -153 25l6 147q69 -20 145 -20q100 0 165.5 62.5t90.5 182.5l307 1450h170l-309 -1468q-79 -379 -422 -379z" />
<glyph unicode="K" horiz-adv-x="1141" d="M1034 0h-186q-72 181 -146.5 359.5t-146.5 361.5l-174 -131l-125 -590h-170l309 1462h170l-151 -710l700 710h209l-639 -637z" />
<glyph unicode="L" horiz-adv-x="971" d="M86 0l309 1462h170l-276 -1308h565l-33 -154h-735z" />
<glyph unicode="M" horiz-adv-x="1714" d="M676 0l-166 1296h-8q-7 -72 -28.5 -197.5t-37.5 -199.5l-190 -899h-162l309 1462h244l149 -1204h9l659 1204h266l-303 -1462h-174q126 590 193 905.5t94 392.5h-6l-717 -1298h-131z" />
<glyph unicode="N" horiz-adv-x="1438" d="M1139 0h-181l-460 1223h-6q-32 -221 -74 -418l-172 -805h-162l309 1462h180l459 -1220h6q30 224 72 405l174 815h164z" />
<glyph unicode="O" horiz-adv-x="1475" d="M1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5t70 403 q0 199 -94 310.5t-261 111.5z" />
<glyph unicode="P" horiz-adv-x="1159" d="M1159 1085q0 -248 -164 -379t-481 -131h-135l-123 -575h-170l309 1462h330q214 0 324 -94.5t110 -282.5zM410 721h133q216 0 328 91t112 267q0 125 -69.5 180.5t-213.5 55.5h-163z" />
<glyph unicode="Q" horiz-adv-x="1475" d="M874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q158 0 279 100t187.5 280.5t66.5 399.5q0 199 -94 310.5t-261 111.5zM725 -18l-17 -2h-16q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424 q0 -333 -139 -576t-375 -321l274 -358h-219z" />
<glyph unicode="R" horiz-adv-x="1165" d="M385 608l-129 -608h-170l309 1462h320q446 0 446 -366q0 -348 -368 -449l239 -647h-186l-209 608h-252zM532 1313q-102 -494 -116 -559h168q193 0 297 85t104 244q0 121 -67.5 175.5t-219.5 54.5h-166z" />
<glyph unicode="S" horiz-adv-x="1028" d="M913 424q0 -211 -140.5 -327.5t-395.5 -116.5q-106 0 -186.5 14.5t-151.5 48.5v170q162 -84 340 -84q162 0 257 75.5t95 207.5q0 78 -52.5 137.5t-195.5 140.5q-151 85 -209.5 170t-58.5 201q0 187 132 304.5t347 117.5q99 0 184.5 -19t180.5 -65l-66 -150 q-66 38 -148 60t-151 22q-134 0 -215.5 -69.5t-81.5 -188.5q0 -54 17 -92.5t54 -72.5t142 -95q147 -88 198.5 -138t78 -110.5t26.5 -140.5z" />
<glyph unicode="T" horiz-adv-x="1020" d="M487 0h-172l277 1311h-406l33 151h985l-30 -151h-408z" />
<glyph unicode="U" horiz-adv-x="1384" d="M1407 1462l-205 -966q-55 -263 -197.5 -389.5t-388.5 -126.5q-230 0 -341 104t-111 299q0 81 24 201l189 878h170l-191 -891q-22 -106 -22 -188q0 -117 73 -184.5t218 -67.5q172 0 267.5 87.5t139.5 289.5l205 954h170z" />
<glyph unicode="V" horiz-adv-x="1122" d="M479 197q61 144 162 338l479 927h191l-781 -1462h-180l-162 1462h170l97 -930q20 -196 20 -335h4z" />
<glyph unicode="W" horiz-adv-x="1745" d="M1257 0h-170l-49 965q-8 136 -8 282h-6q-25 -72 -61 -154.5t-504 -1092.5h-174l-62 1462h170l31 -901l2 -88q0 -98 -10 -258h6q89 243 156 383l405 864h178l43 -860q9 -153 9 -304l-1 -83h9q75 224 131 354l387 893h182z" />
<glyph unicode="X" horiz-adv-x="1063" d="M956 0h-180l-213 641l-481 -641h-186l596 776l-263 686h172l203 -563l443 563h186l-555 -694z" />
<glyph unicode="Y" horiz-adv-x="1030" d="M537 715l489 747h193l-627 -921l-113 -541h-172l119 549l-238 913h170z" />
<glyph unicode="Z" horiz-adv-x="1087" d="M885 0h-901l28 137l924 1170h-655l32 155h858l-26 -139l-924 -1169h697z" />
<glyph unicode="[" horiz-adv-x="586" d="M371 -324h-387l381 1786h387l-31 -141h-227l-318 -1503h227z" />
<glyph unicode="\" horiz-adv-x="717" d="M375 1462l217 -1462h-154l-217 1462h154z" />
<glyph unicode="]" horiz-adv-x="586" d="M-119 -182h225l320 1503h-227l30 141h389l-380 -1786h-388z" />
<glyph unicode="^" horiz-adv-x="1059" d="M53 553l598 920h109l266 -920h-145l-201 747l-467 -747h-160z" />
<glyph unicode="_" horiz-adv-x="807" d="M623 -324h-811l30 140h811z" />
<glyph unicode="`" horiz-adv-x="1135" d="M903 1241h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="a" horiz-adv-x="1157" d="M639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233t-51 -310 q0 -114 47 -170.5t132 -56.5z" />
<glyph unicode="b" horiz-adv-x="1182" d="M545 -20q-97 0 -170.5 51t-110.5 139h-10l-70 -170h-125l330 1556h168q-51 -242 -78.5 -370.5t-75.5 -300.5h9q93 118 183.5 173.5t186.5 55.5q141 0 220 -99t79 -272q0 -209 -68.5 -386.5t-191 -277t-276.5 -99.5zM731 975q-96 0 -195.5 -95t-158 -239t-58.5 -295 q0 -110 55.5 -168.5t160.5 -58.5q99 0 184.5 81t137.5 230.5t52 317.5q0 227 -178 227z" />
<glyph unicode="c" horiz-adv-x="922" d="M506 -20q-194 0 -301 107t-107 302q0 200 74 369t204.5 263.5t293.5 94.5q137 0 268 -51l-47 -141q-120 51 -219 51q-112 0 -204.5 -76.5t-145 -213t-52.5 -296.5q0 -128 66.5 -199t183.5 -71q72 0 136 20t126 47v-143q-124 -63 -276 -63z" />
<glyph unicode="d" horiz-adv-x="1182" d="M639 1114q194 0 281 -190h10q17 155 45 274l78 358h166l-330 -1556h-139l22 209h-8q-101 -125 -189 -177t-182 -52q-139 0 -217 98t-78 272q0 214 72 392t194.5 275t274.5 97zM449 119q94 0 194 93.5t158.5 239t58.5 296.5q0 111 -54 169t-157 58q-101 0 -187.5 -82.5 t-139 -232t-52.5 -314.5q0 -227 179 -227z" />
<glyph unicode="e" horiz-adv-x="1010" d="M492 -20q-184 0 -289 109t-105 302q0 188 74.5 360.5t197.5 268.5t271 96q153 0 230 -66.5t77 -185.5q0 -180 -166 -282.5t-475 -102.5h-33l-4 -80q0 -131 61.5 -204.5t190.5 -73.5q63 0 129.5 18t165.5 66v-146q-94 -44 -166 -61.5t-159 -17.5zM631 973 q-103 0 -193.5 -94t-138.5 -261h12q228 0 349.5 59.5t121.5 172.5q0 53 -36.5 88t-114.5 35z" />
<glyph unicode="f" horiz-adv-x="641" d="M-104 -492q-69 0 -125 21v141q64 -22 112 -22q76 0 117 62t66 177l227 1082h-193l13 67l206 66l23 100q46 200 127.5 282.5t241.5 82.5q40 0 98 -11.5t90 -25.5l-43 -129q-76 29 -137 29q-87 0 -133.5 -48.5t-75.5 -177.5l-25 -108h238l-25 -127h-237l-232 -1098 q-39 -189 -120 -276t-213 -87z" />
<glyph unicode="g" horiz-adv-x="1026" d="M1100 1096l-25 -107l-211 -24q41 -62 41 -158q0 -191 -116.5 -304.5t-311.5 -113.5q-55 0 -84 8q-139 -53 -139 -131q0 -41 33 -54.5t96 -21.5l117 -14q181 -22 262.5 -88t81.5 -194q0 -184 -146 -285t-411 -101q-194 0 -304 73.5t-110 207.5q0 105 72 182t233 131 q-78 41 -78 121q0 69 51 118.5t142 92.5q-63 32 -103 94.5t-40 145.5q0 194 119.5 318t305.5 124q78 0 154 -20h371zM35 -195q0 -77 65 -122t193 -45q182 0 284.5 63.5t102.5 179.5q0 62 -54 98t-184 50l-159 16q-120 -25 -184 -88t-64 -152zM313 680q0 -85 45 -129.5 t125 -44.5q79 0 138 42t90.5 115.5t31.5 159.5q0 82 -44 125t-126 43q-78 0 -136.5 -40.5t-91 -113t-32.5 -157.5z" />
<glyph unicode="h" horiz-adv-x="1182" d="M729 0l148 692q18 94 18 135q0 148 -147 148q-89 0 -173.5 -59t-149 -171.5t-97.5 -271.5l-101 -473h-168l330 1556h168q-18 -82 -34.5 -159t-34 -156.5t-38 -166.5t-47.5 -189h11q94 123 185.5 176t191.5 53q131 0 202.5 -72t71.5 -204q0 -62 -23 -166 q-39 -193 -145 -672h-168z" />
<glyph unicode="i" horiz-adv-x="520" d="M227 0h-168l234 1096h168zM340 1376q0 56 32 91.5t83 35.5q88 0 88 -90q0 -55 -33.5 -93t-77.5 -38q-40 0 -66 24.5t-26 69.5z" />
<glyph unicode="j" horiz-adv-x="520" d="M-135 -492q-69 0 -123 21v141q61 -22 119 -22q125 0 168 205l264 1243h166l-266 -1258q-36 -171 -114.5 -250.5t-213.5 -79.5zM340 1376q0 56 32 91.5t83 35.5q86 0 86 -90q0 -55 -33.5 -93t-77.5 -38q-38 0 -64 24.5t-26 69.5z" />
<glyph unicode="k" horiz-adv-x="999" d="M330 559l526 537h201l-469 -467l295 -629h-187l-235 524l-152 -123l-82 -401h-170l330 1556h170l-129 -602t-102 -395h4z" />
<glyph unicode="l" horiz-adv-x="520" d="M225 0h-168l332 1556h168z" />
<glyph unicode="m" horiz-adv-x="1786" d="M696 0l148 692q18 94 18 135q0 70 -31 109t-106 39q-84 0 -163.5 -60t-140 -171.5t-93.5 -268.5l-101 -475h-168l234 1096h139l-22 -203h10q87 119 173.5 171t178.5 52q113 0 174 -65t72 -181h8q86 125 183 185.5t196 60.5q127 0 196.5 -68t69.5 -198q0 -68 -22 -178 l-144 -672h-170l148 692q20 104 20 146q0 62 -34.5 99.5t-108.5 37.5q-81 0 -160 -58t-138.5 -164.5t-90.5 -252.5l-107 -500h-168z" />
<glyph unicode="n" horiz-adv-x="1182" d="M729 0l148 692q20 104 20 144q0 63 -35.5 101t-113.5 38q-89 0 -173.5 -60t-149 -171t-97.5 -269l-101 -475h-168l234 1096h139l-22 -203h10q96 122 185.5 172.5t185.5 50.5q127 0 200.5 -69.5t73.5 -194.5q0 -79 -23 -180l-143 -672h-170z" />
<glyph unicode="o" horiz-adv-x="1149" d="M643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5z" />
<glyph unicode="p" horiz-adv-x="1182" d="M545 -20q-97 0 -170 50t-113 140h-10l-4 -38q-3 -25 -10.5 -70t-114.5 -554h-166l336 1588h139l-26 -209h8q179 227 372 227q137 0 216 -97.5t79 -273.5q0 -212 -69 -389t-191 -275.5t-276 -98.5zM731 975q-96 0 -195.5 -95t-158 -239t-58.5 -295q0 -110 55.5 -168.5 t160.5 -58.5q99 0 184.5 81t137.5 230.5t52 317.5q0 227 -178 227z" />
<glyph unicode="q" horiz-adv-x="1182" d="M641 1116q94 0 165.5 -50.5t108.5 -141.5h13l67 172h125l-336 -1588h-166l101 480q9 45 57 221h-8q-95 -121 -185 -175t-186 -54q-140 0 -219.5 97.5t-79.5 272.5q0 212 72.5 392t196 277t274.5 97zM449 119q92 0 190 92t158.5 237t60.5 300q0 105 -54.5 166t-152.5 61 q-101 0 -189 -84.5t-140 -233t-52 -311.5q0 -227 179 -227z" />
<glyph unicode="r" horiz-adv-x="811" d="M752 1116q69 0 120 -14l-36 -150q-53 13 -105 13q-91 0 -170.5 -60t-139 -166.5t-87.5 -236.5l-107 -502h-168l234 1096h139l-22 -203h10q72 95 119 136.5t98.5 64t114.5 22.5z" />
<glyph unicode="s" horiz-adv-x="877" d="M735 311q0 -156 -110.5 -243.5t-311.5 -87.5q-169 0 -305 69v158q70 -42 151 -65t150 -23q126 0 190 50t64 128q0 57 -35 96t-151 107q-130 73 -184 143t-54 166q0 138 101 222.5t266 84.5q171 0 330 -74l-54 -137l-56 25q-101 43 -220 43q-93 0 -146 -43.5t-53 -112.5 q0 -56 35.5 -96t146.5 -103q107 -60 153.5 -103t69.5 -92.5t23 -111.5z" />
<glyph unicode="t" horiz-adv-x="664" d="M395 117q55 0 144 26v-129q-34 -14 -84 -24t-80 -10q-125 0 -191.5 59.5t-66.5 177.5q0 66 18 150l127 602h-172l14 73l185 78l125 228h98l-55 -252h274l-26 -127h-273l-129 -604q-18 -87 -18 -132q0 -56 29 -86t81 -30z" />
<glyph unicode="u" horiz-adv-x="1182" d="M451 1096l-150 -695q-18 -89 -18 -139q0 -143 147 -143q88 0 173 60t150 172t99 270l100 475h166l-231 -1096h-139l22 203h-12q-98 -125 -187 -174t-184 -49q-128 0 -201 69.5t-73 198.5q0 62 22 172l146 676h170z" />
<glyph unicode="v" horiz-adv-x="946" d="M223 0l-125 1096h168l64 -613q24 -258 24 -362h6q127 275 179 371l325 604h178l-591 -1096h-228z" />
<glyph unicode="w" horiz-adv-x="1468" d="M831 0l-32 602q-4 94 -4 172v156h-9l-50 -118l-83 -189l-291 -623h-202l-43 1096h164l18 -594v-88q0 -147 -8 -269h6q47 124 137 322l295 629h182l37 -594q6 -168 6 -262v-53l-2 -42h6q28 86 83 218.5t323 732.5h178l-506 -1096h-205z" />
<glyph unicode="x" horiz-adv-x="979" d="M467 434l-346 -434h-195l475 565l-239 531h170l174 -412l330 412h194l-455 -539l252 -557h-168z" />
<glyph unicode="y" horiz-adv-x="946" d="M98 1096h168l74 -545q10 -69 19.5 -203.5t9.5 -216.5h6q35 87 87 200t77 156l325 609h178l-696 -1282q-93 -172 -184 -239t-219 -67q-72 0 -140 21v135q63 -18 131 -18q82 0 140.5 50.5t113.5 149.5l76 136z" />
<glyph unicode="z" horiz-adv-x="909" d="M690 0h-719l23 117l694 854h-479l27 125h657l-29 -140l-680 -831h531z" />
<glyph unicode="{" horiz-adv-x="715" d="M442 -324q-141 0 -216.5 52.5t-75.5 171.5q0 52 20 141q33 146 51.5 227.5t14.5 102.5q0 143 -209 143l32 143q118 0 189.5 43.5t93.5 147.5l68 326q34 160 117.5 224t254.5 64h33l-31 -141q-105 0 -151 -36.5t-66 -123.5l-71 -321q-28 -123 -91 -184t-167 -78v-5 q151 -41 151 -213q0 -59 -18 -131l-47 -211q-15 -58 -15 -98q0 -53 36.5 -77.5t119.5 -24.5v-142h-23z" />
<glyph unicode="|" d="M541 1556h139v-2052h-139v2052z" />
<glyph unicode="}" horiz-adv-x="715" d="M285 1462q144 0 220.5 -52.5t76.5 -170.5q0 -48 -21 -141l-49 -219q-16 -68 -16 -111q0 -143 209 -143l-33 -144q-119 0 -190 -43t-93 -147l-67 -326q-36 -164 -119 -226.5t-264 -62.5h-13v142q115 0 167 36t71 123l72 322q25 117 88 179.5t170 80.5v6q-150 42 -150 211 q0 59 18 131l50 213q14 65 14 99q0 53 -40.5 77.5t-139.5 24.5l28 141h11z" />
<glyph unicode="~" d="M348 713q-54 0 -118.5 -34.5t-114.5 -86.5v151q98 109 243 109q69 0 127 -14.5t144 -51.5q64 -27 112.5 -41t98.5 -14q55 0 119.5 33t115.5 88v-150q-100 -110 -244 -110q-72 0 -135 16.5t-135 48.5q-75 32 -120 44t-93 12z" />
<glyph unicode="&#xa1;" horiz-adv-x="530" d="M260 684h109l-176 -1057h-207zM250 950q0 76 40.5 122t110.5 46q44 0 70.5 -26t26.5 -80q0 -71 -40.5 -117.5t-105.5 -46.5q-48 0 -75 25.5t-27 76.5z" />
<glyph unicode="&#xa2;" d="M582 -20h-125l43 215q-132 34 -203.5 137.5t-71.5 257.5q0 185 63.5 344t178.5 258.5t260 120.5l35 170h123l-37 -168q119 -9 217 -49l-47 -142q-109 52 -219 52q-112 0 -204.5 -76.5t-145 -213t-52.5 -296.5q0 -125 66 -198t184 -73q72 0 136 20t126 48v-143 q-123 -62 -286 -66z" />
<glyph unicode="&#xa3;" d="M842 1481q184 0 336 -86l-66 -133q-146 79 -278 79q-213 0 -263 -237l-69 -326h370l-26 -127h-371l-47 -219q-22 -98 -66 -166.5t-124 -111.5h725l-33 -154h-953l27 141q205 46 258 289l47 221h-200l26 127h201l76 350q75 353 430 353z" />
<glyph unicode="&#xa4;" d="M229 723q0 117 68 215l-129 129l92 92l127 -129q103 70 217 70t215 -70l129 129l92 -90l-129 -129q70 -104 70 -217q0 -119 -70 -217l127 -127l-90 -90l-129 127q-98 -68 -215 -68q-119 0 -217 70l-127 -127l-90 90l127 127q-68 96 -68 215zM358 723q0 -103 71.5 -174.5 t174.5 -71.5q104 0 177 71.5t73 174.5q0 104 -73 177t-177 73q-102 0 -174 -72.5t-72 -177.5z" />
<glyph unicode="&#xa5;" d="M582 715l491 747h187l-533 -770h231l-28 -133h-297l-33 -160h297l-29 -133h-295l-57 -266h-154l56 266h-291l29 133h290l33 160h-291l29 133h225l-202 770h163z" />
<glyph unicode="&#xa6;" d="M541 1556h139v-776h-139v776zM541 281h139v-777h-139v777z" />
<glyph unicode="&#xa7;" horiz-adv-x="995" d="M174 770q0 201 238 307q-119 70 -119 203q0 127 103.5 206t279.5 79q189 0 321 -68l-53 -123q-148 60 -266 60q-102 0 -162.5 -40.5t-60.5 -109.5q0 -49 38 -83.5t162 -90.5q100 -44 149 -83.5t75 -89.5t26 -114q0 -97 -61 -180t-172 -139q114 -71 114 -189 q0 -152 -114 -237.5t-318 -85.5q-176 0 -295 61v148q56 -34 136.5 -56t156.5 -22q133 0 204 44.5t71 129.5q0 48 -50.5 89t-152.5 87q-138 61 -194 130.5t-56 166.5zM514 1010q-82 -26 -135 -87.5t-53 -131.5t50.5 -117t198.5 -111q80 44 127.5 107t47.5 131 q0 60 -49.5 105.5t-186.5 103.5z" />
<glyph unicode="&#xa8;" horiz-adv-x="1135" d="M457 1378q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM821 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M928 1059q-125 0 -191.5 -87t-66.5 -241q0 -169 65 -249.5t193 -80.5q82 0 211 43v-122q-66 -28 -113 -38t-104 -10q-192 0 -297 119.5t-105 339.5q0 208 110 330.5t300 122.5q130 0 248 -60l-60 -120q-106 53 -190 53zM139 731q0 200 100 375t275 276t377 101 q197 0 370 -97t277 -272t104 -383q0 -204 -100.5 -376.5t-273 -273.5t-377.5 -101q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM244 731q0 -173 87 -323.5t237.5 -237t322.5 -86.5q174 0 323 87t236.5 235.5t87.5 324.5q0 174 -87 323t-235.5 236.5t-324.5 87.5 q-174 0 -323 -87t-236.5 -235.5t-87.5 -324.5z" />
<glyph unicode="&#xaa;" horiz-adv-x="686" d="M498 1479q114 0 153 -103h6l37 90h86l-139 -665h-92l14 117h-4q-40 -56 -90 -93t-123 -37q-77 0 -126.5 60t-49.5 166q0 127 41.5 234.5t116.5 169t170 61.5zM381 891q61 0 112.5 49t86 137.5t34.5 167.5q0 62 -28.5 96.5t-85.5 34.5q-92 0 -154.5 -103t-62.5 -243 q0 -139 98 -139z" />
<glyph unicode="&#xab;" horiz-adv-x="958" d="M88 584l391 374l78 -81l-297 -328l172 -387l-113 -49l-231 442v29zM483 541l367 405l86 -69l-283 -365l158 -350l-113 -49l-215 397v31z" />
<glyph unicode="&#xac;" d="M1047 793v-529h-140v387h-780v142h920z" />
<glyph unicode="&#xad;" horiz-adv-x="639" d="M55 469zM55 469l35 158h479l-34 -158h-480z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M139 731q0 200 100 375t275 276t377 101q197 0 370 -97t277 -272t104 -383q0 -204 -100.5 -376.5t-273 -273.5t-377.5 -101q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM244 731q0 -173 87 -323.5t237.5 -237t322.5 -86.5q174 0 323 87t236.5 235.5t87.5 324.5 q0 174 -87 323t-235.5 236.5t-324.5 87.5q-174 0 -323 -87t-236.5 -235.5t-87.5 -324.5zM1194 915q0 -78 -47.5 -141t-132.5 -98l227 -385h-149l-207 352h-113v-352h-127v880h229q163 0 241.5 -63t78.5 -193zM772 762h92q195 0 195 149q0 76 -47.5 107t-149.5 31h-90v-287z " />
<glyph unicode="&#xaf;" horiz-adv-x="782" d="M1012 1556h-785l33 132h787z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M215 1171q0 128 90.5 220t220.5 92q83 0 155.5 -41.5t114.5 -114t42 -156.5q0 -128 -90.5 -218.5t-221.5 -90.5t-221 90.5t-90 218.5zM328 1171q0 -80 58 -138t140 -58q83 0 140 58.5t57 137.5q0 82 -57.5 140.5t-139.5 58.5q-80 0 -139 -58.5t-59 -140.5z" />
<glyph unicode="&#xb1;" d="M516 643h-389v141h389v392h141v-392h390v-141h-390v-387h-141v387zM127 0v141h920v-141h-920z" />
<glyph unicode="&#xb2;" horiz-adv-x="717" d="M657 586h-561l23 106l264 228q115 100 158.5 149.5t63.5 93t20 90.5q0 53 -31 85t-90 32q-90 0 -195 -80l-59 90q125 101 274 101q109 0 171.5 -56.5t62.5 -150.5q0 -99 -52.5 -179.5t-197.5 -205.5l-221 -187h395z" />
<glyph unicode="&#xb3;" horiz-adv-x="717" d="M549 1036q69 -17 108 -68t39 -120q0 -132 -91 -205.5t-253 -73.5q-125 0 -233 56v127q125 -72 239 -72q205 0 205 170q0 137 -178 137h-90l22 107h95q97 0 155 41t58 112q0 60 -34.5 90.5t-93.5 30.5q-102 0 -196 -68l-55 93q109 88 268 88q114 0 178 -56t64 -151 q0 -180 -207 -234v-4z" />
<glyph unicode="&#xb4;" horiz-adv-x="1135" d="M532 1268q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xb5;" horiz-adv-x="1194" d="M295 266q0 -147 147 -147q89 0 172 59t148.5 171t99.5 269l105 478h163l-233 -1096h-139l24 205h-12q-93 -121 -183 -173t-188 -52q-112 0 -163 96h-9q-11 -78 -22.5 -148t-83.5 -420h-164l336 1588h168l-148 -695q-18 -92 -18 -135z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1206 -260h-114v1661h-213v-1661h-115v819q-62 -18 -146 -18q-216 0 -317.5 125t-101.5 376q0 260 109 387t341 127h557v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="518" d="M170 587zM170 690q0 77 40.5 122.5t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77z" />
<glyph unicode="&#xb8;" horiz-adv-x="420" d="M211 -276q0 -98 -81 -157t-214 -59q-41 0 -86 9v100q38 -6 68 -6q174 0 174 110q0 46 -39 67.5t-99 29.5l101 182h106l-61 -121q131 -38 131 -155z" />
<glyph unicode="&#xb9;" horiz-adv-x="717" d="M537 1462h118l-186 -876h-135l112 526q25 103 58 225q-25 -25 -50 -46.5t-145 -100.5l-51 90z" />
<glyph unicode="&#xba;" horiz-adv-x="688" d="M745 1219q0 -191 -88.5 -311t-240.5 -120q-113 0 -180.5 71t-67.5 196q0 117 42 215.5t117.5 153.5t174.5 55q117 0 180 -67t63 -193zM500 1376q-102 0 -160.5 -87.5t-58.5 -229.5q0 -85 38 -127.5t107 -42.5q94 0 152.5 88.5t58.5 232.5q0 166 -137 166z" />
<glyph unicode="&#xbb;" horiz-adv-x="958" d="M872 485l-393 -370l-78 82l297 323l-172 391l113 50l233 -447v-29zM477 528l-368 -401l-86 70l282 360l-158 354l113 50l217 -402v-31z" />
<glyph unicode="&#xbc;" horiz-adv-x="1518" d="M123 0zM1362 1462l-1086 -1462h-153l1085 1462h154zM483 1462h118l-186 -876h-135l112 526q25 103 58 225q-25 -25 -50 -46.5t-145 -100.5l-51 90zM1327 203h-129l-43 -202h-127l43 202h-365l23 101l481 579h133l-121 -563h127zM1095 320q69 322 90 395 q-20 -36 -110 -149l-205 -246h225z" />
<glyph unicode="&#xbd;" horiz-adv-x="1518" d="M66 0zM427 1462h118l-186 -876h-135l112 526q25 103 58 225q-25 -25 -50 -46.5t-145 -100.5l-51 90zM1305 1462l-1086 -1462h-153l1085 1462h154zM1343 1h-561l23 106l264 228q115 100 158.5 149.5t63.5 93t20 90.5q0 53 -31 85t-90 32q-90 0 -195 -80l-59 90 q125 101 274 101q109 0 171.5 -56.5t62.5 -150.5q0 -99 -52.5 -179.5t-197.5 -205.5l-221 -187h395z" />
<glyph unicode="&#xbe;" horiz-adv-x="1565" d="M87 0zM517 1036q69 -17 108 -68t39 -120q0 -132 -91 -205.5t-253 -73.5q-125 0 -233 56v127q125 -72 239 -72q205 0 205 170q0 137 -178 137h-90l22 107h95q97 0 155 41t58 112q0 60 -34.5 90.5t-93.5 30.5q-102 0 -196 -68l-55 93q109 88 268 88q114 0 178 -56t64 -151 q0 -180 -207 -234v-4zM1512 1462l-1086 -1462h-153l1085 1462h154zM1477 203h-129l-43 -202h-127l43 202h-365l23 101l481 579h133l-121 -563h127zM1245 320q69 322 90 395q-20 -36 -110 -149l-205 -246h225z" />
<glyph unicode="&#xbf;" horiz-adv-x="874" d="M657 680q-22 -130 -72 -212t-165 -175l-95 -75q-159 -127 -159 -275q0 -93 51.5 -144t147.5 -51q80 0 154 25.5t140 56.5l62 -129q-90 -48 -189 -74t-186 -26q-168 0 -259 83.5t-91 237.5q0 124 66 228t225 223q132 98 172.5 152.5t62.5 154.5h135zM760 1010 q0 -77 -40.5 -122.5t-111.5 -45.5q-43 0 -69.5 26t-26.5 78q0 71 40 118.5t107 47.5q47 0 74 -25.5t27 -76.5z" />
<glyph unicode="&#xc0;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM863 1579h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xc1;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM679 1606q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xc2;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM1080 1579h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27 z" />
<glyph unicode="&#xc3;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM934 1581q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18 t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xc4;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM523 1716q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM887 1716q0 46 28 79.5 t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xc5;" horiz-adv-x="1137" d="M0 0zM813 465h-496l-245 -465h-189l799 1462h174l184 -1462h-170zM795 621l-35 299q-24 179 -29 350q-37 -88 -80.5 -175t-249.5 -474h394zM991 1585q0 -99 -60 -157t-159 -58q-101 0 -160 57.5t-59 155.5q0 94 62 152.5t157 58.5q101 0 160 -57t59 -152zM887 1583 q0 53 -32 84t-83 31q-49 0 -82 -31t-33 -84q0 -54 29.5 -84.5t85.5 -30.5q51 0 83 30.5t32 84.5z" />
<glyph unicode="&#xc6;" horiz-adv-x="1673" d="M1448 0h-737l98 465h-438l-293 -465h-197l938 1462h938l-33 -153h-565l-100 -469h528l-28 -150h-529l-115 -538h566zM840 621l147 688h-84l-434 -688h371z" />
<glyph unicode="&#xc7;" horiz-adv-x="1198" d="M150 0zM942 1331q-174 0 -311.5 -97t-218 -284.5t-80.5 -408.5q0 -187 97.5 -298.5t268.5 -111.5q139 0 322 57v-149q-86 -31 -164 -45t-188 -14q-242 0 -380 149.5t-138 407.5q0 261 105.5 485.5t283.5 342.5t403 118q197 0 348 -80l-69 -141q-138 69 -279 69zM758 -276 q0 -98 -81 -157t-214 -59q-41 0 -86 9v100q38 -6 68 -6q174 0 174 110q0 46 -39 67.5t-99 29.5l101 182h106l-61 -121q131 -38 131 -155z" />
<glyph unicode="&#xc8;" horiz-adv-x="1047" d="M86 0zM821 0h-735l309 1462h735l-32 -153h-566l-98 -469h527l-29 -152h-529l-114 -536h565zM898 1579h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xc9;" horiz-adv-x="1047" d="M86 0zM821 0h-735l309 1462h735l-32 -153h-566l-98 -469h527l-29 -152h-529l-114 -536h565zM657 1606q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xca;" horiz-adv-x="1047" d="M86 0zM821 0h-735l309 1462h735l-32 -153h-566l-98 -469h527l-29 -152h-529l-114 -536h565zM1084 1579h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xcb;" horiz-adv-x="1047" d="M86 0zM821 0h-735l309 1462h735l-32 -153h-566l-98 -469h527l-29 -152h-529l-114 -536h565zM523 1716q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM887 1716q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34 q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xcc;" horiz-adv-x="559" d="M86 0zM86 0l311 1462h168l-311 -1462h-168zM593 1579h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xcd;" horiz-adv-x="559" d="M86 0zM86 0l311 1462h168l-311 -1462h-168zM412 1606q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xce;" horiz-adv-x="559" d="M86 0zM86 0l311 1462h168l-311 -1462h-168zM808 1579h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xcf;" horiz-adv-x="559" d="M86 0zM86 0l311 1462h168l-311 -1462h-168zM265 1716q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM629 1716q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xd0;" horiz-adv-x="1364" d="M1300 877q0 -261 -105 -461t-300 -308t-457 -108h-352l135 649h-149l32 150h150l141 663h342q276 0 419.5 -149.5t143.5 -435.5zM449 147q202 0 355 91.5t234.5 258.5t81.5 382t-103 325.5t-302 110.5h-178l-111 -516h330l-33 -150h-330l-106 -502h162z" />
<glyph unicode="&#xd1;" horiz-adv-x="1438" d="M84 0zM1139 0h-181l-460 1223h-6q-32 -221 -74 -418l-172 -805h-162l309 1462h180l459 -1220h6q30 224 72 405l174 815h164zM1102 1581q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5 t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xd2;" horiz-adv-x="1475" d="M150 0zM1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5 t70 403q0 199 -94 310.5t-261 111.5zM1007 1579h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xd3;" horiz-adv-x="1475" d="M150 0zM1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5 t70 403q0 199 -94 310.5t-261 111.5zM821 1606q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xd4;" horiz-adv-x="1475" d="M150 0zM1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5 t70 403q0 199 -94 310.5t-261 111.5zM1227 1579h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xd5;" horiz-adv-x="1475" d="M150 0zM1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5 t70 403q0 199 -94 310.5t-261 111.5zM1067 1581q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xd6;" horiz-adv-x="1475" d="M150 0zM1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q244 0 384 -154t140 -424zM874 1333q-157 0 -281 -101t-192.5 -281t-68.5 -398q0 -199 98 -310.5t266 -111.5q152 0 272.5 97.5t190.5 279.5 t70 403q0 199 -94 310.5t-261 111.5zM664 1716q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM1028 1716q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xd7;" d="M487 723l-319 321l98 99l320 -320l323 320l99 -96l-324 -324l322 -322l-97 -96l-323 320l-320 -318l-96 96z" />
<glyph unicode="&#xd8;" horiz-adv-x="1475" d="M1411 907q0 -269 -88 -481.5t-252 -329t-379 -116.5q-200 0 -332 96l-129 -160l-112 92l137 170q-106 136 -106 371q0 264 96 482t263.5 336t377.5 118q99 0 178.5 -27t151.5 -84l131 166l114 -92l-149 -184q48 -62 73 -156t25 -201zM874 1333q-157 0 -281 -101 t-192.5 -281t-68.5 -398q0 -135 41 -227l737 919q-90 88 -236 88zM1229 911q0 118 -33 205l-733 -911q91 -74 233 -74q152 0 272.5 97.5t190.5 279.5t70 403z" />
<glyph unicode="&#xd9;" horiz-adv-x="1384" d="M164 0zM1407 1462l-205 -966q-55 -263 -197.5 -389.5t-388.5 -126.5q-230 0 -341 104t-111 299q0 81 24 201l189 878h170l-191 -891q-22 -106 -22 -188q0 -117 73 -184.5t218 -67.5q172 0 267.5 87.5t139.5 289.5l205 954h170zM991 1579h-104q-61 61 -128.5 154 t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xda;" horiz-adv-x="1384" d="M164 0zM1407 1462l-205 -966q-55 -263 -197.5 -389.5t-388.5 -126.5q-230 0 -341 104t-111 299q0 81 24 201l189 878h170l-191 -891q-22 -106 -22 -188q0 -117 73 -184.5t218 -67.5q172 0 267.5 87.5t139.5 289.5l205 954h170zM823 1606q56 60 125.5 151.5t106.5 149.5 h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xdb;" horiz-adv-x="1384" d="M164 0zM1407 1462l-205 -966q-55 -263 -197.5 -389.5t-388.5 -126.5q-230 0 -341 104t-111 299q0 81 24 201l189 878h170l-191 -891q-22 -106 -22 -188q0 -117 73 -184.5t218 -67.5q172 0 267.5 87.5t139.5 289.5l205 954h170zM1217 1579h-103q-57 48 -161 189 q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xdc;" horiz-adv-x="1384" d="M164 0zM1407 1462l-205 -966q-55 -263 -197.5 -389.5t-388.5 -126.5q-230 0 -341 104t-111 299q0 81 24 201l189 878h170l-191 -891q-22 -106 -22 -188q0 -117 73 -184.5t218 -67.5q172 0 267.5 87.5t139.5 289.5l205 954h170zM643 1716q0 46 28 79.5t74 33.5 q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM1007 1716q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xdd;" horiz-adv-x="1030" d="M188 0zM537 715l489 747h193l-627 -921l-113 -541h-172l119 549l-238 913h170zM616 1606q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xde;" horiz-adv-x="1159" d="M1106 829q0 -248 -164 -379t-483 -131h-133l-70 -319h-170l309 1462h170l-53 -256h160q213 0 323.5 -95t110.5 -282zM354 465h135q215 0 328 91t113 267q0 126 -70 181t-215 55h-166z" />
<glyph unicode="&#xdf;" horiz-adv-x="1182" d="M-133 -492q-69 0 -123 21v143q61 -22 111 -22q65 0 107 47.5t65 157.5l280 1314q43 200 156 299t307 99q162 0 252 -71t90 -196q0 -57 -21 -106.5t-61.5 -95t-178.5 -150.5q-110 -83 -110 -151q0 -56 95 -122q47 -34 101 -87.5t79.5 -110t25.5 -123.5 q0 -175 -108.5 -274.5t-292.5 -99.5q-175 0 -268 71v160q51 -41 118.5 -66.5t129.5 -25.5q113 0 181 58t68 159q0 40 -10.5 71t-33.5 59t-89 83q-88 69 -122.5 124t-34.5 115q0 53 18.5 96t49.5 78.5t124 104.5q80 56 111 87.5t48 65t17 70.5q0 64 -52.5 100.5t-141.5 36.5 q-119 0 -186 -62.5t-95 -190.5l-274 -1303q-40 -189 -121 -276t-211 -87z" />
<glyph unicode="&#xe0;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM824 1241h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xe1;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM600 1268q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xe2;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM1005 1241h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xe3;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM856 1243q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xe4;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM454 1378q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM818 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xe5;" horiz-adv-x="1157" d="M98 0zM639 1116q92 0 164 -49.5t112 -142.5h11l67 172h127l-233 -1096h-133l26 209h-8q-179 -229 -377 -229q-139 0 -218 99t-79 271q0 208 71 386t196 279t274 101zM449 119q97 0 193 92.5t156 241t60 297.5q0 103 -56 164t-147 61q-104 0 -193.5 -86t-140.5 -233 t-51 -310q0 -114 47 -170.5t132 -56.5zM951 1456q0 -99 -60 -157t-159 -58q-101 0 -160 57.5t-59 155.5q0 94 62 152.5t157 58.5q101 0 160 -57t59 -152zM847 1454q0 53 -32 84t-83 31q-49 0 -82 -31t-33 -84q0 -54 29.5 -84.5t85.5 -30.5q51 0 83 30.5t32 84.5z" />
<glyph unicode="&#xe6;" horiz-adv-x="1669" d="M1165 -20q-108 0 -189.5 39.5t-121.5 119.5l-31 -139h-114l26 209h-8q-109 -132 -191.5 -180.5t-177.5 -48.5q-122 0 -191 99t-69 269q0 206 70.5 385t191.5 281t263 102q82 0 145 -48.5t102 -143.5h11l67 172h109l-31 -146q123 166 332 166q119 0 192.5 -68t73.5 -184 q0 -182 -166.5 -283.5t-472.5 -101.5h-39l-4 -80q0 -131 62.5 -204.5t193.5 -73.5q55 0 116.5 16.5t178.5 67.5v-150q-164 -75 -328 -75zM412 119q95 0 188.5 91.5t153 240.5t59.5 299q0 103 -45.5 164t-122.5 61q-99 0 -187 -86.5t-138 -231.5t-50 -309q0 -114 37 -171.5 t105 -57.5zM1325 973q-117 0 -211 -94.5t-141 -260.5h14q226 0 348.5 58.5t122.5 169.5q0 61 -35 94t-98 33z" />
<glyph unicode="&#xe7;" horiz-adv-x="922" d="M98 0zM506 -20q-194 0 -301 107t-107 302q0 200 74 369t204.5 263.5t293.5 94.5q137 0 268 -51l-47 -141q-120 51 -219 51q-112 0 -204.5 -76.5t-145 -213t-52.5 -296.5q0 -128 66.5 -199t183.5 -71q72 0 136 20t126 47v-143q-124 -63 -276 -63zM592 -276q0 -98 -81 -157 t-214 -59q-41 0 -86 9v100q38 -6 68 -6q174 0 174 110q0 46 -39 67.5t-99 29.5l101 182h106l-61 -121q131 -38 131 -155z" />
<glyph unicode="&#xe8;" horiz-adv-x="1010" d="M98 0zM492 -20q-184 0 -289 109t-105 302q0 188 74.5 360.5t197.5 268.5t271 96q153 0 230 -66.5t77 -185.5q0 -180 -166 -282.5t-475 -102.5h-33l-4 -80q0 -131 61.5 -204.5t190.5 -73.5q63 0 129.5 18t165.5 66v-146q-94 -44 -166 -61.5t-159 -17.5zM631 973 q-103 0 -193.5 -94t-138.5 -261h12q228 0 349.5 59.5t121.5 172.5q0 53 -36.5 88t-114.5 35zM777 1241h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xe9;" horiz-adv-x="1010" d="M98 0zM492 -20q-184 0 -289 109t-105 302q0 188 74.5 360.5t197.5 268.5t271 96q153 0 230 -66.5t77 -185.5q0 -180 -166 -282.5t-475 -102.5h-33l-4 -80q0 -131 61.5 -204.5t190.5 -73.5q63 0 129.5 18t165.5 66v-146q-94 -44 -166 -61.5t-159 -17.5zM631 973 q-103 0 -193.5 -94t-138.5 -261h12q228 0 349.5 59.5t121.5 172.5q0 53 -36.5 88t-114.5 35zM585 1268q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xea;" horiz-adv-x="1010" d="M98 0zM492 -20q-184 0 -289 109t-105 302q0 188 74.5 360.5t197.5 268.5t271 96q153 0 230 -66.5t77 -185.5q0 -180 -166 -282.5t-475 -102.5h-33l-4 -80q0 -131 61.5 -204.5t190.5 -73.5q63 0 129.5 18t165.5 66v-146q-94 -44 -166 -61.5t-159 -17.5zM631 973 q-103 0 -193.5 -94t-138.5 -261h12q228 0 349.5 59.5t121.5 172.5q0 53 -36.5 88t-114.5 35zM966 1241h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xeb;" horiz-adv-x="1010" d="M98 0zM492 -20q-184 0 -289 109t-105 302q0 188 74.5 360.5t197.5 268.5t271 96q153 0 230 -66.5t77 -185.5q0 -180 -166 -282.5t-475 -102.5h-33l-4 -80q0 -131 61.5 -204.5t190.5 -73.5q63 0 129.5 18t165.5 66v-146q-94 -44 -166 -61.5t-159 -17.5zM631 973 q-103 0 -193.5 -94t-138.5 -261h12q228 0 349.5 59.5t121.5 172.5q0 53 -36.5 88t-114.5 35zM413 1378q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM777 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34 q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xec;" horiz-adv-x="520" d="M59 0zM227 0h-168l234 1096h168zM492 1241h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xed;" horiz-adv-x="520" d="M59 0zM227 0h-168l234 1096h168zM324 1268q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xee;" horiz-adv-x="520" d="M59 0zM227 0h-168l234 1096h168zM708 1241h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xef;" horiz-adv-x="520" d="M59 0zM227 0h-168l234 1096h168zM161 1378q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM525 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xf0;" horiz-adv-x="1165" d="M676 1343q-66 58 -146 113l95 117q118 -84 188 -154l260 146l64 -105l-240 -133q87 -115 126.5 -240.5t39.5 -269.5q0 -253 -71.5 -447t-203 -292t-311.5 -98q-182 0 -284.5 104t-102.5 289q0 160 67.5 298t187 217t267.5 79q105 0 181.5 -45.5t111.5 -124.5l6 2v17 q0 136 -36.5 240t-110.5 197l-270 -149l-56 108zM487 121q107 0 190 56t134 168t51 226q0 118 -65.5 187t-178.5 69q-109 0 -189 -57.5t-123.5 -161t-43.5 -231.5q0 -126 57.5 -191t167.5 -65z" />
<glyph unicode="&#xf1;" horiz-adv-x="1182" d="M59 0zM729 0l148 692q20 104 20 144q0 63 -35.5 101t-113.5 38q-89 0 -173.5 -60t-149 -171t-97.5 -269l-101 -475h-168l234 1096h139l-22 -203h10q96 122 185.5 172.5t185.5 50.5q127 0 200.5 -69.5t73.5 -194.5q0 -79 -23 -180l-143 -672h-170zM871 1243 q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xf2;" horiz-adv-x="1149" d="M98 0zM643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5zM798 1241h-104q-61 61 -128.5 154t-95.5 153v21h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xf3;" horiz-adv-x="1149" d="M98 0zM643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5zM589 1268q56 60 125.5 151.5t106.5 149.5h190v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xf4;" horiz-adv-x="1149" d="M98 0zM643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5zM997 1241h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xf5;" horiz-adv-x="1149" d="M98 0zM643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5zM844 1243q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#xf6;" horiz-adv-x="1149" d="M98 0zM643 1110q190 0 300 -112.5t110 -309.5q0 -188 -72 -355t-195 -258t-278 -91q-192 0 -301 113t-109 309q0 190 73 357.5t197 257t275 89.5zM879 711q0 115 -62.5 186.5t-169.5 71.5q-109 0 -195.5 -74t-134 -205.5t-47.5 -292.5q0 -131 63.5 -202.5t182.5 -71.5 q104 0 187 73t129.5 207.5t46.5 307.5zM433 1378q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM797 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xf7;" d="M127 651v142h920v-142h-920zM475 373q0 121 111 121q53 0 82.5 -30.5t29.5 -90.5q0 -58 -30 -89.5t-82 -31.5t-81.5 31t-29.5 90zM475 1071q0 121 111 121q53 0 82.5 -30.5t29.5 -90.5q0 -58 -30 -89.5t-82 -31.5t-81.5 31t-29.5 90z" />
<glyph unicode="&#xf8;" horiz-adv-x="1149" d="M1047 705q0 -189 -69.5 -360t-191.5 -266t-276 -95q-146 0 -246 65l-98 -125l-105 82l109 135q-68 103 -68 265q0 194 73.5 361t195.5 255t272 88q146 0 252 -68l104 129l105 -79l-119 -129q62 -97 62 -258zM647 971q-108 0 -195.5 -73t-137.5 -202t-50 -280 q0 -92 17 -137l518 645q-54 47 -152 47zM885 688q0 84 -13 119l-514 -641q57 -45 158 -45q103 0 188.5 71.5t133 200.5t47.5 295z" />
<glyph unicode="&#xf9;" horiz-adv-x="1182" d="M113 0zM451 1096l-150 -695q-18 -89 -18 -139q0 -143 147 -143q88 0 173 60t150 172t99 270l100 475h166l-231 -1096h-139l22 203h-12q-98 -125 -187 -174t-184 -49q-128 0 -201 69.5t-73 198.5q0 62 22 172l146 676h170zM800 1241h-104q-61 61 -128.5 154t-95.5 153v21 h181q43 -136 147 -303v-25z" />
<glyph unicode="&#xfa;" horiz-adv-x="1182" d="M113 0zM451 1096l-150 -695q-18 -89 -18 -139q0 -143 147 -143q88 0 173 60t150 172t99 270l100 475h166l-231 -1096h-139l22 203h-12q-98 -125 -187 -174t-184 -49q-128 0 -201 69.5t-73 198.5q0 62 22 172l146 676h170zM636 1268q56 60 125.5 151.5t106.5 149.5h190 v-21q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xfb;" horiz-adv-x="1182" d="M113 0zM451 1096l-150 -695q-18 -89 -18 -139q0 -143 147 -143q88 0 173 60t150 172t99 270l100 475h166l-231 -1096h-139l22 203h-12q-98 -125 -187 -174t-184 -49q-128 0 -201 69.5t-73 198.5q0 62 22 172l146 676h170zM1024 1241h-103q-57 48 -161 189 q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#xfc;" horiz-adv-x="1182" d="M113 0zM451 1096l-150 -695q-18 -89 -18 -139q0 -143 147 -143q88 0 173 60t150 172t99 270l100 475h166l-231 -1096h-139l22 203h-12q-98 -125 -187 -174t-184 -49q-128 0 -201 69.5t-73 198.5q0 62 22 172l146 676h170zM457 1378q0 46 28 79.5t74 33.5q78 0 78 -80 q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM821 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#xfd;" horiz-adv-x="946" d="M0 0zM98 1096h168l74 -545q10 -69 19.5 -203.5t9.5 -216.5h6q35 87 87 200t77 156l325 609h178l-696 -1282q-93 -172 -184 -239t-219 -67q-72 0 -140 21v135q63 -18 131 -18q82 0 140.5 50.5t113.5 149.5l76 136zM500 1268q56 60 125.5 151.5t106.5 149.5h190v-21 q-38 -49 -140 -151t-177 -156h-105v27z" />
<glyph unicode="&#xfe;" horiz-adv-x="1182" d="M545 -20q-98 0 -172 51t-113 139h-10q-8 -104 -25 -176l-102 -486h-166l432 2048h168q-95 -441 -115 -522t-39 -149h9q101 125 189 177t183 52q139 0 218 -97.5t79 -273.5q0 -212 -69 -389t-191 -275.5t-276 -98.5zM731 975q-96 0 -195.5 -95t-158 -239t-58.5 -295 q0 -110 55.5 -168.5t160.5 -58.5q99 0 184.5 81t137.5 230.5t52 317.5q0 227 -178 227z" />
<glyph unicode="&#xff;" horiz-adv-x="946" d="M0 0zM98 1096h168l74 -545q10 -69 19.5 -203.5t9.5 -216.5h6q35 87 87 200t77 156l325 609h178l-696 -1282q-93 -172 -184 -239t-219 -67q-72 0 -140 21v135q63 -18 131 -18q82 0 140.5 50.5t113.5 149.5l76 136zM335 1378q0 46 28 79.5t74 33.5q78 0 78 -80 q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM699 1378q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62z" />
<glyph unicode="&#x131;" horiz-adv-x="520" d="M227 0h-168l234 1096h168z" />
<glyph unicode="&#x152;" horiz-adv-x="1751" d="M1524 0h-674q-78 -20 -158 -20q-256 0 -399 149.5t-143 419.5q0 264 96 482t263.5 336t377.5 118q152 0 237 -23h709l-31 -153h-565l-100 -469h528l-31 -150h-528l-115 -538h565zM696 131q69 0 123 19l246 1161q-76 22 -191 22q-157 0 -281 -101t-192.5 -281t-68.5 -398 q0 -199 98 -310.5t266 -111.5z" />
<glyph unicode="&#x153;" horiz-adv-x="1769" d="M1251 -20q-270 0 -356 225q-69 -107 -171.5 -164t-225.5 -57q-184 0 -292 114t-108 308q0 193 75 360t201 255.5t281 88.5q270 0 359 -225q75 109 177.5 170t221.5 61q139 0 217 -65.5t78 -186.5q0 -183 -164.5 -284t-468.5 -101h-41l-4 -80q0 -131 61.5 -204.5 t190.5 -73.5q75 0 145 24.5t150 59.5v-150q-162 -75 -326 -75zM649 969q-109 0 -196 -73t-135 -202t-48 -284q0 -141 62 -214t172 -73q177 0 278 160.5t101 427.5q0 124 -59.5 191t-174.5 67zM1413 973q-125 0 -220.5 -94.5t-139.5 -260.5h18q231 0 351 61t120 177 q0 48 -32 82.5t-97 34.5z" />
<glyph unicode="&#x178;" horiz-adv-x="1030" d="M188 0zM537 715l489 747h193l-627 -921l-113 -541h-172l119 549l-238 913h170zM452 1716q0 46 28 79.5t74 33.5q78 0 78 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22t-23.5 62zM816 1716q0 46 28 79.5t75 33.5q77 0 77 -80q0 -49 -29.5 -83t-68.5 -34q-35 0 -58.5 22 t-23.5 62z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1135" d="M1014 1241h-103q-57 48 -161 189q-134 -119 -242 -189h-109v27q145 133 204.5 197.5t82.5 103.5h158q37 -99 128 -235l42 -66v-27z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M989 1456q0 -99 -60 -157t-159 -58q-101 0 -160 57.5t-59 155.5q0 94 62 152.5t157 58.5q101 0 160 -57t59 -152zM885 1454q0 53 -32 84t-83 31q-49 0 -82 -31t-33 -84q0 -54 29.5 -84.5t85.5 -30.5q51 0 83 30.5t32 84.5z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1135" d="M838 1243q-40 0 -77.5 17.5t-73 39t-69 39t-65.5 17.5q-44 0 -69.5 -28.5t-47.5 -86.5h-100q58 258 231 258q44 0 83.5 -18t75 -39.5t66.5 -39.5t58 -18q44 0 69.5 27t51.5 90h100q-66 -258 -233 -258z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="639" d="M55 469l35 158h479l-34 -158h-480z" />
<glyph unicode="&#x2011;" horiz-adv-x="639" d="M55 469l35 158h479l-34 -158h-480z" />
<glyph unicode="&#x2012;" horiz-adv-x="639" d="M55 469l35 158h479l-34 -158h-480z" />
<glyph unicode="&#x2013;" horiz-adv-x="983" d="M55 469l35 160h823l-34 -160h-824z" />
<glyph unicode="&#x2014;" horiz-adv-x="1966" d="M55 469l35 160h1806l-34 -160h-1807z" />
<glyph unicode="&#x2018;" horiz-adv-x="348" d="M129 961l-6 22q98 211 270 479h127q-147 -345 -203 -501h-188z" />
<glyph unicode="&#x2019;" horiz-adv-x="348" d="M516 1462l8 -22q-40 -91 -111 -218.5t-159 -260.5h-129q134 298 203 501h188z" />
<glyph unicode="&#x201a;" horiz-adv-x="492" d="M291 238l8 -23q-113 -235 -270 -479h-129q126 286 204 502h187z" />
<glyph unicode="&#x201c;" horiz-adv-x="719" d="M500 961l-8 22q80 181 272 479h127q-162 -379 -203 -501h-188zM129 961l-6 22q98 211 270 479h127q-147 -345 -203 -501h-188z" />
<glyph unicode="&#x201d;" horiz-adv-x="719" d="M516 1462l8 -22q-40 -91 -111 -218.5t-159 -260.5h-129q134 298 203 501h188zM885 1462l10 -22q-94 -206 -274 -479h-127q57 126 115.5 272.5t86.5 228.5h189z" />
<glyph unicode="&#x201e;" horiz-adv-x="858" d="M291 238l8 -23q-113 -235 -270 -479h-129q126 286 204 502h187zM659 238l9 -23q-95 -205 -271 -479h-129q140 316 203 502h188z" />
<glyph unicode="&#x2022;" horiz-adv-x="774" d="M199 684q0 145 73.5 231t198.5 86q92 0 139 -49t47 -141q0 -141 -74 -230t-202 -89q-89 0 -135.5 49.5t-46.5 142.5z" />
<glyph unicode="&#x2026;" horiz-adv-x="1563" d="M43 0zM563 74q0 77 40.5 122.5t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77zM1085 74q0 77 40.5 122.5t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77zM43 74q0 77 40.5 122.5 t111.5 45.5q43 0 69.5 -26t26.5 -79q0 -71 -40 -118.5t-108 -47.5q-46 0 -73 26t-27 77z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="580" d="M88 578l391 380l78 -81l-297 -334l172 -381l-113 -49l-231 436v29z" />
<glyph unicode="&#x203a;" horiz-adv-x="580" d="M492 496l-392 -381l-77 82l296 333l-172 381l113 50l232 -437v-28z" />
<glyph unicode="&#x2044;" horiz-adv-x="268" d="M752 1462l-1086 -1462h-153l1085 1462h154z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="717" d="M713 788h-129l-43 -202h-127l43 202h-365l23 101l481 579h133l-121 -563h127zM481 905q69 322 90 395q-20 -36 -110 -149l-205 -246h225z" />
<glyph unicode="&#x20ac;" d="M928 1329q-140 0 -254 -99t-189 -298h426l-26 -133h-441q-21 -65 -32 -164h381l-29 -131h-361q0 -373 297 -373q123 0 256 55v-147q-127 -59 -278 -59q-212 0 -328.5 133.5t-116.5 378.5v12h-170l27 131h154q8 80 30 164h-151l27 133h159q97 267 259.5 408t369.5 141 q89 0 160 -21.5t141 -70.5l-80 -138q-113 78 -231 78z" />
<glyph unicode="&#x2122;" horiz-adv-x="1534" d="M438 741h-121v617h-196v104h516v-104h-199v-617zM1014 741l-189 551h-6q4 -52 4 -121v-430h-118v721h180l182 -557l193 557h170v-721h-121v430q0 73 4 121h-6l-197 -551h-96z" />
<glyph unicode="&#xe000;" horiz-adv-x="1095" d="M0 1095h1095v-1095h-1095v1095z" />
<glyph horiz-adv-x="1182" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
</font>
</defs></svg>

================
File: docs/map-editor/fonts/OpenSans-Light-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sanslight" horiz-adv-x="1169" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb01;" horiz-adv-x="1077" d="M29 0zM586 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM895 0h-99v1087h99v-1087zM782 1389q0 96 63 96q31 0 48.5 -25t17.5 -71q0 -45 -17.5 -71 t-48.5 -26q-63 0 -63 97z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1077" d="M29 0zM586 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM895 0h-99v1556h99v-1556z" />
<glyph unicode="&#xfb03;" horiz-adv-x="1692" d="M29 0zM586 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM1200 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5 q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM1510 0h-99v1087h99v-1087zM1397 1389q0 96 63 96q31 0 48.5 -25t17.5 -71q0 -45 -17.5 -71t-48.5 -26q-63 0 -63 97z" />
<glyph unicode="&#xfb04;" horiz-adv-x="1692" d="M29 0zM586 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM1200 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5 q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86zM1510 0h-99v1556h99v-1556z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="492" d="M276 377h-61l-29 1085h119zM164 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98z" />
<glyph unicode="&#x22;" horiz-adv-x="723" d="M260 1462l-33 -528h-61l-33 528h127zM590 1462l-33 -528h-61l-33 528h127z" />
<glyph unicode="#" horiz-adv-x="1323" d="M967 928l-76 -398h303v-79h-320l-86 -451h-90l88 451h-360l-86 -451h-88l86 451h-283v79h299l76 398h-297v80h311l86 454h91l-89 -454h365l88 454h86l-88 -454h285v-80h-301zM440 530h363l78 398h-363z" />
<glyph unicode="$" d="M991 440q0 -133 -99 -217t-274 -106v-236h-81v232q-92 2 -200.5 22.5t-172.5 50.5v103q75 -36 179.5 -61t193.5 -25v508q-145 44 -215 88t-102 104t-32 146q0 124 94.5 208.5t254.5 104.5v192h81v-190q197 -9 351 -72l-33 -90q-141 62 -318 72v-486q213 -66 293 -144 t80 -204zM881 444q0 85 -63 140.5t-200 95.5v-471q122 13 192.5 75t70.5 160zM297 1049q0 -86 57 -141t183 -93v453q-119 -16 -179.5 -76t-60.5 -143z" />
<glyph unicode="%" horiz-adv-x="1653" d="M211 1026q0 -186 45 -279.5t141 -93.5q193 0 193 373q0 184 -49.5 276.5t-143.5 92.5q-96 0 -141 -92.5t-45 -276.5zM688 1026q0 -226 -75 -343.5t-216 -117.5q-133 0 -208.5 120.5t-75.5 340.5q0 223 72 340t212 117q139 0 215 -120.5t76 -336.5zM1063 438 q0 -185 45 -277.5t141 -92.5q193 0 193 370q0 369 -193 369q-96 0 -141 -91.5t-45 -277.5zM1540 438q0 -226 -74 -343.5t-215 -117.5q-136 0 -211 121.5t-75 339.5q0 225 73.5 341t212.5 116q137 0 213 -120t76 -337zM1280 1462l-811 -1462h-96l811 1462h96z" />
<glyph unicode="&#x26;" horiz-adv-x="1460" d="M123 371q0 138 73.5 235t274.5 205l-75 82q-66 71 -98 139t-32 142q0 143 95.5 227t256.5 84q155 0 245.5 -81t90.5 -224q0 -105 -70 -192.5t-253 -194.5l452 -457q61 72 104 157t75 201h96q-63 -246 -209 -426l266 -268h-135l-193 197q-92 -90 -164 -131.5t-157.5 -63.5 t-194.5 -22q-209 0 -328.5 103t-119.5 288zM578 70q128 0 234.5 43.5t209.5 146.5l-483 485q-136 -72 -196.5 -122.5t-88 -109.5t-27.5 -138q0 -143 93 -224t258 -81zM373 1176q0 -79 40 -146t152 -174q159 85 221 159t62 169q0 94 -62 152.5t-168 58.5q-114 0 -179.5 -58 t-65.5 -161z" />
<glyph unicode="'" horiz-adv-x="393" d="M260 1462l-33 -528h-61l-33 528h127z" />
<glyph unicode="(" horiz-adv-x="557" d="M82 561q0 265 77.5 496t223.5 405h113q-148 -182 -227 -412.5t-79 -486.5q0 -483 304 -887h-111q-147 170 -224 397t-77 488z" />
<glyph unicode=")" horiz-adv-x="557" d="M475 561q0 -263 -77.5 -490t-223.5 -395h-111q304 404 304 887q0 257 -79 487.5t-227 411.5h113q147 -175 224 -406.5t77 -494.5z" />
<glyph unicode="*" horiz-adv-x="1128" d="M631 1556l-37 -405l405 104l21 -131l-395 -39l247 -340l-124 -71l-191 379l-180 -379l-125 71l242 340l-390 39l19 131l401 -104l-39 405h146z" />
<glyph unicode="+" d="M625 764h434v-82h-434v-432h-82v432h-432v82h432v434h82v-434z" />
<glyph unicode="," horiz-adv-x="440" d="M295 238l12 -21q-75 -265 -174 -481h-65q77 275 110 502h117z" />
<glyph unicode="-" horiz-adv-x="659" d="M92 512v82h475v-82h-475z" />
<glyph unicode="." horiz-adv-x="487" d="M162 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98z" />
<glyph unicode="/" horiz-adv-x="698" d="M674 1462l-545 -1462h-104l544 1462h105z" />
<glyph unicode="0" d="M1055 735q0 -385 -117.5 -570t-355.5 -185q-229 0 -348 190.5t-119 564.5q0 382 115.5 566t351.5 184q231 0 352 -190.5t121 -559.5zM223 735q0 -340 89 -502.5t270 -162.5q189 0 275.5 168t86.5 497q0 324 -86.5 492t-275.5 168t-274 -168t-85 -492z" />
<glyph unicode="1" d="M682 0h-98v1065q0 145 12 301q-15 -15 -31 -29t-309 -243l-57 71l397 297h86v-1462z" />
<glyph unicode="2" d="M1028 0h-915v88l389 406q164 170 230 260t97 172t31 172q0 131 -86 213t-223 82q-183 0 -350 -133l-54 69q183 154 406 154q191 0 300.5 -102t109.5 -281q0 -145 -73.5 -280.5t-268.5 -334.5l-375 -385v-4h782v-96z" />
<glyph unicode="3" d="M979 1118q0 -136 -85.5 -229t-229.5 -119v-6q176 -22 268 -112t92 -242q0 -205 -139.5 -317.5t-401.5 -112.5q-223 0 -389 83v99q84 -44 188.5 -69t196.5 -25q221 0 332 89.5t111 252.5q0 145 -113.5 223t-333.5 78h-158v96h160q182 0 288.5 86.5t106.5 234.5 q0 122 -86.5 195.5t-226.5 73.5q-109 0 -199 -30.5t-202 -104.5l-49 67q85 71 205 112.5t243 41.5q202 0 312 -95.5t110 -269.5z" />
<glyph unicode="4" d="M1141 373h-252v-373h-94v373h-752v67l725 1030h121v-1011h252v-86zM795 459v418q0 302 14 507h-8q-20 -37 -123 -188l-516 -737h633z" />
<glyph unicode="5" d="M537 879q234 0 368.5 -113t134.5 -311q0 -225 -140 -350t-386 -125q-109 0 -207 21.5t-164 61.5v103q108 -55 192 -76.5t179 -21.5q192 0 308 101.5t116 274.5q0 163 -113 256t-307 93q-130 0 -272 -39l-60 39l58 669h704v-96h-610l-45 -516q156 29 244 29z" />
<glyph unicode="6" d="M131 623q0 285 77.5 479.5t220 288.5t343.5 94q94 0 172 -23v-88q-73 27 -176 27q-247 0 -384.5 -178t-154.5 -518h13q76 98 174 148t207 50q205 0 320.5 -117t115.5 -323q0 -224 -121.5 -353.5t-327.5 -129.5q-222 0 -350.5 169.5t-128.5 473.5zM610 68q164 0 255 103 t91 294q0 168 -90 262t-245 94q-102 0 -189.5 -45t-139.5 -119.5t-52 -152.5q0 -111 49.5 -213.5t134 -162.5t186.5 -60z" />
<glyph unicode="7" d="M334 0l602 1366h-827v96h946v-73l-604 -1389h-117z" />
<glyph unicode="8" d="M582 1487q186 0 299.5 -95t113.5 -257q0 -112 -70.5 -198t-228.5 -159q192 -79 270 -173t78 -228q0 -181 -126.5 -289t-339.5 -108q-221 0 -339 101t-118 294q0 131 83 230t257 169q-161 76 -227 160.5t-66 202.5q0 105 53 184.5t148.5 122.5t212.5 43zM223 360 q0 -138 93.5 -214t261.5 -76q164 0 264 80.5t100 218.5q0 124 -78.5 201.5t-302.5 162.5q-184 -71 -261 -157t-77 -216zM580 1397q-141 0 -226.5 -69.5t-85.5 -190.5q0 -70 31.5 -123.5t91 -97t199.5 -101.5q163 63 234 139t71 183q0 120 -84.5 190t-230.5 70z" />
<glyph unicode="9" d="M1036 842q0 -288 -75.5 -482t-220 -287t-349.5 -93q-104 0 -192 26v86q43 -14 103.5 -21.5t92.5 -7.5q247 0 387 178.5t156 520.5h-12q-73 -96 -174 -147.5t-211 -51.5q-203 0 -316.5 112t-113.5 318q0 220 124.5 356t323.5 136q144 0 252 -75.5t166.5 -221.5t58.5 -346z M559 1397q-158 0 -252 -106.5t-94 -291.5q0 -174 87 -264t249 -90q101 0 188.5 45t139 119.5t51.5 151.5q0 117 -46.5 219t-130 159.5t-192.5 57.5z" />
<glyph unicode=":" horiz-adv-x="487" d="M162 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98zM162 971q0 98 80 98q82 0 82 -98q0 -53 -23.5 -76t-58.5 -23q-34 0 -57 23t-23 76z" />
<glyph unicode=";" horiz-adv-x="487" d="M303 238l12 -21q-75 -265 -174 -481h-65q29 97 62 245.5t48 256.5h117zM162 971q0 98 80 98q82 0 82 -98q0 -53 -23.5 -76t-58.5 -23q-34 0 -57 23t-23 76z" />
<glyph unicode="&#x3c;" d="M1059 266l-948 416v61l948 474v-95l-823 -405l823 -355v-96z" />
<glyph unicode="=" d="M111 885v82h948v-82h-948zM111 477v82h948v-82h-948z" />
<glyph unicode="&#x3e;" d="M111 362l823 355l-823 405v95l948 -474v-61l-948 -416v96z" />
<glyph unicode="?" horiz-adv-x="862" d="M293 377v37q0 123 37.5 201t138.5 167l91 79q72 61 103 121t31 138q0 127 -83.5 202t-219.5 75q-79 0 -148 -17.5t-149 -56.5l-37 80q110 48 184.5 64t153.5 16q183 0 288 -98.5t105 -270.5q0 -68 -18 -119t-50.5 -94.5t-78.5 -84t-102 -87.5q-64 -54 -98.5 -98.5 t-50 -93.5t-15.5 -146v-14h-82zM260 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98z" />
<glyph unicode="@" horiz-adv-x="1815" d="M1702 725q0 -228 -90.5 -366t-245.5 -138q-89 0 -144.5 54t-64.5 147h-4q-43 -100 -124 -150.5t-189 -50.5q-148 0 -229 96.5t-81 270.5q0 202 120.5 330.5t314.5 128.5q138 0 286 -41l-22 -464v-30q0 -104 35 -156.5t116 -52.5q103 0 168.5 116.5t65.5 303.5 q0 194 -79 340t-225.5 224.5t-334.5 78.5q-230 0 -405.5 -99.5t-270 -281.5t-94.5 -418q0 -322 167 -497.5t474 -175.5q93 0 188.5 18t231.5 70v-99q-203 -80 -414 -80q-349 0 -544 200.5t-195 557.5q0 256 108.5 460.5t307 317.5t448.5 113q215 0 380.5 -89t255 -254.5 t89.5 -383.5zM633 590q0 -143 55 -215t174 -72q255 0 273 346l16 291q-79 27 -193 27q-149 0 -237 -102.5t-88 -274.5z" />
<glyph unicode="A" horiz-adv-x="1229" d="M911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174z" />
<glyph unicode="B" horiz-adv-x="1284" d="M207 1462h401q271 0 398 -92t127 -278q0 -127 -77.5 -211.5t-226.5 -108.5v-6q175 -26 257.5 -110.5t82.5 -235.5q0 -202 -134 -311t-380 -109h-448v1462zM309 811h322q206 0 299.5 68.5t93.5 214.5t-105.5 212t-314.5 66h-295v-561zM309 721v-631h344q406 0 406 330 q0 301 -428 301h-322z" />
<glyph unicode="C" horiz-adv-x="1272" d="M831 1391q-275 0 -433 -176t-158 -482q0 -313 149 -486t426 -173q184 0 338 47v-90q-145 -51 -362 -51q-308 0 -485 199t-177 556q0 223 84.5 393t243 262.5t368.5 92.5q214 0 383 -80l-41 -92q-160 80 -336 80z" />
<glyph unicode="D" horiz-adv-x="1446" d="M1317 745q0 -368 -193 -556.5t-567 -188.5h-350v1462h395q350 0 532.5 -183t182.5 -534zM1206 741q0 314 -159.5 472.5t-468.5 158.5h-269v-1282h242q655 0 655 651z" />
<glyph unicode="E" horiz-adv-x="1130" d="M1006 0h-799v1462h799v-94h-697v-553h658v-94h-658v-627h697v-94z" />
<glyph unicode="F" horiz-adv-x="1028" d="M309 0h-102v1462h801v-94h-699v-620h660v-95h-660v-653z" />
<glyph unicode="G" horiz-adv-x="1481" d="M782 737h539v-667q-212 -90 -477 -90q-346 0 -530.5 195.5t-184.5 553.5q0 223 91.5 395.5t262 266.5t391.5 94q239 0 429 -88l-41 -92q-190 88 -394 88q-289 0 -458.5 -178.5t-169.5 -481.5q0 -330 161 -496.5t473 -166.5q202 0 343 57v514h-435v96z" />
<glyph unicode="H" horiz-adv-x="1473" d="M1266 0h-103v719h-854v-719h-102v1462h102v-649h854v649h103v-1462z" />
<glyph unicode="I" horiz-adv-x="516" d="M207 0v1462h102v-1462h-102z" />
<glyph unicode="J" horiz-adv-x="506" d="M-33 -369q-92 0 -151 27v88q78 -20 149 -20q242 0 242 264v1472h102v-1462q0 -369 -342 -369z" />
<glyph unicode="K" horiz-adv-x="1190" d="M1190 0h-125l-561 772l-195 -172v-600h-102v1462h102v-760l162 162l573 598h130l-599 -618z" />
<glyph unicode="L" horiz-adv-x="1051" d="M207 0v1462h102v-1366h697v-96h-799z" />
<glyph unicode="M" horiz-adv-x="1767" d="M850 0l-545 1350h-8q8 -124 8 -254v-1096h-98v1462h158l518 -1286h6l518 1286h154v-1462h-103v1108q0 116 12 240h-8l-547 -1348h-65z" />
<glyph unicode="N" horiz-adv-x="1477" d="M1270 0h-103l-866 1298h-8q12 -232 12 -350v-948h-98v1462h102l865 -1296h6q-9 180 -9 342v954h99v-1462z" />
<glyph unicode="O" horiz-adv-x="1565" d="M1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483z" />
<glyph unicode="P" horiz-adv-x="1198" d="M1087 1042q0 -212 -144 -325t-408 -113h-226v-604h-102v1462h358q522 0 522 -420zM309 692h201q247 0 357 81.5t110 264.5q0 169 -104 250.5t-322 81.5h-242v-678z" />
<glyph unicode="Q" horiz-adv-x="1565" d="M1436 733q0 -294 -126 -486.5t-349 -246.5l333 -348h-166l-282 330l-33 -2h-31q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5 t-401.5 168.5q-261 0 -402.5 -170t-141.5 -483z" />
<glyph unicode="R" horiz-adv-x="1217" d="M309 637v-637h-102v1462h348q272 0 402 -100.5t130 -302.5q0 -147 -77.5 -248t-235.5 -145l397 -666h-122l-377 637h-363zM309 725h279q185 0 287 82.5t102 243.5q0 167 -100 243t-326 76h-242v-645z" />
<glyph unicode="S" horiz-adv-x="1116" d="M1014 377q0 -183 -134.5 -290t-357.5 -107q-268 0 -411 59v102q158 -67 403 -67q180 0 285.5 82.5t105.5 216.5q0 83 -35 137.5t-114 99.5t-232 97q-224 77 -309.5 166.5t-85.5 238.5q0 164 128.5 267.5t330.5 103.5q206 0 387 -78l-37 -88q-182 76 -348 76 q-162 0 -258 -75t-96 -204q0 -81 29.5 -133t96.5 -93.5t230 -99.5q171 -59 257 -114.5t125.5 -126t39.5 -170.5z" />
<glyph unicode="T" horiz-adv-x="1073" d="M588 0h-103v1366h-475v96h1053v-96h-475v-1366z" />
<glyph unicode="U" horiz-adv-x="1473" d="M1282 1462v-946q0 -252 -146 -394t-407 -142q-254 0 -396.5 142.5t-142.5 397.5v942h103v-946q0 -211 117 -328.5t331 -117.5q209 0 324 115.5t115 320.5v956h102z" />
<glyph unicode="V" horiz-adv-x="1182" d="M1071 1462h111l-547 -1462h-90l-545 1462h109l368 -995q84 -225 113 -338q20 75 79 233z" />
<glyph unicode="W" horiz-adv-x="1827" d="M1372 0h-84l-321 1128q-40 139 -60 228q-16 -87 -45.5 -200t-322.5 -1156h-86l-402 1462h107l256 -942q15 -57 28 -105.5t23.5 -91t19 -82t15.5 -79.5q24 136 102 413l250 887h113l293 -1018q51 -176 73 -284q13 72 33.5 153t308.5 1149h103z" />
<glyph unicode="X" horiz-adv-x="1102" d="M1102 0h-117l-432 682l-440 -682h-113l492 762l-447 700h115l395 -626l401 626h109l-453 -698z" />
<glyph unicode="Y" horiz-adv-x="1081" d="M543 662l428 800h110l-487 -897v-565h-105v557l-489 905h117z" />
<glyph unicode="Z" horiz-adv-x="1180" d="M1098 0h-1016v76l856 1290h-817v96h954v-76l-858 -1290h881v-96z" />
<glyph unicode="[" horiz-adv-x="653" d="M602 -324h-428v1786h428v-94h-330v-1597h330v-95z" />
<glyph unicode="\" horiz-adv-x="698" d="M127 1462l547 -1462h-103l-546 1462h102z" />
<glyph unicode="]" horiz-adv-x="653" d="M51 -229h330v1597h-330v94h428v-1786h-428v95z" />
<glyph unicode="^" d="M88 561l465 912h68l460 -912h-100l-395 791l-398 -791h-100z" />
<glyph unicode="_" horiz-adv-x="842" d="M846 -266h-850v82h850v-82z" />
<glyph unicode="`" horiz-adv-x="1182" d="M776 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="a" horiz-adv-x="1085" d="M842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5z" />
<glyph unicode="b" horiz-adv-x="1219" d="M641 1108q228 0 343.5 -143.5t115.5 -419.5q0 -271 -121.5 -418t-341.5 -147q-116 0 -209 48t-147 136h-9l-28 -164h-62v1556h99v-391q0 -88 -4 -162l-3 -85h7q62 98 149.5 144t210.5 46zM639 1018q-192 0 -275 -110t-83 -363v-17q0 -246 86.5 -353t269.5 -107 q178 0 268 124.5t90 354.5q0 471 -356 471z" />
<glyph unicode="c" horiz-adv-x="973" d="M616 -20q-233 0 -365 147t-132 410q0 270 137 420.5t375 150.5q141 0 270 -49l-27 -88q-141 47 -245 47q-200 0 -303 -123.5t-103 -355.5q0 -220 103 -344.5t288 -124.5q148 0 275 53v-92q-104 -51 -273 -51z" />
<glyph unicode="d" horiz-adv-x="1219" d="M580 1108q118 0 204 -43t154 -147h6q-6 126 -6 247v391h98v-1556h-65l-25 166h-8q-124 -186 -356 -186q-225 0 -344 140t-119 408q0 282 118 431t343 149zM580 1018q-178 0 -267.5 -125t-89.5 -363q0 -462 359 -462q184 0 270 107t86 353v17q0 252 -84.5 362.5 t-273.5 110.5z" />
<glyph unicode="e" horiz-adv-x="1124" d="M621 -20q-237 0 -369.5 146t-132.5 409q0 260 128 416.5t345 156.5q192 0 303 -134t111 -364v-80h-783q2 -224 104.5 -342t293.5 -118q93 0 163.5 13t178.5 56v-90q-92 -40 -170 -54.5t-172 -14.5zM592 1020q-157 0 -252 -103.5t-111 -298.5h672q0 189 -82 295.5 t-227 106.5z" />
<glyph unicode="f" horiz-adv-x="614" d="M586 1001h-256v-1001h-99v1001h-202v58l202 37v84q0 200 73.5 293.5t240.5 93.5q90 0 180 -27l-23 -86q-80 25 -159 25q-116 0 -164.5 -68.5t-48.5 -222.5v-101h256v-86z" />
<glyph unicode="g" horiz-adv-x="1071" d="M1030 1087v-69l-225 -14q90 -112 90 -246q0 -157 -104.5 -254.5t-280.5 -97.5q-74 0 -104 6q-59 -31 -90 -73t-31 -89q0 -52 39.5 -76t132.5 -24h190q177 0 271 -71.5t94 -211.5q0 -172 -139.5 -265.5t-397.5 -93.5q-205 0 -317.5 79t-112.5 220q0 112 69.5 186 t188.5 101q-49 21 -78.5 59.5t-29.5 88.5q0 109 139 192q-95 39 -148 122.5t-53 191.5q0 163 103.5 261.5t279.5 98.5q107 0 166 -21h348zM150 -184q0 -224 333 -224q428 0 428 273q0 98 -67 142t-217 44h-178q-299 0 -299 -235zM233 748q0 -126 76.5 -195.5t204.5 -69.5 q136 0 208.5 69t72.5 200q0 139 -74.5 208.5t-208.5 69.5q-130 0 -204.5 -74.5t-74.5 -207.5z" />
<glyph unicode="h" horiz-adv-x="1208" d="M940 0v705q0 164 -69 238.5t-214 74.5q-195 0 -285.5 -98.5t-90.5 -319.5v-600h-99v1556h99v-495l-5 -139h7q61 98 154 142t231 44q370 0 370 -397v-711h-98z" />
<glyph unicode="i" horiz-adv-x="463" d="M281 0h-99v1087h99v-1087zM168 1389q0 96 63 96q31 0 48.5 -25t17.5 -71q0 -45 -17.5 -71t-48.5 -26q-63 0 -63 97z" />
<glyph unicode="j" horiz-adv-x="463" d="M37 -492q-80 0 -135 25v86q69 -20 129 -20q151 0 151 176v1312h99v-1298q0 -135 -63.5 -208t-180.5 -73zM168 1389q0 96 63 96q31 0 48.5 -25t17.5 -71q0 -45 -17.5 -71t-48.5 -26q-63 0 -63 97z" />
<glyph unicode="k" horiz-adv-x="991" d="M279 477l555 610h120l-428 -464l465 -623h-119l-413 549l-178 -162v-387h-99v1556h99v-780l-7 -299h5z" />
<glyph unicode="l" horiz-adv-x="463" d="M281 0h-99v1556h99v-1556z" />
<glyph unicode="m" horiz-adv-x="1808" d="M1540 0v713q0 159 -62 232t-190 73q-167 0 -247 -92t-80 -289v-637h-101v743q0 275 -252 275q-171 0 -249 -99.5t-78 -318.5v-600h-99v1087h82l21 -149h6q45 81 128 125.5t183 44.5q257 0 330 -193h4q53 93 142.5 143t203.5 50q178 0 267 -95t89 -302v-711h-98z" />
<glyph unicode="n" horiz-adv-x="1208" d="M940 0v705q0 164 -69 238.5t-214 74.5q-195 0 -285.5 -98.5t-90.5 -319.5v-600h-99v1087h84l19 -149h6q106 170 377 170q370 0 370 -397v-711h-98z" />
<glyph unicode="o" horiz-adv-x="1200" d="M1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5t-97.5 -349.5z " />
<glyph unicode="p" horiz-adv-x="1219" d="M647 -20q-251 0 -366 188h-7l3 -84q4 -74 4 -162v-414h-99v1579h84l19 -155h6q112 176 358 176q220 0 335.5 -144.5t115.5 -420.5q0 -268 -121.5 -415.5t-331.5 -147.5zM645 68q167 0 258.5 124t91.5 347q0 479 -346 479q-190 0 -279 -104.5t-89 -340.5v-32 q0 -255 85.5 -364t278.5 -109z" />
<glyph unicode="q" horiz-adv-x="1219" d="M569 -20q-214 0 -332 142t-118 410q0 275 118 425.5t338 150.5q236 0 353 -174h6l18 153h84v-1579h-98v414q0 122 6 248h-6q-118 -190 -369 -190zM571 68q198 0 282.5 109t84.5 366v12q0 245 -85 354t-271 109q-176 0 -267.5 -124t-91.5 -364q0 -229 89.5 -345.5 t258.5 -116.5z" />
<glyph unicode="r" horiz-adv-x="797" d="M610 1108q69 0 148 -14l-19 -95q-68 17 -141 17q-139 0 -228 -118t-89 -298v-600h-99v1087h84l10 -196h7q67 120 143 168.5t184 48.5z" />
<glyph unicode="s" horiz-adv-x="954" d="M856 283q0 -146 -111 -224.5t-315 -78.5q-218 0 -346 67v107q164 -82 346 -82q161 0 244.5 53.5t83.5 142.5q0 82 -66.5 138t-218.5 110q-163 59 -229 101.5t-99.5 96t-33.5 130.5q0 122 102.5 193t286.5 71q176 0 334 -66l-37 -90q-160 66 -297 66q-133 0 -211 -44 t-78 -122q0 -85 60.5 -136t236.5 -114q147 -53 214 -95.5t100.5 -96.5t33.5 -127z" />
<glyph unicode="t" horiz-adv-x="686" d="M469 68q94 0 164 16v-80q-72 -24 -166 -24q-144 0 -212.5 77t-68.5 242v702h-161v58l161 45l50 246h51v-263h319v-86h-319v-688q0 -125 44 -185t138 -60z" />
<glyph unicode="u" horiz-adv-x="1208" d="M268 1087v-704q0 -164 69 -238.5t214 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-106 -170 -377 -170q-371 0 -371 397v710h98z" />
<glyph unicode="v" horiz-adv-x="940" d="M420 0l-420 1087h102l281 -739q56 -142 84 -248h6q41 136 84 250l281 737h102l-420 -1087h-100z" />
<glyph unicode="w" horiz-adv-x="1481" d="M1051 0l-238 727q-23 74 -59 217h-6l-21 -74l-45 -145l-242 -725h-98l-311 1087h106l174 -630q61 -234 80 -344h6q59 234 86 311l224 663h90l213 -661q72 -235 88 -311h6q8 65 80 348l166 624h100l-295 -1087h-104z" />
<glyph unicode="x" horiz-adv-x="1020" d="M449 559l-379 528h114l324 -458l321 458h109l-373 -528l400 -559h-115l-342 485l-344 -485h-109z" />
<glyph unicode="y" horiz-adv-x="940" d="M0 1087h102l230 -610q105 -281 133 -379h6q42 129 137 385l230 604h102l-487 -1263q-59 -154 -99 -208t-93.5 -81t-129.5 -27q-57 0 -127 21v86q58 -16 125 -16q51 0 90 24t70.5 74.5t73 160t53.5 142.5z" />
<glyph unicode="z" horiz-adv-x="944" d="M858 0h-776v63l645 936h-598v88h727v-63l-649 -936h651v-88z" />
<glyph unicode="{" horiz-adv-x="723" d="M389 -27q0 -102 59.5 -152.5t202.5 -53.5v-91q-195 0 -277.5 75t-82.5 231v337q0 205 -230 209v80q122 2 176 51t54 148v350q0 299 360 305v-90q-138 -5 -200 -58t-62 -157v-305q0 -130 -44 -194t-142 -85v-8q97 -20 141.5 -83.5t44.5 -186.5v-322z" />
<glyph unicode="|" horiz-adv-x="1108" d="M508 1561h92v-2067h-92v2067z" />
<glyph unicode="}" horiz-adv-x="723" d="M334 295q0 123 44.5 186.5t141.5 83.5v8q-97 20 -141.5 84t-44.5 195v305q0 103 -61.5 156.5t-200.5 58.5v90q174 0 267 -77.5t93 -227.5v-350q0 -100 54.5 -148.5t175.5 -50.5v-80q-230 -4 -230 -209v-337q0 -155 -82.5 -230.5t-277.5 -75.5v91q141 2 201.5 52.5 t60.5 153.5v322z" />
<glyph unicode="~" d="M334 745q-49 0 -108 -30.5t-115 -89.5v94q108 110 233 110q61 0 115 -13.5t155 -57.5q126 -58 220 -58q56 0 109.5 30.5t115.5 94.5v-96q-48 -49 -104.5 -81t-129.5 -32q-116 0 -270 72q-124 57 -221 57z" />
<glyph unicode="&#xa1;" horiz-adv-x="492" d="M215 711h61l29 -1086h-119zM166 1010q0 98 80 98q82 0 82 -98q0 -53 -23.5 -76t-58.5 -23q-34 0 -57 23t-23 76z" />
<glyph unicode="&#xa2;" d="M602 190q-186 30 -288.5 175t-102.5 380q0 232 102.5 381.5t288.5 182.5v174h82v-166h14q131 0 275 -55l-31 -84q-134 51 -237 51q-187 0 -288.5 -122.5t-101.5 -358.5q0 -225 100.5 -349.5t280.5 -124.5q131 0 267 58v-92q-110 -56 -267 -56h-12v-204h-82v210z" />
<glyph unicode="&#xa3;" d="M412 676v-256q0 -116 -35 -196t-113 -128h809v-96h-995v84q110 21 171.5 110t61.5 224v258h-211v82h211v297q0 204 98 315t281 111q175 0 330 -68l-35 -86q-157 66 -295 66q-141 0 -209.5 -81t-68.5 -253v-301h411v-82h-411z" />
<glyph unicode="&#xa4;" d="M991 723q0 -151 -90 -256l139 -141l-59 -60l-137 142q-110 -93 -260 -93q-153 0 -260 93l-138 -142l-59 60l139 141q-90 106 -90 256q0 147 90 258l-139 141l59 60l138 -142q103 93 260 93q155 0 260 -93l137 142l59 -60l-139 -141q90 -111 90 -258zM584 395 q134 0 228.5 95.5t94.5 232.5q0 136 -95 233t-228 97q-134 0 -229 -97t-95 -233t94.5 -232t229.5 -96z" />
<glyph unicode="&#xa5;" d="M586 666l428 796h110l-432 -788h283v-82h-338v-205h338v-82h-338v-305h-105v305h-337v82h337v205h-337v82h278l-430 788h117z" />
<glyph unicode="&#xa6;" horiz-adv-x="1108" d="M508 1561h92v-764h-92v764zM508 258h92v-764h-92v764z" />
<glyph unicode="&#xa7;" horiz-adv-x="1057" d="M145 813q0 83 50.5 152.5t138.5 107.5q-86 47 -125 102t-39 136q0 117 101.5 183.5t275.5 66.5q175 0 336 -64l-35 -80q-91 34 -158.5 47t-144.5 13q-134 0 -205.5 -44.5t-71.5 -119.5q0 -54 25.5 -88.5t85.5 -65.5t188 -74q192 -64 264 -132.5t72 -170.5 q0 -173 -186 -274q86 -42 129 -96t43 -136q0 -135 -113 -207.5t-311 -72.5q-92 0 -171 15t-165 52v95q182 -78 332 -78q162 0 247 49.5t85 140.5q0 55 -25 87.5t-88.5 65.5t-190.5 79q-200 73 -272 141.5t-72 169.5zM246 825q0 -65 31.5 -104t105.5 -75t250 -99 q82 41 126 98t44 121q0 62 -32 102t-108.5 77t-236.5 87q-81 -23 -130.5 -79t-49.5 -128z" />
<glyph unicode="&#xa8;" horiz-adv-x="1182" d="M336 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM717 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M897 1092q-142 0 -222.5 -94.5t-80.5 -264.5q0 -186 74.5 -275t220.5 -89q84 0 198 43v-88q-102 -45 -208 -45q-187 0 -288.5 115t-101.5 331q0 208 111 332.5t297 124.5q119 0 227 -52l-37 -83q-98 45 -190 45zM100 731q0 200 100 375t275 276t377 101q200 0 375 -100 t276 -275t101 -377q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM193 731q0 -178 88.5 -329.5t240.5 -240.5t330 -89t329.5 88.5t240.5 240.5t89 330q0 174 -85.5 325t-239 243t-334.5 92q-176 0 -328.5 -88.5t-241.5 -242.5t-89 -329z " />
<glyph unicode="&#xaa;" horiz-adv-x="686" d="M512 813l-25 72q-84 -84 -202 -84q-95 0 -151 49t-56 139q0 100 80 151.5t241 59.5l95 4v43q0 77 -38 114.5t-106 37.5q-87 0 -196 -49l-33 73q117 56 231 56q228 0 228 -215v-451h-68zM168 993q0 -54 35 -85t96 -31q90 0 142.5 50t52.5 142v64l-88 -5 q-116 -6 -177 -36.5t-61 -98.5z" />
<glyph unicode="&#xab;" horiz-adv-x="885" d="M82 543l309 393l62 -43l-254 -363l254 -362l-62 -43l-309 391v27zM442 543l310 393l61 -43l-254 -363l254 -362l-61 -43l-310 391v27z" />
<glyph unicode="&#xac;" d="M1038 764v-494h-82v412h-845v82h927z" />
<glyph unicode="&#xad;" horiz-adv-x="659" d="M92 512zM92 512v82h475v-82h-475z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M709 731h112q91 0 143 46.5t52 135.5q0 172 -197 172h-110v-354zM1120 918q0 -79 -38.5 -139.5t-110.5 -94.5l237 -393h-121l-210 360h-168v-360h-101v880h211q143 0 222 -62t79 -191zM100 731q0 200 100 375t275 276t377 101q200 0 375 -100t276 -275t101 -377 q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM193 731q0 -178 88.5 -329.5t240.5 -240.5t330 -89t329.5 88.5t240.5 240.5t89 330q0 174 -85.5 325t-239 243t-334.5 92q-176 0 -328.5 -88.5t-241.5 -242.5t-89 -329z" />
<glyph unicode="&#xaf;" horiz-adv-x="1024" d="M1030 1556h-1036v82h1036v-82z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M139 1184q0 132 86.5 215.5t212.5 83.5t212.5 -83.5t86.5 -215.5t-86.5 -215.5t-212.5 -83.5q-130 0 -214.5 83t-84.5 216zM229 1184q0 -91 61 -154t148 -63q86 0 147.5 62t61.5 155q0 92 -60 154.5t-149 62.5q-90 0 -149.5 -64t-59.5 -153z" />
<glyph unicode="&#xb1;" d="M111 1zM111 1v82h948v-82h-948zM625 764h434v-82h-434v-432h-82v432h-432v82h432v434h82v-434z" />
<glyph unicode="&#xb2;" horiz-adv-x="688" d="M629 586h-576v78l242 237q125 121 172 193t47 149q0 71 -46.5 112.5t-123.5 41.5q-108 0 -217 -82l-49 65q119 103 270 103q124 0 194 -63.5t70 -174.5q0 -47 -13 -89t-40 -85.5t-68.5 -90t-308.5 -306.5h447v-88z" />
<glyph unicode="&#xb3;" horiz-adv-x="688" d="M616 1260q0 -78 -44 -131.5t-117 -75.5q186 -45 186 -211q0 -130 -88.5 -201.5t-247.5 -71.5q-144 0 -264 60v88q136 -62 266 -62q115 0 174.5 49t59.5 136q0 83 -59.5 122t-178.5 39h-131v84h135q105 0 158 43.5t53 120.5q0 67 -47 107.5t-127 40.5q-128 0 -246 -78 l-47 70q130 94 293 94q127 0 199.5 -60t72.5 -163z" />
<glyph unicode="&#xb4;" horiz-adv-x="1182" d="M393 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xb5;" horiz-adv-x="1221" d="M281 1087v-704q0 -164 69 -238.5t213 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-50 -77 -150 -123.5t-217 -46.5q-99 0 -167.5 27.5t-119.5 84.5q5 -92 5 -170v-414h-99v1579h99z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1106 -260h-100v1722h-228v-1722h-100v819q-64 -18 -146 -18q-216 0 -317.5 125t-101.5 376q0 260 109 387t341 127h543v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="487" d="M162 623zM162 721q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98z" />
<glyph unicode="&#xb8;" horiz-adv-x="420" d="M393 -291q0 -100 -67.5 -150.5t-188.5 -50.5q-68 0 -94 11v88q30 -10 92 -10q78 0 119 28t41 80q0 94 -193 121l93 174h96l-66 -117q168 -37 168 -174z" />
<glyph unicode="&#xb9;" horiz-adv-x="688" d="M350 1462h92v-876h-98v547q0 99 12 233q-26 -23 -233 -145l-47 77z" />
<glyph unicode="&#xba;" horiz-adv-x="739" d="M670 1141q0 -161 -80 -250.5t-223 -89.5t-220 86t-77 254q0 162 78 250t223 88q142 0 220.5 -87t78.5 -251zM160 1141q0 -264 209 -264t209 264q0 131 -50 194.5t-159 63.5t-159 -63.5t-50 -194.5z" />
<glyph unicode="&#xbb;" horiz-adv-x="885" d="M803 518l-309 -393l-62 43l254 362l-254 363l62 43l309 -391v-27zM442 518l-309 -393l-61 43l254 362l-254 363l61 43l309 -391v-27z" />
<glyph unicode="&#xbc;" horiz-adv-x="1516" d="M59 0zM333 1462h92v-876h-98v547q0 99 12 233q-26 -23 -233 -145l-47 77zM1148 1462l-811 -1462h-94l811 1462h94zM1392 242h-129v-241h-90v241h-413v60l407 581h96v-563h129v-78zM1173 320v221q0 132 8 232q-6 -12 -21.5 -35.5t-295.5 -417.5h309z" />
<glyph unicode="&#xbd;" horiz-adv-x="1516" d="M11 0zM285 1462h92v-876h-98v547q0 99 12 233q-26 -23 -233 -145l-47 77zM1073 1462l-811 -1462h-94l811 1462h94zM1403 1h-576v78l242 237q125 121 172 193t47 149q0 71 -46.5 112.5t-123.5 41.5q-108 0 -217 -82l-49 65q119 103 270 103q124 0 194 -63.5t70 -174.5 q0 -47 -13 -89t-40 -85.5t-68.5 -90t-308.5 -306.5h447v-88z" />
<glyph unicode="&#xbe;" horiz-adv-x="1516" d="M41 0zM616 1260q0 -78 -44 -131.5t-117 -75.5q186 -45 186 -211q0 -130 -88.5 -201.5t-247.5 -71.5q-144 0 -264 60v88q136 -62 266 -62q115 0 174.5 49t59.5 136q0 83 -59.5 122t-178.5 39h-131v84h135q105 0 158 43.5t53 120.5q0 67 -47 107.5t-127 40.5 q-128 0 -246 -78l-47 70q130 94 293 94q127 0 199.5 -60t72.5 -163zM1300 1462l-811 -1462h-94l811 1462h94zM1495 242h-129v-241h-90v241h-413v60l407 581h96v-563h129v-78zM1276 320v221q0 132 8 232q-6 -12 -21.5 -35.5t-295.5 -417.5h309z" />
<glyph unicode="&#xbf;" horiz-adv-x="862" d="M569 711v-37q0 -125 -39.5 -204.5t-136.5 -164.5l-90 -79q-73 -61 -104 -120.5t-31 -138.5q0 -124 82 -200t221 -76q125 0 233 46l64 27l37 -79q-111 -48 -185.5 -64t-152.5 -16q-184 0 -288.5 99t-104.5 269q0 70 20 124t58.5 102t171.5 159q64 53 98.5 98.5t49.5 94 t15 145.5v15h82zM440 1010q0 98 80 98q82 0 82 -98q0 -53 -23.5 -76t-58.5 -23q-34 0 -57 23t-23 76z" />
<glyph unicode="&#xc0;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM720 1579h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xc1;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM504 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xc2;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM328 1595q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xc3;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM784 1581q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59 q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xc4;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM367 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM748 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xc5;" horiz-adv-x="1229" d="M0 0zM911 516h-594l-204 -516h-113l588 1468h65l576 -1468h-115zM354 608h523l-199 527q-25 62 -60 172q-27 -96 -59 -174zM836 1610q0 -97 -60 -155t-157 -58t-157 58t-60 155q0 94 60 152.5t157 58.5t157 -59t60 -152zM482 1610q0 -66 37.5 -103.5t99.5 -37.5 t99.5 37.5t37.5 103.5q0 64 -39 101.5t-98 37.5q-62 0 -99.5 -38t-37.5 -101z" />
<glyph unicode="&#xc6;" horiz-adv-x="1653" d="M1528 0h-717v516h-475l-227 -516h-111l653 1462h877v-94h-615v-553h576v-94h-576v-627h615v-94zM377 608h434v760h-100z" />
<glyph unicode="&#xc7;" horiz-adv-x="1272" d="M129 0zM831 1391q-275 0 -433 -176t-158 -482q0 -313 149 -486t426 -173q184 0 338 47v-90q-145 -51 -362 -51q-308 0 -485 199t-177 556q0 223 84.5 393t243 262.5t368.5 92.5q214 0 383 -80l-41 -92q-160 80 -336 80zM911 -291q0 -100 -67.5 -150.5t-188.5 -50.5 q-68 0 -94 11v88q30 -10 92 -10q78 0 119 28t41 80q0 94 -193 121l93 174h96l-66 -117q168 -37 168 -174z" />
<glyph unicode="&#xc8;" horiz-adv-x="1130" d="M207 0zM1006 0h-799v1462h799v-94h-697v-553h658v-94h-658v-627h697v-94zM697 1579h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xc9;" horiz-adv-x="1130" d="M207 0zM1006 0h-799v1462h799v-94h-697v-553h658v-94h-658v-627h697v-94zM463 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xca;" horiz-adv-x="1130" d="M207 0zM1006 0h-799v1462h799v-94h-697v-553h658v-94h-658v-627h697v-94zM315 1595q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xcb;" horiz-adv-x="1130" d="M207 0zM1006 0h-799v1462h799v-94h-697v-553h658v-94h-658v-627h697v-94zM354 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM735 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xcc;" horiz-adv-x="516" d="M0 0zM207 0v1462h102v-1462h-102zM320 1579h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xcd;" horiz-adv-x="516" d="M191 0zM207 0v1462h102v-1462h-102zM191 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xce;" horiz-adv-x="516" d="M0 0zM207 0v1462h102v-1462h-102zM-32 1595q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xcf;" horiz-adv-x="516" d="M5 0zM207 0v1462h102v-1462h-102zM5 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM386 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xd0;" horiz-adv-x="1466" d="M1317 745q0 -368 -193 -556.5t-567 -188.5h-350v678h-160v94h160v690h395q350 0 532.5 -183t182.5 -534zM1206 741q0 314 -159.5 472.5t-468.5 158.5h-269v-600h406v-94h-406v-588h242q655 0 655 651z" />
<glyph unicode="&#xd1;" horiz-adv-x="1477" d="M207 0zM1270 0h-103l-866 1298h-8q12 -232 12 -350v-948h-98v1462h102l865 -1296h6q-9 180 -9 342v954h99v-1462zM897 1581q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59 q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xd2;" horiz-adv-x="1565" d="M129 0zM1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483zM885 1579h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xd3;" horiz-adv-x="1565" d="M129 0zM1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483zM686 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xd4;" horiz-adv-x="1565" d="M129 0zM1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483zM492 1595q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xd5;" horiz-adv-x="1565" d="M129 0zM1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483zM940 1581q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xd6;" horiz-adv-x="1565" d="M129 0zM1436 733q0 -348 -174 -550.5t-480 -202.5q-305 0 -479 202.5t-174 552.5q0 349 175.5 549.5t479.5 200.5q306 0 479 -201.5t173 -550.5zM240 733q0 -314 140 -485.5t402 -171.5q264 0 403.5 170t139.5 487q0 316 -139.5 484.5t-401.5 168.5q-261 0 -402.5 -170 t-141.5 -483zM529 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM910 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xd7;" d="M584 780l409 408l58 -58l-408 -407l406 -408l-58 -57l-407 408l-406 -408l-57 57l405 408l-407 407l57 58z" />
<glyph unicode="&#xd8;" horiz-adv-x="1565" d="M1436 733q0 -348 -174 -550.5t-480 -202.5q-236 0 -395 120l-86 -120l-74 59l90 127q-188 200 -188 569q0 349 175.5 549.5t479.5 200.5q232 0 392 -121l108 152l72 -60l-111 -153q191 -207 191 -570zM1325 733q0 315 -139 486l-742 -1037q133 -106 338 -106 q264 0 403.5 170t139.5 487zM240 733q0 -312 139 -483l739 1034q-133 102 -334 102q-261 0 -402.5 -170t-141.5 -483z" />
<glyph unicode="&#xd9;" horiz-adv-x="1473" d="M190 0zM1282 1462v-946q0 -252 -146 -394t-407 -142q-254 0 -396.5 142.5t-142.5 397.5v942h103v-946q0 -211 117 -328.5t331 -117.5q209 0 324 115.5t115 320.5v956h102zM833 1579h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xda;" horiz-adv-x="1473" d="M190 0zM1282 1462v-946q0 -252 -146 -394t-407 -142q-254 0 -396.5 142.5t-142.5 397.5v942h103v-946q0 -211 117 -328.5t331 -117.5q209 0 324 115.5t115 320.5v956h102zM633 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xdb;" horiz-adv-x="1473" d="M190 0zM1282 1462v-946q0 -252 -146 -394t-407 -142q-254 0 -396.5 142.5t-142.5 397.5v942h103v-946q0 -211 117 -328.5t331 -117.5q209 0 324 115.5t115 320.5v956h102zM444 1595q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207 q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xdc;" horiz-adv-x="1473" d="M190 0zM1282 1462v-946q0 -252 -146 -394t-407 -142q-254 0 -396.5 142.5t-142.5 397.5v942h103v-946q0 -211 117 -328.5t331 -117.5q209 0 324 115.5t115 320.5v956h102zM481 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM862 1727q0 46 15.5 66 t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xdd;" horiz-adv-x="1081" d="M0 0zM543 662l428 800h110l-487 -897v-565h-105v557l-489 905h117zM434 1595q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xde;" horiz-adv-x="1198" d="M1087 778q0 -212 -144 -325t-408 -113h-226v-340h-102v1462h102v-264h256q522 0 522 -420zM309 428h201q247 0 357 81.5t110 264.5q0 169 -104 250.5t-322 81.5h-242v-678z" />
<glyph unicode="&#xdf;" horiz-adv-x="1194" d="M961 1284q0 -139 -139 -250q-81 -64 -110.5 -100.5t-29.5 -75.5q0 -44 14.5 -68t51.5 -57t102 -78q106 -75 151.5 -124.5t68 -103t22.5 -120.5q0 -156 -88 -241.5t-246 -85.5q-95 0 -174.5 18.5t-126.5 48.5v107q65 -38 148.5 -62t152.5 -24q114 0 174.5 54.5t60.5 160.5 q0 83 -39 144t-149 136q-127 87 -175 147t-48 146q0 60 32.5 110t106.5 108q74 57 106.5 105.5t32.5 106.5q0 93 -70 143t-202 50q-145 0 -226 -69t-81 -196v-1214h-99v1206q0 173 103.5 267t292.5 94q188 0 285.5 -72.5t97.5 -210.5z" />
<glyph unicode="&#xe0;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM638 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xe1;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM422 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xe2;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM251 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xe3;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM697 1243q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5 h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xe4;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM282 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM663 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xe5;" horiz-adv-x="1085" d="M98 0zM842 0l-25 172h-8q-82 -105 -168.5 -148.5t-204.5 -43.5q-160 0 -249 82t-89 227q0 159 132.5 247t383.5 93l207 6v72q0 155 -63 234t-203 79q-151 0 -313 -84l-37 86q179 84 354 84q179 0 267.5 -93t88.5 -290v-723h-73zM442 70q174 0 274.5 99.5t100.5 276.5v107 l-190 -8q-229 -11 -326.5 -71.5t-97.5 -188.5q0 -102 62.5 -158.5t176.5 -56.5zM759 1456q0 -97 -60 -155t-157 -58t-157 58t-60 155q0 94 60 152.5t157 58.5t157 -59t60 -152zM405 1456q0 -66 37.5 -103.5t99.5 -37.5t99.5 37.5t37.5 103.5q0 64 -39 101.5t-98 37.5 q-62 0 -99.5 -38t-37.5 -101z" />
<glyph unicode="&#xe6;" horiz-adv-x="1731" d="M1243 -20q-295 0 -397 256q-68 -133 -168 -194.5t-252 -61.5q-156 0 -242 82.5t-86 226.5q0 154 125 243t377 97l201 6v72q0 155 -61.5 234t-198.5 79q-148 0 -305 -84l-37 86q173 84 346 84q261 0 325 -211q111 213 347 213q184 0 289.5 -134.5t105.5 -363.5v-80h-715 q0 -460 348 -460q85 0 150 12t174 57v-90q-92 -41 -165 -55t-161 -14zM434 70q169 0 266 99.5t97 276.5v107l-187 -8q-219 -11 -313 -71.5t-94 -188.5q0 -102 61 -158.5t170 -56.5zM1217 1020q-284 0 -314 -402h604q0 188 -77.5 295t-212.5 107z" />
<glyph unicode="&#xe7;" horiz-adv-x="973" d="M119 0zM616 -20q-233 0 -365 147t-132 410q0 270 137 420.5t375 150.5q141 0 270 -49l-27 -88q-141 47 -245 47q-200 0 -303 -123.5t-103 -355.5q0 -220 103 -344.5t288 -124.5q148 0 275 53v-92q-104 -51 -273 -51zM723 -291q0 -100 -67.5 -150.5t-188.5 -50.5 q-68 0 -94 11v88q30 -10 92 -10q78 0 119 28t41 80q0 94 -193 121l93 174h96l-66 -117q168 -37 168 -174z" />
<glyph unicode="&#xe8;" horiz-adv-x="1124" d="M119 0zM621 -20q-237 0 -369.5 146t-132.5 409q0 260 128 416.5t345 156.5q192 0 303 -134t111 -364v-80h-783q2 -224 104.5 -342t293.5 -118q93 0 163.5 13t178.5 56v-90q-92 -40 -170 -54.5t-172 -14.5zM592 1020q-157 0 -252 -103.5t-111 -298.5h672q0 189 -82 295.5 t-227 106.5zM685 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xe9;" horiz-adv-x="1124" d="M119 0zM621 -20q-237 0 -369.5 146t-132.5 409q0 260 128 416.5t345 156.5q192 0 303 -134t111 -364v-80h-783q2 -224 104.5 -342t293.5 -118q93 0 163.5 13t178.5 56v-90q-92 -40 -170 -54.5t-172 -14.5zM592 1020q-157 0 -252 -103.5t-111 -298.5h672q0 189 -82 295.5 t-227 106.5zM452 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xea;" horiz-adv-x="1124" d="M119 0zM621 -20q-237 0 -369.5 146t-132.5 409q0 260 128 416.5t345 156.5q192 0 303 -134t111 -364v-80h-783q2 -224 104.5 -342t293.5 -118q93 0 163.5 13t178.5 56v-90q-92 -40 -170 -54.5t-172 -14.5zM592 1020q-157 0 -252 -103.5t-111 -298.5h672q0 189 -82 295.5 t-227 106.5zM290 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xeb;" horiz-adv-x="1124" d="M119 0zM621 -20q-237 0 -369.5 146t-132.5 409q0 260 128 416.5t345 156.5q192 0 303 -134t111 -364v-80h-783q2 -224 104.5 -342t293.5 -118q93 0 163.5 13t178.5 56v-90q-92 -40 -170 -54.5t-172 -14.5zM592 1020q-157 0 -252 -103.5t-111 -298.5h672q0 189 -82 295.5 t-227 106.5zM331 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM712 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xec;" horiz-adv-x="463" d="M0 0zM281 0h-99v1087h99v-1087zM349 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xed;" horiz-adv-x="463" d="M107 0zM281 0h-99v1087h99v-1087zM107 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xee;" horiz-adv-x="463" d="M0 0zM281 0h-99v1087h99v-1087zM-58 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xef;" horiz-adv-x="463" d="M0 0zM281 0h-99v1087h99v-1087zM-21 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM360 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xf0;" horiz-adv-x="1174" d="M1055 559q0 -276 -124 -427.5t-349 -151.5q-214 0 -339.5 130t-125.5 361q0 228 126.5 357.5t342.5 129.5q108 0 187.5 -33t148.5 -96l4 2q-64 270 -269 459l-270 -157l-49 77l244 146q-86 62 -199 119l45 81q147 -69 248 -145l225 137l49 -84l-202 -121 q154 -151 230.5 -353t76.5 -431zM950 557q0 146 -97 228.5t-267 82.5q-185 0 -275 -100.5t-90 -304.5q0 -186 94.5 -289.5t268.5 -103.5q179 0 272.5 123t93.5 364z" />
<glyph unicode="&#xf1;" horiz-adv-x="1208" d="M182 0zM940 0v705q0 164 -69 238.5t-214 74.5q-195 0 -285.5 -98.5t-90.5 -319.5v-600h-99v1087h84l19 -149h6q106 170 377 170q370 0 370 -397v-711h-98zM779 1243q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5 t137 63.5q48 0 88 -25t82 -59q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xf2;" horiz-adv-x="1200" d="M119 0zM1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5 t-97.5 -349.5zM718 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xf3;" horiz-adv-x="1200" d="M119 0zM1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5 t-97.5 -349.5zM499 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xf4;" horiz-adv-x="1200" d="M119 0zM1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5 t-97.5 -349.5zM309 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#xf5;" horiz-adv-x="1200" d="M119 0zM1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5 t-97.5 -349.5zM761 1243q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#xf6;" horiz-adv-x="1200" d="M119 0zM1081 545q0 -266 -129 -415.5t-356 -149.5q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q224 0 351.5 -150.5t127.5 -412.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5t278.5 125.5t98.5 349.5q0 225 -99.5 349t-279.5 124t-277.5 -123.5 t-97.5 -349.5zM346 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM727 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xf7;" d="M111 682v82h948v-82h-948zM504 1075q0 99 80 99q82 0 82 -99q0 -52 -23.5 -75t-58.5 -23q-34 0 -57 23t-23 75zM504 371q0 98 80 98q82 0 82 -98q0 -53 -23.5 -76t-58.5 -23q-34 0 -57 23t-23 76z" />
<glyph unicode="&#xf8;" horiz-adv-x="1200" d="M1081 545q0 -266 -129 -415.5t-356 -149.5q-173 0 -291 98l-86 -113l-72 58l93 120q-121 153 -121 402q0 266 129 414.5t354 148.5q179 0 301 -104l96 124l74 -55l-104 -137q112 -147 112 -391zM223 545q0 -200 78 -322l543 705q-98 90 -246 90q-180 0 -277.5 -123.5 t-97.5 -349.5zM977 545q0 190 -72 309l-543 -702q94 -82 238 -82q180 0 278.5 125.5t98.5 349.5z" />
<glyph unicode="&#xf9;" horiz-adv-x="1208" d="M170 0zM268 1087v-704q0 -164 69 -238.5t214 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-106 -170 -377 -170q-371 0 -371 397v710h98zM687 1241h-69q-96 79 -188.5 171.5t-125.5 139.5v17h142q26 -48 98.5 -142t142.5 -170v-16z" />
<glyph unicode="&#xfa;" horiz-adv-x="1208" d="M170 0zM268 1087v-704q0 -164 69 -238.5t214 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-106 -170 -377 -170q-371 0 -371 397v710h98zM495 1257q73 79 144.5 171.5t97.5 140.5h141v-17q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xfb;" horiz-adv-x="1208" d="M170 0zM268 1087v-704q0 -164 69 -238.5t214 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-106 -170 -377 -170q-371 0 -371 397v710h98zM313 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70 v16z" />
<glyph unicode="&#xfc;" horiz-adv-x="1208" d="M170 0zM268 1087v-704q0 -164 69 -238.5t214 -74.5q194 0 285.5 98t91.5 319v600h98v-1087h-84l-18 150h-6q-106 -170 -377 -170q-371 0 -371 397v710h98zM350 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM731 1389q0 46 15.5 66t47.5 20q64 0 64 -86 t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#xfd;" horiz-adv-x="940" d="M0 0zM0 1087h102l230 -610q105 -281 133 -379h6q42 129 137 385l230 604h102l-487 -1263q-59 -154 -99 -208t-93.5 -81t-129.5 -27q-57 0 -127 21v86q58 -16 125 -16q51 0 90 24t70.5 74.5t73 160t53.5 142.5zM361 1257q73 79 144.5 171.5t97.5 140.5h141v-17 q-36 -52 -122.5 -138t-190.5 -173h-70v16z" />
<glyph unicode="&#xfe;" horiz-adv-x="1219" d="M281 918q114 190 368 190q220 0 335.5 -144.5t115.5 -420.5q0 -268 -121.5 -415.5t-331.5 -147.5q-251 0 -366 188h-7l3 -84q4 -74 4 -162v-414h-99v2048h99v-391l-7 -247h7zM645 68q167 0 258.5 124t91.5 347q0 479 -348 479q-193 0 -279.5 -105t-86.5 -354v-18 q0 -255 85.5 -364t278.5 -109z" />
<glyph unicode="&#xff;" horiz-adv-x="940" d="M0 0zM0 1087h102l230 -610q105 -281 133 -379h6q42 129 137 385l230 604h102l-487 -1263q-59 -154 -99 -208t-93.5 -81t-129.5 -27q-57 0 -127 21v86q58 -16 125 -16q51 0 90 24t70.5 74.5t73 160t53.5 142.5zM214 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86 q-63 0 -63 86zM595 1389q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#x131;" horiz-adv-x="463" d="M281 0h-99v1087h99v-1087z" />
<glyph unicode="&#x152;" horiz-adv-x="1839" d="M1714 0h-756q-76 -16 -176 -16q-305 0 -479 200t-174 551q0 347 174.5 545.5t480.5 198.5q78 0 183 -17h747v-94h-655v-553h616v-94h-616v-627h655v-94zM782 80q109 0 174 18v1266q-62 16 -172 16q-262 0 -403 -167.5t-141 -479.5q0 -315 140.5 -484t401.5 -169z" />
<glyph unicode="&#x153;" horiz-adv-x="1942" d="M1438 -20q-156 0 -266.5 67.5t-165.5 198.5q-59 -128 -158 -197t-252 -69q-143 0 -252 69t-167 198t-58 298q0 266 129 414.5t354 148.5q151 0 251 -70t157 -209q110 279 399 279q192 0 303 -134t111 -364v-80h-762q2 -230 100.5 -345t276.5 -115q93 0 163.5 13t178.5 56 v-90q-92 -40 -170 -54.5t-172 -14.5zM223 545q0 -224 98.5 -349.5t278.5 -125.5q174 0 265 122.5t91 352.5q0 224 -93 348.5t-265 124.5q-180 0 -277.5 -123.5t-97.5 -349.5zM1409 1020q-155 0 -242 -104t-102 -298h653q0 189 -82 295.5t-227 106.5z" />
<glyph unicode="&#x178;" horiz-adv-x="1081" d="M0 0zM543 662l428 800h110l-487 -897v-565h-105v557l-489 905h117zM288 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86zM669 1727q0 46 15.5 66t47.5 20q64 0 64 -86t-64 -86q-63 0 -63 86z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1182" d="M299 1257q62 67 131.5 156t110.5 156h98q68 -120 242 -312v-16h-70q-122 101 -221 207q-108 -114 -221 -207h-70v16z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M805 1456q0 -97 -60 -155t-157 -58t-157 58t-60 155q0 94 60 152.5t157 58.5t157 -59t60 -152zM451 1456q0 -66 37.5 -103.5t99.5 -37.5t99.5 37.5t37.5 103.5q0 64 -39 101.5t-98 37.5q-62 0 -99.5 -38t-37.5 -101z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1182" d="M780 1243q-36 0 -75 18.5t-101 71.5q-32 26 -62.5 46t-62.5 20q-45 0 -75 -34.5t-48 -121.5h-73q10 111 63 174.5t137 63.5q48 0 88 -25t82 -59q34 -28 66 -50t61 -22q46 0 77 36.5t48 119.5h76q-16 -116 -69 -177t-132 -61z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="659" d="M92 512v82h475v-82h-475z" />
<glyph unicode="&#x2011;" horiz-adv-x="659" d="M92 512v82h475v-82h-475z" />
<glyph unicode="&#x2012;" horiz-adv-x="659" d="M92 512v82h475v-82h-475z" />
<glyph unicode="&#x2013;" horiz-adv-x="1024" d="M82 512v82h860v-82h-860z" />
<glyph unicode="&#x2014;" horiz-adv-x="2048" d="M82 512v82h1884v-82h-1884z" />
<glyph unicode="&#x2018;" horiz-adv-x="297" d="M41 961l-12 20q32 112 81.5 251t92.5 230h65q-30 -101 -64.5 -257t-45.5 -244h-117z" />
<glyph unicode="&#x2019;" horiz-adv-x="297" d="M256 1462l12 -20q-75 -265 -174 -481h-65q29 96 61 241.5t49 259.5h117z" />
<glyph unicode="&#x201a;" horiz-adv-x="451" d="M68 0zM295 238l12 -20q-75 -265 -174 -481h-65q29 96 61 241.5t49 259.5h117z" />
<glyph unicode="&#x201c;" horiz-adv-x="614" d="M358 961l-12 20q34 120 83 255t91 226h66q-30 -98 -63 -248.5t-48 -252.5h-117zM41 961l-12 20q32 112 81.5 251t92.5 230h65q-30 -101 -64.5 -257t-45.5 -244h-117z" />
<glyph unicode="&#x201d;" horiz-adv-x="614" d="M256 1462l12 -20q-75 -265 -174 -481h-65q29 96 61 241.5t49 259.5h117zM573 1462l13 -20q-36 -128 -85 -261t-89 -220h-66q30 98 63 248.5t48 252.5h116z" />
<glyph unicode="&#x201e;" horiz-adv-x="768" d="M68 0zM295 238l12 -20q-75 -265 -174 -481h-65q29 96 61 241.5t49 259.5h117zM612 238l13 -20q-36 -128 -85 -261t-89 -220h-66q30 98 63 248.5t48 252.5h116z" />
<glyph unicode="&#x2022;" horiz-adv-x="770" d="M231 748q0 89 40.5 134.5t113.5 45.5t113.5 -47t40.5 -133q0 -85 -41 -133t-113 -48t-113 47t-41 134z" />
<glyph unicode="&#x2026;" horiz-adv-x="1466" d="M162 0zM162 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98zM651 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98zM1141 78q0 98 80 98q82 0 82 -98t-82 -98q-80 0 -80 98z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="524" d="M82 543l309 393l62 -43l-254 -363l254 -362l-62 -43l-309 391v27z" />
<glyph unicode="&#x203a;" horiz-adv-x="524" d="M442 518l-309 -393l-61 43l254 362l-254 363l61 43l309 -391v-27z" />
<glyph unicode="&#x2044;" horiz-adv-x="246" d="M573 1462l-811 -1462h-94l811 1462h94z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="688" d="M657 827h-129v-241h-90v241h-413v60l407 581h96v-563h129v-78zM438 905v221q0 132 8 232q-6 -12 -21.5 -35.5t-295.5 -417.5h309z" />
<glyph unicode="&#x20ac;" d="M803 1397q-174 0 -288 -125.5t-155 -364.5h502v-82h-510l-4 -104v-24q0 -65 4 -87h449v-82h-443q30 -217 147.5 -338.5t301.5 -121.5q148 0 287 65v-94q-81 -34 -150.5 -46.5t-140.5 -12.5q-228 0 -367.5 140t-181.5 408h-180v82h172q-4 38 -4 113l4 102h-172v82h184 q39 272 183 425t362 153q88 0 161 -17t148 -57l-39 -86q-132 72 -270 72z" />
<glyph unicode="&#x2122;" horiz-adv-x="1485" d="M313 741h-86v643h-217v78h522v-78h-219v-643zM913 741l-221 609h-6l4 -201v-408h-82v721h125l221 -606l224 606h125v-721h-86v398l4 207h-7l-227 -605h-74z" />
<glyph unicode="&#x2212;" d="M111 682v82h948v-82h-948z" />
<glyph unicode="&#xe000;" horiz-adv-x="1085" d="M0 1085h1085v-1085h-1085v1085z" />
<glyph horiz-adv-x="1219" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
</font>
</defs></svg>

================
File: docs/map-editor/fonts/OpenSans-LightItalic-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sanslight_italic" horiz-adv-x="1128" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb00;" horiz-adv-x="1155" d="M-131 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h477l35 160q35 168 116.5 244t227.5 76q73 0 166 -31 l-24 -80q-87 27 -148 27q-97 0 -154.5 -54.5t-82.5 -177.5l-35 -164h248l-17 -81h-248l-252 -1190q-34 -165 -105.5 -236.5t-193.5 -71.5q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l244 1166h-477l-252 -1190q-33 -161 -104 -234.5t-195 -73.5z" />
<glyph unicode="&#xfb01;" horiz-adv-x="1040" d="M0 0zM739 0h-98l231 1087h96zM915 1366q0 55 22 88t60 33q57 0 57 -72q0 -57 -22 -90t-57 -33q-29 0 -44.5 19.5t-15.5 54.5zM-148 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31 l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h248l-16 -81h-248l-252 -1190q-33 -161 -104 -234.5t-195 -73.5z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1042" d="M0 0zM737 0h-94l334 1556h94zM-148 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h248l-16 -81h-248 l-252 -1190q-33 -161 -104 -234.5t-195 -73.5z" />
<glyph unicode="&#xfb03;" horiz-adv-x="1616" d="M0 0zM-148 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h477l35 160q35 168 116.5 244t227.5 76 q73 0 166 -31l-24 -80q-87 27 -148 27q-97 0 -154.5 -54.5t-82.5 -177.5l-35 -164h248l-17 -81h-248l-252 -1190q-34 -165 -105.5 -236.5t-193.5 -71.5q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l244 1166h-477l-252 -1190q-33 -161 -104 -234.5t-195 -73.5z M1315 0h-98l231 1087h96zM1491 1366q0 55 22 88t60 33q57 0 57 -72q0 -57 -22 -90t-57 -33q-29 0 -44.5 19.5t-15.5 54.5z" />
<glyph unicode="&#xfb04;" horiz-adv-x="1626" d="M0 0zM-148 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h477l35 160q35 168 116.5 244t227.5 76 q73 0 166 -31l-24 -80q-87 27 -148 27q-97 0 -154.5 -54.5t-82.5 -177.5l-35 -164h248l-17 -81h-248l-252 -1190q-34 -165 -105.5 -236.5t-193.5 -71.5q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l244 1166h-477l-252 -1190q-33 -161 -104 -234.5t-195 -73.5z M1321 0h-94l334 1556h94z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="502" d="M248 377h-62l203 1085h119zM80 57q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-68 -34.5q-67 0 -67 73z" />
<glyph unicode="&#x22;" horiz-adv-x="721" d="M455 1462l-146 -528h-61l80 528h127zM784 1462l-145 -528h-61l79 528h127z" />
<glyph unicode="#" horiz-adv-x="1323" d="M389 530l119 398h-297l8 80h311l134 454h90l-136 -454h365l135 454h86l-135 -454h285l-8 -80h-302l-118 -398h303l-8 -79h-320l-133 -451h-90l135 451h-360l-134 -451h-88l134 451h-283l8 79h299zM475 530h363l120 398h-362z" />
<glyph unicode="$" d="M928 467q0 -151 -110.5 -243t-297.5 -103l-53 -240h-82l51 240q-79 2 -158 18t-137 43v94q65 -34 153.5 -53.5t160.5 -19.5l110 512q-110 53 -153 91t-66.5 87.5t-23.5 116.5q0 155 105.5 250.5t272.5 99.5l41 192h80l-41 -192q149 -5 277 -68l-35 -78q-110 61 -256 70 l-109 -514q124 -60 172.5 -99.5t73.5 -88.5t25 -115zM537 203q142 7 223.5 74.5t81.5 183.5q0 76 -48 129.5t-157 97.5zM686 1284q-134 -9 -205 -80t-71 -186q0 -78 37 -128.5t137 -96.5z" />
<glyph unicode="%" horiz-adv-x="1556" d="M1458 1462l-1139 -1462h-106l1135 1462h110zM1520 612q0 -175 -50 -327t-136 -230t-197 -78q-112 0 -172 75.5t-60 223.5q0 160 52 312t138 229.5t193 77.5q121 0 176.5 -71.5t55.5 -211.5zM1284 821q-80 0 -146.5 -72.5t-106.5 -202.5t-40 -263q0 -116 41 -174t113 -58 q130 0 209.5 166.5t79.5 386.5q0 109 -36 163t-114 54zM760 1198q0 -175 -50 -327t-136 -230t-197 -78q-112 0 -172 75.5t-60 223.5q0 160 52 312t138 229.5t193 77.5q232 0 232 -283zM524 1407q-79 0 -145 -71.5t-107 -203t-41 -264.5q0 -115 41 -173t113 -58 q84 0 148.5 72t102.5 204t38 277q0 109 -36 163t-114 54z" />
<glyph unicode="&#x26;" horiz-adv-x="1331" d="M748 1395q-125 0 -194 -68t-69 -192q0 -132 109 -281q203 89 279.5 163.5t76.5 182.5q0 91 -56.5 143t-145.5 52zM465 63q108 0 211.5 42.5t222.5 146.5l-352 493q-164 -79 -232 -134.5t-103.5 -124t-35.5 -158.5q0 -119 78 -192t211 -73zM78 324q0 162 99 277.5 t325 215.5l-41 67q-78 128 -78 251q0 157 101 253.5t264 96.5q145 0 227 -76.5t82 -206.5q0 -85 -41 -154t-121 -128t-256 -138l330 -463q73 75 135.5 176.5t91.5 186.5h111q-102 -247 -285 -436l184 -246h-123l-131 184q-121 -108 -242 -156t-266 -48q-167 0 -266.5 94 t-99.5 250z" />
<glyph unicode="'" horiz-adv-x="403" d="M461 1462l-146 -528h-61l80 528h127z" />
<glyph unicode="(" horiz-adv-x="526" d="M104 270q0 343 122 633t382 559h105q-259 -276 -384.5 -568t-125.5 -618q0 -317 127 -600h-80q-146 262 -146 594z" />
<glyph unicode=")" horiz-adv-x="526" d="M453 868q0 -345 -123.5 -636t-380.5 -556h-105q257 274 383.5 566.5t126.5 619.5q0 148 -28.5 294t-98.5 306h80q146 -262 146 -594z" />
<glyph unicode="*" horiz-adv-x="1137" d="M834 1540l-109 -405l438 8l-8 -107l-416 29l181 -401l-115 -37l-135 417l-285 -348l-78 78l318 318l-392 125l39 102l394 -168l47 408z" />
<glyph unicode="+" d="M563 672h-401v100h401v404h101v-404h401v-100h-401v-400h-101v400z" />
<glyph unicode="," horiz-adv-x="451" d="M250 238l8 -23q-34 -92 -114 -233.5t-160 -245.5h-74q79 132 141 271t88 231h111z" />
<glyph unicode="-" horiz-adv-x="629" d="M82 502l18 90h457l-16 -90h-459z" />
<glyph unicode="." horiz-adv-x="485" d="M82 55q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-67 -34.5q-68 0 -68 73z" />
<glyph unicode="/" horiz-adv-x="641" d="M827 1462l-817 -1462h-110l815 1462h112z" />
<glyph unicode="0" d="M1075 1016q0 -201 -41 -405t-116.5 -346t-183.5 -213.5t-242 -71.5q-176 0 -264.5 126.5t-88.5 387.5q0 186 44.5 381.5t124 334t187 207t240.5 68.5q340 0 340 -469zM723 1397q-134 0 -241.5 -113t-173.5 -329t-66 -451q0 -222 62.5 -329t197.5 -107q139 0 244 112 t166 337t61 489q0 199 -59.5 295t-190.5 96z" />
<glyph unicode="1" d="M537 0h-105l225 1055q19 92 74 293q-42 -36 -75.5 -61t-249.5 -161l-52 78l406 258h90z" />
<glyph unicode="2" d="M909 0h-870l22 104l449 402q198 177 284 276.5t126.5 186.5t40.5 180q0 112 -66 178t-197 66q-176 0 -333 -129l-54 73q180 146 394 146q173 0 268.5 -85t95.5 -237q0 -110 -43.5 -208.5t-141.5 -211.5t-311 -303l-383 -338v-4h736z" />
<glyph unicode="3" d="M1049 1174q0 -162 -106 -275t-286 -143v-4q117 -24 185.5 -115.5t68.5 -226.5q0 -134 -64 -233t-179.5 -148t-274.5 -49q-96 0 -184.5 20.5t-153.5 52.5v101q172 -86 344 -86q197 0 303.5 89.5t106.5 252.5q0 145 -89 223t-247 78h-117l21 96h110q209 0 333 95.5 t124 258.5q0 114 -63.5 175t-188.5 61q-167 0 -344 -131l-49 75q84 67 188 104.5t218 37.5q161 0 252.5 -82.5t91.5 -226.5z" />
<glyph unicode="4" d="M1071 371h-264l-80 -371h-96l80 371h-688l20 96l881 1010h118l-215 -1018h265zM729 459q79 369 119 558.5t86 354.5h-4q-66 -91 -129 -166l-651 -747h579z" />
<glyph unicode="5" d="M582 879q188 0 292.5 -102t104.5 -279q0 -237 -148 -377.5t-407 -140.5q-84 0 -177.5 20t-158.5 51v107q170 -90 340 -90q208 0 328.5 114.5t120.5 313.5q0 140 -85 219.5t-225 79.5q-133 0 -243 -41l-66 49l193 659h624l-18 -96h-541l-149 -516q98 29 215 29z" />
<glyph unicode="6" d="M170 428q0 283 105 544.5t269.5 385t383.5 123.5q123 0 182 -21l-18 -90q-86 23 -170 23q-233 0 -393.5 -174t-233.5 -502h8q68 94 164 143t211 49q161 0 250.5 -100.5t89.5 -282.5q0 -156 -60 -281t-171 -195t-257 -70q-171 0 -265.5 119t-94.5 329zM543 68 q112 0 196.5 58.5t130 162t45.5 229.5q0 146 -67 224.5t-195 78.5q-81 0 -154 -31.5t-129 -87t-78 -115t-22 -173.5q0 -164 72.5 -255t200.5 -91z" />
<glyph unicode="7" d="M244 0l796 1366h-766l23 96h858l-20 -110l-779 -1352h-112z" />
<glyph unicode="8" d="M737 1485q163 0 258 -85t95 -229q0 -138 -84 -234.5t-285 -172.5q130 -78 190 -170.5t60 -208.5t-58 -208t-165.5 -144.5t-260.5 -52.5q-178 0 -283.5 92.5t-105.5 253.5q0 159 100.5 268.5t321.5 187.5q-100 72 -144 152t-44 180q0 159 114 265t291 106zM610 733 q-218 -73 -313.5 -167.5t-95.5 -225.5q0 -136 77.5 -206.5t219.5 -70.5q168 0 270 91t102 233q0 104 -62 189t-198 157zM727 1399q-130 0 -214.5 -82t-84.5 -203q0 -91 41.5 -159t157.5 -142q192 62 279 144t87 206q0 109 -70.5 172.5t-195.5 63.5z" />
<glyph unicode="9" d="M1059 1032q0 -288 -101.5 -548t-263.5 -382t-393 -122q-114 0 -186 22v90q87 -29 192 -29q474 0 627 674h-8q-140 -192 -367 -192q-162 0 -255 105t-93 284q0 155 59.5 281t170.5 196t257 70q174 0 267.5 -115.5t93.5 -333.5zM686 1393q-112 0 -197.5 -58.5 t-130.5 -162.5t-45 -230q0 -145 67.5 -225t192.5 -80q83 0 157.5 32.5t129 87.5t76.5 114t22 176q0 166 -71 256t-201 90z" />
<glyph unicode=":" horiz-adv-x="485" d="M260 989q0 57 25.5 89t68.5 32q66 0 66 -72q0 -55 -25 -89t-67 -34q-68 0 -68 74zM102 55q0 56 25.5 88.5t69.5 32.5q65 0 65 -72q0 -55 -25.5 -88.5t-66.5 -33.5q-68 0 -68 73z" />
<glyph unicode=";" horiz-adv-x="485" d="M287 238l8 -23q-35 -96 -118.5 -242t-156.5 -237h-73q79 132 141 271t88 231h111zM266 989q0 57 25.5 89t68.5 32q66 0 66 -72q0 -55 -25 -89t-67 -34q-68 0 -68 74z" />
<glyph unicode="&#x3c;" d="M1051 262l-914 414v74l914 471v-103l-801 -399l801 -350v-107z" />
<glyph unicode="=" d="M168 885v100h903v-100h-903zM168 461v98h903v-98h-903z" />
<glyph unicode="&#x3e;" d="M170 369l801 350l-801 399v103l915 -471v-74l-915 -414v107z" />
<glyph unicode="?" horiz-adv-x="799" d="M242 362l6 29q29 132 82 206.5t157 147.5q118 84 175 145.5t86.5 127.5t29.5 141q0 108 -67.5 170t-182.5 62q-139 0 -307 -101l-39 86q85 49 171.5 78t187.5 29q159 0 250.5 -84.5t91.5 -229.5q0 -127 -66 -234t-231 -226q-85 -61 -132.5 -108.5t-73 -95t-46.5 -143.5 h-92zM170 59q0 56 25 88.5t69 32.5q66 0 66 -71q0 -54 -24.5 -88.5t-67.5 -34.5q-68 0 -68 73z" />
<glyph unicode="@" horiz-adv-x="1724" d="M1688 858q0 -179 -56 -323.5t-154.5 -227t-211.5 -82.5q-98 0 -154.5 55t-56.5 144h-4q-54 -97 -132.5 -148t-168.5 -51q-112 0 -178 73t-66 202q0 156 63 283t178 198.5t261 71.5q122 0 252 -52l-84 -315q-39 -140 -39 -221q0 -71 34.5 -111.5t100.5 -40.5 q86 0 160 73.5t117.5 198t43.5 251.5q0 156 -65 277t-187 188t-292 67q-235 0 -424.5 -108.5t-295.5 -304t-106 -439.5q0 -288 155 -449t435 -161q207 0 420 82v-90q-210 -82 -428 -82q-203 0 -357.5 82.5t-238.5 239t-84 370.5q0 276 121.5 493.5t337 337t473.5 119.5 q189 0 330.5 -72.5t221 -213t79.5 -314.5zM1008 969q-113 0 -204.5 -59t-142.5 -165.5t-51 -238.5q0 -92 40.5 -142.5t113.5 -50.5q101 0 180.5 89t124.5 255l78 289q-66 23 -139 23z" />
<glyph unicode="A" horiz-adv-x="1059" d="M805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449z" />
<glyph unicode="B" horiz-adv-x="1202" d="M412 1462h379q190 0 290.5 -84t100.5 -241q0 -153 -90 -249t-254 -124v-4q125 -31 188.5 -113.5t63.5 -204.5q0 -205 -140.5 -323.5t-390.5 -118.5h-457zM377 811h278q206 0 313 81t107 238q0 119 -78 180.5t-229 61.5h-272zM358 721l-135 -631h342q201 0 309.5 87.5 t108.5 256.5q0 145 -90 216t-275 71h-260z" />
<glyph unicode="C" horiz-adv-x="1169" d="M961 1389q-197 0 -351.5 -104.5t-245 -304.5t-90.5 -441q0 -225 110.5 -346t317.5 -121q140 0 304 51v-94q-156 -49 -316 -49q-252 0 -386 145t-134 410q0 266 104.5 488t284.5 341t402 119q177 0 307 -68l-45 -90q-55 30 -124.5 47t-137.5 17z" />
<glyph unicode="D" horiz-adv-x="1350" d="M1288 879q0 -253 -109.5 -461.5t-300.5 -313t-446 -104.5h-330l310 1462h305q282 0 426.5 -147.5t144.5 -435.5zM430 90q226 0 394.5 94.5t261 275.5t92.5 412q0 498 -476 498h-206l-275 -1280h209z" />
<glyph unicode="E" horiz-adv-x="1067" d="M829 0h-727l310 1462h727l-21 -94h-624l-117 -553h590l-21 -94h-588l-135 -627h627z" />
<glyph unicode="F" horiz-adv-x="981" d="M205 0h-103l310 1462h708l-20 -94h-604l-134 -620h570l-21 -95h-569z" />
<glyph unicode="G" horiz-adv-x="1374" d="M856 735h406l-150 -682q-211 -73 -405 -73q-257 0 -397 146t-140 421q0 265 105 483.5t283.5 335.5t395.5 117q113 0 203 -19t184 -59l-38 -94q-110 46 -189.5 62t-167.5 16q-184 0 -339 -107.5t-244 -301.5t-89 -433q0 -229 114.5 -352t326.5 -123q155 0 309 47l117 526 h-303z" />
<glyph unicode="H" horiz-adv-x="1366" d="M1063 0h-100l151 719h-760l-149 -719h-103l310 1462h102l-139 -649h760l137 649h100z" />
<glyph unicode="I" horiz-adv-x="504" d="M102 0l310 1462h98l-309 -1462h-99z" />
<glyph unicode="J" horiz-adv-x="477" d="M-180 -360q-48 0 -88 8t-56 16l11 92q57 -20 137 -20q213 0 262 241l309 1485h105l-314 -1491q-35 -170 -125 -250.5t-241 -80.5z" />
<glyph unicode="K" horiz-adv-x="1122" d="M979 0h-111l-342 788l-190 -153l-131 -635h-103l310 1462h102l-158 -723l133 121l680 602h138l-699 -610z" />
<glyph unicode="L" horiz-adv-x="938" d="M102 0l310 1462h102l-289 -1366h621l-23 -96h-721z" />
<glyph unicode="M" horiz-adv-x="1669" d="M772 205l733 1257h150l-301 -1462h-101l191 901q79 369 100 447h-6l-780 -1348h-51l-222 1348h-6q-20 -154 -78 -426l-196 -922h-96l309 1462h143l205 -1257h6z" />
<glyph unicode="N" horiz-adv-x="1372" d="M1069 0h-86l-516 1284h-8q-23 -149 -48 -273t-214 -1011h-95l310 1462h80l522 -1294h8q23 176 74 416l188 878h94z" />
<glyph unicode="O" horiz-adv-x="1464" d="M1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300t79 430.5 q0 240 -104.5 364t-310.5 124z" />
<glyph unicode="P" horiz-adv-x="1145" d="M1145 1102q0 -500 -610 -500h-201l-129 -602h-103l310 1462h315q202 0 310 -92.5t108 -267.5zM350 694h191q252 0 373.5 96.5t121.5 305.5q0 274 -329 274h-211z" />
<glyph unicode="Q" horiz-adv-x="1464" d="M1403 911q0 -216 -70 -418t-186.5 -324t-274.5 -167l267 -350h-142l-231 332l-74 -4q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128 q169 0 300 98.5t210 300t79 430.5q0 240 -104.5 364t-310.5 124z" />
<glyph unicode="R" horiz-adv-x="1145" d="M336 633l-131 -633h-103l310 1462h303q430 0 430 -360q0 -182 -103.5 -303t-281.5 -152q201 -591 221 -647h-111l-211 633h-323zM358 725h252q208 0 317 95.5t109 281.5q0 268 -329 268h-211z" />
<glyph unicode="S" horiz-adv-x="1020" d="M895 403q0 -126 -65.5 -224.5t-179.5 -148.5t-269 -50q-88 0 -172.5 17t-171.5 58v109q163 -92 348 -92q188 0 295.5 86.5t107.5 232.5q0 61 -17 104.5t-52.5 78.5t-91 68t-131.5 75q-150 76 -209.5 164t-59.5 206t59 207.5t165 139t237 49.5q99 0 180 -17.5t168 -60.5 l-32 -94q-66 40 -151.5 63t-164.5 23q-163 0 -259.5 -82.5t-96.5 -218.5q0 -103 49 -170t182 -133q154 -79 213.5 -130t89 -113t29.5 -147z" />
<glyph unicode="T" horiz-adv-x="985" d="M438 0h-102l289 1368h-432l20 94h973l-19 -94h-440z" />
<glyph unicode="U" horiz-adv-x="1370" d="M1395 1462l-207 -977q-58 -270 -197 -387.5t-375 -117.5q-440 0 -440 401q0 83 27 201l186 880h103l-193 -899q-20 -89 -20 -184q0 -309 342 -309q195 0 307.5 96.5t158.5 318.5l207 977h101z" />
<glyph unicode="V" horiz-adv-x="1079" d="M457 147q51 111 124 247l572 1068h117l-799 -1462h-88l-182 1462h100l117 -950q26 -217 35 -365h4z" />
<glyph unicode="W" horiz-adv-x="1702" d="M1018 1341q-27 -76 -62 -153.5t-563 -1187.5h-82l-73 1462h100l47 -1031l4 -165l-2 -86h6q85 226 170 398l434 884h105l61 -878q19 -266 19 -410h6q30 86 61.5 163t493.5 1125h108q-169 -365 -330.5 -731t-328.5 -731h-78l-78 1075q-11 142 -11 219l1 47h-8z" />
<glyph unicode="X" horiz-adv-x="971" d="M879 0h-107l-254 678l-526 -678h-127l608 766l-272 696h106l240 -626l483 626h119l-555 -719z" />
<glyph unicode="Y" horiz-adv-x="965" d="M494 645l544 817h117l-631 -932l-108 -530h-105l119 545l-237 917h100z" />
<glyph unicode="Z" d="M913 0h-925l22 92l1069 1276h-764l23 94h887l-19 -88l-1069 -1280h799z" />
<glyph unicode="[" horiz-adv-x="537" d="M369 -324h-426l376 1786h429l-19 -90h-330l-340 -1605h330z" />
<glyph unicode="\" horiz-adv-x="641" d="M295 1462l242 -1462h-82l-246 1462h86z" />
<glyph unicode="]" horiz-adv-x="537" d="M203 1462h426l-377 -1786h-428l18 91h330l340 1605h-330z" />
<glyph unicode="^" horiz-adv-x="1047" d="M70 569l587 906h91l260 -906h-105l-217 809l-500 -809h-116z" />
<glyph unicode="_" horiz-adv-x="801" d="M625 -291h-807l18 86h807z" />
<glyph unicode="`" horiz-adv-x="1135" d="M766 1241h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="a" horiz-adv-x="1133" d="M655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82t-164 -245.5 t-64 -325.5q0 -152 50 -223.5t151 -71.5z" />
<glyph unicode="b" horiz-adv-x="1151" d="M500 -16q-113 0 -186 59t-97 166h-6l-55 -209h-80l327 1556h95q-131 -628 -162 -751h6q93 156 199 229.5t231 73.5q281 0 281 -375q0 -203 -76 -380t-201 -273t-276 -96zM750 1018q-91 0 -180 -61.5t-160.5 -169.5t-106.5 -235t-35 -206q0 -129 64 -202.5t166 -73.5 q124 0 224 83t164 245t64 325q0 152 -49 223.5t-151 71.5z" />
<glyph unicode="c" horiz-adv-x="887" d="M477 -20q-174 0 -274.5 110.5t-100.5 306.5q0 193 73.5 361.5t198.5 257t290 88.5q134 0 241 -43l-28 -90q-107 47 -218 47q-129 0 -232.5 -77t-162.5 -222t-59 -320q0 -158 73.5 -243.5t208.5 -85.5q71 0 131.5 13t131.5 46v-92q-116 -57 -273 -57z" />
<glyph unicode="d" horiz-adv-x="1133" d="M655 1104q230 0 279 -219h4q12 66 143 671h99l-330 -1556h-82l45 274h-6q-173 -294 -424 -294q-281 0 -281 374q0 193 71.5 370t197.5 278.5t284 101.5zM406 70q89 0 178.5 62.5t160 168t106.5 231t36 209.5q0 126 -61.5 201.5t-168.5 75.5q-124 0 -224 -83t-164 -242.5 t-64 -327.5q0 -295 201 -295z" />
<glyph unicode="e" horiz-adv-x="928" d="M469 -20q-173 0 -270 109.5t-97 305.5q0 181 71 347t195.5 264t274.5 98q114 0 182 -61t68 -166q0 -181 -163.5 -276t-485.5 -95h-33q-6 -44 -6 -98q0 -165 74 -251.5t213 -86.5q132 0 276 73v-94q-140 -69 -299 -69zM631 1018q-131 0 -243.5 -115.5t-162.5 -308.5h49 q517 0 517 270q0 67 -43.5 110.5t-116.5 43.5z" />
<glyph unicode="f" horiz-adv-x="578" d="M-131 -492q-48 0 -102 19v90q53 -16 100 -16q88 0 134 53t75 186l246 1166h-205l14 67l205 14l35 160q35 168 116.5 244t227.5 76q73 0 166 -31l-25 -80q-87 27 -147 27q-96 0 -153.5 -53.5t-84.5 -178.5l-35 -164h248l-16 -81h-248l-252 -1190q-33 -161 -104 -234.5 t-195 -73.5z" />
<glyph unicode="g" horiz-adv-x="1040" d="M1100 1087l-17 -79l-243 -11q26 -28 43.5 -84t17.5 -114q0 -109 -54.5 -206.5t-148 -145.5t-213.5 -48q-63 0 -77 9q-80 -33 -124 -73t-44 -81t31.5 -64.5t113.5 -31.5l121 -11q346 -31 346 -264q0 -112 -65 -197.5t-187 -131.5t-291 -46q-186 0 -291.5 72t-105.5 203 q0 236 309 334q-78 42 -78 123q0 123 191 202q-71 36 -110.5 105.5t-39.5 157.5q0 111 53.5 204t148 146t206.5 53q69 0 147 -21h361zM14 -207q0 -101 81 -150t224 -49q203 0 317 74.5t114 204.5q0 85 -62.5 130.5t-218.5 57.5l-160 15q-157 -45 -226 -114.5t-69 -168.5z M285 711q0 -112 58.5 -170t164.5 -58q88 0 154 37t102.5 114t36.5 169q0 104 -56 161.5t-157 57.5q-93 0 -161 -43t-105 -116t-37 -152z" />
<glyph unicode="h" horiz-adv-x="1143" d="M764 0l149 692q21 92 21 156q0 80 -43.5 125t-134.5 45q-112 0 -210.5 -67t-166 -188t-103.5 -286l-102 -477h-98l332 1556h96l-86 -411q-44 -200 -66 -279h6q78 113 186.5 175.5t229.5 62.5q124 0 192 -65t68 -183q0 -70 -24 -182l-148 -674h-98z" />
<glyph unicode="i" horiz-adv-x="475" d="M174 0h-98l231 1087h96zM350 1366q0 55 22 88t60 33q57 0 57 -72q0 -57 -22 -90t-57 -33q-29 0 -44.5 19.5t-15.5 54.5z" />
<glyph unicode="j" horiz-adv-x="475" d="M-166 -492q-62 0 -113 19v92q47 -22 113 -22q82 0 128.5 51.5t72.5 177.5l266 1261h96l-268 -1271q-35 -165 -106.5 -236.5t-188.5 -71.5zM350 1366q0 55 22 88t60 33q57 0 57 -72q0 -57 -22 -90t-57 -33q-29 0 -44.5 19.5t-15.5 54.5z" />
<glyph unicode="k" horiz-adv-x="944" d="M270 477l609 610h125l-474 -469l297 -618h-106l-264 559l-205 -188l-80 -371h-96l330 1556h96l-166 -780l-70 -299h4z" />
<glyph unicode="l" horiz-adv-x="475" d="M170 0h-94l334 1556h94z" />
<glyph unicode="m" horiz-adv-x="1751" d="M711 0l147 674q25 125 25 162q0 182 -154 182q-106 0 -200 -67.5t-159 -188.5t-100 -287l-100 -475h-98l231 1087h80l-33 -210h6q80 113 181.5 170t212.5 57q106 0 163 -67t60 -195h6q77 129 181 195.5t222 66.5q117 0 182.5 -61.5t65.5 -176.5q0 -29 -2.5 -56.5 t-19.5 -119.5l-152 -690h-100l149 680q25 120 25 176q0 77 -43 119.5t-119 42.5q-157 0 -277.5 -137.5t-168.5 -362.5l-109 -518h-102z" />
<glyph unicode="n" horiz-adv-x="1143" d="M764 0l149 692q21 92 21 156q0 80 -43.5 125t-134.5 45q-112 0 -210.5 -67t-166 -187.5t-103.5 -286.5l-102 -477h-98l231 1087h82l-37 -221h6q164 238 416 238q130 0 195 -64t65 -184q0 -70 -24 -182l-148 -674h-98z" />
<glyph unicode="o" horiz-adv-x="1124" d="M649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83z" />
<glyph unicode="p" horiz-adv-x="1149" d="M498 -16q-230 0 -279 219h-4q-13 -72 -149 -695h-99l336 1579h82l-45 -274h6q91 153 195.5 224t228.5 71q135 0 208 -92.5t73 -282.5q0 -195 -72 -371t-197.5 -277t-283.5 -101zM748 1018q-87 0 -174 -58.5t-161.5 -167.5t-110.5 -237.5t-36 -208.5q0 -125 61.5 -200.5 t168.5 -75.5q124 0 225 84t164 243.5t63 325.5q0 295 -200 295z" />
<glyph unicode="q" horiz-adv-x="1157" d="M651 1104q109 0 183.5 -58t99.5 -167h6l55 208h80l-327 -1556h-95l98 470l64 282h-6q-93 -156 -199 -229.5t-231 -73.5q-281 0 -281 374q0 201 75.5 379t200.5 274.5t277 96.5zM401 70q92 0 182 62.5t160.5 171.5t105 236.5t34.5 200.5q0 130 -63.5 203.5t-166.5 73.5 q-124 0 -224 -83t-164 -245t-64 -325q0 -143 45.5 -219t154.5 -76z" />
<glyph unicode="r" horiz-adv-x="752" d="M713 1106q69 0 123 -14l-21 -93q-47 15 -113 15q-94 0 -179 -64t-153 -192t-100 -277l-100 -481h-98l231 1087h80l-29 -204h6q73 94 123 135.5t106.5 64.5t123.5 23z" />
<glyph unicode="s" horiz-adv-x="827" d="M713 295q0 -144 -103 -229.5t-280 -85.5q-173 0 -305 75v107q74 -46 153 -71t148 -25q138 0 211 57.5t73 163.5q0 42 -15.5 74t-50 61.5t-132.5 85.5q-148 80 -200 145.5t-52 159.5q0 128 98.5 209.5t259.5 81.5q75 0 158.5 -17.5t140.5 -46.5l-35 -88q-136 64 -264 64 q-116 0 -186 -53t-70 -138q0 -55 17 -88t60.5 -68.5t119.5 -76.5q114 -63 161.5 -103.5t70 -86.5t22.5 -107z" />
<glyph unicode="t" horiz-adv-x="616" d="M694 1087l-18 -81h-283l-135 -635q-22 -99 -22 -164q0 -139 126 -139q68 0 152 26v-86q-101 -28 -170 -28q-99 0 -153 54.5t-54 158.5q0 73 29 206l129 607h-182l14 67l184 17l97 253h55l-55 -256h286z" />
<glyph unicode="u" horiz-adv-x="1143" d="M381 1087l-152 -698q-22 -106 -22 -158q0 -74 47.5 -117.5t138.5 -43.5q110 0 207.5 65.5t164 187t99.5 279.5l105 485h98l-231 -1087h-80l28 205h-6q-167 -221 -403 -221q-131 0 -198.5 62t-67.5 181q0 60 22 170l150 690h100z" />
<glyph unicode="v" horiz-adv-x="895" d="M276 0l-172 1087h101l108 -735q26 -165 33 -254h6q51 115 129 256l406 733h102l-600 -1087h-113z" />
<glyph unicode="w" horiz-adv-x="1393" d="M838 0l-60 686q-14 224 -14 266h-6q-34 -92 -144 -290l-356 -662h-117l-20 1087h92l13 -821l-3 -157h6q61 134 150 297l373 681h77l64 -681q14 -147 14 -297h6l24 61l101 236l320 681h96l-508 -1087h-108z" />
<glyph unicode="x" horiz-adv-x="922" d="M442 483l-393 -483h-121l471 559l-245 528h100l207 -462l373 462h120l-448 -534l258 -553h-98z" />
<glyph unicode="y" horiz-adv-x="920" d="M123 1087h100l82 -548q51 -351 55 -449h11q43 105 186 367l348 630h103l-713 -1290q-72 -127 -122.5 -178t-114 -81t-146.5 -30q-68 0 -129 21v92q71 -27 137 -27q80 0 147 49.5t130 164.5t100 184z" />
<glyph unicode="z" horiz-adv-x="887" d="M700 0h-729l15 72l776 932h-543l17 83h659l-18 -83l-762 -920h602z" />
<glyph unicode="{" horiz-adv-x="709" d="M424 -324q-256 0 -256 199q0 45 16 115l56 252q18 90 18 127q0 159 -199 159l21 78q126 0 191 49t89 158l89 393q30 135 106 195.5t215 60.5h29l-17 -86q-86 -2 -129 -20.5t-69.5 -61.5t-44.5 -120l-74 -338q-30 -134 -91.5 -194.5t-164.5 -78.5v-4q68 -18 105.5 -68.5 t37.5 -121.5q0 -52 -24 -164l-47 -225q-13 -58 -13 -101q0 -61 37.5 -89t138.5 -28v-86h-20z" />
<glyph unicode="|" d="M584 1561h100v-2071h-100v2071z" />
<glyph unicode="}" horiz-adv-x="709" d="M332 1462q131 0 189.5 -51t58.5 -147q0 -41 -17 -115l-55 -252q-19 -95 -19 -127q0 -77 49.5 -118.5t149.5 -41.5l-20 -78q-125 0 -191 -48.5t-90 -157.5l-88 -394q-32 -139 -108.5 -197.5t-213.5 -58.5h-18v86q96 2 138 21t68.5 61t43.5 121l74 338q27 126 87.5 189.5 t168.5 82.5v5q-75 20 -109.5 72.5t-34.5 117.5q0 55 18 131l54 258q12 61 12 101q0 44 -18 69t-54 36t-116 11l20 86h21z" />
<glyph unicode="~" d="M350 745q-49 0 -108 -30.5t-115 -89.5v94q108 110 233 110q61 0 115 -13.5t156 -57.5q126 -58 219 -58q54 0 107.5 29t117.5 96v-96q-111 -113 -233 -113q-117 0 -271 72q-62 29 -112.5 43t-108.5 14z" />
<glyph unicode="&#xa1;" horiz-adv-x="502" d="M264 711h62l-203 -1086h-119zM432 1030q0 -56 -25 -88.5t-69 -32.5q-66 0 -66 72q0 55 25 89t68 34q67 0 67 -74z" />
<glyph unicode="&#xa2;" d="M578 -20h-93l45 215q-132 25 -206 132.5t-74 272.5q0 184 63.5 341t178 253t256.5 111l36 178h90l-38 -176q116 -4 217 -43l-29 -90q-107 47 -217 47q-130 0 -233 -76t-162.5 -221t-59.5 -322q0 -164 74.5 -247t208.5 -83q127 0 264 60v-92q-118 -58 -281 -58z" />
<glyph unicode="&#xa3;" d="M879 1479q170 0 313 -78l-39 -84l-54 26q-108 50 -231 50q-134 0 -220.5 -74.5t-117.5 -220.5l-73 -340h409l-18 -82h-408l-57 -268q-50 -225 -188 -314h759l-20 -94h-938l16 84q93 11 165.5 95.5t107.5 236.5l57 260h-199l17 82h198l76 350q41 187 155 279t290 92z" />
<glyph unicode="&#xa4;" d="M262 723q0 118 74 225l-129 129l63 64l127 -129q105 78 230 78q118 0 223 -78l131 129l61 -62l-129 -129q78 -106 78 -227q0 -135 -78 -227l129 -127l-61 -62l-131 127q-104 -76 -223 -76q-126 0 -228 80l-129 -129l-61 62l127 127q-74 98 -74 225zM350 723 q0 -116 80 -196.5t197 -80.5t198.5 81t81.5 196q0 75 -36.5 140t-102.5 104t-141 39q-114 0 -195.5 -82t-81.5 -201z" />
<glyph unicode="&#xa5;" d="M584 645l544 817h117l-559 -823h266l-16 -76h-315l-39 -190h317l-18 -84h-316l-59 -289h-105l64 289h-299l18 84h299l41 190h-301l17 76h258l-215 823h100z" />
<glyph unicode="&#xa6;" d="M578 1561h100v-756h-100v756zM578 246h100v-756h-100v756z" />
<glyph unicode="&#xa7;" horiz-adv-x="995" d="M211 778q0 101 69.5 182t198.5 130q-64 31 -103.5 85.5t-39.5 120.5q0 74 46 134.5t132.5 94.5t202.5 34q163 0 289 -58l-31 -80q-138 54 -264 54q-124 0 -202.5 -46.5t-78.5 -123.5q0 -59 46 -104.5t183 -106.5q112 -52 158.5 -89.5t71 -85t24.5 -110.5 q0 -197 -249 -317q122 -64 122 -197q0 -86 -48 -153.5t-139.5 -105.5t-221.5 -38q-157 0 -275 53v99q47 -27 126 -46.5t153 -19.5q149 0 228 52.5t79 150.5q0 62 -42.5 106t-166.5 96q-155 65 -211.5 130t-56.5 159zM559 1038q-119 -30 -187.5 -97.5t-68.5 -154.5 q0 -57 24.5 -96.5t81 -73t187.5 -81.5q103 49 162 113.5t59 156.5q0 72 -57.5 126t-200.5 107z" />
<glyph unicode="&#xa8;" horiz-adv-x="1135" d="M836 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM492 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M944 1092q-142 0 -222.5 -94.5t-80.5 -264.5q0 -186 74.5 -275t220.5 -89q85 0 199 43v-88q-104 -45 -209 -45q-187 0 -288 116t-101 330q0 207 110 332t297 125q119 0 227 -52l-36 -83q-99 45 -191 45zM147 731q0 200 100 375t275 276t377 101q200 0 375 -100t276 -275 t101 -377q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM240 731q0 -178 88.5 -329.5t240.5 -240.5t330 -89q174 0 325 85.5t243 239t92 334.5q0 178 -89 330t-240.5 241t-330.5 89q-182 0 -335 -92t-238.5 -243t-85.5 -325z" />
<glyph unicode="&#xaa;" horiz-adv-x="643" d="M487 1485q55 0 97.5 -29t66.5 -86h6l35 103h66l-137 -650h-72l22 125h-4q-96 -137 -223 -137q-80 0 -127 56.5t-47 164.5q0 189 90.5 321t226.5 132zM369 885q66 0 133.5 75.5t97.5 184.5q16 51 16 123q0 58 -36 100.5t-93 42.5q-94 0 -161.5 -111.5t-67.5 -271.5 q0 -143 111 -143z" />
<glyph unicode="&#xab;" horiz-adv-x="860" d="M426 932l57 -49l-317 -336l213 -385l-64 -39l-254 418l2 26zM786 932l58 -49l-314 -336l209 -385l-63 -39l-254 418l2 26z" />
<glyph unicode="&#xac;" d="M1028 772v-500h-100v400h-803v100h903z" />
<glyph unicode="&#xad;" horiz-adv-x="629" d="M77 502zM77 502l18 90h457l-16 -90h-459z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M758 731h112q93 0 144 46.5t51 135.5q0 172 -197 172h-110v-354zM1169 918q0 -80 -39.5 -141t-109.5 -93l237 -393h-120l-211 360h-168v-360h-101v880h211q143 0 222 -62t79 -191zM150 731q0 207 103.5 382t276.5 272.5t371 97.5q200 0 375 -100t276 -275t101 -377 q0 -197 -97 -370t-272 -277t-383 -104q-204 0 -376.5 100.5t-273.5 273t-101 377.5zM242 731q0 -178 88.5 -329.5t240.5 -240.5t330 -89q174 0 325 85.5t243 239t92 334.5q0 178 -89 330t-240.5 241t-330.5 89q-182 0 -335 -92t-238.5 -243t-85.5 -325z" />
<glyph unicode="&#xaf;" horiz-adv-x="655" d="M1001 1556h-653l53 97h654z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M242 1190q0 120 85 206.5t208 86.5q122 0 207 -86.5t85 -206.5q0 -122 -85.5 -207.5t-206.5 -85.5q-122 0 -207.5 85.5t-85.5 207.5zM315 1190q0 -89 64.5 -153t155.5 -64q92 0 155.5 64t63.5 153q0 90 -64 155.5t-155 65.5q-90 0 -155 -65.5t-65 -155.5z" />
<glyph unicode="&#xb1;" d="M528 629h-401v98h401v406h101v-406h401v-98h-401v-400h-101v400zM127 0v100h903v-100h-903z" />
<glyph unicode="&#xb2;" horiz-adv-x="643" d="M604 586h-522l16 80l297 258q137 118 182.5 190.5t45.5 153.5q0 59 -38.5 97t-105.5 38q-95 0 -194 -76l-41 62q108 90 239 90q73 0 125 -27t78.5 -72t26.5 -100q0 -106 -59 -198.5t-183 -194.5l-266 -223h416z" />
<glyph unicode="&#xb3;" horiz-adv-x="643" d="M705 1276q0 -85 -48.5 -148t-154.5 -88v-4q66 -16 105.5 -68t39.5 -124q0 -77 -39 -141t-109 -99t-161 -35q-59 0 -123.5 15.5t-105.5 40.5v90q46 -28 108 -48t125 -20q99 0 159 52.5t60 142.5q0 162 -196 162h-84l16 79h86q102 0 168.5 49.5t66.5 129.5 q0 68 -37.5 102.5t-105.5 34.5q-100 0 -199 -68l-40 64q109 86 251 86q100 0 159 -56.5t59 -148.5z" />
<glyph unicode="&#xb4;" horiz-adv-x="1135" d="M580 1262q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xb5;" horiz-adv-x="1171" d="M238 242q0 -82 48.5 -127t135.5 -45q110 0 207 64.5t162.5 182.5t101.5 285l104 485h99l-234 -1087h-78l29 205h-6q-164 -221 -404 -221q-85 0 -139 32.5t-76 89.5h-6q-18 -132 -51 -284l-63 -314h-97l338 1579h101l-152 -698q-20 -96 -20 -147z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1208 -260h-100v1722h-227v-1722h-101v819q-64 -18 -145 -18q-216 0 -318 125t-102 376q0 260 109 387t342 127h542v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="485" d="M207 625zM207 698q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-67 -34.5q-68 0 -68 73z" />
<glyph unicode="&#xb8;" horiz-adv-x="420" d="M197 -289q0 -94 -75.5 -148.5t-217.5 -54.5q-46 0 -78 7v79q30 -6 72 -6q198 0 198 115q0 97 -151 107l110 190h80l-78 -137q140 -30 140 -152z" />
<glyph unicode="&#xb9;" horiz-adv-x="643" d="M512 1462h80l-186 -876h-84l118 569q5 21 11.5 50.5t14 60t15.5 59t15 49.5q-34 -31 -60 -51.5t-143 -93.5l-39 59z" />
<glyph unicode="&#xba;" horiz-adv-x="655" d="M518 1479q105 0 165 -64t60 -180q0 -115 -40 -214t-114 -156.5t-175 -57.5q-114 0 -169 67.5t-55 184.5q0 112 41.5 209.5t116 154t170.5 56.5zM508 1405q-70 0 -124 -46.5t-84 -124.5t-30 -167q0 -186 156 -186q73 0 125.5 46.5t81.5 127.5t29 176q0 83 -39 128.5 t-115 45.5z" />
<glyph unicode="&#xbb;" horiz-adv-x="860" d="M451 123l-58 49l314 336l-209 385l63 39l254 -418l-2 -27zM90 123l-57 49l313 336l-209 385l64 39l254 -418l-2 -27z" />
<glyph unicode="&#xbc;" horiz-adv-x="1481" d="M129 0zM1319 230h-131l-49 -229h-82l49 229h-391l21 76l506 577h86l-125 -581h133zM1121 302q61 294 79 365.5t29 105.5q-10 -16 -61 -79t-338 -392h291zM1323 1462l-1087 -1462h-107l1086 1462h108zM509 1462h80l-186 -876h-84l118 569q5 21 11.5 50.5t14 60t15.5 59 t15 49.5q-34 -31 -60 -51.5t-143 -93.5l-39 59z" />
<glyph unicode="&#xbd;" horiz-adv-x="1458" d="M53 0zM1278 1h-522l16 80l297 258q137 118 182.5 190.5t45.5 153.5q0 59 -38.5 97t-105.5 38q-95 0 -194 -76l-41 62q108 90 239 90q73 0 125 -27t78.5 -72t26.5 -100q0 -106 -59 -198.5t-183 -194.5l-266 -223h416zM431 1462h80l-186 -876h-84l118 569q5 21 11.5 50.5 t14 60t15.5 59t15 49.5q-34 -31 -60 -51.5t-143 -93.5l-39 59zM1247 1462l-1087 -1462h-107l1086 1462h108z" />
<glyph unicode="&#xbe;" horiz-adv-x="1458" d="M71 0zM1380 230h-131l-49 -229h-82l49 229h-391l21 76l506 577h86l-125 -581h133zM1182 302q61 294 79 365.5t29 105.5q-10 -16 -61 -79t-338 -392h291zM667 1276q0 -85 -48.5 -148t-154.5 -88v-4q66 -16 105.5 -68t39.5 -124q0 -77 -39 -141t-109 -99t-161 -35 q-59 0 -123.5 15.5t-105.5 40.5v90q46 -28 108 -48t125 -20q99 0 159 52.5t60 142.5q0 162 -196 162h-84l16 79h86q102 0 168.5 49.5t66.5 129.5q0 68 -37.5 102.5t-105.5 34.5q-100 0 -199 -68l-40 64q109 86 251 86q100 0 159 -56.5t59 -148.5zM1407 1462l-1087 -1462 h-107l1086 1462h108z" />
<glyph unicode="&#xbf;" horiz-adv-x="799" d="M641 717l-6 -29q-28 -127 -79 -200t-161 -154q-118 -84 -175 -145.5t-86.5 -127.5t-29.5 -141q0 -106 65.5 -168.5t184.5 -62.5q141 0 308 100l38 -86q-85 -49 -170.5 -77.5t-187.5 -28.5q-159 0 -250.5 84.5t-91.5 228.5q0 133 70 240.5t227 220.5q85 61 133.5 109 t73 95t45.5 142h92zM713 1020q0 -56 -25.5 -88.5t-69.5 -32.5q-65 0 -65 72q0 56 25 89.5t67 33.5q68 0 68 -74z" />
<glyph unicode="&#xc0;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM815 1579h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xc1;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM668 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xc2;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM1007 1579h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5 t92.5 -146.5v-29z" />
<glyph unicode="&#xc3;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM911 1587q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5 q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z" />
<glyph unicode="&#xc4;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM879 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM535 1704q0 49 20.5 78t56.5 29q54 0 54 -64 q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xc5;" horiz-adv-x="1059" d="M0 0zM805 520h-512l-287 -520h-117l822 1468h67l201 -1468h-105zM793 612l-39 291q-31 242 -39 402q-30 -63 -64.5 -130t-306.5 -563h449zM945 1600q0 -92 -57.5 -148.5t-145.5 -56.5q-93 0 -148 52t-55 145q0 88 59.5 144t149.5 56q88 0 142.5 -50t54.5 -142zM867 1598 q0 57 -33.5 90t-87.5 33q-60 0 -93.5 -36t-33.5 -93t33 -90t90 -33q56 0 90.5 36t34.5 93z" />
<glyph unicode="&#xc6;" horiz-adv-x="1640" d="M1403 0h-727l110 522h-444l-328 -522h-131l946 1462h883l-20 -94h-625l-117 -553h590l-20 -94h-588l-135 -627h626zM408 627h401l156 741h-88z" />
<glyph unicode="&#xc7;" horiz-adv-x="1169" d="M170 0zM961 1389q-197 0 -351.5 -104.5t-245 -304.5t-90.5 -441q0 -225 110.5 -346t317.5 -121q140 0 304 51v-94q-156 -49 -316 -49q-252 0 -386 145t-134 410q0 266 104.5 488t284.5 341t402 119q177 0 307 -68l-45 -90q-55 30 -124.5 47t-137.5 17zM752 -289 q0 -94 -75.5 -148.5t-217.5 -54.5q-46 0 -78 7v79q30 -6 72 -6q198 0 198 115q0 97 -151 107l110 190h80l-78 -137q140 -30 140 -152z" />
<glyph unicode="&#xc8;" horiz-adv-x="1067" d="M102 0zM829 0h-727l310 1462h727l-21 -94h-624l-117 -553h590l-21 -94h-588l-135 -627h627zM891 1579h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xc9;" horiz-adv-x="1067" d="M102 0zM829 0h-727l310 1462h727l-21 -94h-624l-117 -553h590l-21 -94h-588l-135 -627h627zM654 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xca;" horiz-adv-x="1067" d="M102 0zM829 0h-727l310 1462h727l-21 -94h-624l-117 -553h590l-21 -94h-588l-135 -627h627zM1036 1579h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xcb;" horiz-adv-x="1067" d="M102 0zM829 0h-727l310 1462h727l-21 -94h-624l-117 -553h590l-21 -94h-588l-135 -627h627zM902 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM558 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xcc;" horiz-adv-x="504" d="M102 0zM102 0l310 1462h98l-309 -1462h-99zM525 1579h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xcd;" horiz-adv-x="504" d="M102 0zM102 0l310 1462h98l-309 -1462h-99zM419 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xce;" horiz-adv-x="504" d="M102 0zM102 0l310 1462h98l-309 -1462h-99zM738 1579h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xcf;" horiz-adv-x="504" d="M102 0zM102 0l310 1462h98l-309 -1462h-99zM604 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM260 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xd0;" horiz-adv-x="1352" d="M1288 879q0 -253 -109.5 -461.5t-300.5 -313t-446 -104.5h-330l144 676h-156l21 96h155l146 690h305q282 0 426.5 -147.5t144.5 -435.5zM430 90q226 0 394.5 94.5t261 275.5t92.5 412q0 498 -476 498h-206l-129 -598h378l-20 -96h-379l-125 -586h209z" />
<glyph unicode="&#xd1;" horiz-adv-x="1372" d="M102 0zM1069 0h-86l-516 1284h-8q-23 -149 -48 -273t-214 -1011h-95l310 1462h80l522 -1294h8q23 176 74 416l188 878h94zM1062 1587q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14 t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z" />
<glyph unicode="&#xd2;" horiz-adv-x="1464" d="M172 0zM1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300 t79 430.5q0 240 -104.5 364t-310.5 124zM989 1579h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xd3;" horiz-adv-x="1464" d="M172 0zM1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300 t79 430.5q0 240 -104.5 364t-310.5 124zM844 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xd4;" horiz-adv-x="1464" d="M172 0zM1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300 t79 430.5q0 240 -104.5 364t-310.5 124zM1171 1579h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xd5;" horiz-adv-x="1464" d="M172 0zM1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300 t79 430.5q0 240 -104.5 364t-310.5 124zM1077 1587q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z " />
<glyph unicode="&#xd6;" horiz-adv-x="1464" d="M172 0zM1403 911q0 -255 -94 -481.5t-252 -338t-365 -111.5q-250 0 -385 149t-135 430q0 262 93 477.5t255 331t373 115.5q247 0 378.5 -148.5t131.5 -423.5zM879 1389q-174 0 -308.5 -101t-214.5 -298t-80 -417q0 -245 109.5 -373t319.5 -128q169 0 300 98.5t210 300 t79 430.5q0 240 -104.5 364t-310.5 124zM1031 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM687 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xd7;" d="M551 723l-330 332l70 69l330 -329l333 329l68 -67l-332 -334l332 -332l-68 -67l-333 329l-330 -327l-68 67z" />
<glyph unicode="&#xd8;" horiz-adv-x="1464" d="M1403 911q0 -187 -52 -365.5t-144.5 -304.5t-223 -193.5t-291.5 -67.5q-215 0 -348 112l-139 -170l-66 64l146 172q-113 149 -113 401q0 263 94 479.5t256.5 330.5t370.5 114q219 0 352 -121l133 168l70 -53l-145 -183q45 -51 72.5 -161t27.5 -222zM879 1389 q-134 0 -244 -59.5t-188.5 -170t-124.5 -267.5t-46 -319q0 -105 21.5 -191t56.5 -138l826 1032q-107 113 -301 113zM1294 901q0 85 -17.5 172t-43.5 129l-821 -1030q107 -100 293 -100q170 0 301 100t209.5 296.5t78.5 432.5z" />
<glyph unicode="&#xd9;" horiz-adv-x="1370" d="M176 0zM1395 1462l-207 -977q-58 -270 -197 -387.5t-375 -117.5q-440 0 -440 401q0 83 27 201l186 880h103l-193 -899q-20 -89 -20 -184q0 -309 342 -309q195 0 307.5 96.5t158.5 318.5l207 977h101zM946 1579h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303 v-25z" />
<glyph unicode="&#xda;" horiz-adv-x="1370" d="M176 0zM1395 1462l-207 -977q-58 -270 -197 -387.5t-375 -117.5q-440 0 -440 401q0 83 27 201l186 880h103l-193 -899q-20 -89 -20 -184q0 -309 342 -309q195 0 307.5 96.5t158.5 318.5l207 977h101zM838 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5 t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xdb;" horiz-adv-x="1370" d="M176 0zM1395 1462l-207 -977q-58 -270 -197 -387.5t-375 -117.5q-440 0 -440 401q0 83 27 201l186 880h103l-193 -899q-20 -89 -20 -184q0 -309 342 -309q195 0 307.5 96.5t158.5 318.5l207 977h101zM1148 1579h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54 v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xdc;" horiz-adv-x="1370" d="M176 0zM1395 1462l-207 -977q-58 -270 -197 -387.5t-375 -117.5q-440 0 -440 401q0 83 27 201l186 880h103l-193 -899q-20 -89 -20 -184q0 -309 342 -309q195 0 307.5 96.5t158.5 318.5l207 977h101zM1022 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29 q-55 0 -55 63zM678 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xdd;" horiz-adv-x="965" d="M193 0zM494 645l544 817h117l-631 -932l-108 -530h-105l119 545l-237 917h100zM563 1600q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xde;" horiz-adv-x="1145" d="M1087 836q0 -247 -153 -373.5t-457 -126.5h-201l-71 -336h-103l310 1462h102l-57 -266h213q200 0 308.5 -92.5t108.5 -267.5zM293 428h190q256 0 376 98.5t120 302.5q0 275 -330 275h-211z" />
<glyph unicode="&#xdf;" horiz-adv-x="1094" d="M-162 -492q-73 0 -119 23v90q53 -24 115 -24q79 0 123 50.5t66 153.5l305 1409q80 357 405 357q137 0 215 -61.5t78 -174.5q0 -75 -44.5 -140.5t-166.5 -148.5q-107 -76 -141.5 -124.5t-34.5 -106.5q0 -51 34 -88.5t93 -75.5q96 -63 138 -133.5t42 -165.5 q0 -170 -106.5 -269t-286.5 -99q-143 0 -234 65v109q45 -36 112.5 -59t129.5 -23q132 0 208.5 71t76.5 195q0 75 -31.5 129t-109.5 108q-82 58 -119 110.5t-37 121.5q0 57 21 103t60.5 88.5t137.5 113.5q101 70 131.5 116t30.5 101q0 70 -55 110t-150 40q-129 0 -205 -76 t-108 -229l-291 -1377q-33 -152 -103.5 -220.5t-179.5 -68.5z" />
<glyph unicode="&#xe0;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM809 1241h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xe1;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM586 1262q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xe2;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM955 1243h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xe3;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM858 1249q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173 t-124.5 -55z" />
<glyph unicode="&#xe4;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM835 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM491 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xe5;" horiz-adv-x="1133" d="M102 0zM655 1104q232 0 279 -219h6l59 202h80l-229 -1087h-82l45 274h-6q-84 -142 -187 -218t-237 -76q-281 0 -281 374q0 197 75 376t200.5 276.5t277.5 97.5zM406 70q89 0 177.5 62t159 166t107.5 230t37 213q0 79 -26 141.5t-77 99t-127 36.5q-124 0 -224 -82 t-164 -245.5t-64 -325.5q0 -152 50 -223.5t151 -71.5zM927 1448q0 -92 -57.5 -148.5t-145.5 -56.5q-93 0 -148 52t-55 145q0 88 59.5 144t149.5 56q88 0 142.5 -50t54.5 -142zM849 1446q0 57 -33.5 90t-87.5 33q-60 0 -93.5 -36t-33.5 -93t33 -90t90 -33q56 0 90.5 36 t34.5 93z" />
<glyph unicode="&#xe6;" horiz-adv-x="1602" d="M1155 -20q-123 0 -211 60t-117 165l-39 -205h-77l41 254h-9q-94 -142 -189 -208t-208 -66q-120 0 -182 94t-62 270q0 206 70.5 384.5t192.5 277t274 98.5q106 0 166 -56.5t74 -156.5h10l59 192h66l-35 -186q139 207 350 207q112 0 175 -61.5t63 -172.5 q0 -179 -158.5 -271.5t-470.5 -92.5h-39q-8 -51 -8 -96q0 -161 69.5 -250.5t217.5 -89.5q69 0 133.5 21t130.5 52v-94q-80 -37 -147 -53t-140 -16zM369 70q67 0 138.5 42t134 117.5t106 170.5t63.5 199t20 165q0 118 -49 186t-141 68q-123 0 -223 -86t-156.5 -240 t-56.5 -340q0 -150 42.5 -216t121.5 -66zM1317 1018q-119 0 -232 -115.5t-172 -308.5h48q263 0 383 67t120 203q0 71 -38.5 112.5t-108.5 41.5z" />
<glyph unicode="&#xe7;" horiz-adv-x="887" d="M102 0zM477 -20q-174 0 -274.5 110.5t-100.5 306.5q0 193 73.5 361.5t198.5 257t290 88.5q134 0 241 -43l-28 -90q-107 47 -218 47q-129 0 -232.5 -77t-162.5 -222t-59 -320q0 -158 73.5 -243.5t208.5 -85.5q71 0 131.5 13t131.5 46v-92q-116 -57 -273 -57zM574 -289 q0 -94 -75.5 -148.5t-217.5 -54.5q-46 0 -78 7v79q30 -6 72 -6q198 0 198 115q0 97 -151 107l110 190h80l-78 -137q140 -30 140 -152z" />
<glyph unicode="&#xe8;" horiz-adv-x="928" d="M102 0zM469 -20q-173 0 -270 109.5t-97 305.5q0 181 71 347t195.5 264t274.5 98q114 0 182 -61t68 -166q0 -181 -163.5 -276t-485.5 -95h-33q-6 -44 -6 -98q0 -165 74 -251.5t213 -86.5q132 0 276 73v-94q-140 -69 -299 -69zM631 1018q-131 0 -243.5 -115.5 t-162.5 -308.5h49q517 0 517 270q0 67 -43.5 110.5t-116.5 43.5zM751 1241h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xe9;" horiz-adv-x="928" d="M102 0zM469 -20q-173 0 -270 109.5t-97 305.5q0 181 71 347t195.5 264t274.5 98q114 0 182 -61t68 -166q0 -181 -163.5 -276t-485.5 -95h-33q-6 -44 -6 -98q0 -165 74 -251.5t213 -86.5q132 0 276 73v-94q-140 -69 -299 -69zM631 1018q-131 0 -243.5 -115.5 t-162.5 -308.5h49q517 0 517 270q0 67 -43.5 110.5t-116.5 43.5zM532 1262q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xea;" horiz-adv-x="928" d="M102 0zM469 -20q-173 0 -270 109.5t-97 305.5q0 181 71 347t195.5 264t274.5 98q114 0 182 -61t68 -166q0 -181 -163.5 -276t-485.5 -95h-33q-6 -44 -6 -98q0 -165 74 -251.5t213 -86.5q132 0 276 73v-94q-140 -69 -299 -69zM631 1018q-131 0 -243.5 -115.5 t-162.5 -308.5h49q517 0 517 270q0 67 -43.5 110.5t-116.5 43.5zM904 1241h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xeb;" horiz-adv-x="928" d="M102 0zM469 -20q-173 0 -270 109.5t-97 305.5q0 181 71 347t195.5 264t274.5 98q114 0 182 -61t68 -166q0 -181 -163.5 -276t-485.5 -95h-33q-6 -44 -6 -98q0 -165 74 -251.5t213 -86.5q132 0 276 73v-94q-140 -69 -299 -69zM631 1018q-131 0 -243.5 -115.5 t-162.5 -308.5h49q517 0 517 270q0 67 -43.5 110.5t-116.5 43.5zM780 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM436 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xec;" horiz-adv-x="475" d="M76 0zM174 0h-98l231 1087h96zM454 1241h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xed;" horiz-adv-x="475" d="M76 0zM174 0h-98l231 1087h96zM284 1262q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xee;" horiz-adv-x="475" d="M76 0zM174 0h-98l231 1087h96zM642 1241h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xef;" horiz-adv-x="475" d="M76 0zM174 0h-98l231 1087h96zM515 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM171 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xf0;" horiz-adv-x="1124" d="M713 1364q-54 60 -158 139l59 68q32 -26 81 -66t100 -94l266 150l39 -74l-256 -141q87 -116 131.5 -276t44.5 -335q0 -355 -141.5 -555t-399.5 -200q-177 0 -277 106.5t-100 294.5q0 170 63 301.5t178.5 203.5t262.5 72q107 0 188 -49.5t121 -142.5h5q0 139 -43 289 t-115 243l-295 -163l-39 73zM489 70q118 0 208.5 61t144 186.5t53.5 270.5q0 77 -35 142t-100 101.5t-156 36.5q-124 0 -213.5 -61.5t-137.5 -169.5t-48 -248q0 -153 73.5 -236t210.5 -83z" />
<glyph unicode="&#xf1;" horiz-adv-x="1143" d="M76 0zM764 0l149 692q21 92 21 156q0 80 -43.5 125t-134.5 45q-112 0 -210.5 -67t-166 -187.5t-103.5 -286.5l-102 -477h-98l231 1087h82l-37 -221h6q164 238 416 238q130 0 195 -64t65 -184q0 -70 -24 -182l-148 -674h-98zM874 1249q-40 0 -77.5 19t-75.5 45 q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z" />
<glyph unicode="&#xf2;" horiz-adv-x="1124" d="M98 0zM649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83zM744 1241h-66q-50 52 -114 144.5t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xf3;" horiz-adv-x="1124" d="M98 0zM649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83zM573 1262q66 51 150.5 142t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xf4;" horiz-adv-x="1124" d="M98 0zM649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83zM941 1241h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xf5;" horiz-adv-x="1124" d="M98 0zM649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83zM839 1249q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z" />
<glyph unicode="&#xf6;" horiz-adv-x="1124" d="M98 0zM649 1108q180 0 278.5 -108.5t98.5 -299.5q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5 q0 154 -73 237t-210 83zM812 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM468 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xf7;" d="M168 672v100h903v-100h-903zM522 373q0 106 96 106q48 0 73.5 -27.5t25.5 -78.5q0 -57 -29 -82t-70 -25q-96 0 -96 107zM522 1071q0 107 96 107q46 0 72.5 -27.5t26.5 -79.5q0 -57 -29 -81.5t-70 -24.5q-96 0 -96 106z" />
<glyph unicode="&#xf8;" horiz-adv-x="1124" d="M164 127q-66 106 -66 276q0 191 73 358t197 257t281 90q150 0 250 -82l109 133l65 -53l-117 -143q70 -105 70 -263q0 -197 -71.5 -368.5t-195.5 -261.5t-286 -90q-163 0 -254 83l-110 -135l-64 54zM924 702q0 101 -35 179l-608 -742q67 -73 202 -73q127 0 225.5 77.5 t157 228t58.5 330.5zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -125 32 -197l605 739q-74 72 -197 72z" />
<glyph unicode="&#xf9;" horiz-adv-x="1143" d="M109 0zM381 1087l-152 -698q-22 -106 -22 -158q0 -74 47.5 -117.5t138.5 -43.5q110 0 207.5 65.5t164 187t99.5 279.5l105 485h98l-231 -1087h-80l28 205h-6q-167 -221 -403 -221q-131 0 -198.5 62t-67.5 181q0 60 22 170l150 690h100zM774 1241h-66q-50 52 -114 144.5 t-99 162.5v21h115q46 -129 164 -303v-25z" />
<glyph unicode="&#xfa;" horiz-adv-x="1143" d="M109 0zM381 1087l-152 -698q-22 -106 -22 -158q0 -74 47.5 -117.5t138.5 -43.5q110 0 207.5 65.5t164 187t99.5 279.5l105 485h98l-231 -1087h-80l28 205h-6q-167 -221 -403 -221q-131 0 -198.5 62t-67.5 181q0 60 22 170l150 690h100zM627 1262q66 51 150.5 142 t129.5 165h137v-23q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xfb;" horiz-adv-x="1143" d="M109 0zM381 1087l-152 -698q-22 -106 -22 -158q0 -74 47.5 -117.5t138.5 -43.5q110 0 207.5 65.5t164 187t99.5 279.5l105 485h98l-231 -1087h-80l28 205h-6q-167 -221 -403 -221q-131 0 -198.5 62t-67.5 181q0 60 22 170l150 690h100zM957 1241h-49q-70 60 -161 207 q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#xfc;" horiz-adv-x="1143" d="M109 0zM381 1087l-152 -698q-22 -106 -22 -158q0 -74 47.5 -117.5t138.5 -43.5q110 0 207.5 65.5t164 187t99.5 279.5l105 485h98l-231 -1087h-80l28 205h-6q-167 -221 -403 -221q-131 0 -198.5 62t-67.5 181q0 60 22 170l150 690h100zM827 1366q0 49 20.5 78t56.5 29 q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM483 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#xfd;" horiz-adv-x="920" d="M0 0zM123 1087h100l82 -548q51 -351 55 -449h11q43 105 186 367l348 630h103l-713 -1290q-72 -127 -122.5 -178t-114 -81t-146.5 -30q-68 0 -129 21v92q71 -27 137 -27q80 0 147 49.5t130 164.5t100 184zM505 1262q66 51 150.5 142t129.5 165h137v-23 q-51 -66 -157.5 -158.5t-192.5 -146.5h-67v21z" />
<glyph unicode="&#xfe;" horiz-adv-x="1163" d="M498 -16q-230 0 -279 219h-4q-13 -72 -149 -695h-99l434 2048h99q-114 -535 -164 -751h6q93 156 199 229.5t231 73.5q133 0 206 -92.5t73 -282.5q0 -195 -72 -371t-197.5 -277t-283.5 -101zM748 1018q-86 0 -172.5 -57.5t-162.5 -169.5t-111.5 -238t-35.5 -207 q0 -125 61.5 -200.5t168.5 -75.5q124 0 225 84t164 243.5t63 325.5q0 295 -200 295z" />
<glyph unicode="&#xff;" horiz-adv-x="920" d="M0 0zM123 1087h100l82 -548q51 -351 55 -449h11q43 105 186 367l348 630h103l-713 -1290q-72 -127 -122.5 -178t-114 -81t-146.5 -30q-68 0 -129 21v92q71 -27 137 -27q80 0 147 49.5t130 164.5t100 184zM698 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77 t-55 -29q-55 0 -55 63zM354 1366q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#x131;" horiz-adv-x="475" d="M174 0h-98l231 1087h96z" />
<glyph unicode="&#x152;" horiz-adv-x="1767" d="M1530 0h-666q-25 -6 -77.5 -13t-94.5 -7q-251 0 -385.5 149.5t-134.5 429.5q0 263 96 482t262 330.5t381 111.5q130 0 240 -21h688l-20 -94h-625l-117 -553h590l-20 -94h-588l-135 -627h626zM705 72q68 0 116 12l271 1290q-110 15 -189 15q-182 0 -321.5 -98.5 t-222.5 -293.5t-83 -424q0 -245 109 -373t320 -128z" />
<glyph unicode="&#x153;" horiz-adv-x="1720" d="M1262 -20q-135 0 -228 69t-125 201q-65 -127 -179 -198.5t-257 -71.5q-184 0 -279.5 109.5t-95.5 313.5q0 191 73 358t197 257t281 90q141 0 237 -74.5t126 -212.5q70 132 182.5 207.5t241.5 75.5q114 0 182 -61t68 -166q0 -181 -163.5 -276t-486.5 -95h-32 q-7 -38 -7 -98q0 -165 74 -251.5t213 -86.5q133 0 277 73v-94q-140 -69 -299 -69zM641 1022q-124 0 -223 -78.5t-158 -225t-59 -310.5q0 -342 282 -342q127 0 225.5 77.5t157 228t58.5 330.5q0 154 -73 237t-210 83zM1423 1018q-131 0 -243 -115t-162 -309h49q516 0 516 270 q0 70 -44.5 112t-115.5 42z" />
<glyph unicode="&#x178;" horiz-adv-x="965" d="M193 0zM494 645l544 817h117l-631 -932l-108 -530h-105l119 545l-237 917h100zM798 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63zM454 1704q0 49 20.5 78t56.5 29q54 0 54 -64q0 -48 -21 -77t-55 -29q-55 0 -55 63z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1135" d="M958 1241h-49q-70 60 -161 207q-55 -57 -125 -114.5t-125 -92.5h-54v29q68 56 157.5 148.5t127.5 150.5h64q23 -64 72.5 -152.5t92.5 -146.5v-29z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M967 1448q0 -92 -57.5 -148.5t-145.5 -56.5q-93 0 -148 52t-55 145q0 88 59.5 144t149.5 56q88 0 142.5 -50t54.5 -142zM889 1446q0 57 -33.5 90t-87.5 33q-60 0 -93.5 -36t-33.5 -93t33 -90t90 -33q56 0 90.5 36t34.5 93z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1135" d="M831 1249q-40 0 -77.5 19t-75.5 45q-34 23 -64.5 41t-68.5 18q-45 0 -74 -28.5t-51 -100.5h-74q19 108 71 166.5t134 58.5q41 0 73.5 -14t117.5 -72q52 -36 94 -36q43 0 71.5 30.5t46.5 100.5h76q-26 -118 -74.5 -173t-124.5 -55z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="629" d="M82 502l18 90h457l-16 -90h-459z" />
<glyph unicode="&#x2011;" horiz-adv-x="629" d="M82 502l18 90h457l-16 -90h-459z" />
<glyph unicode="&#x2012;" horiz-adv-x="629" d="M82 502l18 90h457l-16 -90h-459z" />
<glyph unicode="&#x2013;" horiz-adv-x="983" d="M66 502l18 90h807l-17 -90h-808z" />
<glyph unicode="&#x2014;" horiz-adv-x="1966" d="M68 502l18 90h1788l-16 -90h-1790z" />
<glyph unicode="&#x2018;" horiz-adv-x="299" d="M133 961l-4 22q41 100 116 231t161 248h73q-66 -106 -129.5 -242.5t-103.5 -258.5h-113z" />
<glyph unicode="&#x2019;" horiz-adv-x="299" d="M475 1462l4 -22q-43 -105 -117.5 -235.5t-158.5 -243.5h-74q66 106 129.5 242.5t103.5 258.5h113z" />
<glyph unicode="&#x201a;" horiz-adv-x="451" d="M246 238l4 -23q-40 -97 -115.5 -230t-161.5 -249h-73q68 110 131.5 248t101.5 254h113z" />
<glyph unicode="&#x201c;" horiz-adv-x="631" d="M133 961l-4 22q41 100 116 231t161 248h73q-66 -106 -129.5 -242.5t-103.5 -258.5h-113zM467 961l-4 22q43 104 120 238.5t156 240.5h74q-66 -106 -129.5 -242.5t-103.5 -258.5h-113z" />
<glyph unicode="&#x201d;" horiz-adv-x="631" d="M809 1462l4 -22q-43 -105 -117.5 -235.5t-158.5 -243.5h-74q66 106 129.5 242.5t103.5 258.5h113zM475 1462l4 -22q-43 -105 -117.5 -235.5t-158.5 -243.5h-74q66 106 129.5 242.5t103.5 258.5h113z" />
<glyph unicode="&#x201e;" horiz-adv-x="776" d="M561 238l4 -23q-43 -105 -117.5 -235.5t-158.5 -243.5h-74q66 108 129 242.5t105 259.5h112zM227 238l4 -23q-43 -105 -117.5 -235.5t-158.5 -243.5h-74q73 119 135.5 254.5t98.5 247.5h112z" />
<glyph unicode="&#x2022;" horiz-adv-x="793" d="M248 682q0 137 63 213t172 76q76 0 116 -39.5t40 -118.5q0 -125 -66 -207t-176 -82q-149 0 -149 158z" />
<glyph unicode="&#x2026;" horiz-adv-x="1489" d="M69 0zM69 55q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-67 -34.5q-68 0 -68 73zM569 55q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-67 -34.5q-68 0 -68 73zM1071 55q0 56 25 88.5t69 32.5q66 0 66 -72q0 -53 -25 -87.5t-67 -34.5q-68 0 -68 73z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="537" d="M451 932l57 -49l-318 -336l213 -385l-63 -39l-254 418l2 26z" />
<glyph unicode="&#x203a;" horiz-adv-x="537" d="M94 123l-57 49l317 336l-213 385l64 39l254 -418l-2 -27z" />
<glyph unicode="&#x2044;" horiz-adv-x="274" d="M731 1462l-1087 -1462h-107l1086 1462h108z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="643" d="M657 815h-131l-49 -229h-82l49 229h-391l21 76l506 577h86l-125 -581h133zM459 887q61 294 79 365.5t29 105.5q-10 -16 -61 -79t-338 -392h291z" />
<glyph unicode="&#x20ac;" d="M991 1389q-186 0 -330.5 -120.5t-226.5 -346.5h457l-21 -82h-460q-30 -98 -39 -217h442l-20 -82h-424q0 -243 89 -356t265 -113q115 0 252 57v-94q-129 -55 -270 -55q-209 0 -325 139.5t-116 394.5v27h-184l16 82h172q5 101 35 217h-170l19 82h174q95 273 270 417 t399 144q166 0 287 -90l-53 -82q-102 78 -238 78z" />
<glyph unicode="&#x2122;" horiz-adv-x="1534" d="M477 741h-86v643h-217v78h522v-78h-219v-643zM1077 741l-221 609h-6l4 -201v-408h-82v721h125l221 -606l223 606h125v-721h-86v398l4 207h-6l-227 -605h-74z" />
<glyph unicode="&#xe000;" horiz-adv-x="1085" d="M0 1085h1085v-1085h-1085v1085z" />
<glyph horiz-adv-x="1133" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
<hkern g1="uniFB00" u2="&#x201d;" k="-123" />
<hkern g1="uniFB00" u2="&#x2019;" k="-123" />
<hkern g1="uniFB00" u2="&#x27;" k="-123" />
<hkern g1="uniFB00" u2="&#x22;" k="-123" />
</font>
</defs></svg>

================
File: docs/map-editor/fonts/OpenSans-Regular-webfont.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" >
<svg xmlns="http://www.w3.org/2000/svg">
<metadata></metadata>
<defs>
<font id="open_sansregular" horiz-adv-x="1171" >
<font-face units-per-em="2048" ascent="1638" descent="-410" />
<missing-glyph horiz-adv-x="532" />
<glyph unicode="&#xfb01;" horiz-adv-x="1212" d="M29 0zM670 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM1036 0h-166v1096h166v-1096zM856 1393q0 57 28 83.5t70 26.5q40 0 69 -27t29 -83t-29 -83.5t-69 -27.5 q-42 0 -70 27.5t-28 83.5z" />
<glyph unicode="&#xfb02;" horiz-adv-x="1212" d="M29 0zM670 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM1036 0h-166v1556h166v-1556z" />
<glyph unicode="&#xfb03;" horiz-adv-x="1909" d="M29 0zM1358 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM670 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31 q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM1731 0h-166v1096h166v-1096zM1551 1393q0 57 28 83.5t70 26.5q40 0 69 -27t29 -83t-29 -83.5t-69 -27.5q-42 0 -70 27.5t-28 83.5z" />
<glyph unicode="&#xfb04;" horiz-adv-x="1909" d="M29 0zM1358 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM670 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31 q-94 0 -139 -62.5t-45 -200.5v-71h279v-129zM1731 0h-166v1556h166v-1556z" />
<glyph horiz-adv-x="2048" />
<glyph horiz-adv-x="2048" />
<glyph unicode="&#xd;" horiz-adv-x="1044" />
<glyph unicode=" "  horiz-adv-x="532" />
<glyph unicode="&#x09;" horiz-adv-x="532" />
<glyph unicode="&#xa0;" horiz-adv-x="532" />
<glyph unicode="!" horiz-adv-x="547" d="M326 403h-105l-51 1059h207zM152 106q0 136 120 136q58 0 89.5 -35t31.5 -101q0 -64 -32 -99.5t-89 -35.5q-52 0 -86 31.5t-34 103.5z" />
<glyph unicode="&#x22;" horiz-adv-x="821" d="M319 1462l-40 -528h-105l-41 528h186zM688 1462l-41 -528h-104l-41 528h186z" />
<glyph unicode="#" horiz-adv-x="1323" d="M981 899l-66 -340h283v-129h-307l-84 -430h-137l84 430h-303l-82 -430h-136l80 430h-262v129h287l68 340h-277v127h299l82 436h139l-82 -436h305l84 436h134l-84 -436h264v-127h-289zM475 559h303l66 340h-303z" />
<glyph unicode="$" d="M1036 449q0 -136 -102 -224.5t-285 -111.5v-232h-129v223q-112 0 -217 17.5t-172 48.5v156q83 -37 191.5 -60.5t197.5 -23.5v440q-205 65 -287.5 151t-82.5 222q0 131 101.5 215t268.5 102v182h129v-180q184 -5 355 -74l-52 -131q-149 59 -303 70v-434q157 -50 235 -97.5 t115 -109t37 -149.5zM866 436q0 72 -44.5 116.5t-172.5 88.5v-389q217 30 217 184zM319 1057q0 -76 45 -122t156 -87v387q-99 -16 -150 -62.5t-51 -115.5z" />
<glyph unicode="%" horiz-adv-x="1686" d="M242 1026q0 -170 37 -255t120 -85q164 0 164 340q0 338 -164 338q-83 0 -120 -84t-37 -254zM700 1026q0 -228 -76.5 -344.5t-224.5 -116.5q-140 0 -217.5 119t-77.5 342q0 227 74.5 342t220.5 115q145 0 223 -119t78 -338zM1122 440q0 -171 37 -255.5t121 -84.5t124 83.5 t40 256.5q0 171 -40 253.5t-124 82.5t-121 -82.5t-37 -253.5zM1581 440q0 -227 -76.5 -343.5t-224.5 -116.5q-142 0 -218.5 119t-76.5 341q0 227 74.5 342t220.5 115q142 0 221.5 -117.5t79.5 -339.5zM1323 1462l-811 -1462h-147l811 1462h147z" />
<glyph unicode="&#x26;" horiz-adv-x="1495" d="M414 1171q0 -69 36 -131.5t123 -150.5q129 75 179.5 138.5t50.5 146.5q0 77 -51.5 125.5t-137.5 48.5q-89 0 -144.5 -48t-55.5 -129zM569 129q241 0 400 154l-437 424q-111 -68 -157 -112.5t-68 -95.5t-22 -116q0 -117 77.5 -185.5t206.5 -68.5zM113 379q0 130 69.5 230 t249.5 202q-85 95 -115.5 144t-48.5 102t-18 110q0 150 98 234t273 84q162 0 255 -83.5t93 -232.5q0 -107 -68 -197.5t-225 -183.5l407 -391q56 62 89.5 145.5t56.5 182.5h168q-68 -286 -205 -434l299 -291h-229l-185 178q-118 -106 -240 -152t-272 -46q-215 0 -333.5 106 t-118.5 293z" />
<glyph unicode="'" horiz-adv-x="453" d="M319 1462l-40 -528h-105l-41 528h186z" />
<glyph unicode="(" horiz-adv-x="606" d="M82 561q0 265 77.5 496t223.5 405h162q-144 -193 -216.5 -424t-72.5 -475q0 -240 74 -469t213 -418h-160q-147 170 -224 397t-77 488z" />
<glyph unicode=")" horiz-adv-x="606" d="M524 561q0 -263 -77.5 -490t-223.5 -395h-160q139 188 213 417.5t74 469.5q0 244 -72.5 475t-216.5 424h162q147 -175 224 -406.5t77 -494.5z" />
<glyph unicode="*" horiz-adv-x="1130" d="M657 1556l-43 -395l398 111l26 -182l-381 -31l248 -326l-172 -94l-176 362l-160 -362l-176 94l242 326l-377 31l29 182l391 -111l-43 395h194z" />
<glyph unicode="+" d="M653 791h412v-138h-412v-426h-139v426h-410v138h410v428h139v-428z" />
<glyph unicode="," horiz-adv-x="502" d="M350 238l15 -23q-26 -100 -75 -232.5t-102 -246.5h-125q27 104 59.5 257t45.5 245h182z" />
<glyph unicode="-" horiz-adv-x="659" d="M84 473v152h491v-152h-491z" />
<glyph unicode="." horiz-adv-x="545" d="M152 106q0 67 30.5 101.5t87.5 34.5q58 0 90.5 -34.5t32.5 -101.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5z" />
<glyph unicode="/" horiz-adv-x="752" d="M731 1462l-545 -1462h-166l545 1462h166z" />
<glyph unicode="0" d="M1069 733q0 -379 -119.5 -566t-365.5 -187q-236 0 -359 191.5t-123 561.5q0 382 119 567t363 185q238 0 361.5 -193t123.5 -559zM270 733q0 -319 75 -464.5t239 -145.5q166 0 240.5 147.5t74.5 462.5t-74.5 461.5t-240.5 146.5q-164 0 -239 -144.5t-75 -463.5z" />
<glyph unicode="1" d="M715 0h-162v1042q0 130 8 246q-21 -21 -47 -44t-238 -195l-88 114l387 299h140v-1462z" />
<glyph unicode="2" d="M1061 0h-961v143l385 387q176 178 232 254t84 148t28 155q0 117 -71 185.5t-197 68.5q-91 0 -172.5 -30t-181.5 -109l-88 113q202 168 440 168q206 0 323 -105.5t117 -283.5q0 -139 -78 -275t-292 -344l-320 -313v-8h752v-154z" />
<glyph unicode="3" d="M1006 1118q0 -140 -78.5 -229t-222.5 -119v-8q176 -22 261 -112t85 -236q0 -209 -145 -321.5t-412 -112.5q-116 0 -212.5 17.5t-187.5 61.5v158q95 -47 202.5 -71.5t203.5 -24.5q379 0 379 297q0 266 -418 266h-144v143h146q171 0 271 75.5t100 209.5q0 107 -73.5 168 t-199.5 61q-96 0 -181 -26t-194 -96l-84 112q90 71 207.5 111.5t247.5 40.5q213 0 331 -97.5t118 -267.5z" />
<glyph unicode="4" d="M1130 336h-217v-336h-159v336h-711v145l694 989h176v-983h217v-151zM754 487v486q0 143 10 323h-8q-48 -96 -90 -159l-457 -650h545z" />
<glyph unicode="5" d="M557 893q231 0 363.5 -114.5t132.5 -313.5q0 -227 -144.5 -356t-398.5 -129q-247 0 -377 79v160q70 -45 174 -70.5t205 -25.5q176 0 273.5 83t97.5 240q0 306 -375 306q-95 0 -254 -29l-86 55l55 684h727v-153h-585l-37 -439q115 23 229 23z" />
<glyph unicode="6" d="M117 625q0 431 167.5 644.5t495.5 213.5q113 0 178 -19v-143q-77 25 -176 25q-235 0 -359 -146.5t-136 -460.5h12q110 172 348 172q197 0 310.5 -119t113.5 -323q0 -228 -124.5 -358.5t-336.5 -130.5q-227 0 -360 170.5t-133 474.5zM608 121q142 0 220.5 89.5t78.5 258.5 q0 145 -73 228t-218 83q-90 0 -165 -37t-119.5 -102t-44.5 -135q0 -103 40 -192t113.5 -141t167.5 -52z" />
<glyph unicode="7" d="M285 0l606 1309h-797v153h973v-133l-598 -1329h-184z" />
<glyph unicode="8" d="M584 1483q200 0 317 -93t117 -257q0 -108 -67 -197t-214 -162q178 -85 253 -178.5t75 -216.5q0 -182 -127 -290.5t-348 -108.5q-234 0 -360 102.5t-126 290.5q0 251 306 391q-138 78 -198 168.5t-60 202.5q0 159 117.5 253.5t314.5 94.5zM268 369q0 -120 83.5 -187 t234.5 -67q149 0 232 70t83 192q0 97 -78 172.5t-272 146.5q-149 -64 -216 -141.5t-67 -185.5zM582 1348q-125 0 -196 -60t-71 -160q0 -92 59 -158t218 -132q143 60 202.5 129t59.5 161q0 101 -72.5 160.5t-199.5 59.5z" />
<glyph unicode="9" d="M1061 838q0 -858 -664 -858q-116 0 -184 20v143q80 -26 182 -26q240 0 362.5 148.5t133.5 455.5h-12q-55 -83 -146 -126.5t-205 -43.5q-194 0 -308 116t-114 324q0 228 127.5 360t335.5 132q149 0 260.5 -76.5t171.5 -223t60 -345.5zM569 1341q-143 0 -221 -92t-78 -256 q0 -144 72 -226.5t219 -82.5q91 0 167.5 37t120.5 101t44 134q0 105 -41 194t-114.5 140t-168.5 51z" />
<glyph unicode=":" horiz-adv-x="545" d="M152 106q0 67 30.5 101.5t87.5 34.5q58 0 90.5 -34.5t32.5 -101.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5zM152 989q0 135 118 135q123 0 123 -135q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5z" />
<glyph unicode=";" horiz-adv-x="545" d="M350 238l15 -23q-26 -100 -75 -232.5t-102 -246.5h-125q27 104 59.5 257t45.5 245h182zM147 989q0 135 119 135q123 0 123 -135q0 -65 -33 -100t-90 -35q-58 0 -88.5 35t-30.5 100z" />
<glyph unicode="&#x3c;" d="M1065 242l-961 422v98l961 479v-149l-782 -371l782 -328v-151z" />
<glyph unicode="=" d="M119 858v137h930v-137h-930zM119 449v137h930v-137h-930z" />
<glyph unicode="&#x3e;" d="M104 393l783 326l-783 373v149l961 -479v-98l-961 -422v151z" />
<glyph unicode="?" horiz-adv-x="879" d="M289 403v54q0 117 36 192.5t134 159.5q136 115 171.5 173t35.5 140q0 102 -65.5 157.5t-188.5 55.5q-79 0 -154 -18.5t-172 -67.5l-59 135q189 99 395 99q191 0 297 -94t106 -265q0 -73 -19.5 -128.5t-57.5 -105t-164 -159.5q-101 -86 -133.5 -143t-32.5 -152v-33h-129z M240 106q0 136 120 136q58 0 89.5 -35t31.5 -101q0 -64 -32 -99.5t-89 -35.5q-52 0 -86 31.5t-34 103.5z" />
<glyph unicode="@" horiz-adv-x="1841" d="M1720 729q0 -142 -44 -260t-124 -183t-184 -65q-86 0 -145 52t-70 133h-8q-40 -87 -114.5 -136t-176.5 -49q-150 0 -234.5 102.5t-84.5 278.5q0 204 118 331.5t310 127.5q68 0 154 -12.5t155 -34.5l-25 -470v-22q0 -178 133 -178q91 0 148 107.5t57 279.5q0 181 -74 317 t-210.5 209.5t-313.5 73.5q-223 0 -388 -92.5t-252 -264t-87 -396.5q0 -305 161 -469t464 -164q210 0 436 86v-133q-192 -84 -436 -84q-363 0 -563.5 199.5t-200.5 557.5q0 260 107 463t305 314.5t454 111.5q215 0 382.5 -90.5t259 -257t91.5 -383.5zM686 598 q0 -254 195 -254q207 0 225 313l14 261q-72 20 -157 20q-130 0 -203.5 -90t-73.5 -250z" />
<glyph unicode="A" horiz-adv-x="1296" d="M1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473z" />
<glyph unicode="B" horiz-adv-x="1327" d="M201 1462h413q291 0 421 -87t130 -275q0 -130 -72.5 -214.5t-211.5 -109.5v-10q333 -57 333 -350q0 -196 -132.5 -306t-370.5 -110h-510v1462zM371 836h280q180 0 259 56.5t79 190.5q0 123 -88 177.5t-280 54.5h-250v-479zM371 692v-547h305q177 0 266.5 68.5t89.5 214.5 q0 136 -91.5 200t-278.5 64h-291z" />
<glyph unicode="C" horiz-adv-x="1292" d="M827 1331q-241 0 -380.5 -160.5t-139.5 -439.5q0 -287 134.5 -443.5t383.5 -156.5q153 0 349 55v-149q-152 -57 -375 -57q-323 0 -498.5 196t-175.5 557q0 226 84.5 396t244 262t375.5 92q230 0 402 -84l-72 -146q-166 78 -332 78z" />
<glyph unicode="D" horiz-adv-x="1493" d="M1368 745q0 -362 -196.5 -553.5t-565.5 -191.5h-405v1462h448q341 0 530 -189t189 -528zM1188 739q0 286 -143.5 431t-426.5 145h-247v-1168h207q304 0 457 149.5t153 442.5z" />
<glyph unicode="E" horiz-adv-x="1139" d="M1016 0h-815v1462h815v-151h-645v-471h606v-150h-606v-538h645v-152z" />
<glyph unicode="F" horiz-adv-x="1057" d="M371 0h-170v1462h815v-151h-645v-535h606v-151h-606v-625z" />
<glyph unicode="G" horiz-adv-x="1491" d="M844 766h497v-711q-116 -37 -236 -56t-278 -19q-332 0 -517 197.5t-185 553.5q0 228 91.5 399.5t263.5 262t403 90.5q234 0 436 -86l-66 -150q-198 84 -381 84q-267 0 -417 -159t-150 -441q0 -296 144.5 -449t424.5 -153q152 0 297 35v450h-327v152z" />
<glyph unicode="H" horiz-adv-x="1511" d="M1311 0h-170v688h-770v-688h-170v1462h170v-622h770v622h170v-1462z" />
<glyph unicode="I" horiz-adv-x="571" d="M201 0v1462h170v-1462h-170z" />
<glyph unicode="J" horiz-adv-x="547" d="M-12 -385q-94 0 -148 27v145q71 -20 148 -20q99 0 150.5 60t51.5 173v1462h170v-1448q0 -190 -96 -294.5t-276 -104.5z" />
<glyph unicode="K" horiz-adv-x="1257" d="M1257 0h-200l-533 709l-153 -136v-573h-170v1462h170v-725l663 725h201l-588 -635z" />
<glyph unicode="L" horiz-adv-x="1063" d="M201 0v1462h170v-1308h645v-154h-815z" />
<glyph unicode="M" horiz-adv-x="1849" d="M848 0l-496 1296h-8q14 -154 14 -366v-930h-157v1462h256l463 -1206h8l467 1206h254v-1462h-170v942q0 162 14 352h-8l-500 -1294h-137z" />
<glyph unicode="N" horiz-adv-x="1544" d="M1343 0h-194l-799 1227h-8q16 -216 16 -396v-831h-157v1462h192l797 -1222h8q-2 27 -9 173.5t-5 209.5v839h159v-1462z" />
<glyph unicode="O" horiz-adv-x="1595" d="M1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5z" />
<glyph unicode="P" horiz-adv-x="1233" d="M1128 1036q0 -222 -151.5 -341.5t-433.5 -119.5h-172v-575h-170v1462h379q548 0 548 -426zM371 721h153q226 0 327 73t101 234q0 145 -95 216t-296 71h-190v-594z" />
<glyph unicode="Q" horiz-adv-x="1595" d="M1470 733q0 -281 -113 -467t-319 -252l348 -362h-247l-285 330l-55 -2q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5 q-243 0 -369.5 -153.5t-126.5 -446.5z" />
<glyph unicode="R" horiz-adv-x="1266" d="M371 608v-608h-170v1462h401q269 0 397.5 -103t128.5 -310q0 -290 -294 -392l397 -657h-201l-354 608h-305zM371 754h233q180 0 264 71.5t84 214.5q0 145 -85.5 209t-274.5 64h-221v-559z" />
<glyph unicode="S" horiz-adv-x="1124" d="M1026 389q0 -193 -140 -301t-380 -108q-260 0 -400 67v164q90 -38 196 -60t210 -22q170 0 256 64.5t86 179.5q0 76 -30.5 124.5t-102 89.5t-217.5 93q-204 73 -291.5 173t-87.5 261q0 169 127 269t336 100q218 0 401 -80l-53 -148q-181 76 -352 76q-135 0 -211 -58 t-76 -161q0 -76 28 -124.5t94.5 -89t203.5 -89.5q230 -82 316.5 -176t86.5 -244z" />
<glyph unicode="T" horiz-adv-x="1133" d="M651 0h-170v1311h-463v151h1096v-151h-463v-1311z" />
<glyph unicode="U" horiz-adv-x="1491" d="M1305 1462v-946q0 -250 -151 -393t-415 -143t-408.5 144t-144.5 396v942h170v-954q0 -183 100 -281t294 -98q185 0 285 98.5t100 282.5v952h170z" />
<glyph unicode="V" horiz-adv-x="1219" d="M1036 1462h183l-527 -1462h-168l-524 1462h180l336 -946q58 -163 92 -317q36 162 94 323z" />
<glyph unicode="W" horiz-adv-x="1896" d="M1477 0h-168l-295 979q-21 65 -47 164t-27 119q-22 -132 -70 -289l-286 -973h-168l-389 1462h180l231 -903q48 -190 70 -344q27 183 80 358l262 889h180l275 -897q48 -155 81 -350q19 142 72 346l230 901h180z" />
<glyph unicode="X" horiz-adv-x="1182" d="M1174 0h-193l-393 643l-400 -643h-180l486 764l-453 698h188l363 -579l366 579h181l-453 -692z" />
<glyph unicode="Y" horiz-adv-x="1147" d="M573 731l390 731h184l-488 -895v-567h-172v559l-487 903h186z" />
<glyph unicode="Z" horiz-adv-x="1169" d="M1087 0h-1005v133l776 1176h-752v153h959v-133l-776 -1175h798v-154z" />
<glyph unicode="[" horiz-adv-x="674" d="M623 -324h-457v1786h457v-141h-289v-1503h289v-142z" />
<glyph unicode="\" horiz-adv-x="752" d="M186 1462l547 -1462h-166l-544 1462h163z" />
<glyph unicode="]" horiz-adv-x="674" d="M51 -182h289v1503h-289v141h457v-1786h-457v142z" />
<glyph unicode="^" horiz-adv-x="1110" d="M49 551l434 922h99l477 -922h-152l-372 745l-334 -745h-152z" />
<glyph unicode="_" horiz-adv-x="918" d="M922 -315h-926v131h926v-131z" />
<glyph unicode="`" horiz-adv-x="1182" d="M786 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="a" horiz-adv-x="1139" d="M850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85t88.5 238 v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47z" />
<glyph unicode="b" horiz-adv-x="1255" d="M686 1114q216 0 335.5 -147.5t119.5 -417.5t-120.5 -419.5t-334.5 -149.5q-107 0 -195.5 39.5t-148.5 121.5h-12l-35 -141h-119v1556h166v-378q0 -127 -8 -228h8q116 164 344 164zM662 975q-170 0 -245 -97.5t-75 -328.5t77 -330.5t247 -99.5q153 0 228 111.5t75 320.5 q0 214 -75 319t-232 105z" />
<glyph unicode="c" horiz-adv-x="975" d="M614 -20q-238 0 -368.5 146.5t-130.5 414.5q0 275 132.5 425t377.5 150q79 0 158 -17t124 -40l-51 -141q-55 22 -120 36.5t-115 14.5q-334 0 -334 -426q0 -202 81.5 -310t241.5 -108q137 0 281 59v-147q-110 -57 -277 -57z" />
<glyph unicode="d" horiz-adv-x="1255" d="M922 147h-9q-115 -167 -344 -167q-215 0 -334.5 147t-119.5 418t120 421t334 150q223 0 342 -162h13l-7 79l-4 77v446h166v-1556h-135zM590 119q170 0 246.5 92.5t76.5 298.5v35q0 233 -77.5 332.5t-247.5 99.5q-146 0 -223.5 -113.5t-77.5 -320.5q0 -210 77 -317 t226 -107z" />
<glyph unicode="e" horiz-adv-x="1149" d="M639 -20q-243 0 -383.5 148t-140.5 411q0 265 130.5 421t350.5 156q206 0 326 -135.5t120 -357.5v-105h-755q5 -193 97.5 -293t260.5 -100q177 0 350 74v-148q-88 -38 -166.5 -54.5t-189.5 -16.5zM594 977q-132 0 -210.5 -86t-92.5 -238h573q0 157 -70 240.5t-200 83.5z " />
<glyph unicode="f" horiz-adv-x="694" d="M670 967h-279v-967h-166v967h-196v75l196 60v61q0 404 353 404q87 0 204 -35l-43 -133q-96 31 -164 31q-94 0 -139 -62.5t-45 -200.5v-71h279v-129z" />
<glyph unicode="g" horiz-adv-x="1122" d="M1073 1096v-105l-203 -24q28 -35 50 -91.5t22 -127.5q0 -161 -110 -257t-302 -96q-49 0 -92 8q-106 -56 -106 -141q0 -45 37 -66.5t127 -21.5h194q178 0 273.5 -75t95.5 -218q0 -182 -146 -277.5t-426 -95.5q-215 0 -331.5 80t-116.5 226q0 100 64 173t180 99 q-42 19 -70.5 59t-28.5 93q0 60 32 105t101 87q-85 35 -138.5 119t-53.5 192q0 180 108 277.5t306 97.5q86 0 155 -20h379zM199 -184q0 -89 75 -135t215 -46q209 0 309.5 62.5t100.5 169.5q0 89 -55 123.5t-207 34.5h-199q-113 0 -176 -54t-63 -155zM289 745q0 -115 65 -174 t181 -59q243 0 243 236q0 247 -246 247q-117 0 -180 -63t-63 -187z" />
<glyph unicode="h" horiz-adv-x="1257" d="M926 0v709q0 134 -61 200t-191 66q-173 0 -252.5 -94t-79.5 -308v-573h-166v1556h166v-471q0 -85 -8 -141h10q49 79 139.5 124.5t206.5 45.5q201 0 301.5 -95.5t100.5 -303.5v-715h-166z" />
<glyph unicode="i" horiz-adv-x="518" d="M342 0h-166v1096h166v-1096zM162 1393q0 57 28 83.5t70 26.5q40 0 69 -27t29 -83t-29 -83.5t-69 -27.5q-42 0 -70 27.5t-28 83.5z" />
<glyph unicode="j" horiz-adv-x="518" d="M43 -492q-95 0 -154 25v135q69 -20 136 -20q78 0 114.5 42.5t36.5 129.5v1276h166v-1264q0 -324 -299 -324zM162 1393q0 57 28 83.5t70 26.5q40 0 69 -27t29 -83t-29 -83.5t-69 -27.5q-42 0 -70 27.5t-28 83.5z" />
<glyph unicode="k" horiz-adv-x="1075" d="M340 561q43 61 131 160l354 375h197l-444 -467l475 -629h-201l-387 518l-125 -108v-410h-164v1556h164v-825q0 -55 -8 -170h8z" />
<glyph unicode="l" horiz-adv-x="518" d="M342 0h-166v1556h166v-1556z" />
<glyph unicode="m" horiz-adv-x="1905" d="M1573 0v713q0 131 -56 196.5t-174 65.5q-155 0 -229 -89t-74 -274v-612h-166v713q0 131 -56 196.5t-175 65.5q-156 0 -228.5 -93.5t-72.5 -306.5v-575h-166v1096h135l27 -150h8q47 80 132.5 125t191.5 45q257 0 336 -186h8q49 86 142 136t212 50q186 0 278.5 -95.5 t92.5 -305.5v-715h-166z" />
<glyph unicode="n" horiz-adv-x="1257" d="M926 0v709q0 134 -61 200t-191 66q-172 0 -252 -93t-80 -307v-575h-166v1096h135l27 -150h8q51 81 143 125.5t205 44.5q198 0 298 -95.5t100 -305.5v-715h-166z" />
<glyph unicode="o" horiz-adv-x="1237" d="M1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z" />
<glyph unicode="p" horiz-adv-x="1255" d="M686 -20q-107 0 -195.5 39.5t-148.5 121.5h-12q12 -96 12 -182v-451h-166v1588h135l23 -150h8q64 90 149 130t195 40q218 0 336.5 -149t118.5 -418q0 -270 -120.5 -419.5t-334.5 -149.5zM662 975q-168 0 -243 -93t-77 -296v-37q0 -231 77 -330.5t247 -99.5 q142 0 222.5 115t80.5 317q0 205 -80.5 314.5t-226.5 109.5z" />
<glyph unicode="q" horiz-adv-x="1255" d="M590 119q166 0 242 89t81 300v37q0 230 -78 331t-247 101q-146 0 -223.5 -113.5t-77.5 -320.5t76.5 -315.5t226.5 -108.5zM565 -20q-212 0 -331 149t-119 416q0 269 120 420t334 151q225 0 346 -170h9l24 150h131v-1588h-166v469q0 100 11 170h-13q-115 -167 -346 -167z " />
<glyph unicode="r" horiz-adv-x="836" d="M676 1116q73 0 131 -12l-23 -154q-68 15 -120 15q-133 0 -227.5 -108t-94.5 -269v-588h-166v1096h137l19 -203h8q61 107 147 165t189 58z" />
<glyph unicode="s" horiz-adv-x="977" d="M883 299q0 -153 -114 -236t-320 -83q-218 0 -340 69v154q79 -40 169.5 -63t174.5 -23q130 0 200 41.5t70 126.5q0 64 -55.5 109.5t-216.5 107.5q-153 57 -217.5 99.5t-96 96.5t-31.5 129q0 134 109 211.5t299 77.5q177 0 346 -72l-59 -135q-165 68 -299 68 q-118 0 -178 -37t-60 -102q0 -44 22.5 -75t72.5 -59t192 -81q195 -71 263.5 -143t68.5 -181z" />
<glyph unicode="t" horiz-adv-x="723" d="M530 117q44 0 85 6.5t65 13.5v-127q-27 -13 -79.5 -21.5t-94.5 -8.5q-318 0 -318 335v652h-157v80l157 69l70 234h96v-254h318v-129h-318v-645q0 -99 47 -152t129 -53z" />
<glyph unicode="u" horiz-adv-x="1257" d="M332 1096v-711q0 -134 61 -200t191 -66q172 0 251.5 94t79.5 307v576h166v-1096h-137l-24 147h-9q-51 -81 -141.5 -124t-206.5 -43q-200 0 -299.5 95t-99.5 304v717h168z" />
<glyph unicode="v" horiz-adv-x="1026" d="M416 0l-416 1096h178l236 -650q80 -228 94 -296h8q11 53 69.5 219.5t262.5 726.5h178l-416 -1096h-194z" />
<glyph unicode="w" horiz-adv-x="1593" d="M1071 0l-201 643q-19 59 -71 268h-8q-40 -175 -70 -270l-207 -641h-192l-299 1096h174q106 -413 161.5 -629t63.5 -291h8q11 57 35.5 147.5t42.5 143.5l201 629h180l196 -629q56 -172 76 -289h8q4 36 21.5 111t208.5 807h172l-303 -1096h-197z" />
<glyph unicode="x" horiz-adv-x="1073" d="M440 561l-381 535h189l289 -420l288 420h187l-381 -535l401 -561h-188l-307 444l-310 -444h-188z" />
<glyph unicode="y" horiz-adv-x="1032" d="M2 1096h178l240 -625q79 -214 98 -309h8q13 51 54.5 174.5t271.5 759.5h178l-471 -1248q-70 -185 -163.5 -262.5t-229.5 -77.5q-76 0 -150 17v133q55 -12 123 -12q171 0 244 192l61 156z" />
<glyph unicode="z" horiz-adv-x="958" d="M877 0h-795v113l598 854h-561v129h743v-129l-590 -838h605v-129z" />
<glyph unicode="{" horiz-adv-x="776" d="M475 12q0 -102 58.5 -148t171.5 -48v-140q-190 2 -294 87t-104 239v303q0 104 -63 148.5t-183 44.5v141q130 2 188 48t58 142v306q0 155 108 241t290 86v-139q-230 -6 -230 -199v-295q0 -215 -223 -254v-12q223 -39 223 -254v-297z" />
<glyph unicode="|" horiz-adv-x="1128" d="M494 1556h141v-2052h-141v2052z" />
<glyph unicode="}" horiz-adv-x="776" d="M522 575q-223 39 -223 254v295q0 193 -227 199v139q184 0 289.5 -87t105.5 -240v-306q0 -97 59 -142.5t189 -47.5v-141q-122 0 -185 -44.5t-63 -148.5v-303q0 -153 -102.5 -238.5t-292.5 -87.5v140q111 2 169 48t58 148v297q0 114 55 174t168 80v12z" />
<glyph unicode="~" d="M338 713q-53 0 -116.5 -33.5t-117.5 -87.5v151q100 109 244 109q68 0 124.5 -14t145.5 -52q66 -28 115 -41.5t96 -13.5q54 0 118 32t118 89v-150q-102 -110 -244 -110q-72 0 -135 16.5t-135 48.5q-75 32 -120 44t-93 12z" />
<glyph unicode="&#xa1;" horiz-adv-x="547" d="M219 684h105l51 -1057h-207zM393 983q0 -135 -121 -135q-60 0 -90 35.5t-30 99.5q0 63 31.5 99t88.5 36q51 0 86 -32t35 -103z" />
<glyph unicode="&#xa2;" d="M971 240q-105 -54 -252 -60v-200h-133v206q-203 32 -299.5 168.5t-96.5 386.5q0 508 396 570v172h135v-164q75 -3 146 -19.5t120 -39.5l-49 -140q-133 51 -242 51q-172 0 -253 -105.5t-81 -322.5q0 -212 79.5 -313.5t246.5 -101.5q141 0 283 59v-147z" />
<glyph unicode="&#xa3;" d="M682 1481q190 0 360 -84l-61 -133q-154 77 -297 77q-123 0 -185.5 -62t-62.5 -202v-295h422v-127h-422v-221q0 -100 -32.5 -168t-106.5 -112h795v-154h-1029v141q205 47 205 291v223h-198v127h198v316q0 178 112 280.5t302 102.5z" />
<glyph unicode="&#xa4;" d="M184 723q0 122 74 229l-135 140l94 92l135 -133q104 73 234 73q127 0 229 -73l137 133l95 -92l-134 -138q74 -113 74 -231q0 -131 -74 -234l131 -135l-92 -92l-137 133q-102 -71 -229 -71q-134 0 -234 73l-135 -133l-92 92l133 136q-74 107 -74 231zM313 723 q0 -112 78.5 -192t194.5 -80t195 79.5t79 192.5q0 114 -80 195t-194 81q-116 0 -194.5 -82t-78.5 -194z" />
<glyph unicode="&#xa5;" d="M584 735l379 727h174l-416 -770h262v-127h-317v-170h317v-127h-317v-268h-164v268h-316v127h316v170h-316v127h256l-411 770h178z" />
<glyph unicode="&#xa6;" horiz-adv-x="1128" d="M494 1556h141v-776h-141v776zM494 281h141v-777h-141v777z" />
<glyph unicode="&#xa7;" horiz-adv-x="1057" d="M139 809q0 86 43 154.5t121 105.5q-74 40 -116 95.5t-42 140.5q0 121 103.5 190.5t300.5 69.5q94 0 173.5 -14.5t176.5 -53.5l-53 -131q-98 39 -165.5 52.5t-143.5 13.5q-116 0 -174 -29.5t-58 -93.5q0 -60 61.5 -102t215.5 -97q186 -68 261 -143.5t75 -182.5 q0 -90 -41 -160.5t-115 -111.5q153 -81 153 -227q0 -140 -117 -216.5t-329 -76.5q-218 0 -346 65v148q78 -37 175 -59.5t179 -22.5q134 0 204.5 38t70.5 109q0 46 -24 75t-78 58t-169 72q-142 52 -209 97t-100 102t-33 135zM285 829q0 -77 66 -129.5t233 -113.5l49 -19 q137 80 137 191q0 83 -73.5 139t-258.5 113q-68 -19 -110.5 -69t-42.5 -112z" />
<glyph unicode="&#xa8;" horiz-adv-x="1182" d="M309 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM690 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xa9;" horiz-adv-x="1704" d="M893 1059q-125 0 -192.5 -87t-67.5 -241q0 -168 63.5 -249t194.5 -81q86 0 211 45v-124q-48 -20 -98.5 -34t-120.5 -14q-194 0 -298 120.5t-104 336.5q0 209 110.5 332t301.5 123q128 0 246 -60l-58 -118q-108 51 -188 51zM100 731q0 200 100 375t275 276t377 101 q200 0 375 -100t276 -275t101 -377q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM205 731q0 -173 87 -323.5t237.5 -237t322.5 -86.5q174 0 323 87t236.5 235.5t87.5 324.5q0 174 -87 323t-235.5 236.5t-324.5 87.5q-174 0 -323 -87 t-236.5 -235.5t-87.5 -324.5z" />
<glyph unicode="&#xaa;" horiz-adv-x="725" d="M532 801l-24 84q-92 -97 -232 -97q-95 0 -150.5 49.5t-55.5 151.5t77 154.5t242 58.5l117 4v39q0 133 -148 133q-100 0 -204 -51l-43 96q114 56 247 56q130 0 198.5 -52.5t68.5 -173.5v-452h-93zM193 989q0 -100 112 -100q201 0 201 180v49l-98 -4q-112 -4 -163.5 -32.5 t-51.5 -92.5z" />
<glyph unicode="&#xab;" horiz-adv-x="1018" d="M82 551l342 407l119 -69l-289 -350l289 -351l-119 -71l-342 407v27zM477 551l344 407l117 -69l-287 -350l287 -351l-117 -71l-344 407v27z" />
<glyph unicode="&#xac;" d="M1065 791v-527h-137v389h-824v138h961z" />
<glyph unicode="&#xad;" horiz-adv-x="659" d="M84 473zM84 473v152h491v-152h-491z" />
<glyph unicode="&#xae;" horiz-adv-x="1704" d="M723 762h108q80 0 128.5 41.5t48.5 105.5q0 75 -43 107.5t-136 32.5h-106v-287zM1157 913q0 -80 -42.5 -141.5t-119.5 -91.5l238 -395h-168l-207 354h-135v-354h-148v891h261q166 0 243.5 -65t77.5 -198zM100 731q0 200 100 375t275 276t377 101q200 0 375 -100t276 -275 t101 -377q0 -197 -97 -370t-272 -277t-383 -104q-207 0 -382 103.5t-272.5 276.5t-97.5 371zM205 731q0 -173 87 -323.5t237.5 -237t322.5 -86.5q174 0 323 87t236.5 235.5t87.5 324.5q0 174 -87 323t-235.5 236.5t-324.5 87.5q-174 0 -323 -87t-236.5 -235.5t-87.5 -324.5z " />
<glyph unicode="&#xaf;" horiz-adv-x="1024" d="M1030 1556h-1036v127h1036v-127z" />
<glyph unicode="&#xb0;" horiz-adv-x="877" d="M127 1171q0 130 90.5 221t220.5 91t221 -90.5t91 -221.5q0 -84 -41 -155.5t-114 -113.5t-157 -42q-130 0 -220.5 90t-90.5 221zM242 1171q0 -82 58.5 -139t139.5 -57q80 0 137.5 56.5t57.5 139.5q0 84 -56.5 140.5t-138.5 56.5q-83 0 -140.5 -57t-57.5 -140z" />
<glyph unicode="&#xb1;" d="M104 1zM653 791h412v-138h-412v-426h-139v426h-410v138h410v428h139v-428zM104 1v138h961v-138h-961z" />
<glyph unicode="&#xb2;" horiz-adv-x="711" d="M653 586h-604v104l236 230q89 86 130 134.5t57.5 86.5t16.5 92q0 68 -40 102.5t-103 34.5q-52 0 -101 -19t-118 -69l-66 88q131 111 283 111q132 0 205.5 -65t73.5 -177q0 -80 -44.5 -155.5t-191.5 -213.5l-174 -165h440v-119z" />
<glyph unicode="&#xb3;" horiz-adv-x="711" d="M627 1255q0 -80 -41 -131.5t-109 -74.5q176 -47 176 -209q0 -128 -92 -199.5t-260 -71.5q-152 0 -268 56v123q147 -68 270 -68q211 0 211 162q0 145 -231 145h-117v107h119q103 0 152.5 39.5t49.5 107.5q0 61 -40 95t-107 34q-66 0 -122 -21.5t-112 -56.5l-69 90 q63 45 133 72t164 27q136 0 214.5 -59.5t78.5 -166.5z" />
<glyph unicode="&#xb4;" horiz-adv-x="1182" d="M393 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xb5;" horiz-adv-x="1268" d="M342 381q0 -262 254 -262q171 0 250.5 94.5t79.5 306.5v576h166v-1096h-136l-26 147h-10q-111 -167 -340 -167q-150 0 -238 92h-10q10 -84 10 -244v-320h-166v1588h166v-715z" />
<glyph unicode="&#xb6;" horiz-adv-x="1341" d="M1120 -260h-114v1712h-213v-1712h-115v819q-62 -18 -146 -18q-216 0 -317.5 125t-101.5 376q0 260 109 387t341 127h557v-1816z" />
<glyph unicode="&#xb7;" horiz-adv-x="545" d="M152 723q0 66 31 100.5t87 34.5q58 0 90.5 -34.5t32.5 -100.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5z" />
<glyph unicode="&#xb8;" horiz-adv-x="465" d="M436 -289q0 -97 -76.5 -150t-226.5 -53q-51 0 -96 9v106q45 -8 104 -8q79 0 119.5 20t40.5 74q0 43 -39.5 69.5t-148.5 43.5l88 178h110l-55 -115q180 -39 180 -174z" />
<glyph unicode="&#xb9;" horiz-adv-x="711" d="M338 1462h143v-876h-133v579q0 91 6 181q-22 -22 -49 -44.5t-162 -117.5l-67 96z" />
<glyph unicode="&#xba;" horiz-adv-x="768" d="M702 1135q0 -164 -85.5 -255.5t-235.5 -91.5q-146 0 -230.5 93t-84.5 254q0 163 84 253.5t235 90.5q152 0 234.5 -91t82.5 -253zM188 1135q0 -122 45.5 -183t149.5 -61q105 0 151 61t46 183q0 123 -46 182t-151 59q-103 0 -149 -59t-46 -182z" />
<glyph unicode="&#xbb;" horiz-adv-x="1018" d="M936 524l-344 -407l-117 71l287 351l-287 350l117 69l344 -407v-27zM541 524l-344 -407l-117 71l287 351l-287 350l117 69l344 -407v-27z" />
<glyph unicode="&#xbc;" horiz-adv-x="1597" d="M75 0zM1298 1462l-903 -1462h-143l903 1462h143zM337 1462h143v-876h-133v579q0 91 6 181q-22 -22 -49 -44.5t-162 -117.5l-67 96zM1489 203h-125v-202h-145v202h-402v101l408 579h139v-563h125v-117zM1219 320v195q0 134 6 209q-5 -12 -17 -31.5t-27 -42l-30 -45 t-26 -39.5l-168 -246h262z" />
<glyph unicode="&#xbd;" horiz-adv-x="1597" d="M46 0zM1230 1462l-903 -1462h-143l903 1462h143zM308 1462h143v-876h-133v579q0 91 6 181q-22 -22 -49 -44.5t-162 -117.5l-67 96zM1499 1h-604v104l236 230q89 86 130 134.5t57.5 86.5t16.5 92q0 68 -40 102.5t-103 34.5q-52 0 -101 -19t-118 -69l-66 88 q131 111 283 111q132 0 205.5 -65t73.5 -177q0 -80 -44.5 -155.5t-191.5 -213.5l-174 -165h440v-119z" />
<glyph unicode="&#xbe;" horiz-adv-x="1597" d="M26 0zM620 1255q0 -80 -41 -131.5t-109 -74.5q176 -47 176 -209q0 -128 -92 -199.5t-260 -71.5q-152 0 -268 56v123q147 -68 270 -68q211 0 211 162q0 145 -231 145h-117v107h119q103 0 152.5 39.5t49.5 107.5q0 61 -40 95t-107 34q-66 0 -122 -21.5t-112 -56.5l-69 90 q63 45 133 72t164 27q136 0 214.5 -59.5t78.5 -166.5zM1390 1462l-903 -1462h-143l903 1462h143zM1569 203h-125v-202h-145v202h-402v101l408 579h139v-563h125v-117zM1299 320v195q0 134 6 209q-5 -12 -17 -31.5t-27 -42l-30 -45t-26 -39.5l-168 -246h262z" />
<glyph unicode="&#xbf;" horiz-adv-x="879" d="M590 684v-51q0 -122 -37.5 -196t-134.5 -158q-121 -106 -151.5 -143.5t-43 -76t-12.5 -94.5q0 -100 66 -156.5t188 -56.5q80 0 155 19t173 67l59 -135q-197 -96 -395 -96q-190 0 -298 93t-108 263q0 70 17.5 122.5t49.5 97t76.5 85.5t98.5 88q101 88 133.5 146t32.5 151 v31h131zM639 983q0 -135 -121 -135q-59 0 -90 34.5t-31 100.5q0 64 33 99.5t88 35.5q51 0 86 -32t35 -103z" />
<glyph unicode="&#xc0;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM724 1579h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xc1;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM526 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xc2;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM303 1602q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186 h-115v23z" />
<glyph unicode="&#xc3;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM792 1581q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5 q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xc4;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM364 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5z M745 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xc5;" horiz-adv-x="1296" d="M0 0zM1120 0l-182 465h-586l-180 -465h-172l578 1468h143l575 -1468h-176zM885 618l-170 453q-33 86 -68 211q-22 -96 -63 -211l-172 -453h473zM870 1587q0 -98 -61.5 -157.5t-163.5 -59.5q-101 0 -161 58.5t-60 156.5t60.5 155.5t160.5 57.5q101 0 163 -59.5t62 -151.5z M762 1585q0 56 -33 86.5t-84 30.5t-84 -30.5t-33 -86.5t30 -86.5t87 -30.5q52 0 84.5 30.5t32.5 86.5z" />
<glyph unicode="&#xc6;" horiz-adv-x="1788" d="M1665 0h-750v465h-514l-227 -465h-176l698 1462h969v-151h-580v-471h541v-150h-541v-538h580v-152zM469 618h446v693h-118z" />
<glyph unicode="&#xc7;" horiz-adv-x="1292" d="M125 0zM827 1331q-241 0 -380.5 -160.5t-139.5 -439.5q0 -287 134.5 -443.5t383.5 -156.5q153 0 349 55v-149q-152 -57 -375 -57q-323 0 -498.5 196t-175.5 557q0 226 84.5 396t244 262t375.5 92q230 0 402 -84l-72 -146q-166 78 -332 78zM950 -289q0 -97 -76.5 -150 t-226.5 -53q-51 0 -96 9v106q45 -8 104 -8q79 0 119.5 20t40.5 74q0 43 -39.5 69.5t-148.5 43.5l88 178h110l-55 -115q180 -39 180 -174z" />
<glyph unicode="&#xc8;" horiz-adv-x="1139" d="M201 0zM1016 0h-815v1462h815v-151h-645v-471h606v-150h-606v-538h645v-152zM713 1579h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xc9;" horiz-adv-x="1139" d="M201 0zM1016 0h-815v1462h815v-151h-645v-471h606v-150h-606v-538h645v-152zM456 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xca;" horiz-adv-x="1139" d="M201 0zM1016 0h-815v1462h815v-151h-645v-471h606v-150h-606v-538h645v-152zM263 1602q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xcb;" horiz-adv-x="1139" d="M201 0zM1016 0h-815v1462h815v-151h-645v-471h606v-150h-606v-538h645v-152zM327 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM708 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5 t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xcc;" horiz-adv-x="571" d="M5 0zM201 0v1462h170v-1462h-170zM398 1579h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xcd;" horiz-adv-x="571" d="M179 0zM201 0v1462h170v-1462h-170zM179 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xce;" horiz-adv-x="571" d="M0 0zM201 0v1462h170v-1462h-170zM-57 1602q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xcf;" horiz-adv-x="571" d="M5 0zM201 0v1462h170v-1462h-170zM5 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM386 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xd0;" horiz-adv-x="1479" d="M1352 745q0 -362 -196.5 -553.5t-565.5 -191.5h-389v649h-154v150h154v663h434q337 0 527 -187.5t190 -529.5zM1171 739q0 576 -569 576h-231v-516h379v-150h-379v-502h190q610 0 610 592z" />
<glyph unicode="&#xd1;" horiz-adv-x="1544" d="M201 0zM1343 0h-194l-799 1227h-8q16 -216 16 -396v-831h-157v1462h192l797 -1222h8q-2 27 -9 173.5t-5 209.5v839h159v-1462zM935 1581q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41 t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xd2;" horiz-adv-x="1595" d="M125 0zM1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5zM907 1579h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xd3;" horiz-adv-x="1595" d="M125 0zM1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5zM659 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xd4;" horiz-adv-x="1595" d="M125 0zM1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5zM448 1602q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xd5;" horiz-adv-x="1595" d="M125 0zM1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5zM942 1581q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xd6;" horiz-adv-x="1595" d="M125 0zM1470 733q0 -351 -177.5 -552t-493.5 -201q-323 0 -498.5 197.5t-175.5 557.5q0 357 176 553.5t500 196.5q315 0 492 -200t177 -552zM305 733q0 -297 126.5 -450.5t367.5 -153.5q243 0 367 153t124 451q0 295 -123.5 447.5t-365.5 152.5q-243 0 -369.5 -153.5 t-126.5 -446.5zM522 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM903 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xd7;" d="M940 1176l96 -99l-352 -354l350 -352l-96 -99l-354 351l-348 -351l-101 99l350 352l-352 352l100 101l353 -355z" />
<glyph unicode="&#xd8;" horiz-adv-x="1595" d="M1470 733q0 -351 -177.5 -552t-493.5 -201q-235 0 -383 100l-101 -141l-120 79l108 154q-178 198 -178 563q0 357 176 553.5t500 196.5q209 0 366 -94l97 135l120 -80l-106 -148q192 -202 192 -565zM1290 733q0 272 -110 426l-672 -948q115 -82 291 -82q243 0 367 153 t124 451zM305 733q0 -262 101 -416l669 943q-106 73 -274 73q-243 0 -369.5 -153.5t-126.5 -446.5z" />
<glyph unicode="&#xd9;" horiz-adv-x="1491" d="M186 0zM1305 1462v-946q0 -250 -151 -393t-415 -143t-408.5 144t-144.5 396v942h170v-954q0 -183 100 -281t294 -98q185 0 285 98.5t100 282.5v952h170zM856 1579h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xda;" horiz-adv-x="1491" d="M186 0zM1305 1462v-946q0 -250 -151 -393t-415 -143t-408.5 144t-144.5 396v942h170v-954q0 -183 100 -281t294 -98q185 0 285 98.5t100 282.5v952h170zM600 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xdb;" horiz-adv-x="1491" d="M186 0zM1305 1462v-946q0 -250 -151 -393t-415 -143t-408.5 144t-144.5 396v942h170v-954q0 -183 100 -281t294 -98q185 0 285 98.5t100 282.5v952h170zM393 1602q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186 q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xdc;" horiz-adv-x="1491" d="M186 0zM1305 1462v-946q0 -250 -151 -393t-415 -143t-408.5 144t-144.5 396v942h170v-954q0 -183 100 -281t294 -98q185 0 285 98.5t100 282.5v952h170zM461 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5 t-26.5 74.5zM842 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xdd;" horiz-adv-x="1147" d="M0 0zM573 731l390 731h184l-488 -895v-567h-172v559l-487 903h186zM442 1604q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xde;" horiz-adv-x="1251" d="M1145 784q0 -227 -151.5 -346t-438.5 -119h-184v-319h-170v1462h170v-256h215q281 0 420 -103.5t139 -318.5zM371 465h168q226 0 327 71.5t101 235.5q0 149 -95 218t-297 69h-204v-594z" />
<glyph unicode="&#xdf;" horiz-adv-x="1274" d="M1049 1266q0 -135 -143 -250q-88 -70 -116 -103.5t-28 -66.5q0 -32 13.5 -53t49 -49.5t113.5 -79.5q140 -95 191 -173.5t51 -179.5q0 -160 -97 -245.5t-276 -85.5q-188 0 -295 69v154q63 -39 141 -62.5t150 -23.5q215 0 215 182q0 75 -41.5 128.5t-151.5 123.5 q-127 82 -175 143.5t-48 145.5q0 63 34.5 116t105.5 106q75 57 107 102t32 98q0 80 -68 122.5t-195 42.5q-276 0 -276 -223v-1204h-166v1202q0 178 110 271.5t332 93.5q206 0 318.5 -78.5t112.5 -222.5z" />
<glyph unicode="&#xe0;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM672 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xe1;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM436 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xe2;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM228 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xe3;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM721 1243q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99 q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xe4;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM279 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM660 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75 q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xe5;" horiz-adv-x="1139" d="M94 0zM850 0l-33 156h-8q-82 -103 -163.5 -139.5t-203.5 -36.5q-163 0 -255.5 84t-92.5 239q0 332 531 348l186 6v68q0 129 -55.5 190.5t-177.5 61.5q-137 0 -310 -84l-51 127q81 44 177.5 69t193.5 25q196 0 290.5 -87t94.5 -279v-748h-123zM475 117q155 0 243.5 85 t88.5 238v99l-166 -7q-198 -7 -285.5 -61.5t-87.5 -169.5q0 -90 54.5 -137t152.5 -47zM804 1458q0 -98 -61.5 -157.5t-163.5 -59.5q-101 0 -161 58.5t-60 156.5t60.5 155.5t160.5 57.5q101 0 163 -59.5t62 -151.5zM696 1456q0 56 -33 86.5t-84 30.5t-84 -30.5t-33 -86.5 t30 -86.5t87 -30.5q52 0 84.5 30.5t32.5 86.5z" />
<glyph unicode="&#xe6;" horiz-adv-x="1757" d="M94 303q0 161 124 250.5t378 97.5l184 6v68q0 129 -58 190.5t-177 61.5q-144 0 -307 -84l-52 127q74 41 173.5 67.5t197.5 26.5q130 0 212.5 -43.5t123.5 -138.5q53 88 138.5 136t195.5 48q192 0 308 -133.5t116 -355.5v-107h-701q8 -395 322 -395q91 0 169.5 17.5 t162.5 56.5v-148q-86 -38 -160.5 -54.5t-175.5 -16.5q-289 0 -414 233q-81 -127 -179.5 -180t-232.5 -53q-163 0 -255.5 85t-92.5 238zM268 301q0 -95 53.5 -139.5t141.5 -44.5q145 0 229 84.5t84 238.5v99l-158 -7q-186 -8 -268 -62.5t-82 -168.5zM1225 977 q-121 0 -190.5 -83t-80.5 -241h519q0 156 -64 240t-184 84z" />
<glyph unicode="&#xe7;" horiz-adv-x="975" d="M115 0zM614 -20q-238 0 -368.5 146.5t-130.5 414.5q0 275 132.5 425t377.5 150q79 0 158 -17t124 -40l-51 -141q-55 22 -120 36.5t-115 14.5q-334 0 -334 -426q0 -202 81.5 -310t241.5 -108q137 0 281 59v-147q-110 -57 -277 -57zM762 -289q0 -97 -76.5 -150t-226.5 -53 q-51 0 -96 9v106q45 -8 104 -8q79 0 119.5 20t40.5 74q0 43 -39.5 69.5t-148.5 43.5l88 178h110l-55 -115q180 -39 180 -174z" />
<glyph unicode="&#xe8;" horiz-adv-x="1149" d="M115 0zM639 -20q-243 0 -383.5 148t-140.5 411q0 265 130.5 421t350.5 156q206 0 326 -135.5t120 -357.5v-105h-755q5 -193 97.5 -293t260.5 -100q177 0 350 74v-148q-88 -38 -166.5 -54.5t-189.5 -16.5zM594 977q-132 0 -210.5 -86t-92.5 -238h573q0 157 -70 240.5 t-200 83.5zM711 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xe9;" horiz-adv-x="1149" d="M115 0zM639 -20q-243 0 -383.5 148t-140.5 411q0 265 130.5 421t350.5 156q206 0 326 -135.5t120 -357.5v-105h-755q5 -193 97.5 -293t260.5 -100q177 0 350 74v-148q-88 -38 -166.5 -54.5t-189.5 -16.5zM594 977q-132 0 -210.5 -86t-92.5 -238h573q0 157 -70 240.5 t-200 83.5zM471 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xea;" horiz-adv-x="1149" d="M115 0zM639 -20q-243 0 -383.5 148t-140.5 411q0 265 130.5 421t350.5 156q206 0 326 -135.5t120 -357.5v-105h-755q5 -193 97.5 -293t260.5 -100q177 0 350 74v-148q-88 -38 -166.5 -54.5t-189.5 -16.5zM594 977q-132 0 -210.5 -86t-92.5 -238h573q0 157 -70 240.5 t-200 83.5zM259 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xeb;" horiz-adv-x="1149" d="M115 0zM639 -20q-243 0 -383.5 148t-140.5 411q0 265 130.5 421t350.5 156q206 0 326 -135.5t120 -357.5v-105h-755q5 -193 97.5 -293t260.5 -100q177 0 350 74v-148q-88 -38 -166.5 -54.5t-189.5 -16.5zM594 977q-132 0 -210.5 -86t-92.5 -238h573q0 157 -70 240.5 t-200 83.5zM319 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM700 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xec;" horiz-adv-x="518" d="M0 0zM342 0h-166v1096h166v-1096zM355 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xed;" horiz-adv-x="518" d="M169 0zM342 0h-166v1096h166v-1096zM169 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xee;" horiz-adv-x="518" d="M0 0zM342 0h-166v1096h166v-1096zM-77 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xef;" horiz-adv-x="518" d="M0 0zM342 0h-166v1096h166v-1096zM-20 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM361 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xf0;" horiz-adv-x="1221" d="M1122 563q0 -281 -130.5 -432t-377.5 -151q-222 0 -361.5 134.5t-139.5 360.5q0 230 131.5 361t351.5 131q226 0 326 -121l8 4q-57 214 -262 405l-271 -155l-73 108l233 133q-92 62 -186 111l69 117q156 -73 258 -148l238 138l76 -107l-207 -119q152 -143 234.5 -342 t82.5 -428zM954 512q0 147 -90 232t-246 85q-337 0 -337 -360q0 -167 87.5 -258.5t249.5 -91.5q175 0 255.5 100.5t80.5 292.5z" />
<glyph unicode="&#xf1;" horiz-adv-x="1257" d="M176 0zM926 0v709q0 134 -61 200t-191 66q-172 0 -252 -93t-80 -307v-575h-166v1096h135l27 -150h8q51 81 143 125.5t205 44.5q198 0 298 -95.5t100 -305.5v-715h-166zM802 1243q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98 q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xf2;" horiz-adv-x="1237" d="M115 0zM1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z M742 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xf3;" horiz-adv-x="1237" d="M115 0zM1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z M479 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xf4;" horiz-adv-x="1237" d="M115 0zM1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z M282 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xf5;" horiz-adv-x="1237" d="M115 0zM1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z M773 1243q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#xf6;" horiz-adv-x="1237" d="M115 0zM1122 549q0 -268 -135 -418.5t-373 -150.5q-147 0 -261 69t-176 198t-62 302q0 268 134 417.5t372 149.5q230 0 365.5 -153t135.5 -414zM287 549q0 -210 84 -320t247 -110t247.5 109.5t84.5 320.5q0 209 -84.5 317.5t-249.5 108.5q-163 0 -246 -107t-83 -319z M336 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM717 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xf7;" d="M104 653v138h961v-138h-961zM471 373q0 60 29.5 90.5t83.5 30.5q52 0 81 -31.5t29 -89.5q0 -57 -29.5 -89t-80.5 -32q-52 0 -82.5 31.5t-30.5 89.5zM471 1071q0 60 29.5 90.5t83.5 30.5q52 0 81 -31.5t29 -89.5q0 -57 -29.5 -89t-80.5 -32q-52 0 -82.5 31.5t-30.5 89.5z " />
<glyph unicode="&#xf8;" horiz-adv-x="1237" d="M1122 549q0 -268 -135 -418.5t-373 -150.5q-154 0 -266 69l-84 -117l-114 78l94 131q-129 152 -129 408q0 268 134 417.5t372 149.5q154 0 270 -76l84 119l117 -76l-97 -133q127 -152 127 -401zM287 549q0 -171 53 -273l465 646q-75 53 -189 53q-163 0 -246 -107 t-83 -319zM950 549q0 164 -51 264l-465 -643q71 -51 184 -51q163 0 247.5 109.5t84.5 320.5z" />
<glyph unicode="&#xf9;" horiz-adv-x="1257" d="M164 0zM332 1096v-711q0 -134 61 -200t191 -66q172 0 251.5 94t79.5 307v576h166v-1096h-137l-24 147h-9q-51 -81 -141.5 -124t-206.5 -43q-200 0 -299.5 95t-99.5 304v717h168zM726 1241h-110q-65 52 -154 148t-129 159v21h203q32 -69 89 -159.5t101 -143.5v-25z" />
<glyph unicode="&#xfa;" horiz-adv-x="1257" d="M164 0zM332 1096v-711q0 -134 61 -200t191 -66q172 0 251.5 94t79.5 307v576h166v-1096h-137l-24 147h-9q-51 -81 -141.5 -124t-206.5 -43q-200 0 -299.5 95t-99.5 304v717h168zM506 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147h-111v25z" />
<glyph unicode="&#xfb;" horiz-adv-x="1257" d="M164 0zM332 1096v-711q0 -134 61 -200t191 -66q172 0 251.5 94t79.5 307v576h166v-1096h-137l-24 147h-9q-51 -81 -141.5 -124t-206.5 -43q-200 0 -299.5 95t-99.5 304v717h168zM286 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119 q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#xfc;" horiz-adv-x="1257" d="M164 0zM332 1096v-711q0 -134 61 -200t191 -66q172 0 251.5 94t79.5 307v576h166v-1096h-137l-24 147h-9q-51 -81 -141.5 -124t-206.5 -43q-200 0 -299.5 95t-99.5 304v717h168zM342 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5 q-37 0 -63.5 24.5t-26.5 74.5zM723 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#xfd;" horiz-adv-x="1032" d="M2 0zM2 1096h178l240 -625q79 -214 98 -309h8q13 51 54.5 174.5t271.5 759.5h178l-471 -1248q-70 -185 -163.5 -262.5t-229.5 -77.5q-76 0 -150 17v133q55 -12 123 -12q171 0 244 192l61 156zM411 1266q48 62 103.5 150t87.5 153h202v-21q-44 -65 -131 -160t-151 -147 h-111v25z" />
<glyph unicode="&#xfe;" horiz-adv-x="1255" d="M344 948q66 89 151 128.5t191 39.5q215 0 335 -150t120 -417q0 -268 -120.5 -418.5t-334.5 -150.5q-222 0 -344 161h-12l4 -34q8 -77 8 -140v-459h-166v2048h166v-466q0 -52 -6 -142h8zM664 975q-168 0 -244 -92t-78 -293v-41q0 -231 77 -330.5t247 -99.5q303 0 303 432 q0 215 -74 319.5t-231 104.5z" />
<glyph unicode="&#xff;" horiz-adv-x="1032" d="M2 0zM2 1096h178l240 -625q79 -214 98 -309h8q13 51 54.5 174.5t271.5 759.5h178l-471 -1248q-70 -185 -163.5 -262.5t-229.5 -77.5q-76 0 -150 17v133q55 -12 123 -12q171 0 244 192l61 156zM234 1393q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5 t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM615 1393q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#x131;" horiz-adv-x="518" d="M342 0h-166v1096h166v-1096z" />
<glyph unicode="&#x152;" horiz-adv-x="1890" d="M1767 0h-768q-102 -20 -194 -20q-327 0 -503.5 196.5t-176.5 558.5q0 360 174 555t494 195q102 0 192 -23h782v-151h-589v-471h551v-150h-551v-538h589v-152zM811 1333q-249 0 -377.5 -152.5t-128.5 -447.5q0 -297 128.5 -450.5t375.5 -153.5q112 0 199 33v1141 q-87 30 -197 30z" />
<glyph unicode="&#x153;" horiz-adv-x="1929" d="M1430 -20q-293 0 -418 235q-62 -116 -166.5 -175.5t-241.5 -59.5q-223 0 -357 152.5t-134 416.5q0 265 131 415t366 150q131 0 233.5 -59.5t164.5 -173.5q58 112 154 172.5t222 60.5q201 0 320 -132.5t119 -358.5v-105h-729q8 -393 338 -393q94 0 174.5 17.5t167.5 56.5 v-148q-88 -39 -164 -55t-180 -16zM287 549q0 -211 76 -320.5t243 -109.5q163 0 239.5 106.5t76.5 315.5q0 221 -77.5 327.5t-242.5 106.5q-166 0 -240.5 -108t-74.5 -318zM1382 975q-127 0 -199.5 -82t-84.5 -240h544q0 158 -66 240t-194 82z" />
<glyph unicode="&#x178;" horiz-adv-x="1147" d="M0 0zM573 731l390 731h184l-488 -895v-567h-172v559l-487 903h186zM294 1731q0 52 26.5 75t63.5 23q38 0 65.5 -23t27.5 -75q0 -50 -27.5 -74.5t-65.5 -24.5q-37 0 -63.5 24.5t-26.5 74.5zM675 1731q0 52 26.5 75t63.5 23t64.5 -23t27.5 -75q0 -50 -27.5 -74.5 t-64.5 -24.5t-63.5 24.5t-26.5 74.5z" />
<glyph unicode="&#x2c6;" horiz-adv-x="1212" d="M268 1264q127 136 178 200t74 105h166q22 -42 76.5 -108.5t179.5 -196.5v-23h-119q-88 55 -221 186q-136 -134 -219 -186h-115v23z" />
<glyph unicode="&#x2da;" horiz-adv-x="1182" d="M813 1458q0 -98 -61.5 -157.5t-163.5 -59.5q-101 0 -161 58.5t-60 156.5t60.5 155.5t160.5 57.5q101 0 163 -59.5t62 -151.5zM705 1456q0 56 -33 86.5t-84 30.5t-84 -30.5t-33 -86.5t30 -86.5t87 -30.5q52 0 84.5 30.5t32.5 86.5z" />
<glyph unicode="&#x2dc;" horiz-adv-x="1212" d="M788 1243q-43 0 -84 18.5t-80.5 41t-76 41t-70.5 18.5q-50 0 -75.5 -30t-39.5 -91h-98q13 121 70.5 189.5t148.5 68.5q46 0 89 -18.5t82 -41t75 -41t68 -18.5q49 0 73 29.5t39 91.5h99q-13 -121 -69.5 -189.5t-150.5 -68.5z" />
<glyph unicode="&#x2000;" horiz-adv-x="953" />
<glyph unicode="&#x2001;" horiz-adv-x="1907" />
<glyph unicode="&#x2002;" horiz-adv-x="953" />
<glyph unicode="&#x2003;" horiz-adv-x="1907" />
<glyph unicode="&#x2004;" horiz-adv-x="635" />
<glyph unicode="&#x2005;" horiz-adv-x="476" />
<glyph unicode="&#x2006;" horiz-adv-x="317" />
<glyph unicode="&#x2007;" horiz-adv-x="317" />
<glyph unicode="&#x2008;" horiz-adv-x="238" />
<glyph unicode="&#x2009;" horiz-adv-x="381" />
<glyph unicode="&#x200a;" horiz-adv-x="105" />
<glyph unicode="&#x2010;" horiz-adv-x="659" d="M84 473v152h491v-152h-491z" />
<glyph unicode="&#x2011;" horiz-adv-x="659" d="M84 473v152h491v-152h-491z" />
<glyph unicode="&#x2012;" horiz-adv-x="659" d="M84 473v152h491v-152h-491z" />
<glyph unicode="&#x2013;" horiz-adv-x="1024" d="M82 473v152h860v-152h-860z" />
<glyph unicode="&#x2014;" horiz-adv-x="2048" d="M82 473v152h1884v-152h-1884z" />
<glyph unicode="&#x2018;" horiz-adv-x="348" d="M37 961l-12 22q22 90 71 224t105 255h123q-66 -254 -103 -501h-184z" />
<glyph unicode="&#x2019;" horiz-adv-x="348" d="M309 1462l15 -22q-26 -100 -75 -232.5t-102 -246.5h-122q70 285 102 501h182z" />
<glyph unicode="&#x201a;" horiz-adv-x="502" d="M63 0zM350 238l15 -23q-26 -100 -75 -232.5t-102 -246.5h-125q27 104 59.5 257t45.5 245h182z" />
<glyph unicode="&#x201c;" horiz-adv-x="717" d="M406 961l-15 22q56 215 178 479h123q-30 -115 -59.5 -259.5t-42.5 -241.5h-184zM37 961l-12 22q22 90 71 224t105 255h123q-66 -254 -103 -501h-184z" />
<glyph unicode="&#x201d;" horiz-adv-x="717" d="M309 1462l15 -22q-26 -100 -75 -232.5t-102 -246.5h-122q70 285 102 501h182zM678 1462l14 -22q-24 -91 -72 -224t-104 -255h-125q26 100 59 254t46 247h182z" />
<glyph unicode="&#x201e;" horiz-adv-x="829" d="M25 0zM309 238l15 -22q-26 -100 -75 -232.5t-102 -246.5h-122q70 285 102 501h182zM678 238l14 -22q-24 -91 -72 -224t-104 -255h-125q26 100 59 254t46 247h182z" />
<glyph unicode="&#x2022;" horiz-adv-x="770" d="M164 748q0 121 56.5 184t164.5 63q105 0 163 -62t58 -185q0 -119 -57.5 -183.5t-163.5 -64.5q-107 0 -164 65.5t-57 182.5z" />
<glyph unicode="&#x2026;" horiz-adv-x="1606" d="M152 0zM152 106q0 67 30.5 101.5t87.5 34.5q58 0 90.5 -34.5t32.5 -101.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5zM682 106q0 67 30.5 101.5t87.5 34.5q58 0 90.5 -34.5t32.5 -101.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5zM1213 106 q0 67 30.5 101.5t87.5 34.5q58 0 90.5 -34.5t32.5 -101.5q0 -65 -33 -100t-90 -35q-51 0 -84.5 31.5t-33.5 103.5z" />
<glyph unicode="&#x202f;" horiz-adv-x="381" />
<glyph unicode="&#x2039;" horiz-adv-x="623" d="M82 551l342 407l119 -69l-289 -350l289 -351l-119 -71l-342 407v27z" />
<glyph unicode="&#x203a;" horiz-adv-x="623" d="M541 524l-344 -407l-117 71l287 351l-287 350l117 69l344 -407v-27z" />
<glyph unicode="&#x2044;" horiz-adv-x="266" d="M655 1462l-903 -1462h-143l903 1462h143z" />
<glyph unicode="&#x205f;" horiz-adv-x="476" />
<glyph unicode="&#x2074;" horiz-adv-x="711" d="M692 788h-125v-202h-145v202h-402v101l408 579h139v-563h125v-117zM422 905v195q0 134 6 209q-5 -12 -17 -31.5t-27 -42l-30 -45t-26 -39.5l-168 -246h262z" />
<glyph unicode="&#x20ac;" horiz-adv-x="1208" d="M795 1333q-319 0 -398 -403h510v-129h-524l-2 -57v-64l2 -45h463v-129h-447q37 -180 138.5 -278.5t271.5 -98.5q156 0 309 66v-150q-146 -65 -317 -65q-237 0 -381.5 134.5t-190.5 391.5h-166v129h152l-2 42v44l2 80h-152v129h164q39 261 185 407t383 146q201 0 366 -97 l-71 -139q-166 86 -295 86z" />
<glyph unicode="&#x2122;" horiz-adv-x="1589" d="M369 741h-123v615h-209v106h543v-106h-211v-615zM969 741l-201 559h-8l6 -129v-430h-119v721h187l196 -559l203 559h180v-721h-127v420l6 137h-8l-211 -557h-104z" />
<glyph unicode="&#x2212;" d="M104 653v138h961v-138h-961z" />
<glyph unicode="&#xe000;" horiz-adv-x="1095" d="M0 1095h1095v-1095h-1095v1095z" />
<glyph horiz-adv-x="1255" d="M0 0z" />
<hkern u1="&#x22;" u2="&#x178;" k="-20" />
<hkern u1="&#x22;" u2="&#x153;" k="123" />
<hkern u1="&#x22;" u2="&#xfc;" k="61" />
<hkern u1="&#x22;" u2="&#xfb;" k="61" />
<hkern u1="&#x22;" u2="&#xfa;" k="61" />
<hkern u1="&#x22;" u2="&#xf9;" k="61" />
<hkern u1="&#x22;" u2="&#xf8;" k="123" />
<hkern u1="&#x22;" u2="&#xf6;" k="123" />
<hkern u1="&#x22;" u2="&#xf5;" k="123" />
<hkern u1="&#x22;" u2="&#xf4;" k="123" />
<hkern u1="&#x22;" u2="&#xf3;" k="123" />
<hkern u1="&#x22;" u2="&#xf2;" k="123" />
<hkern u1="&#x22;" u2="&#xeb;" k="123" />
<hkern u1="&#x22;" u2="&#xea;" k="123" />
<hkern u1="&#x22;" u2="&#xe9;" k="123" />
<hkern u1="&#x22;" u2="&#xe8;" k="123" />
<hkern u1="&#x22;" u2="&#xe7;" k="123" />
<hkern u1="&#x22;" u2="&#xe6;" k="82" />
<hkern u1="&#x22;" u2="&#xe5;" k="82" />
<hkern u1="&#x22;" u2="&#xe4;" k="82" />
<hkern u1="&#x22;" u2="&#xe3;" k="82" />
<hkern u1="&#x22;" u2="&#xe2;" k="82" />
<hkern u1="&#x22;" u2="&#xe1;" k="82" />
<hkern u1="&#x22;" u2="&#xe0;" k="123" />
<hkern u1="&#x22;" u2="&#xdd;" k="-20" />
<hkern u1="&#x22;" u2="&#xc5;" k="143" />
<hkern u1="&#x22;" u2="&#xc4;" k="143" />
<hkern u1="&#x22;" u2="&#xc3;" k="143" />
<hkern u1="&#x22;" u2="&#xc2;" k="143" />
<hkern u1="&#x22;" u2="&#xc1;" k="143" />
<hkern u1="&#x22;" u2="&#xc0;" k="143" />
<hkern u1="&#x22;" u2="u" k="61" />
<hkern u1="&#x22;" u2="s" k="61" />
<hkern u1="&#x22;" u2="r" k="61" />
<hkern u1="&#x22;" u2="q" k="123" />
<hkern u1="&#x22;" u2="p" k="61" />
<hkern u1="&#x22;" u2="o" k="123" />
<hkern u1="&#x22;" u2="n" k="61" />
<hkern u1="&#x22;" u2="m" k="61" />
<hkern u1="&#x22;" u2="g" k="61" />
<hkern u1="&#x22;" u2="e" k="123" />
<hkern u1="&#x22;" u2="d" k="123" />
<hkern u1="&#x22;" u2="c" k="123" />
<hkern u1="&#x22;" u2="a" k="82" />
<hkern u1="&#x22;" u2="Y" k="-20" />
<hkern u1="&#x22;" u2="W" k="-41" />
<hkern u1="&#x22;" u2="V" k="-41" />
<hkern u1="&#x22;" u2="T" k="-41" />
<hkern u1="&#x22;" u2="A" k="143" />
<hkern u1="&#x27;" u2="&#x178;" k="-20" />
<hkern u1="&#x27;" u2="&#x153;" k="123" />
<hkern u1="&#x27;" u2="&#xfc;" k="61" />
<hkern u1="&#x27;" u2="&#xfb;" k="61" />
<hkern u1="&#x27;" u2="&#xfa;" k="61" />
<hkern u1="&#x27;" u2="&#xf9;" k="61" />
<hkern u1="&#x27;" u2="&#xf8;" k="123" />
<hkern u1="&#x27;" u2="&#xf6;" k="123" />
<hkern u1="&#x27;" u2="&#xf5;" k="123" />
<hkern u1="&#x27;" u2="&#xf4;" k="123" />
<hkern u1="&#x27;" u2="&#xf3;" k="123" />
<hkern u1="&#x27;" u2="&#xf2;" k="123" />
<hkern u1="&#x27;" u2="&#xeb;" k="123" />
<hkern u1="&#x27;" u2="&#xea;" k="123" />
<hkern u1="&#x27;" u2="&#xe9;" k="123" />
<hkern u1="&#x27;" u2="&#xe8;" k="123" />
<hkern u1="&#x27;" u2="&#xe7;" k="123" />
<hkern u1="&#x27;" u2="&#xe6;" k="82" />
<hkern u1="&#x27;" u2="&#xe5;" k="82" />
<hkern u1="&#x27;" u2="&#xe4;" k="82" />
<hkern u1="&#x27;" u2="&#xe3;" k="82" />
<hkern u1="&#x27;" u2="&#xe2;" k="82" />
<hkern u1="&#x27;" u2="&#xe1;" k="82" />
<hkern u1="&#x27;" u2="&#xe0;" k="123" />
<hkern u1="&#x27;" u2="&#xdd;" k="-20" />
<hkern u1="&#x27;" u2="&#xc5;" k="143" />
<hkern u1="&#x27;" u2="&#xc4;" k="143" />
<hkern u1="&#x27;" u2="&#xc3;" k="143" />
<hkern u1="&#x27;" u2="&#xc2;" k="143" />
<hkern u1="&#x27;" u2="&#xc1;" k="143" />
<hkern u1="&#x27;" u2="&#xc0;" k="143" />
<hkern u1="&#x27;" u2="u" k="61" />
<hkern u1="&#x27;" u2="s" k="61" />
<hkern u1="&#x27;" u2="r" k="61" />
<hkern u1="&#x27;" u2="q" k="123" />
<hkern u1="&#x27;" u2="p" k="61" />
<hkern u1="&#x27;" u2="o" k="123" />
<hkern u1="&#x27;" u2="n" k="61" />
<hkern u1="&#x27;" u2="m" k="61" />
<hkern u1="&#x27;" u2="g" k="61" />
<hkern u1="&#x27;" u2="e" k="123" />
<hkern u1="&#x27;" u2="d" k="123" />
<hkern u1="&#x27;" u2="c" k="123" />
<hkern u1="&#x27;" u2="a" k="82" />
<hkern u1="&#x27;" u2="Y" k="-20" />
<hkern u1="&#x27;" u2="W" k="-41" />
<hkern u1="&#x27;" u2="V" k="-41" />
<hkern u1="&#x27;" u2="T" k="-41" />
<hkern u1="&#x27;" u2="A" k="143" />
<hkern u1="&#x28;" u2="J" k="-184" />
<hkern u1="&#x2c;" u2="&#x178;" k="123" />
<hkern u1="&#x2c;" u2="&#x152;" k="102" />
<hkern u1="&#x2c;" u2="&#xdd;" k="123" />
<hkern u1="&#x2c;" u2="&#xdc;" k="41" />
<hkern u1="&#x2c;" u2="&#xdb;" k="41" />
<hkern u1="&#x2c;" u2="&#xda;" k="41" />
<hkern u1="&#x2c;" u2="&#xd9;" k="41" />
<hkern u1="&#x2c;" u2="&#xd8;" k="102" />
<hkern u1="&#x2c;" u2="&#xd6;" k="102" />
<hkern u1="&#x2c;" u2="&#xd5;" k="102" />
<hkern u1="&#x2c;" u2="&#xd4;" k="102" />
<hkern u1="&#x2c;" u2="&#xd3;" k="102" />
<hkern u1="&#x2c;" u2="&#xd2;" k="102" />
<hkern u1="&#x2c;" u2="&#xc7;" k="102" />
<hkern u1="&#x2c;" u2="Y" k="123" />
<hkern u1="&#x2c;" u2="W" k="123" />
<hkern u1="&#x2c;" u2="V" k="123" />
<hkern u1="&#x2c;" u2="U" k="41" />
<hkern u1="&#x2c;" u2="T" k="143" />
<hkern u1="&#x2c;" u2="Q" k="102" />
<hkern u1="&#x2c;" u2="O" k="102" />
<hkern u1="&#x2c;" u2="G" k="102" />
<hkern u1="&#x2c;" u2="C" k="102" />
<hkern u1="&#x2d;" u2="T" k="82" />
<hkern u1="&#x2e;" u2="&#x178;" k="123" />
<hkern u1="&#x2e;" u2="&#x152;" k="102" />
<hkern u1="&#x2e;" u2="&#xdd;" k="123" />
<hkern u1="&#x2e;" u2="&#xdc;" k="41" />
<hkern u1="&#x2e;" u2="&#xdb;" k="41" />
<hkern u1="&#x2e;" u2="&#xda;" k="41" />
<hkern u1="&#x2e;" u2="&#xd9;" k="41" />
<hkern u1="&#x2e;" u2="&#xd8;" k="102" />
<hkern u1="&#x2e;" u2="&#xd6;" k="102" />
<hkern u1="&#x2e;" u2="&#xd5;" k="102" />
<hkern u1="&#x2e;" u2="&#xd4;" k="102" />
<hkern u1="&#x2e;" u2="&#xd3;" k="102" />
<hkern u1="&#x2e;" u2="&#xd2;" k="102" />
<hkern u1="&#x2e;" u2="&#xc7;" k="102" />
<hkern u1="&#x2e;" u2="Y" k="123" />
<hkern u1="&#x2e;" u2="W" k="123" />
<hkern u1="&#x2e;" u2="V" k="123" />
<hkern u1="&#x2e;" u2="U" k="41" />
<hkern u1="&#x2e;" u2="T" k="143" />
<hkern u1="&#x2e;" u2="Q" k="102" />
<hkern u1="&#x2e;" u2="O" k="102" />
<hkern u1="&#x2e;" u2="G" k="102" />
<hkern u1="&#x2e;" u2="C" k="102" />
<hkern u1="A" u2="&#x201d;" k="143" />
<hkern u1="A" u2="&#x2019;" k="143" />
<hkern u1="A" u2="&#x178;" k="123" />
<hkern u1="A" u2="&#x152;" k="41" />
<hkern u1="A" u2="&#xdd;" k="123" />
<hkern u1="A" u2="&#xd8;" k="41" />
<hkern u1="A" u2="&#xd6;" k="41" />
<hkern u1="A" u2="&#xd5;" k="41" />
<hkern u1="A" u2="&#xd4;" k="41" />
<hkern u1="A" u2="&#xd3;" k="41" />
<hkern u1="A" u2="&#xd2;" k="41" />
<hkern u1="A" u2="&#xc7;" k="41" />
<hkern u1="A" u2="Y" k="123" />
<hkern u1="A" u2="W" k="82" />
<hkern u1="A" u2="V" k="82" />
<hkern u1="A" u2="T" k="143" />
<hkern u1="A" u2="Q" k="41" />
<hkern u1="A" u2="O" k="41" />
<hkern u1="A" u2="J" k="-266" />
<hkern u1="A" u2="G" k="41" />
<hkern u1="A" u2="C" k="41" />
<hkern u1="A" u2="&#x27;" k="143" />
<hkern u1="A" u2="&#x22;" k="143" />
<hkern u1="B" u2="&#x201e;" k="82" />
<hkern u1="B" u2="&#x201a;" k="82" />
<hkern u1="B" u2="&#x178;" k="20" />
<hkern u1="B" u2="&#xdd;" k="20" />
<hkern u1="B" u2="&#xc5;" k="41" />
<hkern u1="B" u2="&#xc4;" k="41" />
<hkern u1="B" u2="&#xc3;" k="41" />
<hkern u1="B" u2="&#xc2;" k="41" />
<hkern u1="B" u2="&#xc1;" k="41" />
<hkern u1="B" u2="&#xc0;" k="41" />
<hkern u1="B" u2="Z" k="20" />
<hkern u1="B" u2="Y" k="20" />
<hkern u1="B" u2="X" k="41" />
<hkern u1="B" u2="W" k="20" />
<hkern u1="B" u2="V" k="20" />
<hkern u1="B" u2="T" k="61" />
<hkern u1="B" u2="A" k="41" />
<hkern u1="B" u2="&#x2e;" k="82" />
<hkern u1="B" u2="&#x2c;" k="82" />
<hkern u1="C" u2="&#x152;" k="41" />
<hkern u1="C" u2="&#xd8;" k="41" />
<hkern u1="C" u2="&#xd6;" k="41" />
<hkern u1="C" u2="&#xd5;" k="41" />
<hkern u1="C" u2="&#xd4;" k="41" />
<hkern u1="C" u2="&#xd3;" k="41" />
<hkern u1="C" u2="&#xd2;" k="41" />
<hkern u1="C" u2="&#xc7;" k="41" />
<hkern u1="C" u2="Q" k="41" />
<hkern u1="C" u2="O" k="41" />
<hkern u1="C" u2="G" k="41" />
<hkern u1="C" u2="C" k="41" />
<hkern u1="D" u2="&#x201e;" k="82" />
<hkern u1="D" u2="&#x201a;" k="82" />
<hkern u1="D" u2="&#x178;" k="20" />
<hkern u1="D" u2="&#xdd;" k="20" />
<hkern u1="D" u2="&#xc5;" k="41" />
<hkern u1="D" u2="&#xc4;" k="41" />
<hkern u1="D" u2="&#xc3;" k="41" />
<hkern u1="D" u2="&#xc2;" k="41" />
<hkern u1="D" u2="&#xc1;" k="41" />
<hkern u1="D" u2="&#xc0;" k="41" />
<hkern u1="D" u2="Z" k="20" />
<hkern u1="D" u2="Y" k="20" />
<hkern u1="D" u2="X" k="41" />
<hkern u1="D" u2="W" k="20" />
<hkern u1="D" u2="V" k="20" />
<hkern u1="D" u2="T" k="61" />
<hkern u1="D" u2="A" k="41" />
<hkern u1="D" u2="&#x2e;" k="82" />
<hkern u1="D" u2="&#x2c;" k="82" />
<hkern u1="E" u2="J" k="-123" />
<hkern u1="F" u2="&#x201e;" k="123" />
<hkern u1="F" u2="&#x201a;" k="123" />
<hkern u1="F" u2="&#xc5;" k="41" />
<hkern u1="F" u2="&#xc4;" k="41" />
<hkern u1="F" u2="&#xc3;" k="41" />
<hkern u1="F" u2="&#xc2;" k="41" />
<hkern u1="F" u2="&#xc1;" k="41" />
<hkern u1="F" u2="&#xc0;" k="41" />
<hkern u1="F" u2="A" k="41" />
<hkern u1="F" u2="&#x3f;" k="-41" />
<hkern u1="F" u2="&#x2e;" k="123" />
<hkern u1="F" u2="&#x2c;" k="123" />
<hkern u1="K" u2="&#x152;" k="41" />
<hkern u1="K" u2="&#xd8;" k="41" />
<hkern u1="K" u2="&#xd6;" k="41" />
<hkern u1="K" u2="&#xd5;" k="41" />
<hkern u1="K" u2="&#xd4;" k="41" />
<hkern u1="K" u2="&#xd3;" k="41" />
<hkern u1="K" u2="&#xd2;" k="41" />
<hkern u1="K" u2="&#xc7;" k="41" />
<hkern u1="K" u2="Q" k="41" />
<hkern u1="K" u2="O" k="41" />
<hkern u1="K" u2="G" k="41" />
<hkern u1="K" u2="C" k="41" />
<hkern u1="L" u2="&#x201d;" k="164" />
<hkern u1="L" u2="&#x2019;" k="164" />
<hkern u1="L" u2="&#x178;" k="61" />
<hkern u1="L" u2="&#x152;" k="41" />
<hkern u1="L" u2="&#xdd;" k="61" />
<hkern u1="L" u2="&#xdc;" k="20" />
<hkern u1="L" u2="&#xdb;" k="20" />
<hkern u1="L" u2="&#xda;" k="20" />
<hkern u1="L" u2="&#xd9;" k="20" />
<hkern u1="L" u2="&#xd8;" k="41" />
<hkern u1="L" u2="&#xd6;" k="41" />
<hkern u1="L" u2="&#xd5;" k="41" />
<hkern u1="L" u2="&#xd4;" k="41" />
<hkern u1="L" u2="&#xd3;" k="41" />
<hkern u1="L" u2="&#xd2;" k="41" />
<hkern u1="L" u2="&#xc7;" k="41" />
<hkern u1="L" u2="Y" k="61" />
<hkern u1="L" u2="W" k="41" />
<hkern u1="L" u2="V" k="41" />
<hkern u1="L" u2="U" k="20" />
<hkern u1="L" u2="T" k="41" />
<hkern u1="L" u2="Q" k="41" />
<hkern u1="L" u2="O" k="41" />
<hkern u1="L" u2="G" k="41" />
<hkern u1="L" u2="C" k="41" />
<hkern u1="L" u2="&#x27;" k="164" />
<hkern u1="L" u2="&#x22;" k="164" />
<hkern u1="O" u2="&#x201e;" k="82" />
<hkern u1="O" u2="&#x201a;" k="82" />
<hkern u1="O" u2="&#x178;" k="20" />
<hkern u1="O" u2="&#xdd;" k="20" />
<hkern u1="O" u2="&#xc5;" k="41" />
<hkern u1="O" u2="&#xc4;" k="41" />
<hkern u1="O" u2="&#xc3;" k="41" />
<hkern u1="O" u2="&#xc2;" k="41" />
<hkern u1="O" u2="&#xc1;" k="41" />
<hkern u1="O" u2="&#xc0;" k="41" />
<hkern u1="O" u2="Z" k="20" />
<hkern u1="O" u2="Y" k="20" />
<hkern u1="O" u2="X" k="41" />
<hkern u1="O" u2="W" k="20" />
<hkern u1="O" u2="V" k="20" />
<hkern u1="O" u2="T" k="61" />
<hkern u1="O" u2="A" k="41" />
<hkern u1="O" u2="&#x2e;" k="82" />
<hkern u1="O" u2="&#x2c;" k="82" />
<hkern u1="P" u2="&#x201e;" k="266" />
<hkern u1="P" u2="&#x201a;" k="266" />
<hkern u1="P" u2="&#xc5;" k="102" />
<hkern u1="P" u2="&#xc4;" k="102" />
<hkern u1="P" u2="&#xc3;" k="102" />
<hkern u1="P" u2="&#xc2;" k="102" />
<hkern u1="P" u2="&#xc1;" k="102" />
<hkern u1="P" u2="&#xc0;" k="102" />
<hkern u1="P" u2="Z" k="20" />
<hkern u1="P" u2="X" k="41" />
<hkern u1="P" u2="A" k="102" />
<hkern u1="P" u2="&#x2e;" k="266" />
<hkern u1="P" u2="&#x2c;" k="266" />
<hkern u1="Q" u2="&#x201e;" k="82" />
<hkern u1="Q" u2="&#x201a;" k="82" />
<hkern u1="Q" u2="&#x178;" k="20" />
<hkern u1="Q" u2="&#xdd;" k="20" />
<hkern u1="Q" u2="&#xc5;" k="41" />
<hkern u1="Q" u2="&#xc4;" k="41" />
<hkern u1="Q" u2="&#xc3;" k="41" />
<hkern u1="Q" u2="&#xc2;" k="41" />
<hkern u1="Q" u2="&#xc1;" k="41" />
<hkern u1="Q" u2="&#xc0;" k="41" />
<hkern u1="Q" u2="Z" k="20" />
<hkern u1="Q" u2="Y" k="20" />
<hkern u1="Q" u2="X" k="41" />
<hkern u1="Q" u2="W" k="20" />
<hkern u1="Q" u2="V" k="20" />
<hkern u1="Q" u2="T" k="61" />
<hkern u1="Q" u2="A" k="41" />
<hkern u1="Q" u2="&#x2e;" k="82" />
<hkern u1="Q" u2="&#x2c;" k="82" />
<hkern u1="T" u2="&#x201e;" k="123" />
<hkern u1="T" u2="&#x201a;" k="123" />
<hkern u1="T" u2="&#x2014;" k="82" />
<hkern u1="T" u2="&#x2013;" k="82" />
<hkern u1="T" u2="&#x153;" k="143" />
<hkern u1="T" u2="&#x152;" k="41" />
<hkern u1="T" u2="&#xfd;" k="41" />
<hkern u1="T" u2="&#xfc;" k="102" />
<hkern u1="T" u2="&#xfb;" k="102" />
<hkern u1="T" u2="&#xfa;" k="102" />
<hkern u1="T" u2="&#xf9;" k="102" />
<hkern u1="T" u2="&#xf8;" k="143" />
<hkern u1="T" u2="&#xf6;" k="143" />
<hkern u1="T" u2="&#xf5;" k="143" />
<hkern u1="T" u2="&#xf4;" k="143" />
<hkern u1="T" u2="&#xf3;" k="143" />
<hkern u1="T" u2="&#xf2;" k="143" />
<hkern u1="T" u2="&#xeb;" k="143" />
<hkern u1="T" u2="&#xea;" k="143" />
<hkern u1="T" u2="&#xe9;" k="143" />
<hkern u1="T" u2="&#xe8;" k="143" />
<hkern u1="T" u2="&#xe7;" k="143" />
<hkern u1="T" u2="&#xe6;" k="164" />
<hkern u1="T" u2="&#xe5;" k="164" />
<hkern u1="T" u2="&#xe4;" k="164" />
<hkern u1="T" u2="&#xe3;" k="164" />
<hkern u1="T" u2="&#xe2;" k="164" />
<hkern u1="T" u2="&#xe1;" k="164" />
<hkern u1="T" u2="&#xe0;" k="143" />
<hkern u1="T" u2="&#xd8;" k="41" />
<hkern u1="T" u2="&#xd6;" k="41" />
<hkern u1="T" u2="&#xd5;" k="41" />
<hkern u1="T" u2="&#xd4;" k="41" />
<hkern u1="T" u2="&#xd3;" k="41" />
<hkern u1="T" u2="&#xd2;" k="41" />
<hkern u1="T" u2="&#xc7;" k="41" />
<hkern u1="T" u2="&#xc5;" k="143" />
<hkern u1="T" u2="&#xc4;" k="143" />
<hkern u1="T" u2="&#xc3;" k="143" />
<hkern u1="T" u2="&#xc2;" k="143" />
<hkern u1="T" u2="&#xc1;" k="143" />
<hkern u1="T" u2="&#xc0;" k="143" />
<hkern u1="T" u2="z" k="82" />
<hkern u1="T" u2="y" k="41" />
<hkern u1="T" u2="x" k="41" />
<hkern u1="T" u2="w" k="41" />
<hkern u1="T" u2="v" k="41" />
<hkern u1="T" u2="u" k="102" />
<hkern u1="T" u2="s" k="123" />
<hkern u1="T" u2="r" k="102" />
<hkern u1="T" u2="q" k="143" />
<hkern u1="T" u2="p" k="102" />
<hkern u1="T" u2="o" k="143" />
<hkern u1="T" u2="n" k="102" />
<hkern u1="T" u2="m" k="102" />
<hkern u1="T" u2="g" k="143" />
<hkern u1="T" u2="e" k="143" />
<hkern u1="T" u2="d" k="143" />
<hkern u1="T" u2="c" k="143" />
<hkern u1="T" u2="a" k="164" />
<hkern u1="T" u2="T" k="-41" />
<hkern u1="T" u2="Q" k="41" />
<hkern u1="T" u2="O" k="41" />
<hkern u1="T" u2="G" k="41" />
<hkern u1="T" u2="C" k="41" />
<hkern u1="T" u2="A" k="143" />
<hkern u1="T" u2="&#x3f;" k="-41" />
<hkern u1="T" u2="&#x2e;" k="123" />
<hkern u1="T" u2="&#x2d;" k="82" />
<hkern u1="T" u2="&#x2c;" k="123" />
<hkern u1="U" u2="&#x201e;" k="41" />
<hkern u1="U" u2="&#x201a;" k="41" />
<hkern u1="U" u2="&#xc5;" k="20" />
<hkern u1="U" u2="&#xc4;" k="20" />
<hkern u1="U" u2="&#xc3;" k="20" />
<hkern u1="U" u2="&#xc2;" k="20" />
<hkern u1="U" u2="&#xc1;" k="20" />
<hkern u1="U" u2="&#xc0;" k="20" />
<hkern u1="U" u2="A" k="20" />
<hkern u1="U" u2="&#x2e;" k="41" />
<hkern u1="U" u2="&#x2c;" k="41" />
<hkern u1="V" u2="&#x201e;" k="102" />
<hkern u1="V" u2="&#x201a;" k="102" />
<hkern u1="V" u2="&#x153;" k="41" />
<hkern u1="V" u2="&#x152;" k="20" />
<hkern u1="V" u2="&#xfc;" k="20" />
<hkern u1="V" u2="&#xfb;" k="20" />
<hkern u1="V" u2="&#xfa;" k="20" />
<hkern u1="V" u2="&#xf9;" k="20" />
<hkern u1="V" u2="&#xf8;" k="41" />
<hkern u1="V" u2="&#xf6;" k="41" />
<hkern u1="V" u2="&#xf5;" k="41" />
<hkern u1="V" u2="&#xf4;" k="41" />
<hkern u1="V" u2="&#xf3;" k="41" />
<hkern u1="V" u2="&#xf2;" k="41" />
<hkern u1="V" u2="&#xeb;" k="41" />
<hkern u1="V" u2="&#xea;" k="41" />
<hkern u1="V" u2="&#xe9;" k="41" />
<hkern u1="V" u2="&#xe8;" k="41" />
<hkern u1="V" u2="&#xe7;" k="41" />
<hkern u1="V" u2="&#xe6;" k="41" />
<hkern u1="V" u2="&#xe5;" k="41" />
<hkern u1="V" u2="&#xe4;" k="41" />
<hkern u1="V" u2="&#xe3;" k="41" />
<hkern u1="V" u2="&#xe2;" k="41" />
<hkern u1="V" u2="&#xe1;" k="41" />
<hkern u1="V" u2="&#xe0;" k="41" />
<hkern u1="V" u2="&#xd8;" k="20" />
<hkern u1="V" u2="&#xd6;" k="20" />
<hkern u1="V" u2="&#xd5;" k="20" />
<hkern u1="V" u2="&#xd4;" k="20" />
<hkern u1="V" u2="&#xd3;" k="20" />
<hkern u1="V" u2="&#xd2;" k="20" />
<hkern u1="V" u2="&#xc7;" k="20" />
<hkern u1="V" u2="&#xc5;" k="82" />
<hkern u1="V" u2="&#xc4;" k="82" />
<hkern u1="V" u2="&#xc3;" k="82" />
<hkern u1="V" u2="&#xc2;" k="82" />
<hkern u1="V" u2="&#xc1;" k="82" />
<hkern u1="V" u2="&#xc0;" k="82" />
<hkern u1="V" u2="u" k="20" />
<hkern u1="V" u2="s" k="20" />
<hkern u1="V" u2="r" k="20" />
<hkern u1="V" u2="q" k="41" />
<hkern u1="V" u2="p" k="20" />
<hkern u1="V" u2="o" k="41" />
<hkern u1="V" u2="n" k="20" />
<hkern u1="V" u2="m" k="20" />
<hkern u1="V" u2="g" k="20" />
<hkern u1="V" u2="e" k="41" />
<hkern u1="V" u2="d" k="41" />
<hkern u1="V" u2="c" k="41" />
<hkern u1="V" u2="a" k="41" />
<hkern u1="V" u2="Q" k="20" />
<hkern u1="V" u2="O" k="20" />
<hkern u1="V" u2="G" k="20" />
<hkern u1="V" u2="C" k="20" />
<hkern u1="V" u2="A" k="82" />
<hkern u1="V" u2="&#x3f;" k="-41" />
<hkern u1="V" u2="&#x2e;" k="102" />
<hkern u1="V" u2="&#x2c;" k="102" />
<hkern u1="W" u2="&#x201e;" k="102" />
<hkern u1="W" u2="&#x201a;" k="102" />
<hkern u1="W" u2="&#x153;" k="41" />
<hkern u1="W" u2="&#x152;" k="20" />
<hkern u1="W" u2="&#xfc;" k="20" />
<hkern u1="W" u2="&#xfb;" k="20" />
<hkern u1="W" u2="&#xfa;" k="20" />
<hkern u1="W" u2="&#xf9;" k="20" />
<hkern u1="W" u2="&#xf8;" k="41" />
<hkern u1="W" u2="&#xf6;" k="41" />
<hkern u1="W" u2="&#xf5;" k="41" />
<hkern u1="W" u2="&#xf4;" k="41" />
<hkern u1="W" u2="&#xf3;" k="41" />
<hkern u1="W" u2="&#xf2;" k="41" />
<hkern u1="W" u2="&#xeb;" k="41" />
<hkern u1="W" u2="&#xea;" k="41" />
<hkern u1="W" u2="&#xe9;" k="41" />
<hkern u1="W" u2="&#xe8;" k="41" />
<hkern u1="W" u2="&#xe7;" k="41" />
<hkern u1="W" u2="&#xe6;" k="41" />
<hkern u1="W" u2="&#xe5;" k="41" />
<hkern u1="W" u2="&#xe4;" k="41" />
<hkern u1="W" u2="&#xe3;" k="41" />
<hkern u1="W" u2="&#xe2;" k="41" />
<hkern u1="W" u2="&#xe1;" k="41" />
<hkern u1="W" u2="&#xe0;" k="41" />
<hkern u1="W" u2="&#xd8;" k="20" />
<hkern u1="W" u2="&#xd6;" k="20" />
<hkern u1="W" u2="&#xd5;" k="20" />
<hkern u1="W" u2="&#xd4;" k="20" />
<hkern u1="W" u2="&#xd3;" k="20" />
<hkern u1="W" u2="&#xd2;" k="20" />
<hkern u1="W" u2="&#xc7;" k="20" />
<hkern u1="W" u2="&#xc5;" k="82" />
<hkern u1="W" u2="&#xc4;" k="82" />
<hkern u1="W" u2="&#xc3;" k="82" />
<hkern u1="W" u2="&#xc2;" k="82" />
<hkern u1="W" u2="&#xc1;" k="82" />
<hkern u1="W" u2="&#xc0;" k="82" />
<hkern u1="W" u2="u" k="20" />
<hkern u1="W" u2="s" k="20" />
<hkern u1="W" u2="r" k="20" />
<hkern u1="W" u2="q" k="41" />
<hkern u1="W" u2="p" k="20" />
<hkern u1="W" u2="o" k="41" />
<hkern u1="W" u2="n" k="20" />
<hkern u1="W" u2="m" k="20" />
<hkern u1="W" u2="g" k="20" />
<hkern u1="W" u2="e" k="41" />
<hkern u1="W" u2="d" k="41" />
<hkern u1="W" u2="c" k="41" />
<hkern u1="W" u2="a" k="41" />
<hkern u1="W" u2="Q" k="20" />
<hkern u1="W" u2="O" k="20" />
<hkern u1="W" u2="G" k="20" />
<hkern u1="W" u2="C" k="20" />
<hkern u1="W" u2="A" k="82" />
<hkern u1="W" u2="&#x3f;" k="-41" />
<hkern u1="W" u2="&#x2e;" k="102" />
<hkern u1="W" u2="&#x2c;" k="102" />
<hkern u1="X" u2="&#x152;" k="41" />
<hkern u1="X" u2="&#xd8;" k="41" />
<hkern u1="X" u2="&#xd6;" k="41" />
<hkern u1="X" u2="&#xd5;" k="41" />
<hkern u1="X" u2="&#xd4;" k="41" />
<hkern u1="X" u2="&#xd3;" k="41" />
<hkern u1="X" u2="&#xd2;" k="41" />
<hkern u1="X" u2="&#xc7;" k="41" />
<hkern u1="X" u2="Q" k="41" />
<hkern u1="X" u2="O" k="41" />
<hkern u1="X" u2="G" k="41" />
<hkern u1="X" u2="C" k="41" />
<hkern u1="Y" u2="&#x201e;" k="123" />
<hkern u1="Y" u2="&#x201a;" k="123" />
<hkern u1="Y" u2="&#x153;" k="102" />
<hkern u1="Y" u2="&#x152;" k="41" />
<hkern u1="Y" u2="&#xfc;" k="61" />
<hkern u1="Y" u2="&#xfb;" k="61" />
<hkern u1="Y" u2="&#xfa;" k="61" />
<hkern u1="Y" u2="&#xf9;" k="61" />
<hkern u1="Y" u2="&#xf8;" k="102" />
<hkern u1="Y" u2="&#xf6;" k="102" />
<hkern u1="Y" u2="&#xf5;" k="102" />
<hkern u1="Y" u2="&#xf4;" k="102" />
<hkern u1="Y" u2="&#xf3;" k="102" />
<hkern u1="Y" u2="&#xf2;" k="102" />
<hkern u1="Y" u2="&#xeb;" k="102" />
<hkern u1="Y" u2="&#xea;" k="102" />
<hkern u1="Y" u2="&#xe9;" k="102" />
<hkern u1="Y" u2="&#xe8;" k="102" />
<hkern u1="Y" u2="&#xe7;" k="102" />
<hkern u1="Y" u2="&#xe6;" k="102" />
<hkern u1="Y" u2="&#xe5;" k="102" />
<hkern u1="Y" u2="&#xe4;" k="102" />
<hkern u1="Y" u2="&#xe3;" k="102" />
<hkern u1="Y" u2="&#xe2;" k="102" />
<hkern u1="Y" u2="&#xe1;" k="102" />
<hkern u1="Y" u2="&#xe0;" k="102" />
<hkern u1="Y" u2="&#xd8;" k="41" />
<hkern u1="Y" u2="&#xd6;" k="41" />
<hkern u1="Y" u2="&#xd5;" k="41" />
<hkern u1="Y" u2="&#xd4;" k="41" />
<hkern u1="Y" u2="&#xd3;" k="41" />
<hkern u1="Y" u2="&#xd2;" k="41" />
<hkern u1="Y" u2="&#xc7;" k="41" />
<hkern u1="Y" u2="&#xc5;" k="123" />
<hkern u1="Y" u2="&#xc4;" k="123" />
<hkern u1="Y" u2="&#xc3;" k="123" />
<hkern u1="Y" u2="&#xc2;" k="123" />
<hkern u1="Y" u2="&#xc1;" k="123" />
<hkern u1="Y" u2="&#xc0;" k="123" />
<hkern u1="Y" u2="z" k="41" />
<hkern u1="Y" u2="u" k="61" />
<hkern u1="Y" u2="s" k="82" />
<hkern u1="Y" u2="r" k="61" />
<hkern u1="Y" u2="q" k="102" />
<hkern u1="Y" u2="p" k="61" />
<hkern u1="Y" u2="o" k="102" />
<hkern u1="Y" u2="n" k="61" />
<hkern u1="Y" u2="m" k="61" />
<hkern u1="Y" u2="g" k="41" />
<hkern u1="Y" u2="e" k="102" />
<hkern u1="Y" u2="d" k="102" />
<hkern u1="Y" u2="c" k="102" />
<hkern u1="Y" u2="a" k="102" />
<hkern u1="Y" u2="Q" k="41" />
<hkern u1="Y" u2="O" k="41" />
<hkern u1="Y" u2="G" k="41" />
<hkern u1="Y" u2="C" k="41" />
<hkern u1="Y" u2="A" k="123" />
<hkern u1="Y" u2="&#x3f;" k="-41" />
<hkern u1="Y" u2="&#x2e;" k="123" />
<hkern u1="Y" u2="&#x2c;" k="123" />
<hkern u1="Z" u2="&#x152;" k="20" />
<hkern u1="Z" u2="&#xd8;" k="20" />
<hkern u1="Z" u2="&#xd6;" k="20" />
<hkern u1="Z" u2="&#xd5;" k="20" />
<hkern u1="Z" u2="&#xd4;" k="20" />
<hkern u1="Z" u2="&#xd3;" k="20" />
<hkern u1="Z" u2="&#xd2;" k="20" />
<hkern u1="Z" u2="&#xc7;" k="20" />
<hkern u1="Z" u2="Q" k="20" />
<hkern u1="Z" u2="O" k="20" />
<hkern u1="Z" u2="G" k="20" />
<hkern u1="Z" u2="C" k="20" />
<hkern u1="[" u2="J" k="-184" />
<hkern u1="a" u2="&#x201d;" k="20" />
<hkern u1="a" u2="&#x2019;" k="20" />
<hkern u1="a" u2="&#x27;" k="20" />
<hkern u1="a" u2="&#x22;" k="20" />
<hkern u1="b" u2="&#x201d;" k="20" />
<hkern u1="b" u2="&#x2019;" k="20" />
<hkern u1="b" u2="&#xfd;" k="41" />
<hkern u1="b" u2="z" k="20" />
<hkern u1="b" u2="y" k="41" />
<hkern u1="b" u2="x" k="41" />
<hkern u1="b" u2="w" k="41" />
<hkern u1="b" u2="v" k="41" />
<hkern u1="b" u2="&#x27;" k="20" />
<hkern u1="b" u2="&#x22;" k="20" />
<hkern u1="c" u2="&#x201d;" k="-41" />
<hkern u1="c" u2="&#x2019;" k="-41" />
<hkern u1="c" u2="&#x27;" k="-41" />
<hkern u1="c" u2="&#x22;" k="-41" />
<hkern u1="e" u2="&#x201d;" k="20" />
<hkern u1="e" u2="&#x2019;" k="20" />
<hkern u1="e" u2="&#xfd;" k="41" />
<hkern u1="e" u2="z" k="20" />
<hkern u1="e" u2="y" k="41" />
<hkern u1="e" u2="x" k="41" />
<hkern u1="e" u2="w" k="41" />
<hkern u1="e" u2="v" k="41" />
<hkern u1="e" u2="&#x27;" k="20" />
<hkern u1="e" u2="&#x22;" k="20" />
<hkern u1="f" u2="&#x201d;" k="-123" />
<hkern u1="f" u2="&#x2019;" k="-123" />
<hkern u1="f" u2="&#x27;" k="-123" />
<hkern u1="f" u2="&#x22;" k="-123" />
<hkern u1="h" u2="&#x201d;" k="20" />
<hkern u1="h" u2="&#x2019;" k="20" />
<hkern u1="h" u2="&#x27;" k="20" />
<hkern u1="h" u2="&#x22;" k="20" />
<hkern u1="k" u2="&#x153;" k="41" />
<hkern u1="k" u2="&#xf8;" k="41" />
<hkern u1="k" u2="&#xf6;" k="41" />
<hkern u1="k" u2="&#xf5;" k="41" />
<hkern u1="k" u2="&#xf4;" k="41" />
<hkern u1="k" u2="&#xf3;" k="41" />
<hkern u1="k" u2="&#xf2;" k="41" />
<hkern u1="k" u2="&#xeb;" k="41" />
<hkern u1="k" u2="&#xea;" k="41" />
<hkern u1="k" u2="&#xe9;" k="41" />
<hkern u1="k" u2="&#xe8;" k="41" />
<hkern u1="k" u2="&#xe7;" k="41" />
<hkern u1="k" u2="&#xe0;" k="41" />
<hkern u1="k" u2="q" k="41" />
<hkern u1="k" u2="o" k="41" />
<hkern u1="k" u2="e" k="41" />
<hkern u1="k" u2="d" k="41" />
<hkern u1="k" u2="c" k="41" />
<hkern u1="m" u2="&#x201d;" k="20" />
<hkern u1="m" u2="&#x2019;" k="20" />
<hkern u1="m" u2="&#x27;" k="20" />
<hkern u1="m" u2="&#x22;" k="20" />
<hkern u1="n" u2="&#x201d;" k="20" />
<hkern u1="n" u2="&#x2019;" k="20" />
<hkern u1="n" u2="&#x27;" k="20" />
<hkern u1="n" u2="&#x22;" k="20" />
<hkern u1="o" u2="&#x201d;" k="20" />
<hkern u1="o" u2="&#x2019;" k="20" />
<hkern u1="o" u2="&#xfd;" k="41" />
<hkern u1="o" u2="z" k="20" />
<hkern u1="o" u2="y" k="41" />
<hkern u1="o" u2="x" k="41" />
<hkern u1="o" u2="w" k="41" />
<hkern u1="o" u2="v" k="41" />
<hkern u1="o" u2="&#x27;" k="20" />
<hkern u1="o" u2="&#x22;" k="20" />
<hkern u1="p" u2="&#x201d;" k="20" />
<hkern u1="p" u2="&#x2019;" k="20" />
<hkern u1="p" u2="&#xfd;" k="41" />
<hkern u1="p" u2="z" k="20" />
<hkern u1="p" u2="y" k="41" />
<hkern u1="p" u2="x" k="41" />
<hkern u1="p" u2="w" k="41" />
<hkern u1="p" u2="v" k="41" />
<hkern u1="p" u2="&#x27;" k="20" />
<hkern u1="p" u2="&#x22;" k="20" />
<hkern u1="r" u2="&#x201d;" k="-82" />
<hkern u1="r" u2="&#x2019;" k="-82" />
<hkern u1="r" u2="&#x153;" k="41" />
<hkern u1="r" u2="&#xf8;" k="41" />
<hkern u1="r" u2="&#xf6;" k="41" />
<hkern u1="r" u2="&#xf5;" k="41" />
<hkern u1="r" u2="&#xf4;" k="41" />
<hkern u1="r" u2="&#xf3;" k="41" />
<hkern u1="r" u2="&#xf2;" k="41" />
<hkern u1="r" u2="&#xeb;" k="41" />
<hkern u1="r" u2="&#xea;" k="41" />
<hkern u1="r" u2="&#xe9;" k="41" />
<hkern u1="r" u2="&#xe8;" k="41" />
<hkern u1="r" u2="&#xe7;" k="41" />
<hkern u1="r" u2="&#xe6;" k="41" />
<hkern u1="r" u2="&#xe5;" k="41" />
<hkern u1="r" u2="&#xe4;" k="41" />
<hkern u1="r" u2="&#xe3;" k="41" />
<hkern u1="r" u2="&#xe2;" k="41" />
<hkern u1="r" u2="&#xe1;" k="41" />
<hkern u1="r" u2="&#xe0;" k="41" />
<hkern u1="r" u2="q" k="41" />
<hkern u1="r" u2="o" k="41" />
<hkern u1="r" u2="g" k="20" />
<hkern u1="r" u2="e" k="41" />
<hkern u1="r" u2="d" k="41" />
<hkern u1="r" u2="c" k="41" />
<hkern u1="r" u2="a" k="41" />
<hkern u1="r" u2="&#x27;" k="-82" />
<hkern u1="r" u2="&#x22;" k="-82" />
<hkern u1="t" u2="&#x201d;" k="-41" />
<hkern u1="t" u2="&#x2019;" k="-41" />
<hkern u1="t" u2="&#x27;" k="-41" />
<hkern u1="t" u2="&#x22;" k="-41" />
<hkern u1="v" u2="&#x201e;" k="82" />
<hkern u1="v" u2="&#x201d;" k="-82" />
<hkern u1="v" u2="&#x201a;" k="82" />
<hkern u1="v" u2="&#x2019;" k="-82" />
<hkern u1="v" u2="&#x3f;" k="-41" />
<hkern u1="v" u2="&#x2e;" k="82" />
<hkern u1="v" u2="&#x2c;" k="82" />
<hkern u1="v" u2="&#x27;" k="-82" />
<hkern u1="v" u2="&#x22;" k="-82" />
<hkern u1="w" u2="&#x201e;" k="82" />
<hkern u1="w" u2="&#x201d;" k="-82" />
<hkern u1="w" u2="&#x201a;" k="82" />
<hkern u1="w" u2="&#x2019;" k="-82" />
<hkern u1="w" u2="&#x3f;" k="-41" />
<hkern u1="w" u2="&#x2e;" k="82" />
<hkern u1="w" u2="&#x2c;" k="82" />
<hkern u1="w" u2="&#x27;" k="-82" />
<hkern u1="w" u2="&#x22;" k="-82" />
<hkern u1="x" u2="&#x153;" k="41" />
<hkern u1="x" u2="&#xf8;" k="41" />
<hkern u1="x" u2="&#xf6;" k="41" />
<hkern u1="x" u2="&#xf5;" k="41" />
<hkern u1="x" u2="&#xf4;" k="41" />
<hkern u1="x" u2="&#xf3;" k="41" />
<hkern u1="x" u2="&#xf2;" k="41" />
<hkern u1="x" u2="&#xeb;" k="41" />
<hkern u1="x" u2="&#xea;" k="41" />
<hkern u1="x" u2="&#xe9;" k="41" />
<hkern u1="x" u2="&#xe8;" k="41" />
<hkern u1="x" u2="&#xe7;" k="41" />
<hkern u1="x" u2="&#xe0;" k="41" />
<hkern u1="x" u2="q" k="41" />
<hkern u1="x" u2="o" k="41" />
<hkern u1="x" u2="e" k="41" />
<hkern u1="x" u2="d" k="41" />
<hkern u1="x" u2="c" k="41" />
<hkern u1="y" u2="&#x201e;" k="82" />
<hkern u1="y" u2="&#x201d;" k="-82" />
<hkern u1="y" u2="&#x201a;" k="82" />
<hkern u1="y" u2="&#x2019;" k="-82" />
<hkern u1="y" u2="&#x3f;" k="-41" />
<hkern u1="y" u2="&#x2e;" k="82" />
<hkern u1="y" u2="&#x2c;" k="82" />
<hkern u1="y" u2="&#x27;" k="-82" />
<hkern u1="y" u2="&#x22;" k="-82" />
<hkern u1="&#x7b;" u2="J" k="-184" />
<hkern u1="&#xc0;" u2="&#x201d;" k="143" />
<hkern u1="&#xc0;" u2="&#x2019;" k="143" />
<hkern u1="&#xc0;" u2="&#x178;" k="123" />
<hkern u1="&#xc0;" u2="&#x152;" k="41" />
<hkern u1="&#xc0;" u2="&#xdd;" k="123" />
<hkern u1="&#xc0;" u2="&#xd8;" k="41" />
<hkern u1="&#xc0;" u2="&#xd6;" k="41" />
<hkern u1="&#xc0;" u2="&#xd5;" k="41" />
<hkern u1="&#xc0;" u2="&#xd4;" k="41" />
<hkern u1="&#xc0;" u2="&#xd3;" k="41" />
<hkern u1="&#xc0;" u2="&#xd2;" k="41" />
<hkern u1="&#xc0;" u2="&#xc7;" k="41" />
<hkern u1="&#xc0;" u2="Y" k="123" />
<hkern u1="&#xc0;" u2="W" k="82" />
<hkern u1="&#xc0;" u2="V" k="82" />
<hkern u1="&#xc0;" u2="T" k="143" />
<hkern u1="&#xc0;" u2="Q" k="41" />
<hkern u1="&#xc0;" u2="O" k="41" />
<hkern u1="&#xc0;" u2="J" k="-266" />
<hkern u1="&#xc0;" u2="G" k="41" />
<hkern u1="&#xc0;" u2="C" k="41" />
<hkern u1="&#xc0;" u2="&#x27;" k="143" />
<hkern u1="&#xc0;" u2="&#x22;" k="143" />
<hkern u1="&#xc1;" u2="&#x201d;" k="143" />
<hkern u1="&#xc1;" u2="&#x2019;" k="143" />
<hkern u1="&#xc1;" u2="&#x178;" k="123" />
<hkern u1="&#xc1;" u2="&#x152;" k="41" />
<hkern u1="&#xc1;" u2="&#xdd;" k="123" />
<hkern u1="&#xc1;" u2="&#xd8;" k="41" />
<hkern u1="&#xc1;" u2="&#xd6;" k="41" />
<hkern u1="&#xc1;" u2="&#xd5;" k="41" />
<hkern u1="&#xc1;" u2="&#xd4;" k="41" />
<hkern u1="&#xc1;" u2="&#xd3;" k="41" />
<hkern u1="&#xc1;" u2="&#xd2;" k="41" />
<hkern u1="&#xc1;" u2="&#xc7;" k="41" />
<hkern u1="&#xc1;" u2="Y" k="123" />
<hkern u1="&#xc1;" u2="W" k="82" />
<hkern u1="&#xc1;" u2="V" k="82" />
<hkern u1="&#xc1;" u2="T" k="143" />
<hkern u1="&#xc1;" u2="Q" k="41" />
<hkern u1="&#xc1;" u2="O" k="41" />
<hkern u1="&#xc1;" u2="J" k="-266" />
<hkern u1="&#xc1;" u2="G" k="41" />
<hkern u1="&#xc1;" u2="C" k="41" />
<hkern u1="&#xc1;" u2="&#x27;" k="143" />
<hkern u1="&#xc1;" u2="&#x22;" k="143" />
<hkern u1="&#xc2;" u2="&#x201d;" k="143" />
<hkern u1="&#xc2;" u2="&#x2019;" k="143" />
<hkern u1="&#xc2;" u2="&#x178;" k="123" />
<hkern u1="&#xc2;" u2="&#x152;" k="41" />
<hkern u1="&#xc2;" u2="&#xdd;" k="123" />
<hkern u1="&#xc2;" u2="&#xd8;" k="41" />
<hkern u1="&#xc2;" u2="&#xd6;" k="41" />
<hkern u1="&#xc2;" u2="&#xd5;" k="41" />
<hkern u1="&#xc2;" u2="&#xd4;" k="41" />
<hkern u1="&#xc2;" u2="&#xd3;" k="41" />
<hkern u1="&#xc2;" u2="&#xd2;" k="41" />
<hkern u1="&#xc2;" u2="&#xc7;" k="41" />
<hkern u1="&#xc2;" u2="Y" k="123" />
<hkern u1="&#xc2;" u2="W" k="82" />
<hkern u1="&#xc2;" u2="V" k="82" />
<hkern u1="&#xc2;" u2="T" k="143" />
<hkern u1="&#xc2;" u2="Q" k="41" />
<hkern u1="&#xc2;" u2="O" k="41" />
<hkern u1="&#xc2;" u2="J" k="-266" />
<hkern u1="&#xc2;" u2="G" k="41" />
<hkern u1="&#xc2;" u2="C" k="41" />
<hkern u1="&#xc2;" u2="&#x27;" k="143" />
<hkern u1="&#xc2;" u2="&#x22;" k="143" />
<hkern u1="&#xc3;" u2="&#x201d;" k="143" />
<hkern u1="&#xc3;" u2="&#x2019;" k="143" />
<hkern u1="&#xc3;" u2="&#x178;" k="123" />
<hkern u1="&#xc3;" u2="&#x152;" k="41" />
<hkern u1="&#xc3;" u2="&#xdd;" k="123" />
<hkern u1="&#xc3;" u2="&#xd8;" k="41" />
<hkern u1="&#xc3;" u2="&#xd6;" k="41" />
<hkern u1="&#xc3;" u2="&#xd5;" k="41" />
<hkern u1="&#xc3;" u2="&#xd4;" k="41" />
<hkern u1="&#xc3;" u2="&#xd3;" k="41" />
<hkern u1="&#xc3;" u2="&#xd2;" k="41" />
<hkern u1="&#xc3;" u2="&#xc7;" k="41" />
<hkern u1="&#xc3;" u2="Y" k="123" />
<hkern u1="&#xc3;" u2="W" k="82" />
<hkern u1="&#xc3;" u2="V" k="82" />
<hkern u1="&#xc3;" u2="T" k="143" />
<hkern u1="&#xc3;" u2="Q" k="41" />
<hkern u1="&#xc3;" u2="O" k="41" />
<hkern u1="&#xc3;" u2="J" k="-266" />
<hkern u1="&#xc3;" u2="G" k="41" />
<hkern u1="&#xc3;" u2="C" k="41" />
<hkern u1="&#xc3;" u2="&#x27;" k="143" />
<hkern u1="&#xc3;" u2="&#x22;" k="143" />
<hkern u1="&#xc4;" u2="&#x201d;" k="143" />
<hkern u1="&#xc4;" u2="&#x2019;" k="143" />
<hkern u1="&#xc4;" u2="&#x178;" k="123" />
<hkern u1="&#xc4;" u2="&#x152;" k="41" />
<hkern u1="&#xc4;" u2="&#xdd;" k="123" />
<hkern u1="&#xc4;" u2="&#xd8;" k="41" />
<hkern u1="&#xc4;" u2="&#xd6;" k="41" />
<hkern u1="&#xc4;" u2="&#xd5;" k="41" />
<hkern u1="&#xc4;" u2="&#xd4;" k="41" />
<hkern u1="&#xc4;" u2="&#xd3;" k="41" />
<hkern u1="&#xc4;" u2="&#xd2;" k="41" />
<hkern u1="&#xc4;" u2="&#xc7;" k="41" />
<hkern u1="&#xc4;" u2="Y" k="123" />
<hkern u1="&#xc4;" u2="W" k="82" />
<hkern u1="&#xc4;" u2="V" k="82" />
<hkern u1="&#xc4;" u2="T" k="143" />
<hkern u1="&#xc4;" u2="Q" k="41" />
<hkern u1="&#xc4;" u2="O" k="41" />
<hkern u1="&#xc4;" u2="J" k="-266" />
<hkern u1="&#xc4;" u2="G" k="41" />
<hkern u1="&#xc4;" u2="C" k="41" />
<hkern u1="&#xc4;" u2="&#x27;" k="143" />
<hkern u1="&#xc4;" u2="&#x22;" k="143" />
<hkern u1="&#xc5;" u2="&#x201d;" k="143" />
<hkern u1="&#xc5;" u2="&#x2019;" k="143" />
<hkern u1="&#xc5;" u2="&#x178;" k="123" />
<hkern u1="&#xc5;" u2="&#x152;" k="41" />
<hkern u1="&#xc5;" u2="&#xdd;" k="123" />
<hkern u1="&#xc5;" u2="&#xd8;" k="41" />
<hkern u1="&#xc5;" u2="&#xd6;" k="41" />
<hkern u1="&#xc5;" u2="&#xd5;" k="41" />
<hkern u1="&#xc5;" u2="&#xd4;" k="41" />
<hkern u1="&#xc5;" u2="&#xd3;" k="41" />
<hkern u1="&#xc5;" u2="&#xd2;" k="41" />
<hkern u1="&#xc5;" u2="&#xc7;" k="41" />
<hkern u1="&#xc5;" u2="Y" k="123" />
<hkern u1="&#xc5;" u2="W" k="82" />
<hkern u1="&#xc5;" u2="V" k="82" />
<hkern u1="&#xc5;" u2="T" k="143" />
<hkern u1="&#xc5;" u2="Q" k="41" />
<hkern u1="&#xc5;" u2="O" k="41" />
<hkern u1="&#xc5;" u2="J" k="-266" />
<hkern u1="&#xc5;" u2="G" k="41" />
<hkern u1="&#xc5;" u2="C" k="41" />
<hkern u1="&#xc5;" u2="&#x27;" k="143" />
<hkern u1="&#xc5;" u2="&#x22;" k="143" />
<hkern u1="&#xc6;" u2="J" k="-123" />
<hkern u1="&#xc7;" u2="&#x152;" k="41" />
<hkern u1="&#xc7;" u2="&#xd8;" k="41" />
<hkern u1="&#xc7;" u2="&#xd6;" k="41" />
<hkern u1="&#xc7;" u2="&#xd5;" k="41" />
<hkern u1="&#xc7;" u2="&#xd4;" k="41" />
<hkern u1="&#xc7;" u2="&#xd3;" k="41" />
<hkern u1="&#xc7;" u2="&#xd2;" k="41" />
<hkern u1="&#xc7;" u2="&#xc7;" k="41" />
<hkern u1="&#xc7;" u2="Q" k="41" />
<hkern u1="&#xc7;" u2="O" k="41" />
<hkern u1="&#xc7;" u2="G" k="41" />
<hkern u1="&#xc7;" u2="C" k="41" />
<hkern u1="&#xc8;" u2="J" k="-123" />
<hkern u1="&#xc9;" u2="J" k="-123" />
<hkern u1="&#xca;" u2="J" k="-123" />
<hkern u1="&#xcb;" u2="J" k="-123" />
<hkern u1="&#xd0;" u2="&#x201e;" k="82" />
<hkern u1="&#xd0;" u2="&#x201a;" k="82" />
<hkern u1="&#xd0;" u2="&#x178;" k="20" />
<hkern u1="&#xd0;" u2="&#xdd;" k="20" />
<hkern u1="&#xd0;" u2="&#xc5;" k="41" />
<hkern u1="&#xd0;" u2="&#xc4;" k="41" />
<hkern u1="&#xd0;" u2="&#xc3;" k="41" />
<hkern u1="&#xd0;" u2="&#xc2;" k="41" />
<hkern u1="&#xd0;" u2="&#xc1;" k="41" />
<hkern u1="&#xd0;" u2="&#xc0;" k="41" />
<hkern u1="&#xd0;" u2="Z" k="20" />
<hkern u1="&#xd0;" u2="Y" k="20" />
<hkern u1="&#xd0;" u2="X" k="41" />
<hkern u1="&#xd0;" u2="W" k="20" />
<hkern u1="&#xd0;" u2="V" k="20" />
<hkern u1="&#xd0;" u2="T" k="61" />
<hkern u1="&#xd0;" u2="A" k="41" />
<hkern u1="&#xd0;" u2="&#x2e;" k="82" />
<hkern u1="&#xd0;" u2="&#x2c;" k="82" />
<hkern u1="&#xd2;" u2="&#x201e;" k="82" />
<hkern u1="&#xd2;" u2="&#x201a;" k="82" />
<hkern u1="&#xd2;" u2="&#x178;" k="20" />
<hkern u1="&#xd2;" u2="&#xdd;" k="20" />
<hkern u1="&#xd2;" u2="&#xc5;" k="41" />
<hkern u1="&#xd2;" u2="&#xc4;" k="41" />
<hkern u1="&#xd2;" u2="&#xc3;" k="41" />
<hkern u1="&#xd2;" u2="&#xc2;" k="41" />
<hkern u1="&#xd2;" u2="&#xc1;" k="41" />
<hkern u1="&#xd2;" u2="&#xc0;" k="41" />
<hkern u1="&#xd2;" u2="Z" k="20" />
<hkern u1="&#xd2;" u2="Y" k="20" />
<hkern u1="&#xd2;" u2="X" k="41" />
<hkern u1="&#xd2;" u2="W" k="20" />
<hkern u1="&#xd2;" u2="V" k="20" />
<hkern u1="&#xd2;" u2="T" k="61" />
<hkern u1="&#xd2;" u2="A" k="41" />
<hkern u1="&#xd2;" u2="&#x2e;" k="82" />
<hkern u1="&#xd2;" u2="&#x2c;" k="82" />
<hkern u1="&#xd3;" u2="&#x201e;" k="82" />
<hkern u1="&#xd3;" u2="&#x201a;" k="82" />
<hkern u1="&#xd3;" u2="&#x178;" k="20" />
<hkern u1="&#xd3;" u2="&#xdd;" k="20" />
<hkern u1="&#xd3;" u2="&#xc5;" k="41" />
<hkern u1="&#xd3;" u2="&#xc4;" k="41" />
<hkern u1="&#xd3;" u2="&#xc3;" k="41" />
<hkern u1="&#xd3;" u2="&#xc2;" k="41" />
<hkern u1="&#xd3;" u2="&#xc1;" k="41" />
<hkern u1="&#xd3;" u2="&#xc0;" k="41" />
<hkern u1="&#xd3;" u2="Z" k="20" />
<hkern u1="&#xd3;" u2="Y" k="20" />
<hkern u1="&#xd3;" u2="X" k="41" />
<hkern u1="&#xd3;" u2="W" k="20" />
<hkern u1="&#xd3;" u2="V" k="20" />
<hkern u1="&#xd3;" u2="T" k="61" />
<hkern u1="&#xd3;" u2="A" k="41" />
<hkern u1="&#xd3;" u2="&#x2e;" k="82" />
<hkern u1="&#xd3;" u2="&#x2c;" k="82" />
<hkern u1="&#xd4;" u2="&#x201e;" k="82" />
<hkern u1="&#xd4;" u2="&#x201a;" k="82" />
<hkern u1="&#xd4;" u2="&#x178;" k="20" />
<hkern u1="&#xd4;" u2="&#xdd;" k="20" />
<hkern u1="&#xd4;" u2="&#xc5;" k="41" />
<hkern u1="&#xd4;" u2="&#xc4;" k="41" />
<hkern u1="&#xd4;" u2="&#xc3;" k="41" />
<hkern u1="&#xd4;" u2="&#xc2;" k="41" />
<hkern u1="&#xd4;" u2="&#xc1;" k="41" />
<hkern u1="&#xd4;" u2="&#xc0;" k="41" />
<hkern u1="&#xd4;" u2="Z" k="20" />
<hkern u1="&#xd4;" u2="Y" k="20" />
<hkern u1="&#xd4;" u2="X" k="41" />
<hkern u1="&#xd4;" u2="W" k="20" />
<hkern u1="&#xd4;" u2="V" k="20" />
<hkern u1="&#xd4;" u2="T" k="61" />
<hkern u1="&#xd4;" u2="A" k="41" />
<hkern u1="&#xd4;" u2="&#x2e;" k="82" />
<hkern u1="&#xd4;" u2="&#x2c;" k="82" />
<hkern u1="&#xd5;" u2="&#x201e;" k="82" />
<hkern u1="&#xd5;" u2="&#x201a;" k="82" />
<hkern u1="&#xd5;" u2="&#x178;" k="20" />
<hkern u1="&#xd5;" u2="&#xdd;" k="20" />
<hkern u1="&#xd5;" u2="&#xc5;" k="41" />
<hkern u1="&#xd5;" u2="&#xc4;" k="41" />
<hkern u1="&#xd5;" u2="&#xc3;" k="41" />
<hkern u1="&#xd5;" u2="&#xc2;" k="41" />
<hkern u1="&#xd5;" u2="&#xc1;" k="41" />
<hkern u1="&#xd5;" u2="&#xc0;" k="41" />
<hkern u1="&#xd5;" u2="Z" k="20" />
<hkern u1="&#xd5;" u2="Y" k="20" />
<hkern u1="&#xd5;" u2="X" k="41" />
<hkern u1="&#xd5;" u2="W" k="20" />
<hkern u1="&#xd5;" u2="V" k="20" />
<hkern u1="&#xd5;" u2="T" k="61" />
<hkern u1="&#xd5;" u2="A" k="41" />
<hkern u1="&#xd5;" u2="&#x2e;" k="82" />
<hkern u1="&#xd5;" u2="&#x2c;" k="82" />
<hkern u1="&#xd6;" u2="&#x201e;" k="82" />
<hkern u1="&#xd6;" u2="&#x201a;" k="82" />
<hkern u1="&#xd6;" u2="&#x178;" k="20" />
<hkern u1="&#xd6;" u2="&#xdd;" k="20" />
<hkern u1="&#xd6;" u2="&#xc5;" k="41" />
<hkern u1="&#xd6;" u2="&#xc4;" k="41" />
<hkern u1="&#xd6;" u2="&#xc3;" k="41" />
<hkern u1="&#xd6;" u2="&#xc2;" k="41" />
<hkern u1="&#xd6;" u2="&#xc1;" k="41" />
<hkern u1="&#xd6;" u2="&#xc0;" k="41" />
<hkern u1="&#xd6;" u2="Z" k="20" />
<hkern u1="&#xd6;" u2="Y" k="20" />
<hkern u1="&#xd6;" u2="X" k="41" />
<hkern u1="&#xd6;" u2="W" k="20" />
<hkern u1="&#xd6;" u2="V" k="20" />
<hkern u1="&#xd6;" u2="T" k="61" />
<hkern u1="&#xd6;" u2="A" k="41" />
<hkern u1="&#xd6;" u2="&#x2e;" k="82" />
<hkern u1="&#xd6;" u2="&#x2c;" k="82" />
<hkern u1="&#xd8;" u2="&#x201e;" k="82" />
<hkern u1="&#xd8;" u2="&#x201a;" k="82" />
<hkern u1="&#xd8;" u2="&#x178;" k="20" />
<hkern u1="&#xd8;" u2="&#xdd;" k="20" />
<hkern u1="&#xd8;" u2="&#xc5;" k="41" />
<hkern u1="&#xd8;" u2="&#xc4;" k="41" />
<hkern u1="&#xd8;" u2="&#xc3;" k="41" />
<hkern u1="&#xd8;" u2="&#xc2;" k="41" />
<hkern u1="&#xd8;" u2="&#xc1;" k="41" />
<hkern u1="&#xd8;" u2="&#xc0;" k="41" />
<hkern u1="&#xd8;" u2="Z" k="20" />
<hkern u1="&#xd8;" u2="Y" k="20" />
<hkern u1="&#xd8;" u2="X" k="41" />
<hkern u1="&#xd8;" u2="W" k="20" />
<hkern u1="&#xd8;" u2="V" k="20" />
<hkern u1="&#xd8;" u2="T" k="61" />
<hkern u1="&#xd8;" u2="A" k="41" />
<hkern u1="&#xd8;" u2="&#x2e;" k="82" />
<hkern u1="&#xd8;" u2="&#x2c;" k="82" />
<hkern u1="&#xd9;" u2="&#x201e;" k="41" />
<hkern u1="&#xd9;" u2="&#x201a;" k="41" />
<hkern u1="&#xd9;" u2="&#xc5;" k="20" />
<hkern u1="&#xd9;" u2="&#xc4;" k="20" />
<hkern u1="&#xd9;" u2="&#xc3;" k="20" />
<hkern u1="&#xd9;" u2="&#xc2;" k="20" />
<hkern u1="&#xd9;" u2="&#xc1;" k="20" />
<hkern u1="&#xd9;" u2="&#xc0;" k="20" />
<hkern u1="&#xd9;" u2="A" k="20" />
<hkern u1="&#xd9;" u2="&#x2e;" k="41" />
<hkern u1="&#xd9;" u2="&#x2c;" k="41" />
<hkern u1="&#xda;" u2="&#x201e;" k="41" />
<hkern u1="&#xda;" u2="&#x201a;" k="41" />
<hkern u1="&#xda;" u2="&#xc5;" k="20" />
<hkern u1="&#xda;" u2="&#xc4;" k="20" />
<hkern u1="&#xda;" u2="&#xc3;" k="20" />
<hkern u1="&#xda;" u2="&#xc2;" k="20" />
<hkern u1="&#xda;" u2="&#xc1;" k="20" />
<hkern u1="&#xda;" u2="&#xc0;" k="20" />
<hkern u1="&#xda;" u2="A" k="20" />
<hkern u1="&#xda;" u2="&#x2e;" k="41" />
<hkern u1="&#xda;" u2="&#x2c;" k="41" />
<hkern u1="&#xdb;" u2="&#x201e;" k="41" />
<hkern u1="&#xdb;" u2="&#x201a;" k="41" />
<hkern u1="&#xdb;" u2="&#xc5;" k="20" />
<hkern u1="&#xdb;" u2="&#xc4;" k="20" />
<hkern u1="&#xdb;" u2="&#xc3;" k="20" />
<hkern u1="&#xdb;" u2="&#xc2;" k="20" />
<hkern u1="&#xdb;" u2="&#xc1;" k="20" />
<hkern u1="&#xdb;" u2="&#xc0;" k="20" />
<hkern u1="&#xdb;" u2="A" k="20" />
<hkern u1="&#xdb;" u2="&#x2e;" k="41" />
<hkern u1="&#xdb;" u2="&#x2c;" k="41" />
<hkern u1="&#xdc;" u2="&#x201e;" k="41" />
<hkern u1="&#xdc;" u2="&#x201a;" k="41" />
<hkern u1="&#xdc;" u2="&#xc5;" k="20" />
<hkern u1="&#xdc;" u2="&#xc4;" k="20" />
<hkern u1="&#xdc;" u2="&#xc3;" k="20" />
<hkern u1="&#xdc;" u2="&#xc2;" k="20" />
<hkern u1="&#xdc;" u2="&#xc1;" k="20" />
<hkern u1="&#xdc;" u2="&#xc0;" k="20" />
<hkern u1="&#xdc;" u2="A" k="20" />
<hkern u1="&#xdc;" u2="&#x2e;" k="41" />
<hkern u1="&#xdc;" u2="&#x2c;" k="41" />
<hkern u1="&#xdd;" u2="&#x201e;" k="123" />
<hkern u1="&#xdd;" u2="&#x201a;" k="123" />
<hkern u1="&#xdd;" u2="&#x153;" k="102" />
<hkern u1="&#xdd;" u2="&#x152;" k="41" />
<hkern u1="&#xdd;" u2="&#xfc;" k="61" />
<hkern u1="&#xdd;" u2="&#xfb;" k="61" />
<hkern u1="&#xdd;" u2="&#xfa;" k="61" />
<hkern u1="&#xdd;" u2="&#xf9;" k="61" />
<hkern u1="&#xdd;" u2="&#xf8;" k="102" />
<hkern u1="&#xdd;" u2="&#xf6;" k="102" />
<hkern u1="&#xdd;" u2="&#xf5;" k="102" />
<hkern u1="&#xdd;" u2="&#xf4;" k="102" />
<hkern u1="&#xdd;" u2="&#xf3;" k="102" />
<hkern u1="&#xdd;" u2="&#xf2;" k="102" />
<hkern u1="&#xdd;" u2="&#xeb;" k="102" />
<hkern u1="&#xdd;" u2="&#xea;" k="102" />
<hkern u1="&#xdd;" u2="&#xe9;" k="102" />
<hkern u1="&#xdd;" u2="&#xe8;" k="102" />
<hkern u1="&#xdd;" u2="&#xe7;" k="102" />
<hkern u1="&#xdd;" u2="&#xe6;" k="102" />
<hkern u1="&#xdd;" u2="&#xe5;" k="102" />
<hkern u1="&#xdd;" u2="&#xe4;" k="102" />
<hkern u1="&#xdd;" u2="&#xe3;" k="102" />
<hkern u1="&#xdd;" u2="&#xe2;" k="102" />
<hkern u1="&#xdd;" u2="&#xe1;" k="102" />
<hkern u1="&#xdd;" u2="&#xe0;" k="102" />
<hkern u1="&#xdd;" u2="&#xd8;" k="41" />
<hkern u1="&#xdd;" u2="&#xd6;" k="41" />
<hkern u1="&#xdd;" u2="&#xd5;" k="41" />
<hkern u1="&#xdd;" u2="&#xd4;" k="41" />
<hkern u1="&#xdd;" u2="&#xd3;" k="41" />
<hkern u1="&#xdd;" u2="&#xd2;" k="41" />
<hkern u1="&#xdd;" u2="&#xc7;" k="41" />
<hkern u1="&#xdd;" u2="&#xc5;" k="123" />
<hkern u1="&#xdd;" u2="&#xc4;" k="123" />
<hkern u1="&#xdd;" u2="&#xc3;" k="123" />
<hkern u1="&#xdd;" u2="&#xc2;" k="123" />
<hkern u1="&#xdd;" u2="&#xc1;" k="123" />
<hkern u1="&#xdd;" u2="&#xc0;" k="123" />
<hkern u1="&#xdd;" u2="z" k="41" />
<hkern u1="&#xdd;" u2="u" k="61" />
<hkern u1="&#xdd;" u2="s" k="82" />
<hkern u1="&#xdd;" u2="r" k="61" />
<hkern u1="&#xdd;" u2="q" k="102" />
<hkern u1="&#xdd;" u2="p" k="61" />
<hkern u1="&#xdd;" u2="o" k="102" />
<hkern u1="&#xdd;" u2="n" k="61" />
<hkern u1="&#xdd;" u2="m" k="61" />
<hkern u1="&#xdd;" u2="g" k="41" />
<hkern u1="&#xdd;" u2="e" k="102" />
<hkern u1="&#xdd;" u2="d" k="102" />
<hkern u1="&#xdd;" u2="c" k="102" />
<hkern u1="&#xdd;" u2="a" k="102" />
<hkern u1="&#xdd;" u2="Q" k="41" />
<hkern u1="&#xdd;" u2="O" k="41" />
<hkern u1="&#xdd;" u2="G" k="41" />
<hkern u1="&#xdd;" u2="C" k="41" />
<hkern u1="&#xdd;" u2="A" k="123" />
<hkern u1="&#xdd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xdd;" u2="&#x2e;" k="123" />
<hkern u1="&#xdd;" u2="&#x2c;" k="123" />
<hkern u1="&#xde;" u2="&#x201e;" k="266" />
<hkern u1="&#xde;" u2="&#x201a;" k="266" />
<hkern u1="&#xde;" u2="&#xc5;" k="102" />
<hkern u1="&#xde;" u2="&#xc4;" k="102" />
<hkern u1="&#xde;" u2="&#xc3;" k="102" />
<hkern u1="&#xde;" u2="&#xc2;" k="102" />
<hkern u1="&#xde;" u2="&#xc1;" k="102" />
<hkern u1="&#xde;" u2="&#xc0;" k="102" />
<hkern u1="&#xde;" u2="Z" k="20" />
<hkern u1="&#xde;" u2="X" k="41" />
<hkern u1="&#xde;" u2="A" k="102" />
<hkern u1="&#xde;" u2="&#x2e;" k="266" />
<hkern u1="&#xde;" u2="&#x2c;" k="266" />
<hkern u1="&#xe0;" u2="&#x201d;" k="20" />
<hkern u1="&#xe0;" u2="&#x2019;" k="20" />
<hkern u1="&#xe0;" u2="&#x27;" k="20" />
<hkern u1="&#xe0;" u2="&#x22;" k="20" />
<hkern u1="&#xe1;" u2="&#x201d;" k="20" />
<hkern u1="&#xe1;" u2="&#x2019;" k="20" />
<hkern u1="&#xe1;" u2="&#x27;" k="20" />
<hkern u1="&#xe1;" u2="&#x22;" k="20" />
<hkern u1="&#xe2;" u2="&#x201d;" k="20" />
<hkern u1="&#xe2;" u2="&#x2019;" k="20" />
<hkern u1="&#xe2;" u2="&#x27;" k="20" />
<hkern u1="&#xe2;" u2="&#x22;" k="20" />
<hkern u1="&#xe3;" u2="&#x201d;" k="20" />
<hkern u1="&#xe3;" u2="&#x2019;" k="20" />
<hkern u1="&#xe3;" u2="&#x27;" k="20" />
<hkern u1="&#xe3;" u2="&#x22;" k="20" />
<hkern u1="&#xe4;" u2="&#x201d;" k="20" />
<hkern u1="&#xe4;" u2="&#x2019;" k="20" />
<hkern u1="&#xe4;" u2="&#x27;" k="20" />
<hkern u1="&#xe4;" u2="&#x22;" k="20" />
<hkern u1="&#xe5;" u2="&#x201d;" k="20" />
<hkern u1="&#xe5;" u2="&#x2019;" k="20" />
<hkern u1="&#xe5;" u2="&#x27;" k="20" />
<hkern u1="&#xe5;" u2="&#x22;" k="20" />
<hkern u1="&#xe8;" u2="&#x201d;" k="20" />
<hkern u1="&#xe8;" u2="&#x2019;" k="20" />
<hkern u1="&#xe8;" u2="&#xfd;" k="41" />
<hkern u1="&#xe8;" u2="z" k="20" />
<hkern u1="&#xe8;" u2="y" k="41" />
<hkern u1="&#xe8;" u2="x" k="41" />
<hkern u1="&#xe8;" u2="w" k="41" />
<hkern u1="&#xe8;" u2="v" k="41" />
<hkern u1="&#xe8;" u2="&#x27;" k="20" />
<hkern u1="&#xe8;" u2="&#x22;" k="20" />
<hkern u1="&#xe9;" u2="&#x201d;" k="20" />
<hkern u1="&#xe9;" u2="&#x2019;" k="20" />
<hkern u1="&#xe9;" u2="&#xfd;" k="41" />
<hkern u1="&#xe9;" u2="z" k="20" />
<hkern u1="&#xe9;" u2="y" k="41" />
<hkern u1="&#xe9;" u2="x" k="41" />
<hkern u1="&#xe9;" u2="w" k="41" />
<hkern u1="&#xe9;" u2="v" k="41" />
<hkern u1="&#xe9;" u2="&#x27;" k="20" />
<hkern u1="&#xe9;" u2="&#x22;" k="20" />
<hkern u1="&#xea;" u2="&#x201d;" k="20" />
<hkern u1="&#xea;" u2="&#x2019;" k="20" />
<hkern u1="&#xea;" u2="&#xfd;" k="41" />
<hkern u1="&#xea;" u2="z" k="20" />
<hkern u1="&#xea;" u2="y" k="41" />
<hkern u1="&#xea;" u2="x" k="41" />
<hkern u1="&#xea;" u2="w" k="41" />
<hkern u1="&#xea;" u2="v" k="41" />
<hkern u1="&#xea;" u2="&#x27;" k="20" />
<hkern u1="&#xea;" u2="&#x22;" k="20" />
<hkern u1="&#xeb;" u2="&#x201d;" k="20" />
<hkern u1="&#xeb;" u2="&#x2019;" k="20" />
<hkern u1="&#xeb;" u2="&#xfd;" k="41" />
<hkern u1="&#xeb;" u2="z" k="20" />
<hkern u1="&#xeb;" u2="y" k="41" />
<hkern u1="&#xeb;" u2="x" k="41" />
<hkern u1="&#xeb;" u2="w" k="41" />
<hkern u1="&#xeb;" u2="v" k="41" />
<hkern u1="&#xeb;" u2="&#x27;" k="20" />
<hkern u1="&#xeb;" u2="&#x22;" k="20" />
<hkern u1="&#xf0;" u2="&#x201d;" k="20" />
<hkern u1="&#xf0;" u2="&#x2019;" k="20" />
<hkern u1="&#xf0;" u2="&#xfd;" k="41" />
<hkern u1="&#xf0;" u2="z" k="20" />
<hkern u1="&#xf0;" u2="y" k="41" />
<hkern u1="&#xf0;" u2="x" k="41" />
<hkern u1="&#xf0;" u2="w" k="41" />
<hkern u1="&#xf0;" u2="v" k="41" />
<hkern u1="&#xf0;" u2="&#x27;" k="20" />
<hkern u1="&#xf0;" u2="&#x22;" k="20" />
<hkern u1="&#xf2;" u2="&#x201d;" k="20" />
<hkern u1="&#xf2;" u2="&#x2019;" k="20" />
<hkern u1="&#xf2;" u2="&#xfd;" k="41" />
<hkern u1="&#xf2;" u2="z" k="20" />
<hkern u1="&#xf2;" u2="y" k="41" />
<hkern u1="&#xf2;" u2="x" k="41" />
<hkern u1="&#xf2;" u2="w" k="41" />
<hkern u1="&#xf2;" u2="v" k="41" />
<hkern u1="&#xf2;" u2="&#x27;" k="20" />
<hkern u1="&#xf2;" u2="&#x22;" k="20" />
<hkern u1="&#xf3;" u2="&#x201d;" k="20" />
<hkern u1="&#xf3;" u2="&#x2019;" k="20" />
<hkern u1="&#xf3;" u2="&#xfd;" k="41" />
<hkern u1="&#xf3;" u2="z" k="20" />
<hkern u1="&#xf3;" u2="y" k="41" />
<hkern u1="&#xf3;" u2="x" k="41" />
<hkern u1="&#xf3;" u2="w" k="41" />
<hkern u1="&#xf3;" u2="v" k="41" />
<hkern u1="&#xf3;" u2="&#x27;" k="20" />
<hkern u1="&#xf3;" u2="&#x22;" k="20" />
<hkern u1="&#xf4;" u2="&#x201d;" k="20" />
<hkern u1="&#xf4;" u2="&#x2019;" k="20" />
<hkern u1="&#xf4;" u2="&#xfd;" k="41" />
<hkern u1="&#xf4;" u2="z" k="20" />
<hkern u1="&#xf4;" u2="y" k="41" />
<hkern u1="&#xf4;" u2="x" k="41" />
<hkern u1="&#xf4;" u2="w" k="41" />
<hkern u1="&#xf4;" u2="v" k="41" />
<hkern u1="&#xf4;" u2="&#x27;" k="20" />
<hkern u1="&#xf4;" u2="&#x22;" k="20" />
<hkern u1="&#xf6;" u2="&#x201d;" k="41" />
<hkern u1="&#xf6;" u2="&#x2019;" k="41" />
<hkern u1="&#xf6;" u2="&#x27;" k="41" />
<hkern u1="&#xf6;" u2="&#x22;" k="41" />
<hkern u1="&#xf8;" u2="&#x201d;" k="20" />
<hkern u1="&#xf8;" u2="&#x2019;" k="20" />
<hkern u1="&#xf8;" u2="&#xfd;" k="41" />
<hkern u1="&#xf8;" u2="z" k="20" />
<hkern u1="&#xf8;" u2="y" k="41" />
<hkern u1="&#xf8;" u2="x" k="41" />
<hkern u1="&#xf8;" u2="w" k="41" />
<hkern u1="&#xf8;" u2="v" k="41" />
<hkern u1="&#xf8;" u2="&#x27;" k="20" />
<hkern u1="&#xf8;" u2="&#x22;" k="20" />
<hkern u1="&#xfd;" u2="&#x201e;" k="82" />
<hkern u1="&#xfd;" u2="&#x201d;" k="-82" />
<hkern u1="&#xfd;" u2="&#x201a;" k="82" />
<hkern u1="&#xfd;" u2="&#x2019;" k="-82" />
<hkern u1="&#xfd;" u2="&#x3f;" k="-41" />
<hkern u1="&#xfd;" u2="&#x2e;" k="82" />
<hkern u1="&#xfd;" u2="&#x2c;" k="82" />
<hkern u1="&#xfd;" u2="&#x27;" k="-82" />
<hkern u1="&#xfd;" u2="&#x22;" k="-82" />
<hkern u1="&#xfe;" u2="&#x201d;" k="20" />
<hkern u1="&#xfe;" u2="&#x2019;" k="20" />
<hkern u1="&#xfe;" u2="&#xfd;" k="41" />
<hkern u1="&#xfe;" u2="z" k="20" />
<hkern u1="&#xfe;" u2="y" k="41" />
<hkern u1="&#xfe;" u2="x" k="41" />
<hkern u1="&#xfe;" u2="w" k="41" />
<hkern u1="&#xfe;" u2="v" k="41" />
<hkern u1="&#xfe;" u2="&#x27;" k="20" />
<hkern u1="&#xfe;" u2="&#x22;" k="20" />
<hkern u1="&#xff;" u2="&#x201e;" k="82" />
<hkern u1="&#xff;" u2="&#x201d;" k="-82" />
<hkern u1="&#xff;" u2="&#x201a;" k="82" />
<hkern u1="&#xff;" u2="&#x2019;" k="-82" />
<hkern u1="&#xff;" u2="&#x3f;" k="-41" />
<hkern u1="&#xff;" u2="&#x2e;" k="82" />
<hkern u1="&#xff;" u2="&#x2c;" k="82" />
<hkern u1="&#xff;" u2="&#x27;" k="-82" />
<hkern u1="&#xff;" u2="&#x22;" k="-82" />
<hkern u1="&#x152;" u2="J" k="-123" />
<hkern u1="&#x178;" u2="&#x201e;" k="123" />
<hkern u1="&#x178;" u2="&#x201a;" k="123" />
<hkern u1="&#x178;" u2="&#x153;" k="102" />
<hkern u1="&#x178;" u2="&#x152;" k="41" />
<hkern u1="&#x178;" u2="&#xfc;" k="61" />
<hkern u1="&#x178;" u2="&#xfb;" k="61" />
<hkern u1="&#x178;" u2="&#xfa;" k="61" />
<hkern u1="&#x178;" u2="&#xf9;" k="61" />
<hkern u1="&#x178;" u2="&#xf8;" k="102" />
<hkern u1="&#x178;" u2="&#xf6;" k="102" />
<hkern u1="&#x178;" u2="&#xf5;" k="102" />
<hkern u1="&#x178;" u2="&#xf4;" k="102" />
<hkern u1="&#x178;" u2="&#xf3;" k="102" />
<hkern u1="&#x178;" u2="&#xf2;" k="102" />
<hkern u1="&#x178;" u2="&#xeb;" k="102" />
<hkern u1="&#x178;" u2="&#xea;" k="102" />
<hkern u1="&#x178;" u2="&#xe9;" k="102" />
<hkern u1="&#x178;" u2="&#xe8;" k="102" />
<hkern u1="&#x178;" u2="&#xe7;" k="102" />
<hkern u1="&#x178;" u2="&#xe6;" k="102" />
<hkern u1="&#x178;" u2="&#xe5;" k="102" />
<hkern u1="&#x178;" u2="&#xe4;" k="102" />
<hkern u1="&#x178;" u2="&#xe3;" k="102" />
<hkern u1="&#x178;" u2="&#xe2;" k="102" />
<hkern u1="&#x178;" u2="&#xe1;" k="102" />
<hkern u1="&#x178;" u2="&#xe0;" k="102" />
<hkern u1="&#x178;" u2="&#xd8;" k="41" />
<hkern u1="&#x178;" u2="&#xd6;" k="41" />
<hkern u1="&#x178;" u2="&#xd5;" k="41" />
<hkern u1="&#x178;" u2="&#xd4;" k="41" />
<hkern u1="&#x178;" u2="&#xd3;" k="41" />
<hkern u1="&#x178;" u2="&#xd2;" k="41" />
<hkern u1="&#x178;" u2="&#xc7;" k="41" />
<hkern u1="&#x178;" u2="&#xc5;" k="123" />
<hkern u1="&#x178;" u2="&#xc4;" k="123" />
<hkern u1="&#x178;" u2="&#xc3;" k="123" />
<hkern u1="&#x178;" u2="&#xc2;" k="123" />
<hkern u1="&#x178;" u2="&#xc1;" k="123" />
<hkern u1="&#x178;" u2="&#xc0;" k="123" />
<hkern u1="&#x178;" u2="z" k="41" />
<hkern u1="&#x178;" u2="u" k="61" />
<hkern u1="&#x178;" u2="s" k="82" />
<hkern u1="&#x178;" u2="r" k="61" />
<hkern u1="&#x178;" u2="q" k="102" />
<hkern u1="&#x178;" u2="p" k="61" />
<hkern u1="&#x178;" u2="o" k="102" />
<hkern u1="&#x178;" u2="n" k="61" />
<hkern u1="&#x178;" u2="m" k="61" />
<hkern u1="&#x178;" u2="g" k="41" />
<hkern u1="&#x178;" u2="e" k="102" />
<hkern u1="&#x178;" u2="d" k="102" />
<hkern u1="&#x178;" u2="c" k="102" />
<hkern u1="&#x178;" u2="a" k="102" />
<hkern u1="&#x178;" u2="Q" k="41" />
<hkern u1="&#x178;" u2="O" k="41" />
<hkern u1="&#x178;" u2="G" k="41" />
<hkern u1="&#x178;" u2="C" k="41" />
<hkern u1="&#x178;" u2="A" k="123" />
<hkern u1="&#x178;" u2="&#x3f;" k="-41" />
<hkern u1="&#x178;" u2="&#x2e;" k="123" />
<hkern u1="&#x178;" u2="&#x2c;" k="123" />
<hkern u1="&#x2013;" u2="T" k="82" />
<hkern u1="&#x2014;" u2="T" k="82" />
<hkern u1="&#x2018;" u2="&#x178;" k="-20" />
<hkern u1="&#x2018;" u2="&#x153;" k="123" />
<hkern u1="&#x2018;" u2="&#xfc;" k="61" />
<hkern u1="&#x2018;" u2="&#xfb;" k="61" />
<hkern u1="&#x2018;" u2="&#xfa;" k="61" />
<hkern u1="&#x2018;" u2="&#xf9;" k="61" />
<hkern u1="&#x2018;" u2="&#xf8;" k="123" />
<hkern u1="&#x2018;" u2="&#xf6;" k="123" />
<hkern u1="&#x2018;" u2="&#xf5;" k="123" />
<hkern u1="&#x2018;" u2="&#xf4;" k="123" />
<hkern u1="&#x2018;" u2="&#xf3;" k="123" />
<hkern u1="&#x2018;" u2="&#xf2;" k="123" />
<hkern u1="&#x2018;" u2="&#xeb;" k="123" />
<hkern u1="&#x2018;" u2="&#xea;" k="123" />
<hkern u1="&#x2018;" u2="&#xe9;" k="123" />
<hkern u1="&#x2018;" u2="&#xe8;" k="123" />
<hkern u1="&#x2018;" u2="&#xe7;" k="123" />
<hkern u1="&#x2018;" u2="&#xe6;" k="82" />
<hkern u1="&#x2018;" u2="&#xe5;" k="82" />
<hkern u1="&#x2018;" u2="&#xe4;" k="82" />
<hkern u1="&#x2018;" u2="&#xe3;" k="82" />
<hkern u1="&#x2018;" u2="&#xe2;" k="82" />
<hkern u1="&#x2018;" u2="&#xe1;" k="82" />
<hkern u1="&#x2018;" u2="&#xe0;" k="123" />
<hkern u1="&#x2018;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2018;" u2="&#xc5;" k="143" />
<hkern u1="&#x2018;" u2="&#xc4;" k="143" />
<hkern u1="&#x2018;" u2="&#xc3;" k="143" />
<hkern u1="&#x2018;" u2="&#xc2;" k="143" />
<hkern u1="&#x2018;" u2="&#xc1;" k="143" />
<hkern u1="&#x2018;" u2="&#xc0;" k="143" />
<hkern u1="&#x2018;" u2="u" k="61" />
<hkern u1="&#x2018;" u2="s" k="61" />
<hkern u1="&#x2018;" u2="r" k="61" />
<hkern u1="&#x2018;" u2="q" k="123" />
<hkern u1="&#x2018;" u2="p" k="61" />
<hkern u1="&#x2018;" u2="o" k="123" />
<hkern u1="&#x2018;" u2="n" k="61" />
<hkern u1="&#x2018;" u2="m" k="61" />
<hkern u1="&#x2018;" u2="g" k="61" />
<hkern u1="&#x2018;" u2="e" k="123" />
<hkern u1="&#x2018;" u2="d" k="123" />
<hkern u1="&#x2018;" u2="c" k="123" />
<hkern u1="&#x2018;" u2="a" k="82" />
<hkern u1="&#x2018;" u2="Y" k="-20" />
<hkern u1="&#x2018;" u2="W" k="-41" />
<hkern u1="&#x2018;" u2="V" k="-41" />
<hkern u1="&#x2018;" u2="T" k="-41" />
<hkern u1="&#x2018;" u2="A" k="143" />
<hkern u1="&#x2019;" u2="&#x178;" k="-20" />
<hkern u1="&#x2019;" u2="&#x153;" k="123" />
<hkern u1="&#x2019;" u2="&#xfc;" k="61" />
<hkern u1="&#x2019;" u2="&#xfb;" k="61" />
<hkern u1="&#x2019;" u2="&#xfa;" k="61" />
<hkern u1="&#x2019;" u2="&#xf9;" k="61" />
<hkern u1="&#x2019;" u2="&#xf8;" k="123" />
<hkern u1="&#x2019;" u2="&#xf6;" k="123" />
<hkern u1="&#x2019;" u2="&#xf5;" k="123" />
<hkern u1="&#x2019;" u2="&#xf4;" k="123" />
<hkern u1="&#x2019;" u2="&#xf3;" k="123" />
<hkern u1="&#x2019;" u2="&#xf2;" k="123" />
<hkern u1="&#x2019;" u2="&#xeb;" k="123" />
<hkern u1="&#x2019;" u2="&#xea;" k="123" />
<hkern u1="&#x2019;" u2="&#xe9;" k="123" />
<hkern u1="&#x2019;" u2="&#xe8;" k="123" />
<hkern u1="&#x2019;" u2="&#xe7;" k="123" />
<hkern u1="&#x2019;" u2="&#xe6;" k="82" />
<hkern u1="&#x2019;" u2="&#xe5;" k="82" />
<hkern u1="&#x2019;" u2="&#xe4;" k="82" />
<hkern u1="&#x2019;" u2="&#xe3;" k="82" />
<hkern u1="&#x2019;" u2="&#xe2;" k="82" />
<hkern u1="&#x2019;" u2="&#xe1;" k="82" />
<hkern u1="&#x2019;" u2="&#xe0;" k="123" />
<hkern u1="&#x2019;" u2="&#xdd;" k="-20" />
<hkern u1="&#x2019;" u2="&#xc5;" k="143" />
<hkern u1="&#x2019;" u2="&#xc4;" k="143" />
<hkern u1="&#x2019;" u2="&#xc3;" k="143" />
<hkern u1="&#x2019;" u2="&#xc2;" k="143" />
<hkern u1="&#x2019;" u2="&#xc1;" k="143" />
<hkern u1="&#x2019;" u2="&#xc0;" k="143" />
<hkern u1="&#x2019;" u2="u" k="61" />
<hkern u1="&#x2019;" u2="s" k="61" />
<hkern u1="&#x2019;" u2="r" k="61" />
<hkern u1="&#x2019;" u2="q" k="123" />
<hkern u1="&#x2019;" u2="p" k="61" />
<hkern u1="&#x2019;" u2="o" k="123" />
<hkern u1="&#x2019;" u2="n" k="61" />
<hkern u1="&#x2019;" u2="m" k="61" />
<hkern u1="&#x2019;" u2="g" k="61" />
<hkern u1="&#x2019;" u2="e" k="123" />
<hkern u1="&#x2019;" u2="d" k="123" />
<hkern u1="&#x2019;" u2="c" k="123" />
<hkern u1="&#x2019;" u2="a" k="82" />
<hkern u1="&#x2019;" u2="Y" k="-20" />
<hkern u1="&#x2019;" u2="W" k="-41" />
<hkern u1="&#x2019;" u2="V" k="-41" />
<hkern u1="&#x2019;" u2="T" k="-41" />
<hkern u1="&#x2019;" u2="A" k="143" />
<hkern u1="&#x201a;" u2="&#x178;" k="123" />
<hkern u1="&#x201a;" u2="&#x152;" k="102" />
<hkern u1="&#x201a;" u2="&#xdd;" k="123" />
<hkern u1="&#x201a;" u2="&#xdc;" k="41" />
<hkern u1="&#x201a;" u2="&#xdb;" k="41" />
<hkern u1="&#x201a;" u2="&#xda;" k="41" />
<hkern u1="&#x201a;" u2="&#xd9;" k="41" />
<hkern u1="&#x201a;" u2="&#xd8;" k="102" />
<hkern u1="&#x201a;" u2="&#xd6;" k="102" />
<hkern u1="&#x201a;" u2="&#xd5;" k="102" />
<hkern u1="&#x201a;" u2="&#xd4;" k="102" />
<hkern u1="&#x201a;" u2="&#xd3;" k="102" />
<hkern u1="&#x201a;" u2="&#xd2;" k="102" />
<hkern u1="&#x201a;" u2="&#xc7;" k="102" />
<hkern u1="&#x201a;" u2="Y" k="123" />
<hkern u1="&#x201a;" u2="W" k="123" />
<hkern u1="&#x201a;" u2="V" k="123" />
<hkern u1="&#x201a;" u2="U" k="41" />
<hkern u1="&#x201a;" u2="T" k="143" />
<hkern u1="&#x201a;" u2="Q" k="102" />
<hkern u1="&#x201a;" u2="O" k="102" />
<hkern u1="&#x201a;" u2="G" k="102" />
<hkern u1="&#x201a;" u2="C" k="102" />
<hkern u1="&#x201c;" u2="&#x178;" k="-20" />
<hkern u1="&#x201c;" u2="&#x153;" k="123" />
<hkern u1="&#x201c;" u2="&#xfc;" k="61" />
<hkern u1="&#x201c;" u2="&#xfb;" k="61" />
<hkern u1="&#x201c;" u2="&#xfa;" k="61" />
<hkern u1="&#x201c;" u2="&#xf9;" k="61" />
<hkern u1="&#x201c;" u2="&#xf8;" k="123" />
<hkern u1="&#x201c;" u2="&#xf6;" k="123" />
<hkern u1="&#x201c;" u2="&#xf5;" k="123" />
<hkern u1="&#x201c;" u2="&#xf4;" k="123" />
<hkern u1="&#x201c;" u2="&#xf3;" k="123" />
<hkern u1="&#x201c;" u2="&#xf2;" k="123" />
<hkern u1="&#x201c;" u2="&#xeb;" k="123" />
<hkern u1="&#x201c;" u2="&#xea;" k="123" />
<hkern u1="&#x201c;" u2="&#xe9;" k="123" />
<hkern u1="&#x201c;" u2="&#xe8;" k="123" />
<hkern u1="&#x201c;" u2="&#xe7;" k="123" />
<hkern u1="&#x201c;" u2="&#xe6;" k="82" />
<hkern u1="&#x201c;" u2="&#xe5;" k="82" />
<hkern u1="&#x201c;" u2="&#xe4;" k="82" />
<hkern u1="&#x201c;" u2="&#xe3;" k="82" />
<hkern u1="&#x201c;" u2="&#xe2;" k="82" />
<hkern u1="&#x201c;" u2="&#xe1;" k="82" />
<hkern u1="&#x201c;" u2="&#xe0;" k="123" />
<hkern u1="&#x201c;" u2="&#xdd;" k="-20" />
<hkern u1="&#x201c;" u2="&#xc5;" k="143" />
<hkern u1="&#x201c;" u2="&#xc4;" k="143" />
<hkern u1="&#x201c;" u2="&#xc3;" k="143" />
<hkern u1="&#x201c;" u2="&#xc2;" k="143" />
<hkern u1="&#x201c;" u2="&#xc1;" k="143" />
<hkern u1="&#x201c;" u2="&#xc0;" k="143" />
<hkern u1="&#x201c;" u2="u" k="61" />
<hkern u1="&#x201c;" u2="s" k="61" />
<hkern u1="&#x201c;" u2="r" k="61" />
<hkern u1="&#x201c;" u2="q" k="123" />
<hkern u1="&#x201c;" u2="p" k="61" />
<hkern u1="&#x201c;" u2="o" k="123" />
<hkern u1="&#x201c;" u2="n" k="61" />
<hkern u1="&#x201c;" u2="m" k="61" />
<hkern u1="&#x201c;" u2="g" k="61" />
<hkern u1="&#x201c;" u2="e" k="123" />
<hkern u1="&#x201c;" u2="d" k="123" />
<hkern u1="&#x201c;" u2="c" k="123" />
<hkern u1="&#x201c;" u2="a" k="82" />
<hkern u1="&#x201c;" u2="Y" k="-20" />
<hkern u1="&#x201c;" u2="W" k="-41" />
<hkern u1="&#x201c;" u2="V" k="-41" />
<hkern u1="&#x201c;" u2="T" k="-41" />
<hkern u1="&#x201c;" u2="A" k="143" />
<hkern u1="&#x201e;" u2="&#x178;" k="123" />
<hkern u1="&#x201e;" u2="&#x152;" k="102" />
<hkern u1="&#x201e;" u2="&#xdd;" k="123" />
<hkern u1="&#x201e;" u2="&#xdc;" k="41" />
<hkern u1="&#x201e;" u2="&#xdb;" k="41" />
<hkern u1="&#x201e;" u2="&#xda;" k="41" />
<hkern u1="&#x201e;" u2="&#xd9;" k="41" />
<hkern u1="&#x201e;" u2="&#xd8;" k="102" />
<hkern u1="&#x201e;" u2="&#xd6;" k="102" />
<hkern u1="&#x201e;" u2="&#xd5;" k="102" />
<hkern u1="&#x201e;" u2="&#xd4;" k="102" />
<hkern u1="&#x201e;" u2="&#xd3;" k="102" />
<hkern u1="&#x201e;" u2="&#xd2;" k="102" />
<hkern u1="&#x201e;" u2="&#xc7;" k="102" />
<hkern u1="&#x201e;" u2="Y" k="123" />
<hkern u1="&#x201e;" u2="W" k="123" />
<hkern u1="&#x201e;" u2="V" k="123" />
<hkern u1="&#x201e;" u2="U" k="41" />
<hkern u1="&#x201e;" u2="T" k="143" />
<hkern u1="&#x201e;" u2="Q" k="102" />
<hkern u1="&#x201e;" u2="O" k="102" />
<hkern u1="&#x201e;" u2="G" k="102" />
<hkern u1="&#x201e;" u2="C" k="102" />
</font>
</defs></svg>

================
File: docs/map-editor/global.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Global</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Global</h1>

    




<section>

<header>
    
        <h2></h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        

        


<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
</dl>


        
    
    </div>

    

    

    

    

    

    

    

    
        <h3 class="subsection-title">Methods</h3>

        
            

    

    
    <h4 class="name" id="LayerPanel"><span class="type-signature"></span>LayerPanel<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Layer panel component for the Map EditorAllows for managing layers (visibility, order, etc) and selecting tiles
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="LayerPanel.jsx.html">LayerPanel.jsx</a>, <a href="LayerPanel.jsx.html#line10">line 10</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="MapCanvas"><span class="type-signature"></span>MapCanvas<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    The main canvas component for the Grid Map EditorHandles rendering and interaction with the grid map
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="MapCanvas.jsx.html">MapCanvas.jsx</a>, <a href="MapCanvas.jsx.html#line11">line 11</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="MapPropertiesPanel"><span class="type-signature"></span>MapPropertiesPanel<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Panel for editing map properties
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="MapPropertiesPanel.jsx.html">MapPropertiesPanel.jsx</a>, <a href="MapPropertiesPanel.jsx.html#line7">line 7</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="MapToolbar"><span class="type-signature"></span>MapToolbar<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Toolbar component for the Map Editor
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="MapToolbar.jsx.html">MapToolbar.jsx</a>, <a href="MapToolbar.jsx.html#line12">line 12</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="TilePalette"><span class="type-signature"></span>TilePalette<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Enhanced TilePalette component with marketplace integration
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="TilePalette.jsx.html">TilePalette.jsx</a>, <a href="TilePalette.jsx.html#line23">line 23</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="TilesetSelector"><span class="type-signature"></span>TilesetSelector<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Component for selecting and previewing available tilesets
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="TilesetSelector.jsx.html">TilesetSelector.jsx</a>, <a href="TilesetSelector.jsx.html#line7">line 7</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
    

    

    
</article>

</section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Home</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Home</h1>

    



    


    <h3> </h3>










    









</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/LayerPanel.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: LayerPanel.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: LayerPanel.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useState, useEffect, useRef } from 'react';
import { Eye, EyeOff, Layers, Plus, Trash2, ArrowUp, ArrowDown, Edit2, ChevronDown, ChevronUp } from 'lucide-react';
import TilePalette from './TilePalette';
import OpacitySlider from './components/OpacitySlider';

/**
 * Layer panel component for the Map Editor
 * Allows for managing layers (visibility, order, etc) and selecting tiles
 */
const LayerPanel = ({ 
  layers, 
  currentLayer, 
  setCurrentLayer, 
  onToggleLayerVisibility, 
  onAddLayer, 
  onRemoveLayer, 
  onMoveLayerUp, 
  onMoveLayerDown, 
  onRenameLayer,
  onUpdateLayerOpacity,
  selectedTileId = 0,
  onSelectTile,
  selectedRotation, // Add prop for receiving rotation state
  onRotateTile,     // Add prop for passing rotation handler
  currentTool,
  setCurrentTool,
  brushSize = 1,
  setBrushSize
}) => {
  // State for tracking which layer is being edited and the current edited name
  const [editingLayerIndex, setEditingLayerIndex] = useState(null);
  const [editedLayerName, setEditedLayerName] = useState('');
  const [expandedOpacityLayers, setExpandedOpacityLayers] = useState({});
  const layerNameInputRef = useRef(null);
  
  // Toggle opacity controls for a layer
  const toggleOpacityControls = (layerIndex, e) => {
    e.stopPropagation();
    setExpandedOpacityLayers(prev => ({
      ...prev,
      [layerIndex]: !prev[layerIndex]
    }));
  };
  
  // Focus input when editing starts
  useEffect(() => {
    if (editingLayerIndex !== null &amp;&amp; layerNameInputRef.current) {
      layerNameInputRef.current.focus();
    }
  }, [editingLayerIndex]);
  
  // Handle starting the edit process
  const handleStartEditing = (e, layerIndex) => {
    e.stopPropagation();
    setEditingLayerIndex(layerIndex);
    setEditedLayerName(layers[layerIndex].name);
  };
  
  // Handle saving the edited name
  const handleSaveLayerName = (layerIndex) => {
    if (editedLayerName.trim()) {
      onRenameLayer(layerIndex, editedLayerName);
    }
    setEditingLayerIndex(null);
  };
  
  // Handle keydown events in the input field
  const handleInputKeyDown = (e, layerIndex) => {
    if (e.key === 'Enter') {
      handleSaveLayerName(layerIndex);
    } else if (e.key === 'Escape') {
      setEditingLayerIndex(null);
    }
  };

  return (
    &lt;div className="w-64 bg-stone-800 border-l border-stone-700 flex flex-col overflow-hidden">
      {/* Brush Size Control */}
      &lt;div className="p-2 border-b border-stone-700">
        &lt;div className="flex items-center justify-between">
          &lt;span className="text-sm text-teal-400">BRUSH SIZE:&lt;/span>
          &lt;div className="flex items-center">
            &lt;button
              onClick={() => setBrushSize(Math.max(1, brushSize - 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-l text-teal-300 text-xs focus:outline-none"
            >
              -
            &lt;/button>
            &lt;input
                type="number"
                value={brushSize}
                onChange={(e) => {
                  const value = parseInt(e.target.value, 10);
                  if (!isNaN(value) &amp;&amp; value > 0) setBrushSize(value);
                }}
                className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 border-x-0 focus:outline-none text-center
                          [appearance:textfield] [&amp;::-webkit-outer-spin-button]:appearance-none [&amp;::-webkit-inner-spin-button]:appearance-none"
                min="1"
                max="10"
              />
            &lt;button
              onClick={() => setBrushSize(Math.min(10, brushSize + 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-r text-teal-300 text-xs focus:outline-none"
            >
              +
            &lt;/button>
          &lt;/div>
        &lt;/div>
        &lt;div className="text-xs text-stone-400 mt-1">
          {brushSize}×{brushSize}
        &lt;/div>
      &lt;/div>
      
      {/* Tile Type and Palette Section */}
      &lt;div className="border-b border-stone-700">
        &lt;TilePalette 
          selectedTileId={selectedTileId}
          onSelectTile={onSelectTile}
          selectedRotation={selectedRotation} // Pass rotation state down
          onRotateTile={onRotateTile}         // Pass rotation handler down
          tileType={currentTool}
          onChangeTileType={setCurrentTool}
        />
      &lt;/div>
      &lt;div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        &lt;div className="flex items-center">
          &lt;Layers size={14} className="mr-2" />
          &lt;span>LAYERS&lt;/span>
        &lt;/div>
        &lt;button
          onClick={onAddLayer}
          className="p-1 rounded hover:bg-stone-700 text-teal-400"
          title="Add new layer"
        >
          &lt;Plus size={16} />
        &lt;/button>
      &lt;/div>
      
      &lt;div className="flex-1 overflow-auto">
        {layers &amp;&amp; layers.length > 0 ? (
          &lt;div className="p-2">
            {/* Show layers in reverse order so top layer is shown first */}
            {[...layers].reverse().map((layer, idx) => {
              // Calculate the actual index
              const actualIndex = layers.length - 1 - idx;
              const isActive = currentLayer === actualIndex;
              
              return (
                &lt;div 
                  key={`layer-${actualIndex}`}
                  className={`mb-2 p-2 rounded border ${
                    isActive 
                      ? 'bg-stone-700 border-teal-500 text-teal-300' 
                      : 'bg-stone-800 border-stone-700 text-teal-50 hover:bg-stone-700'
                  }`}
                  onClick={() => setCurrentLayer(actualIndex)}
                >
                  &lt;div className="flex items-center justify-between">
                    &lt;div className="flex items-center">
                      {/* Layer visibility toggle */}
                      &lt;button
                        onClick={(e) => {
                          e.stopPropagation();
                          onToggleLayerVisibility(actualIndex);
                        }}
                        className="mr-2 hover:bg-stone-600 p-1 rounded"
                        title={layer.visible ? "Hide layer" : "Show layer"}
                      >
                        {layer.visible ? &lt;Eye size={14} /> : &lt;EyeOff size={14} />}
                      &lt;/button>
                      
                      {/* Layer name - either editable or static */}
                      {editingLayerIndex === actualIndex ? (
                        &lt;input
                          ref={layerNameInputRef}
                          className="bg-stone-600 text-sm text-teal-100 px-1 py-0.5 rounded border border-teal-500 focus:outline-none"
                          value={editedLayerName}
                          onChange={(e) => setEditedLayerName(e.target.value)}
                          onKeyDown={(e) => handleInputKeyDown(e, actualIndex)}
                          onBlur={() => handleSaveLayerName(actualIndex)}
                          onClick={(e) => e.stopPropagation()}
                          size={15}
                        />
                      ) : (
                        &lt;span className="text-sm">{layer.name}&lt;/span>
                      )}
                    &lt;/div>
                    
                    {/* Layer operations */}
                    &lt;div className="flex">
                      {/* Toggle opacity controls button */}
                      &lt;button
                        onClick={(e) => toggleOpacityControls(actualIndex, e)}
                        className={`p-1 hover:bg-stone-600 rounded ${expandedOpacityLayers[actualIndex] ? 'bg-stone-600' : ''}`}
                        title="Toggle opacity controls"
                      >
                        {expandedOpacityLayers[actualIndex] ? 
                          &lt;ChevronUp size={14} /> : 
                          &lt;ChevronDown size={14} />
                        }
                      &lt;/button>
                      &lt;button
                        onClick={(e) => handleStartEditing(e, actualIndex)}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Rename layer"
                      >
                        &lt;Edit2 size={14} />
                      &lt;/button>
                      &lt;button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerUp(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer up"
                        disabled={actualIndex === layers.length - 1}
                      >
                        &lt;ArrowUp size={14} className={actualIndex === layers.length - 1 ? "opacity-30" : ""} />
                      &lt;/button>
                      &lt;button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerDown(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer down"
                        disabled={actualIndex === 0}
                      >
                        &lt;ArrowDown size={14} className={actualIndex === 0 ? "opacity-30" : ""} />
                      &lt;/button>
                      &lt;button
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveLayer(actualIndex);
                        }}
                        className="p-1 hover:bg-red-900 rounded text-red-400 hover:text-red-300"
                        title="Delete layer"
                        disabled={layers.length &lt;= 1}
                      >
                        &lt;Trash2 size={14} className={layers.length &lt;= 1 ? "opacity-30" : ""} />
                      &lt;/button>
                    &lt;/div>
                  &lt;/div>
                  
                  {/* Opacity controls - only shown when expanded */}
                  {expandedOpacityLayers[actualIndex] &amp;&amp; (
                    &lt;div 
                      className="mt-2 px-1 pt-2 border-t border-stone-600" 
                      onClick={e => e.stopPropagation()}
                    >
                      &lt;div className="flex items-center">
                        &lt;div className="text-xs text-stone-400 mr-2 w-14">Opacity:&lt;/div>
                        
                        {/* Numeric input */}
                        &lt;div className="flex items-center">
                          &lt;input
                            type="text"
                            value={Math.round((layer.opacity || 1.0) * 100)}
                            onChange={(e) => {
                              // Get the value as a number
                              let value = parseInt(e.target.value, 10);
                              
                              // Validate: ensure it's a number between 0-100
                              if (isNaN(value)) value = 100;
                              value = Math.max(0, Math.min(100, value));
                              
                              // Convert percentage to decimal (0-1 range) and update
                              const opacityValue = value / 100;
                              if (onUpdateLayerOpacity) {
                                onUpdateLayerOpacity(actualIndex, opacityValue);
                              }
                            }}
                            className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 rounded border border-stone-600 focus:border-teal-500 focus:outline-none text-center"
                            title="Layer opacity (0-100%)"
                          />
                          &lt;span className="text-xs text-stone-400 ml-1">%&lt;/span>
                        &lt;/div>
                      &lt;/div>
                    &lt;/div>
                  )}
                &lt;/div>
              );
            })}
          &lt;/div>
        ) : (
          &lt;div className="flex items-center justify-center h-full">
            &lt;span className="text-stone-500">No layers defined&lt;/span>
          &lt;/div>
        )}
      &lt;/div>
      
      {/* Layer information */}
      &lt;div className="p-2 border-t border-stone-700 text-xs">
        {layers &amp;&amp; currentLayer !== undefined &amp;&amp; layers[currentLayer] ? (
          &lt;div>
            &lt;div className="text-stone-400">Selected: {layers[currentLayer].name}&lt;/div>
            &lt;div className="text-stone-400">Total cells: {layers[currentLayer].cells?.length || 0}&lt;/div>
          &lt;/div>
        ) : (
          &lt;div className="text-stone-500">No layer selected&lt;/div>
        )}
      &lt;/div>
    &lt;/div>
  );
};

export default LayerPanel;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/MapCanvas.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: MapCanvas.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: MapCanvas.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';
import { Grid } from 'lucide-react';
import { screenToGridCoordinates, gridToScreenCoordinates } from './utils/mapUtils';
import dynamicTileRegistry from './utils/dynamicTileRegistry';
import API_CONFIG from '../../../config/api';

/**
 * The main canvas component for the Grid Map Editor
 * Handles rendering and interaction with the grid map
 */
const MapCanvas = ({ 
  mapData, 
  currentLayer, 
  currentTool, 
  selectedTileId = 0,
  selectedTilesetId = null,
  selectedRotation = 0,
  onEdit, 
  showGrid = true, 
  resetViewRef,
  brushSize = 1,
  // Add the onViewportChange prop to save viewport changes
  onViewportChange = null
}) => {
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  // Initialize with default values, will be overridden if mapData contains viewport info
  const [gridSize, setGridSize] = useState(32);
  const [viewportOffset, setViewportOffset] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [activeMouseButton, setActiveMouseButton] = useState(null);
  const [hoverCell, setHoverCell] = useState(null);
  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
  const [isSpacePressed, setIsSpacePressed] = useState(false);
  const [tilesetImages, setTilesetImages] = useState({});
  const [tilesetColumns, setTilesetColumns] = useState({});
  const [isRegistryInitialized, setIsRegistryInitialized] = useState(false);

    // Function to save viewport changes
    const saveViewport = useCallback(() => {
      if (onViewportChange) {
        onViewportChange({
          x: viewportOffset.x,
          y: viewportOffset.y,
          scale: gridSize / 32 // Store scale as a ratio of the default grid size
        });
      }
    }, [viewportOffset, gridSize, onViewportChange]);
  
  // Reset view to origin (0,0) function
  const resetViewToOrigin = useCallback(() => {
    setViewportOffset({ x: 0, y: 0 });
  }, []);

  // Store the reset function in the provided ref
  useEffect(() => {
    if (resetViewRef) {
      resetViewRef.current = resetViewToOrigin;
    }
  }, [resetViewToOrigin, resetViewRef]);
  
  // Initialize dynamic tile registry on component mount
  useEffect(() => {
    const initializeTilesets = async () => {
      console.log('MapCanvas: Initializing dynamic tile registry...');
      
      // Initialize the registry
      const success = await dynamicTileRegistry.initializeTileRegistry();
      
      if (success) {
        // Get selected tilesets
        const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
        console.log('MapCanvas: Selected tilesets:', selectedTilesets);
        
        // Load tileset images by category
        const loadedImages = {};
        const loadedColumns = {};
        
        for (const tileset of selectedTilesets) {
          if (tileset.sections &amp;&amp; tileset.sections.length > 0) {
            // Load the tileset image
            const img = new Image();
            
            await new Promise((resolve) => {
              img.onload = () => {
                // Calculate columns based on image width
                const cols = Math.floor(img.width / dynamicTileRegistry.TILE_SIZE);
                loadedColumns[tileset.id] = cols;
                console.log(`MapCanvas: Loaded tileset ${tileset.name} with ${cols} columns`);
                resolve();
              };
              
              img.onerror = () => {
                console.error(`Failed to load tileset image for ${tileset.name}`);
                resolve();
              };
              
              // Use the API endpoint to load the image
              img.src = `${API_CONFIG.BASE_URL}/tilesets/${tileset.id}/image`;
            });
            
            loadedImages[tileset.id] = img;
          }
        }
        
        setTilesetImages(loadedImages);
        setTilesetColumns(loadedColumns);
        setIsRegistryInitialized(true);
      } else {
        console.log('MapCanvas: No tilesets available or initialization failed');
        setIsRegistryInitialized(true);
      }
    };
    
    initializeTilesets();
  }, []);

  /**
   * Draw a tile on the canvas based on its type and tile ID
   * @param {CanvasRenderingContext2D} ctx - Canvas context
   * @param {number} x - X position on canvas
   * @param {number} y - Y position on canvas
   * @param {number} size - Size of the tile
   * @param {Object} cell - The cell data including type and tileId
   */
  const drawTile = (ctx, x, y, size, cell) => {
    const { type, tileId, rotation = 0, tilesetId } = cell;
    
    console.log('🎨 RENDERING TILE:', {
      position: `(${cell.x}, ${cell.y})`,
      type,
      tileId,
      tilesetId,
      rotation,
      hasRegistryInit: isRegistryInitialized,
      availableTilesets: Object.keys(tilesetImages)
    });
    
    // If registry is not initialized or no tilesets are loaded, use fallback rendering
    if (!isRegistryInitialized || Object.keys(tilesetImages).length === 0) {
      console.log('🔴 FALLBACK RENDERING: Registry not initialized or no tilesets loaded');
      // Fall back to color-based rendering
      switch(type) {
        case 'wall':
          ctx.fillStyle = '#6b7280'; // Gray
          ctx.fillRect(x, y, size, size);
          break;
        case 'floor':
          ctx.fillStyle = '#1e293b'; // Slate-800
          ctx.fillRect(x, y, size, size);
          break;
        case 'shadow':
          ctx.fillStyle = '#BF40BF'; // Purple
          ctx.fillRect(x, y, size, size);
          break;
        case 'door':
          if (rotation !== 0) {
            ctx.save();
            ctx.translate(x + size/2, y + size/2);
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            ctx.fillStyle = '#1e293b';
            ctx.fillRect(-size/2, -size/2, size, size);
            ctx.fillStyle = '#b45309';
            ctx.fillRect(-size/4, -size/4, size/2, size/2);
            ctx.restore();
          } else {
            ctx.fillStyle = '#1e293b';
            ctx.fillRect(x, y, size, size);
            ctx.fillStyle = '#b45309';
            ctx.fillRect(x + size/4, y + size/4, size/2, size/2);
          }
          break;
        default:
          ctx.fillStyle = '#ef4444'; // Red-500
          ctx.fillRect(x, y, size, size);
      }
      
      if (showGrid) {
        ctx.strokeStyle = '#44403c';
        ctx.strokeRect(x, y, size, size);
      }
      return;
    }
    
    // Get the appropriate tileset image for this tile
    let tilesetImage = null;
    let columns = dynamicTileRegistry.DEFAULT_TILESET_COLS;
    
    // First try to use the specific tileset ID if provided
    if (tilesetId &amp;&amp; tilesetImages[tilesetId]) {
      tilesetImage = tilesetImages[tilesetId];
      columns = tilesetColumns[tilesetId] || columns;
    } else {
      // Otherwise, find the first tileset that has sections for this category
      const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
      for (const tileset of selectedTilesets) {
        if (tileset.sections &amp;&amp; tileset.sections.some(s => s.category === type)) {
          if (tilesetImages[tileset.id]) {
            tilesetImage = tilesetImages[tileset.id];
            columns = tilesetColumns[tileset.id] || columns;
            break;
          }
        }
      }
    }
    
    // If we have a tileset image and a valid tile ID, draw from the tileset
    if (tilesetImage &amp;&amp; tileId !== undefined &amp;&amp; ['floor', 'wall', 'shadow'].includes(type)) {
      // Calculate coordinates based on the tileset's column count
      const col = tileId % columns;
      const row = Math.floor(tileId / columns);
      const sourceX = col * dynamicTileRegistry.TILE_SIZE;
      const sourceY = row * dynamicTileRegistry.TILE_SIZE;
      
      // Handle rotation
      if (rotation !== 0) {
        ctx.save();
        ctx.translate(x + size/2, y + size/2);
        const angleInRadians = (rotation * Math.PI) / 180;
        ctx.rotate(angleInRadians);
        
        ctx.drawImage(
          tilesetImage,
          sourceX, sourceY, dynamicTileRegistry.TILE_SIZE, dynamicTileRegistry.TILE_SIZE,
          -size/2, -size/2, size, size
        );
        
        ctx.restore();
      } else {
        ctx.drawImage(
          tilesetImage,
          sourceX, sourceY, dynamicTileRegistry.TILE_SIZE, dynamicTileRegistry.TILE_SIZE,
          x, y, size, size
        );
      }
      
      // Draw grid lines on top only if showGrid is true
      if (showGrid) {
        ctx.strokeStyle = '#44403c'; // Stone-700
        ctx.strokeRect(x, y, size, size);
      }
      return;
    }
    
    // Fall back to original color-based rendering for other types
    switch(type) {
      case 'wall':
        // Fallback if wall tileset image failed to load or tileId is undefined
        ctx.fillStyle = '#6b7280'; // Gray
        ctx.fillRect(x, y, size, size);
        break;
      case 'floor':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#1e293b'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'shadow':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#BF40BF'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'door':
        // For doors, apply rotation to the whole door element
        if (rotation !== 0) {
          // Save the current context state
          ctx.save();
          
          // Move to the center of the tile position
          ctx.translate(x + size/2, y + size/2);
          
          // Rotate the context by the specified angle (convert degrees to radians)
          const angleInRadians = (rotation * Math.PI) / 180;
          ctx.rotate(angleInRadians);
          
          // Draw floor background
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(-size/2, -size/2, size, size);
          
          // Draw door centered
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(-size/4, -size/4, size/2, size/2);
          
          // Restore the context to its original state
          ctx.restore();
        } else {
          // Draw floor first (no rotation)
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(x, y, size, size);
          // Then draw door
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(x + size/4, y + size/4, size/2, size/2);
        }
        break;
      // Add more tile types as needed
      default:
        // Unknown tile type, draw placeholder
        ctx.fillStyle = '#ef4444'; // Red-500
        ctx.fillRect(x, y, size, size);
    }
    
    // Draw grid lines on top only if showGrid is true
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700
      ctx.strokeRect(x, y, size, size);
    }
  };

  /**
   * Handle cell editing with a specific tool or the current selected tool
   */
  const handleCellEdit = (e, overrideTool) => {
    if (!canvasRef.current || !mapData || !onEdit) return;
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to grid coordinates
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
        
    // Basic validation if the center point is outside map boundaries
    if (gridCoords.x &lt; 0 || gridCoords.x >= mapData.width || 
        gridCoords.y &lt; 0 || gridCoords.y >= mapData.height) {
      // Coordinates outside map boundary - do nothing
      return;
    }
    
    // Use the override tool if provided, otherwise use the current tool
    const toolToUse = overrideTool || currentTool;
    
    // Only edit if using a tool other than select
    if (toolToUse === 'select') return;
    
    // For brush size of 1, just edit the single cell
    if (brushSize === 1) {
  
      // Use the selectedRotation prop directly
      const rotation = parseInt(selectedRotation, 10) || 0;
      
      // CRITICAL DEBUG: Log the exact tileId being sent from MapCanvas
      console.log(`MapCanvas EDIT: At (${gridCoords.x}, ${gridCoords.y}) using tool=${toolToUse}, passing tileId=${selectedTileId}, rotation=${rotation}`);
      
      // This is especially important for shadow tiles
      if (toolToUse === 'shadow') {
        console.log(`SHADOW TILE EDIT: At (${gridCoords.x}, ${gridCoords.y}) tileId=${selectedTileId} - IMPORTANT! Verify this ID is preserved!`);
      }
      
      // Pass rotation, selectedTileId, and selectedTilesetId
      onEdit(gridCoords.x, gridCoords.y, toolToUse, rotation, selectedTileId, selectedTilesetId);
  
      return;
    }
    
    // For larger brushes, always center around the hover cell
    // This matches the hover indicator logic for consistent behavior
    const halfBrush = Math.floor(brushSize / 2);
    
    // Calculate how to position the brush so the cursor is in the center
    // For even sizes, there's no true center cell, so we offset by half a cell
    const offset = brushSize % 2 === 0 ? 0.5 : 0;
    
    // Apply to all cells in the brush area
    for (let dy = -halfBrush + offset; dy &lt; brushSize - halfBrush + offset; dy++) {
      for (let dx = -halfBrush + offset; dx &lt; brushSize - halfBrush + offset; dx++) {
        const cellX = Math.floor(gridCoords.x + dx);
        const cellY = Math.floor(gridCoords.y + dy);
        
        // Skip if outside map boundaries
        if (cellX &lt; 0 || cellX >= mapData.width || 
            cellY &lt; 0 || cellY >= mapData.height) {
          continue;
        }
        
        // Edit this cell with the current rotation value from props
        const rotation = parseInt(selectedRotation, 10) || 0;
        
        // CRITICAL: For brush operations, also add logging for shadow tiles
        if (toolToUse === 'shadow') {
          console.log(`BRUSH: Shadow tile at (${cellX}, ${cellY}) with tileId=${selectedTileId}`);
        }
        
        onEdit(cellX, cellY, toolToUse, rotation, selectedTileId, selectedTilesetId);
      }
    }
  };

  // Set up ResizeObserver to update canvas dimensions
  useLayoutEffect(() => {
    if (!containerRef.current) return;
    
    const updateCanvasSize = () => {
      if (containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        setCanvasSize({ width, height });
      }
    };
    
    // Initial size update
    updateCanvasSize();
    
    // Set up ResizeObserver
    const resizeObserver = new ResizeObserver(entries => {
      if (entries.length > 0) {
        updateCanvasSize();
      }
    });
    
    resizeObserver.observe(containerRef.current);
    
    // Clean up
    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  
  // Update hover cell when mouse moves
  const updateHoverCell = (e) => {
    if (!canvasRef.current || !mapData) return;
    
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Only set hover cell if it's within map boundaries
    if (gridCoords.x >= 0 &amp;&amp; gridCoords.x &lt; mapData.width &amp;&amp; 
        gridCoords.y >= 0 &amp;&amp; gridCoords.y &lt; mapData.height) {
      setHoverCell(gridCoords);
    } else {
      // Clear hover cell when outside map boundaries
      setHoverCell(null);
    }
  };

  // Handle keyboard events for spacebar
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(true);
      }
    };

    const handleKeyUp = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(false);
        setIsDragging(false);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Reference to the canvas context
  const ctxRef = useRef(null);
  
  // Function to draw the canvas contents
  const drawCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !mapData) return;
    
    const ctx = canvas.getContext('2d');
    ctxRef.current = ctx;
    
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Background color
    ctx.fillStyle = '#1c1917'; // Stone-900 from Tailwind
    ctx.fillRect(0, 0, width, height);
    
    // Adjust for viewport offset
    const offsetX = viewportOffset.x;
    const offsetY = viewportOffset.y;
    
    // Draw default grid background - useful for visualizing empty spaces
    for (let x = 0; x &lt; mapData.width; x++) {
      for (let y = 0; y &lt; mapData.height; y++) {
        const screenX = Math.floor(x * gridSize + offsetX);
        const screenY = Math.floor(y * gridSize + offsetY);
        
        // Only draw if visible on screen
        if (screenX > -gridSize &amp;&amp; screenX &lt; width &amp;&amp; 
            screenY > -gridSize &amp;&amp; screenY &lt; height) {
          // Draw a subtle background for all cells
          // ctx.fillStyle = '#0f172a'; // Very dark slate blue
          ctx.fillStyle = '#042f2e'; // Very dark slate blue
          ctx.fillRect(screenX, screenY, gridSize, gridSize);
        }
      }
    }
    
    // Draw a clear boundary around the map area
    const mapWidthPx = mapData.width * gridSize;
    const mapHeightPx = mapData.height * gridSize;
    const mapStartX = offsetX;
    const mapStartY = offsetY;
    
    // Draw boundary with more visible color
    ctx.strokeStyle = '#5eead4'; // Orange-500
    ctx.lineWidth = 2;
    ctx.strokeRect(mapStartX, mapStartY, mapWidthPx, mapHeightPx);
    
    // Add small corner markers for extra visibility
    const cornerSize = 8;
    ctx.fillStyle = '#5eead4'; // Orange-500
    
    // Top-left corner
    ctx.fillRect(mapStartX - 1, mapStartY - 1, cornerSize, cornerSize);
    
    // Top-right corner
    ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY - 1, cornerSize, cornerSize);
    
    // Bottom-left corner
    ctx.fillRect(mapStartX - 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
    
    // Bottom-right corner
    ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
    
    // Draw map data (cells from each layer)
    if (mapData &amp;&amp; mapData.layers &amp;&amp; mapData.layers.length > 0) {
      // Render each visible layer from bottom to top
      mapData.layers.forEach((layer, layerIndex) => {
        if (!layer.visible) return;
        
        // Set layer opacity if defined, default to 1.0 (fully opaque)
        const layerOpacity = layer.opacity !== undefined ? layer.opacity : 1.0;
        ctx.globalAlpha = layerOpacity;
        
        // Draw cells
        layer.cells.forEach(cell => {
          // Calculate screen position for this cell
          const screenX = Math.floor(cell.x * gridSize + offsetX);
          const screenY = Math.floor(cell.y * gridSize + offsetY);
          
          // Draw the tile if it's visible on screen
          if (screenX > -gridSize &amp;&amp; screenX &lt; width &amp;&amp; 
              screenY > -gridSize &amp;&amp; screenY &lt; height) {
            drawTile(ctx, screenX, screenY, gridSize, cell);
          }
        });
        
        // Highlight current layer with a subtle border if it matches the currentLayer (only if showGrid is true)
        if (layerIndex === currentLayer &amp;&amp; showGrid) {
          // Make sure we use full opacity for the highlight, regardless of layer opacity
          ctx.globalAlpha = 1.0;
          ctx.strokeStyle = 'rgba(20, 184, 166, 0.5)'; // Teal with opacity
          ctx.lineWidth = 2;
          
          layer.cells.forEach(cell => {
            const screenX = Math.floor(cell.x * gridSize + offsetX);
            const screenY = Math.floor(cell.y * gridSize + offsetY);
            
            if (screenX > -gridSize &amp;&amp; screenX &lt; width &amp;&amp; 
                screenY > -gridSize &amp;&amp; screenY &lt; height) {
              ctx.strokeRect(screenX, screenY, gridSize, gridSize);
            }
          });
        }
        
        // Reset global alpha to default (1.0) after drawing this layer
        ctx.globalAlpha = 1.0;
      });
    }
    
    // Draw grid on top (only if showGrid is true)
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700 from Tailwind
      ctx.lineWidth = 1;
      
      // Calculate grid line positioning
      const gridOffsetX = offsetX % gridSize;
      const gridOffsetY = offsetY % gridSize;
      
      // Draw vertical lines
      for (let x = gridOffsetX; x &lt; width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
      }
      
      // Draw horizontal lines
      for (let y = gridOffsetY; y &lt; height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
      }
    }
    
    // Draw hover highlight
    if (hoverCell) {
      // For brush size of 1, just highlight the single cell
      if (brushSize === 1) {
        const screenX = Math.floor(hoverCell.x * gridSize + offsetX);
        const screenY = Math.floor(hoverCell.y * gridSize + offsetY);
        
        ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
        ctx.fillRect(screenX, screenY, gridSize, gridSize);
        
        // Show tool indicator
        ctx.fillStyle = '#14b8a6';
        ctx.font = '12px monospace';
        
        // If right mouse button is pressed, show "erase" as the tool
        const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
        ctx.fillText(displayTool, screenX + 5, screenY + 15);
      } else {
        // For larger brushes, always center around the hoverCell
        const halfBrush = Math.floor(brushSize / 2);
        
        // Calculate how to position the brush so the cursor is in the center
        // For even sizes, there's no true center cell, so we need to offset by half a cell
        const offset = brushSize % 2 === 0 ? 0.5 : 0;
        
        // Generate all cell positions that should be part of the brush
        for (let dy = -halfBrush + offset; dy &lt; brushSize - halfBrush + offset; dy++) {
          for (let dx = -halfBrush + offset; dx &lt; brushSize - halfBrush + offset; dx++) {
            const cellX = Math.floor(hoverCell.x + dx);
            const cellY = Math.floor(hoverCell.y + dy);
            
            // Skip if outside map boundaries
            if (cellX &lt; 0 || cellX >= mapData.width || 
                cellY &lt; 0 || cellY >= mapData.height) {
              continue;
            }
            
            // Calculate screen position (fixed to separate gridSize multiplication from offset)
            const screenX = Math.floor(cellX * gridSize) + offsetX;
            const screenY = Math.floor(cellY * gridSize) + offsetY;
            
            ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
            ctx.fillRect(screenX, screenY, gridSize, gridSize);
          }
        }
        
        // Show tool indicator centered on the cursor position
        const indicatorX = Math.floor(hoverCell.x * gridSize) + offsetX;
        const indicatorY = Math.floor(hoverCell.y * gridSize) + offsetY;
        
        ctx.fillStyle = '#14b8a6';
        ctx.font = '12px monospace';
        
        // If right mouse button is pressed, show "erase" as the tool
        const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
        ctx.fillText(`${displayTool} (${brushSize}×${brushSize})`, indicatorX + 5, indicatorY + 15);
      }
    }
  }, [
    gridSize, 
    viewportOffset, 
    mapData, 
    currentLayer, 
    hoverCell, 
    currentTool, 
    activeMouseButton, 
    showGrid, 
    tilesetImages,
    tilesetColumns,
    isRegistryInitialized,
    // selectedRotation, // Removed: Toolbar rotation shouldn't trigger full canvas redraw
    brushSize  // Add brushSize as a dependency too for completeness
  ]);
  
  // Call drawCanvas whenever relevant dependencies change
  useEffect(() => {
    if (canvasRef.current &amp;&amp; mapData) {
      drawCanvas();
    }
  }, [drawCanvas]);
  
  // Update canvas size when container size changes
  useEffect(() => {
    if (canvasRef.current &amp;&amp; canvasSize.width > 0 &amp;&amp; canvasSize.height > 0) {
      drawCanvas();
    }
  }, [canvasSize, drawCanvas]);

  // Manually trigger a redraw whenever tileset images are loaded
  useEffect(() => {
    if (isRegistryInitialized &amp;&amp; Object.keys(tilesetImages).length > 0 &amp;&amp; canvasRef.current &amp;&amp; mapData) {
      // Call drawCanvas without adding it to dependency array
      drawCanvas();
    }
  }, [isRegistryInitialized, tilesetImages, mapData]); // Trigger redraw when tilesets are loaded

  // Handle canvas mouse events
  const handleMouseDown = (e) => {
    // Prevent context menu on right click
    if (e.button === 2) {
      e.preventDefault();
    }
    
    setActiveMouseButton(e.button);
    
    // Middle mouse button (1) for panning
    if (e.button === 1) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
      e.preventDefault(); // Prevent default scrolling behavior for middle mouse button
    } 
    // Right mouse button (2) for erasing
    else if (e.button === 2 &amp;&amp; !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
    // Left mouse button (0) for drawing with current tool
    else if (e.button === 0 &amp;&amp; !isSpacePressed) {
      handleCellEdit(e);
    }
    // If space is pressed, start dragging regardless of which mouse button
    else if (isSpacePressed) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseMove = (e) => {
    // Always update hover cell
    updateHoverCell(e);
    
    // Handle dragging for pan with middle mouse button (1),
    // or spacebar + any mouse button
    if (isDragging &amp;&amp; (activeMouseButton === 1 || isSpacePressed)) {
      const dx = e.clientX - dragStart.x;
      const dy = e.clientY - dragStart.y;
      
      setViewportOffset({
        x: viewportOffset.x + dx,
        y: viewportOffset.y + dy
      });
      
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle spacebar + mouse move (even without button press)
    else if (isSpacePressed &amp;&amp; !isDragging) {
      // Start dragging when space is pressed and mouse moves
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle continuous drawing while left mouse button is down
    else if (activeMouseButton === 0 &amp;&amp; !isSpacePressed) {
      handleCellEdit(e);
    }
    // Handle continuous erasing while right mouse button is down
    else if (activeMouseButton === 2 &amp;&amp; !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
  };

  const handleMouseUp = () => {
    // Only stop dragging if we're not using spacebar navigation
    if (!isSpacePressed) {
      setIsDragging(false);
    }
    setActiveMouseButton(null);
  };

  const handleWheel = (e) => {
    // Get cursor position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Get grid coordinates under cursor before zoom
    const gridCoordsBefore = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Calculate new grid size
    let newGridSize;
    if (e.deltaY &lt; 0) {
      // Zoom in - increase grid size
      newGridSize = Math.min(gridSize + 4, 64);
    } else {
      // Zoom out - decrease grid size
      newGridSize = Math.max(gridSize - 4, 16);
    }
    
    // Calculate screen coordinates after zoom with the current viewport offset
    const screenCoordsAfter = {
      x: gridCoordsBefore.x * newGridSize + viewportOffset.x,
      y: gridCoordsBefore.y * newGridSize + viewportOffset.y
    };
    
    // Calculate the difference to maintain cursor position
    const dx = mouseX - screenCoordsAfter.x;
    const dy = mouseY - screenCoordsAfter.y;
    
    // Update grid size and adjust viewport offset
    setGridSize(newGridSize);
    setViewportOffset(prev => ({
      x: prev.x + dx,
      y: prev.y + dy
    }));
  };

  return (
    &lt;div 
      ref={containerRef}
      className="flex-1 relative flex overflow-hidden bg-stone-900"
    >
      &lt;div className="absolute top-2 left-2 bg-stone-800 p-2 rounded text-xs text-teal-400 flex items-center z-10">
        &lt;Grid size={14} className="mr-1" />
        &lt;span>Grid Size: {gridSize}px&lt;/span>
        {!showGrid &amp;&amp; &lt;span className="ml-2">(Grid Hidden)&lt;/span>}
      &lt;/div>
      
      &lt;canvas 
        ref={canvasRef}
        width={canvasSize.width}
        height={canvasSize.height}
        className="w-full h-full border border-stone-700"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onContextMenu={(e) => e.preventDefault()} // Prevent context menu on right click
      />
      &lt;div className="absolute bottom-2 right-2 bg-stone-800 p-2 rounded text-xs text-teal-400 z-10">
        {currentTool &amp;&amp; &lt;span>Tool: {activeMouseButton === 2 ? 'erase' : currentTool}&lt;/span>}
        {hoverCell &amp;&amp; &lt;span className="ml-2">Position: ({hoverCell.x}, {hoverCell.y})&lt;/span>}
      &lt;/div>
    &lt;/div>
  );
};

export default MapCanvas;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/MapPropertiesPanel.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: MapPropertiesPanel.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: MapPropertiesPanel.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useState } from 'react';
import { Grid, Save, Settings, X } from 'lucide-react';

/**
 * Panel for editing map properties
 */
const MapPropertiesPanel = ({ mapData, onApply, onCancel }) => {
  const [width, setWidth] = useState(mapData ? mapData.width : 20);
  const [height, setHeight] = useState(mapData ? mapData.height : 15);
  const [gridSize, setGridSize] = useState(mapData ? mapData.gridSize : 32);
  const [name, setName] = useState(mapData ? mapData.name : 'New Map');
  const [error, setError] = useState(null);

  // Validate input and apply changes
  const handleApply = () => {
    // Validate width and height
    if (width &lt; 1 || width > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    
    if (height &lt; 1 || height > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    
    if (gridSize &lt; 16 || gridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }
    
    // Apply changes
    onApply({
      width: Number(width),
      height: Number(height),
      gridSize: Number(gridSize),
      name
    });
  };

  // Handle input changes
  const handleInputChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  return (
    &lt;div className="bg-stone-800 border border-stone-700 rounded-lg p-4 w-64">
      &lt;div className="flex justify-between items-center mb-4">
        &lt;h2 className="text-teal-400 text-sm font-semibold flex items-center">
          &lt;Settings size={16} className="mr-1" />
          Map Properties
        &lt;/h2>
        &lt;button
          onClick={onCancel}
          className="text-stone-500 hover:text-stone-300"
        >
          &lt;X size={16} />
        &lt;/button>
      &lt;/div>
      
      {error &amp;&amp; (
        &lt;div className="bg-red-900/30 text-red-400 p-2 rounded mb-3 text-xs">
          {error}
        &lt;/div>
      )}
      
      &lt;div className="space-y-3">
        &lt;div>
          &lt;label className="block text-xs text-stone-400 mb-1">Map Name&lt;/label>
          &lt;input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        &lt;/div>
        
        &lt;div>
          &lt;label className="block text-xs text-stone-400 mb-1">Width (cells)&lt;/label>
          &lt;input
            type="text"
            value={width}
            onChange={handleInputChange(setWidth)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        &lt;/div>
        
        &lt;div>
          &lt;label className="block text-xs text-stone-400 mb-1">Height (cells)&lt;/label>
          &lt;input
            type="text"
            value={height}
            onChange={handleInputChange(setHeight)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        &lt;/div>
        
        &lt;div>
          &lt;label className="block text-xs text-stone-400 mb-1">Grid Size (pixels)&lt;/label>
          &lt;input
            type="text"
            value={gridSize}
            onChange={handleInputChange(setGridSize)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        &lt;/div>
        
        &lt;div className="pt-2 flex justify-end">
          &lt;button
            onClick={handleApply}
            className="bg-teal-700 hover:bg-teal-600 text-teal-100 px-3 py-1 rounded text-xs flex items-center"
          >
            &lt;Save size={14} className="mr-1" />
            Apply Changes
          &lt;/button>
        &lt;/div>
      &lt;/div>
    &lt;/div>
  );
};

export default MapPropertiesPanel;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/MapToolbar.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: MapToolbar.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: MapToolbar.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useState, useEffect } from 'react';
import { 
  Save, Undo, Redo, Trash2, Copy, Square, Circle, 
  Grid, ZoomIn, ZoomOut, Download, Upload, Plus, Minus,
  Layers, MousePointer, Hammer, Wand2, FileText, Settings,
  Home
} from 'lucide-react';

/**
 * Toolbar component for the Map Editor
 */
const MapToolbar = ({ 
  onSave, 
  onUndo, 
  onRedo, 
  onClear, 
  onExportAscii, 
  onImportAscii,
  onToggleGrid,
  onResetView,
  showGrid = true,
  saveStatus = 'saved', // default to 'saved'
  mapData,
  onApplyProperties
}) => {
  const [showProperties, setShowProperties] = useState(false);
  const [mapName, setMapName] = useState(mapData?.name || 'New Map');
  const [mapWidth, setMapWidth] = useState(mapData?.width || 20);
  const [mapHeight, setMapHeight] = useState(mapData?.height || 15);
  const [mapGridSize, setMapGridSize] = useState(mapData?.gridSize || 32);
  const [error, setError] = useState(null);

  // Update state when mapData changes
  useEffect(() => {
    if (mapData) {
      setMapName(mapData.name || 'New Map');
      setMapWidth(mapData.width || 20);
      setMapHeight(mapData.height || 15);
      setMapGridSize(mapData.gridSize || 32);
    }
  }, [mapData]);

  // Handle applying property changes
  const handleApplyProperties = () => {
    // Validate inputs
    if (mapWidth &lt; 1 || mapWidth > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    if (mapHeight &lt; 1 || mapHeight > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    if (mapGridSize &lt; 16 || mapGridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }

    // Clear any errors
    setError(null);

    // Apply changes
    onApplyProperties({
      name: mapName,
      width: Number(mapWidth),
      height: Number(mapHeight),
      gridSize: Number(mapGridSize)
    });
  };

  // Handle number input changes with validation
  const handleNumberChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  // Toggle properties panel
  const toggleProperties = () => {
    setShowProperties(!showProperties);
  };

  return (
    &lt;>
      &lt;div className="flex justify-between items-center p-2 bg-stone-800 border-b border-stone-700">
        {/* File operations */}
        &lt;div className="flex space-x-1 items-center">
          &lt;button 
            onClick={onSave}
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Save map"
          >
            &lt;Save size={18} />
          &lt;/button>
          &lt;button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Clear map"
            onClick={onClear}
          >
            &lt;Trash2 size={18} />
          &lt;/button>
          &lt;button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Export as PNG"
          >
            &lt;Download size={18} />
          &lt;/button>
          &lt;button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Import tileset"
          >
            &lt;Upload size={18} />
          &lt;/button>
          &lt;div className="h-6 border-r border-stone-700 mx-1">&lt;/div>
          &lt;button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Export as ASCII"
            onClick={onExportAscii}
          >
            &lt;FileText size={18} />
          &lt;/button>
          &lt;button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Import from ASCII"
            onClick={onImportAscii}
          >
            &lt;Upload size={18} />
          &lt;/button>
        &lt;/div>

        {/* Empty space in the middle to maintain layout */}
        &lt;div className="flex-1">&lt;/div>

        {/* View options */}
        &lt;div className="flex space-x-1">
          &lt;button
            onClick={onToggleGrid}
            className={`p-2 hover:bg-stone-700 rounded ${
              showGrid ? 'text-teal-400' : 'text-stone-500'
            }`}
            title={showGrid ? "Hide grid" : "Show grid"}
          >
            &lt;Grid size={18} />
          &lt;/button>
          &lt;button
            onClick={onResetView}
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Return to origin (0,0)"
          >
            &lt;Home size={18} />
          &lt;/button>
          &lt;button 
            className={`p-2 hover:bg-stone-700 rounded ${showProperties ? 'bg-stone-700 text-teal-300' : 'text-teal-400'}`}
            title="Map Properties"
            onClick={toggleProperties}
          >
            &lt;Settings size={18} />
          &lt;/button>
        &lt;/div>
      &lt;/div>
      
      {/* Properties Panel - Expandable */}
      {showProperties &amp;&amp; (
        &lt;div className="bg-stone-800 border-b border-stone-700 p-2 grid grid-cols-5 gap-2 items-center text-sm">
          {error &amp;&amp; (
            &lt;div className="col-span-5 bg-red-900/30 text-red-400 p-2 rounded mb-2 text-xs">
              {error}
            &lt;/div>
          )}
          
          &lt;div className="flex items-center">
            &lt;label className="mr-2 text-stone-400">Width:&lt;/label>
            &lt;input
              type="text"
              value={mapWidth}
              onChange={handleNumberChange(setMapWidth)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          &lt;/div>
          
          &lt;div className="flex items-center">
            &lt;label className="mr-2 text-stone-400">Height:&lt;/label>
            &lt;input
              type="text"
              value={mapHeight}
              onChange={handleNumberChange(setMapHeight)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          &lt;/div>
          
          &lt;div className="flex items-center">
            &lt;label className="mr-2 text-stone-400">Grid Size:&lt;/label>
            &lt;input
              type="text"
              value={mapGridSize}
              onChange={handleNumberChange(setMapGridSize)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          &lt;/div>
          
          &lt;div className="flex justify-end">
            &lt;button
              onClick={handleApplyProperties}
              className="bg-teal-700 hover:bg-teal-600 text-white px-3 py-1 rounded text-xs flex items-center"
            >
              &lt;Save size={14} className="mr-1" />
              Apply
            &lt;/button>
          &lt;/div>
        &lt;/div>
      )}
    &lt;/>
  );
};

export default MapToolbar;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/scripts/linenumber.js
================
/*global document */
(() => {
    const source = document.getElementsByClassName('prettyprint source linenums');
    let i = 0;
    let lineNumber = 0;
    let lineId;
    let lines;
    let totalLines;
    let anchorHash;

    if (source && source[0]) {
        anchorHash = document.location.hash.substring(1);
        lines = source[0].getElementsByTagName('li');
        totalLines = lines.length;

        for (; i < totalLines; i++) {
            lineNumber++;
            lineId = `line${lineNumber}`;
            lines[i].id = lineId;
            if (lineId === anchorHash) {
                lines[i].className += ' selected';
            }
        }
    }
})();

================
File: docs/map-editor/scripts/prettify/Apache-License-2.0.txt
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: docs/map-editor/scripts/prettify/lang-css.js
================
PR.registerLangHandler(PR.createSimpleLexer([["pln",/^[\t\n\f\r ]+/,null," \t\r\n"]],[["str",/^"(?:[^\n\f\r"\\]|\\(?:\r\n?|\n|\f)|\\[\S\s])*"/,null],["str",/^'(?:[^\n\f\r'\\]|\\(?:\r\n?|\n|\f)|\\[\S\s])*'/,null],["lang-css-str",/^url\(([^"')]*)\)/i],["kwd",/^(?:url|rgb|!important|@import|@page|@media|@charset|inherit)(?=[^\w-]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*)\s*:/i],["com",/^\/\*[^*]*\*+(?:[^*/][^*]*\*+)*\//],["com",
/^(?:<\!--|--\>)/],["lit",/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],["lit",/^#[\da-f]{3,6}/i],["pln",/^-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*/i],["pun",/^[^\s\w"']+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[["kwd",/^-?(?:[_a-z]|\\[\da-f]+ ?)(?:[\w-]|\\\\[\da-f]+ ?)*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[["str",/^[^"')]+/]]),["css-str"]);

================
File: docs/map-editor/scripts/prettify/prettify.js
================
var q=null;window.PR_SHOULD_USE_CONTINUATION=!0;
(function(){function L(a){function m(a){var f=a.charCodeAt(0);if(f!==92)return f;var b=a.charAt(1);return(f=r[b])?f:"0"<=b&&b<="7"?parseInt(a.substring(1),8):b==="u"||b==="x"?parseInt(a.substring(2),16):a.charCodeAt(1)}function e(a){if(a<32)return(a<16?"\\x0":"\\x")+a.toString(16);a=String.fromCharCode(a);if(a==="\\"||a==="-"||a==="["||a==="]")a="\\"+a;return a}function h(a){for(var f=a.substring(1,a.length-1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),a=
[],b=[],o=f[0]==="^",c=o?1:0,i=f.length;c<i;++c){var j=f[c];if(/\\[bdsw]/i.test(j))a.push(j);else{var j=m(j),d;c+2<i&&"-"===f[c+1]?(d=m(f[c+2]),c+=2):d=j;b.push([j,d]);d<65||j>122||(d<65||j>90||b.push([Math.max(65,j)|32,Math.min(d,90)|32]),d<97||j>122||b.push([Math.max(97,j)&-33,Math.min(d,122)&-33]))}}b.sort(function(a,f){return a[0]-f[0]||f[1]-a[1]});f=[];j=[NaN,NaN];for(c=0;c<b.length;++c)i=b[c],i[0]<=j[1]+1?j[1]=Math.max(j[1],i[1]):f.push(j=i);b=["["];o&&b.push("^");b.push.apply(b,a);for(c=0;c<
f.length;++c)i=f[c],b.push(e(i[0])),i[1]>i[0]&&(i[1]+1>i[0]&&b.push("-"),b.push(e(i[1])));b.push("]");return b.join("")}function y(a){for(var f=a.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g),b=f.length,d=[],c=0,i=0;c<b;++c){var j=f[c];j==="("?++i:"\\"===j.charAt(0)&&(j=+j.substring(1))&&j<=i&&(d[j]=-1)}for(c=1;c<d.length;++c)-1===d[c]&&(d[c]=++t);for(i=c=0;c<b;++c)j=f[c],j==="("?(++i,d[i]===void 0&&(f[c]="(?:")):"\\"===j.charAt(0)&&
(j=+j.substring(1))&&j<=i&&(f[c]="\\"+d[i]);for(i=c=0;c<b;++c)"^"===f[c]&&"^"!==f[c+1]&&(f[c]="");if(a.ignoreCase&&s)for(c=0;c<b;++c)j=f[c],a=j.charAt(0),j.length>=2&&a==="["?f[c]=h(j):a!=="\\"&&(f[c]=j.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return f.join("")}for(var t=0,s=!1,l=!1,p=0,d=a.length;p<d;++p){var g=a[p];if(g.ignoreCase)l=!0;else if(/[a-z]/i.test(g.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi,""))){s=!0;l=!1;break}}for(var r=
{b:8,t:9,n:10,v:11,f:12,r:13},n=[],p=0,d=a.length;p<d;++p){g=a[p];if(g.global||g.multiline)throw Error(""+g);n.push("(?:"+y(g)+")")}return RegExp(n.join("|"),l?"gi":"g")}function M(a){function m(a){switch(a.nodeType){case 1:if(e.test(a.className))break;for(var g=a.firstChild;g;g=g.nextSibling)m(g);g=a.nodeName;if("BR"===g||"LI"===g)h[s]="\n",t[s<<1]=y++,t[s++<<1|1]=a;break;case 3:case 4:g=a.nodeValue,g.length&&(g=p?g.replace(/\r\n?/g,"\n"):g.replace(/[\t\n\r ]+/g," "),h[s]=g,t[s<<1]=y,y+=g.length,
t[s++<<1|1]=a)}}var e=/(?:^|\s)nocode(?:\s|$)/,h=[],y=0,t=[],s=0,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=document.defaultView.getComputedStyle(a,q).getPropertyValue("white-space"));var p=l&&"pre"===l.substring(0,3);m(a);return{a:h.join("").replace(/\n$/,""),c:t}}function B(a,m,e,h){m&&(a={a:m,d:a},e(a),h.push.apply(h,a.e))}function x(a,m){function e(a){for(var l=a.d,p=[l,"pln"],d=0,g=a.a.match(y)||[],r={},n=0,z=g.length;n<z;++n){var f=g[n],b=r[f],o=void 0,c;if(typeof b===
"string")c=!1;else{var i=h[f.charAt(0)];if(i)o=f.match(i[1]),b=i[0];else{for(c=0;c<t;++c)if(i=m[c],o=f.match(i[1])){b=i[0];break}o||(b="pln")}if((c=b.length>=5&&"lang-"===b.substring(0,5))&&!(o&&typeof o[1]==="string"))c=!1,b="src";c||(r[f]=b)}i=d;d+=f.length;if(c){c=o[1];var j=f.indexOf(c),k=j+c.length;o[2]&&(k=f.length-o[2].length,j=k-c.length);b=b.substring(5);B(l+i,f.substring(0,j),e,p);B(l+i+j,c,C(b,c),p);B(l+i+k,f.substring(k),e,p)}else p.push(l+i,b)}a.e=p}var h={},y;(function(){for(var e=a.concat(m),
l=[],p={},d=0,g=e.length;d<g;++d){var r=e[d],n=r[3];if(n)for(var k=n.length;--k>=0;)h[n.charAt(k)]=r;r=r[1];n=""+r;p.hasOwnProperty(n)||(l.push(r),p[n]=q)}l.push(/[\S\s]/);y=L(l)})();var t=m.length;return e}function u(a){var m=[],e=[];a.tripleQuotedStrings?m.push(["str",/^(?:'''(?:[^'\\]|\\[\S\s]|''?(?=[^']))*(?:'''|$)|"""(?:[^"\\]|\\[\S\s]|""?(?=[^"]))*(?:"""|$)|'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$))/,q,"'\""]):a.multiLineStrings?m.push(["str",/^(?:'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$)|`(?:[^\\`]|\\[\S\s])*(?:`|$))/,
q,"'\"`"]):m.push(["str",/^(?:'(?:[^\n\r'\\]|\\.)*(?:'|$)|"(?:[^\n\r"\\]|\\.)*(?:"|$))/,q,"\"'"]);a.verbatimStrings&&e.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,q]);var h=a.hashComments;h&&(a.cStyleComments?(h>1?m.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,q,"#"]):m.push(["com",/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\n\r]*)/,q,"#"]),e.push(["str",/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,q])):m.push(["com",/^#[^\n\r]*/,
q,"#"]));a.cStyleComments&&(e.push(["com",/^\/\/[^\n\r]*/,q]),e.push(["com",/^\/\*[\S\s]*?(?:\*\/|$)/,q]));a.regexLiterals&&e.push(["lang-regex",/^(?:^^\.?|[!+-]|!=|!==|#|%|%=|&|&&|&&=|&=|\(|\*|\*=|\+=|,|-=|->|\/|\/=|:|::|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|[?@[^]|\^=|\^\^|\^\^=|{|\||\|=|\|\||\|\|=|~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\s*(\/(?=[^*/])(?:[^/[\\]|\\[\S\s]|\[(?:[^\\\]]|\\[\S\s])*(?:]|$))+\/)/]);(h=a.types)&&e.push(["typ",h]);a=(""+a.keywords).replace(/^ | $/g,
"");a.length&&e.push(["kwd",RegExp("^(?:"+a.replace(/[\s,]+/g,"|")+")\\b"),q]);m.push(["pln",/^\s+/,q," \r\n\t\xa0"]);e.push(["lit",/^@[$_a-z][\w$@]*/i,q],["typ",/^(?:[@_]?[A-Z]+[a-z][\w$@]*|\w+_t\b)/,q],["pln",/^[$_a-z][\w$@]*/i,q],["lit",/^(?:0x[\da-f]+|(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d\+)(?:e[+-]?\d+)?)[a-z]*/i,q,"0123456789"],["pln",/^\\[\S\s]?/,q],["pun",/^.[^\s\w"-$'./@\\`]*/,q]);return x(m,e)}function D(a,m){function e(a){switch(a.nodeType){case 1:if(k.test(a.className))break;if("BR"===a.nodeName)h(a),
a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)e(a);break;case 3:case 4:if(p){var b=a.nodeValue,d=b.match(t);if(d){var c=b.substring(0,d.index);a.nodeValue=c;(b=b.substring(d.index+d[0].length))&&a.parentNode.insertBefore(s.createTextNode(b),a.nextSibling);h(a);c||a.parentNode.removeChild(a)}}}}function h(a){function b(a,d){var e=d?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),g=a.nextSibling;f.appendChild(e);for(var h=g;h;h=g)g=h.nextSibling,f.appendChild(h)}return e}
for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),e;(e=a.parentNode)&&e.nodeType===1;)a=e;d.push(a)}var k=/(?:^|\s)nocode(?:\s|$)/,t=/\r\n?|\n/,s=a.ownerDocument,l;a.currentStyle?l=a.currentStyle.whiteSpace:window.getComputedStyle&&(l=s.defaultView.getComputedStyle(a,q).getPropertyValue("white-space"));var p=l&&"pre"===l.substring(0,3);for(l=s.createElement("LI");a.firstChild;)l.appendChild(a.firstChild);for(var d=[l],g=0;g<d.length;++g)e(d[g]);m===(m|0)&&d[0].setAttribute("value",
m);var r=s.createElement("OL");r.className="linenums";for(var n=Math.max(0,m-1|0)||0,g=0,z=d.length;g<z;++g)l=d[g],l.className="L"+(g+n)%10,l.firstChild||l.appendChild(s.createTextNode("\xa0")),r.appendChild(l);a.appendChild(r)}function k(a,m){for(var e=m.length;--e>=0;){var h=m[e];A.hasOwnProperty(h)?window.console&&console.warn("cannot override language handler %s",h):A[h]=a}}function C(a,m){if(!a||!A.hasOwnProperty(a))a=/^\s*</.test(m)?"default-markup":"default-code";return A[a]}function E(a){var m=
a.g;try{var e=M(a.h),h=e.a;a.a=h;a.c=e.c;a.d=0;C(m,h)(a);var k=/\bMSIE\b/.test(navigator.userAgent),m=/\n/g,t=a.a,s=t.length,e=0,l=a.c,p=l.length,h=0,d=a.e,g=d.length,a=0;d[g]=s;var r,n;for(n=r=0;n<g;)d[n]!==d[n+2]?(d[r++]=d[n++],d[r++]=d[n++]):n+=2;g=r;for(n=r=0;n<g;){for(var z=d[n],f=d[n+1],b=n+2;b+2<=g&&d[b+1]===f;)b+=2;d[r++]=z;d[r++]=f;n=b}for(d.length=r;h<p;){var o=l[h+2]||s,c=d[a+2]||s,b=Math.min(o,c),i=l[h+1],j;if(i.nodeType!==1&&(j=t.substring(e,b))){k&&(j=j.replace(m,"\r"));i.nodeValue=
j;var u=i.ownerDocument,v=u.createElement("SPAN");v.className=d[a+1];var x=i.parentNode;x.replaceChild(v,i);v.appendChild(i);e<o&&(l[h+1]=i=u.createTextNode(t.substring(b,o)),x.insertBefore(i,v.nextSibling))}e=b;e>=o&&(h+=2);e>=c&&(a+=2)}}catch(w){"console"in window&&console.log(w&&w.stack?w.stack:w)}}var v=["break,continue,do,else,for,if,return,while"],w=[[v,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],
"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],F=[w,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],G=[w,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],
H=[G,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"],w=[w,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],I=[v,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],
J=[v,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],v=[v,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],K=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/,N=/\S/,O=u({keywords:[F,H,w,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END"+
I,J,v],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),A={};k(O,["default-code"]);k(x([],[["pln",/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],["com",/^<\!--[\S\s]*?(?:--\>|$)/],["lang-",/^<\?([\S\s]+?)(?:\?>|$)/],["lang-",/^<%([\S\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\S\s]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\S\s]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\S\s]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),
["default-markup","htm","html","mxml","xhtml","xml","xsl"]);k(x([["pln",/^\s+/,q," \t\r\n"],["atv",/^(?:"[^"]*"?|'[^']*'?)/,q,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w-.:]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^\s"'>]*(?:[^\s"'/>]|\/(?=\s)))/],["pun",/^[/<->]+/],["lang-js",/^on\w+\s*=\s*"([^"]+)"/i],["lang-js",/^on\w+\s*=\s*'([^']+)'/i],["lang-js",/^on\w+\s*=\s*([^\s"'>]+)/i],["lang-css",/^style\s*=\s*"([^"]+)"/i],["lang-css",/^style\s*=\s*'([^']+)'/i],["lang-css",
/^style\s*=\s*([^\s"'>]+)/i]]),["in.tag"]);k(x([],[["atv",/^[\S\s]+/]]),["uq.val"]);k(u({keywords:F,hashComments:!0,cStyleComments:!0,types:K}),["c","cc","cpp","cxx","cyc","m"]);k(u({keywords:"null,true,false"}),["json"]);k(u({keywords:H,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:K}),["cs"]);k(u({keywords:G,cStyleComments:!0}),["java"]);k(u({keywords:v,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]);k(u({keywords:I,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),
["cv","py"]);k(u({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]);k(u({keywords:J,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]);k(u({keywords:w,cStyleComments:!0,regexLiterals:!0}),["js"]);k(u({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes",
hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);k(x([],[["str",/^[\S\s]+/]]),["regex"]);window.prettyPrintOne=function(a,m,e){var h=document.createElement("PRE");h.innerHTML=a;e&&D(h,e);E({g:m,i:e,h:h});return h.innerHTML};window.prettyPrint=function(a){function m(){for(var e=window.PR_SHOULD_USE_CONTINUATION?l.now()+250:Infinity;p<h.length&&l.now()<e;p++){var n=h[p],k=n.className;if(k.indexOf("prettyprint")>=0){var k=k.match(g),f,b;if(b=
!k){b=n;for(var o=void 0,c=b.firstChild;c;c=c.nextSibling)var i=c.nodeType,o=i===1?o?b:c:i===3?N.test(c.nodeValue)?b:o:o;b=(f=o===b?void 0:o)&&"CODE"===f.tagName}b&&(k=f.className.match(g));k&&(k=k[1]);b=!1;for(o=n.parentNode;o;o=o.parentNode)if((o.tagName==="pre"||o.tagName==="code"||o.tagName==="xmp")&&o.className&&o.className.indexOf("prettyprint")>=0){b=!0;break}b||((b=(b=n.className.match(/\blinenums\b(?::(\d+))?/))?b[1]&&b[1].length?+b[1]:!0:!1)&&D(n,b),d={g:k,h:n,i:b},E(d))}}p<h.length?setTimeout(m,
250):a&&a()}for(var e=[document.getElementsByTagName("pre"),document.getElementsByTagName("code"),document.getElementsByTagName("xmp")],h=[],k=0;k<e.length;++k)for(var t=0,s=e[k].length;t<s;++t)h.push(e[k][t]);var e=q,l=Date;l.now||(l={now:function(){return+new Date}});var p=0,d,g=/\blang(?:uage)?-([\w.]+)(?!\S)/;m()};window.PR={createSimpleLexer:x,registerLangHandler:k,sourceDecorator:u,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",
PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ"}})();

================
File: docs/map-editor/styles/jsdoc-default.css
================
@font-face {
    font-family: 'Open Sans';
    font-weight: normal;
    font-style: normal;
    src: url('../fonts/OpenSans-Regular-webfont.eot');
    src:
        local('Open Sans'),
        local('OpenSans'),
        url('../fonts/OpenSans-Regular-webfont.eot?#iefix') format('embedded-opentype'),
        url('../fonts/OpenSans-Regular-webfont.woff') format('woff'),
        url('../fonts/OpenSans-Regular-webfont.svg#open_sansregular') format('svg');
}

@font-face {
    font-family: 'Open Sans Light';
    font-weight: normal;
    font-style: normal;
    src: url('../fonts/OpenSans-Light-webfont.eot');
    src:
        local('Open Sans Light'),
        local('OpenSans Light'),
        url('../fonts/OpenSans-Light-webfont.eot?#iefix') format('embedded-opentype'),
        url('../fonts/OpenSans-Light-webfont.woff') format('woff'),
        url('../fonts/OpenSans-Light-webfont.svg#open_sanslight') format('svg');
}

html
{
    overflow: auto;
    background-color: #fff;
    font-size: 14px;
}

body
{
    font-family: 'Open Sans', sans-serif;
    line-height: 1.5;
    color: #4d4e53;
    background-color: white;
}

a, a:visited, a:active {
    color: #0095dd;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

header
{
    display: block;
    padding: 0px 4px;
}

tt, code, kbd, samp {
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
}

.class-description {
    font-size: 130%;
    line-height: 140%;
    margin-bottom: 1em;
    margin-top: 1em;
}

.class-description:empty {
    margin: 0;
}

#main {
    float: left;
    width: 70%;
}

article dl {
    margin-bottom: 40px;
}

article img {
  max-width: 100%;
}

section
{
    display: block;
    background-color: #fff;
    padding: 12px 24px;
    border-bottom: 1px solid #ccc;
    margin-right: 30px;
}

.variation {
    display: none;
}

.signature-attributes {
    font-size: 60%;
    color: #aaa;
    font-style: italic;
    font-weight: lighter;
}

nav
{
    display: block;
    float: right;
    margin-top: 28px;
    width: 30%;
    box-sizing: border-box;
    border-left: 1px solid #ccc;
    padding-left: 16px;
}

nav ul {
    font-family: 'Lucida Grande', 'Lucida Sans Unicode', arial, sans-serif;
    font-size: 100%;
    line-height: 17px;
    padding: 0;
    margin: 0;
    list-style-type: none;
}

nav ul a, nav ul a:visited, nav ul a:active {
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
    line-height: 18px;
    color: #4D4E53;
}

nav h3 {
    margin-top: 12px;
}

nav li {
    margin-top: 6px;
}

footer {
    display: block;
    padding: 6px;
    margin-top: 12px;
    font-style: italic;
    font-size: 90%;
}

h1, h2, h3, h4 {
    font-weight: 200;
    margin: 0;
}

h1
{
    font-family: 'Open Sans Light', sans-serif;
    font-size: 48px;
    letter-spacing: -2px;
    margin: 12px 24px 20px;
}

h2, h3.subsection-title
{
    font-size: 30px;
    font-weight: 700;
    letter-spacing: -1px;
    margin-bottom: 12px;
}

h3
{
    font-size: 24px;
    letter-spacing: -0.5px;
    margin-bottom: 12px;
}

h4
{
    font-size: 18px;
    letter-spacing: -0.33px;
    margin-bottom: 12px;
    color: #4d4e53;
}

h5, .container-overview .subsection-title
{
    font-size: 120%;
    font-weight: bold;
    letter-spacing: -0.01em;
    margin: 8px 0 3px 0;
}

h6
{
    font-size: 100%;
    letter-spacing: -0.01em;
    margin: 6px 0 3px 0;
    font-style: italic;
}

table
{
    border-spacing: 0;
    border: 0;
    border-collapse: collapse;
}

td, th
{
    border: 1px solid #ddd;
    margin: 0px;
    text-align: left;
    vertical-align: top;
    padding: 4px 6px;
    display: table-cell;
}

thead tr
{
    background-color: #ddd;
    font-weight: bold;
}

th { border-right: 1px solid #aaa; }
tr > th:last-child { border-right: 1px solid #ddd; }

.ancestors, .attribs { color: #999; }
.ancestors a, .attribs a
{
    color: #999 !important;
    text-decoration: none;
}

.clear
{
    clear: both;
}

.important
{
    font-weight: bold;
    color: #950B02;
}

.yes-def {
    text-indent: -1000px;
}

.type-signature {
    color: #aaa;
}

.name, .signature {
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
}

.details { margin-top: 14px; border-left: 2px solid #DDD; }
.details dt { width: 120px; float: left; padding-left: 10px;  padding-top: 6px; }
.details dd { margin-left: 70px; }
.details ul { margin: 0; }
.details ul { list-style-type: none; }
.details li { margin-left: 30px; padding-top: 6px; }
.details pre.prettyprint { margin: 0 }
.details .object-value { padding-top: 0; }

.description {
    margin-bottom: 1em;
    margin-top: 1em;
}

.code-caption
{
    font-style: italic;
    font-size: 107%;
    margin: 0;
}

.source
{
    border: 1px solid #ddd;
    width: 80%;
    overflow: auto;
}

.prettyprint.source {
    width: inherit;
}

.source code
{
    font-size: 100%;
    line-height: 18px;
    display: block;
    padding: 4px 12px;
    margin: 0;
    background-color: #fff;
    color: #4D4E53;
}

.prettyprint code span.line
{
  display: inline-block;
}

.prettyprint.linenums
{
  padding-left: 70px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.prettyprint.linenums ol
{
  padding-left: 0;
}

.prettyprint.linenums li
{
  border-left: 3px #ddd solid;
}

.prettyprint.linenums li.selected,
.prettyprint.linenums li.selected *
{
  background-color: lightyellow;
}

.prettyprint.linenums li *
{
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
}

.params .name, .props .name, .name code {
    color: #4D4E53;
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
    font-size: 100%;
}

.params td.description > p:first-child,
.props td.description > p:first-child
{
    margin-top: 0;
    padding-top: 0;
}

.params td.description > p:last-child,
.props td.description > p:last-child
{
    margin-bottom: 0;
    padding-bottom: 0;
}

.disabled {
    color: #454545;
}

================
File: docs/map-editor/styles/prettify-jsdoc.css
================
/* JSDoc prettify.js theme */

/* plain text */
.pln {
  color: #000000;
  font-weight: normal;
  font-style: normal;
}

/* string content */
.str {
  color: #006400;
  font-weight: normal;
  font-style: normal;
}

/* a keyword */
.kwd {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* a comment */
.com {
  font-weight: normal;
  font-style: italic;
}

/* a type name */
.typ {
  color: #000000;
  font-weight: normal;
  font-style: normal;
}

/* a literal value */
.lit {
  color: #006400;
  font-weight: normal;
  font-style: normal;
}

/* punctuation */
.pun {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* lisp open bracket */
.opn {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* lisp close bracket */
.clo {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* a markup tag name */
.tag {
  color: #006400;
  font-weight: normal;
  font-style: normal;
}

/* a markup attribute name */
.atn {
  color: #006400;
  font-weight: normal;
  font-style: normal;
}

/* a markup attribute value */
.atv {
  color: #006400;
  font-weight: normal;
  font-style: normal;
}

/* a declaration */
.dec {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* a variable name */
.var {
  color: #000000;
  font-weight: normal;
  font-style: normal;
}

/* a function name */
.fun {
  color: #000000;
  font-weight: bold;
  font-style: normal;
}

/* Specify class=linenums on a pre to get line numbering */
ol.linenums {
  margin-top: 0;
  margin-bottom: 0;
}

================
File: docs/map-editor/styles/prettify-tomorrow.css
================
/* Tomorrow Theme */
/* Original theme - https://github.com/chriskempson/tomorrow-theme */
/* Pretty printing styles. Used with prettify.js. */
/* SPAN elements with the classes below are added by prettyprint. */
/* plain text */
.pln {
  color: #4d4d4c; }

@media screen {
  /* string content */
  .str {
    color: #718c00; }

  /* a keyword */
  .kwd {
    color: #8959a8; }

  /* a comment */
  .com {
    color: #8e908c; }

  /* a type name */
  .typ {
    color: #4271ae; }

  /* a literal value */
  .lit {
    color: #f5871f; }

  /* punctuation */
  .pun {
    color: #4d4d4c; }

  /* lisp open bracket */
  .opn {
    color: #4d4d4c; }

  /* lisp close bracket */
  .clo {
    color: #4d4d4c; }

  /* a markup tag name */
  .tag {
    color: #c82829; }

  /* a markup attribute name */
  .atn {
    color: #f5871f; }

  /* a markup attribute value */
  .atv {
    color: #3e999f; }

  /* a declaration */
  .dec {
    color: #f5871f; }

  /* a variable name */
  .var {
    color: #c82829; }

  /* a function name */
  .fun {
    color: #4271ae; } }
/* Use higher contrast and text-weight for printable form. */
@media print, projection {
  .str {
    color: #060; }

  .kwd {
    color: #006;
    font-weight: bold; }

  .com {
    color: #600;
    font-style: italic; }

  .typ {
    color: #404;
    font-weight: bold; }

  .lit {
    color: #044; }

  .pun, .opn, .clo {
    color: #440; }

  .tag {
    color: #006;
    font-weight: bold; }

  .atn {
    color: #404; }

  .atv {
    color: #060; } }
/* Style */
/*
pre.prettyprint {
  background: white;
  font-family: Consolas, Monaco, 'Andale Mono', monospace;
  font-size: 12px;
  line-height: 1.5;
  border: 1px solid #ccc;
  padding: 10px; }
*/

/* Specify class=linenums on a pre to get line numbering */
ol.linenums {
  margin-top: 0;
  margin-bottom: 0; }

/* IE indents via margin-left */
li.L0,
li.L1,
li.L2,
li.L3,
li.L4,
li.L5,
li.L6,
li.L7,
li.L8,
li.L9 {
  /* */ }

/* Alternate shading for lines */
li.L1,
li.L3,
li.L5,
li.L7,
li.L9 {
  /* */ }

================
File: docs/map-editor/TilePalette.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: TilePalette.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: TilePalette.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';
import { Heart, RotateCw, CheckCircle, XCircle, Store } from 'lucide-react';
import axios from 'axios';
import API_CONFIG from '../../../config/api';
import { 
  TILE_SIZE,
  getTileName,
  getTileCoordinates
} from './utils/tileRegistry';

// Import the dynamic tile registry
import dynamicTileRegistry from './utils/dynamicTileRegistry';

// Debug helper to log API requests and responses
const logApiCall = (method, url, status, data) => {
  console.log(`API ${method} ${url} - Status: ${status}`);
  console.log('Data:', data);
};

/**
 * Enhanced TilePalette component with marketplace integration
 */
const TilePalette = ({ 
  onSelectTile, 
  selectedTileId = 0, 
  selectedTilesetId = null,
  tileType = 'floor',
  onChangeTileType,
  selectedRotation = 0,
  onRotateTile,
  createWindow
}) => {
  // Local state to track rotation, will sync back to parent
  const [localRotation, setLocalRotation] = useState(selectedRotation);
  
  // Sync with parent's rotation when it changes
  useEffect(() => {
    setLocalRotation(selectedRotation);
  }, [selectedRotation]);
  
  const [favoriteTiles, setFavoriteTiles] = useState([]);
  const [isAddingToFavorites, setIsAddingToFavorites] = useState(false);
  const [addFavoriteError, setAddFavoriteError] = useState(null);
  const [isFavorited, setIsFavorited] = useState(false);
  const [tilesetImages, setTilesetImages] = useState({});
  const [loading, setLoading] = useState(true);
  const [currentSection, setCurrentSection] = useState(null); // Filter by section for floor
  const [currentWallSection, setCurrentWallSection] = useState(null); // Filter by section for wall
  const [currentShadowSection, setCurrentShadowSection] = useState(null);
  const [sections, setSections] = useState({});
  const [isInitialized, setIsInitialized] = useState(false);
  const initialTileTypeRef = useRef(tileType);
  const [showFavoritesSection, setShowFavoritesSection] = useState(true);
  const [marketplaceStatus, setMarketplaceStatus] = useState('idle'); // 'idle', 'loading', 'success', 'error'
  
  // Available tile types
  const tileTypes = [
    { id: 'floor', name: 'Floor' },
    { id: 'wall', name: 'Wall' },
    { id: 'shadow', name: 'Shadow' },
    { id: 'door', name: 'Door' }
  ];
  
  // Store the initial tile type to handle first render properly
  useEffect(() => {
    initialTileTypeRef.current = tileType;
  }, []);

  // Initialize dynamic tile registry
  useEffect(() => {
    const initRegistry = async () => {
      setLoading(true);
      try {
        await dynamicTileRegistry.initializeTileRegistry();
        
        // Get all sections
        const allSections = dynamicTileRegistry.getAllSections();
        setSections(allSections);
        
        // Get selected tilesets to load individual images
        const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
        const images = {};
        
        // Load each tileset image individually by ID
        for (const tileset of selectedTilesets) {
          images[tileset.id] = dynamicTileRegistry.getTilesetImageForCategory(tileType, tileset.id);
        }
        
        setTilesetImages(images);
        setIsInitialized(true);
      } catch (error) {
        console.error('Error initializing dynamic tile registry:', error);
      } finally {
        setLoading(false);
      }
    };
    
    initRegistry();
  }, []);

  // Load favorite tiles when component mounts
  useEffect(() => {
    loadFavoriteTiles();
  }, []);

  // Check if the currently selected tile is a favorite
  useEffect(() => {
    checkIsFavorite();
  }, [selectedTileId, tileType, selectedTilesetId]);

  // Function to load favorite tiles
  const loadFavoriteTiles = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      console.log('Fetching favorite tiles from:', `${API_CONFIG.BASE_URL}/favorite-tiles`);
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', '/favorite-tiles', response.status, response.data);
      
      // Ensure we have an array, even if the response is unexpected
      if (Array.isArray(response.data)) {
        setFavoriteTiles(response.data);
      } else if (response.data &amp;&amp; Array.isArray(response.data.favorites)) {
        setFavoriteTiles(response.data.favorites);
      } else {
        console.error('Unexpected response format for favorite tiles:', response.data);
        setFavoriteTiles([]);
      }
    } catch (error) {
      console.error('Error loading favorite tiles from server:', error);
      setFavoriteTiles([]);
    }
  };

  // Function to check if selected tile is a favorite
  const checkIsFavorite = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles/check/${selectedTileId}/${tileType}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', `/favorite-tiles/check/${selectedTileId}/${tileType}`, response.status, response.data);
      setIsFavorited(response.data.isFavorite);
    } catch (error) {
      console.error('Error checking favorite status from server:', error);
      setIsFavorited(false);
    }
  };

  // Function to add a tile to favorites
  const addToFavorites = async () => {
    setIsAddingToFavorites(true);
    setAddFavoriteError(null);
    
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setAddFavoriteError('Authentication required');
        setIsAddingToFavorites(false);
        return;
      }

      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { 
          tileIndex: selectedTileId, 
          tileType,
          tilesetId: selectedTilesetId // Include tileset ID for favorites
        },
        { headers: { 
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}` 
          } 
        }
      );
      
      logApiCall('POST', '/favorite-tiles', response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(true);
    } catch (error) {
      console.error('Error adding tile to favorites:', error);
      setAddFavoriteError(error.response?.data?.message || 'Failed to add to favorites');
    } finally {
      setIsAddingToFavorites(false);
    }
  };

  // Function to remove a tile from favorites
  const removeFromFavorites = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await axios.delete(
        `${API_CONFIG.BASE_URL}/favorite-tiles/${selectedTileId}/${tileType}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      logApiCall('DELETE', `/favorite-tiles/${selectedTileId}/${tileType}`, response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(false);
    } catch (error) {
      console.error('Error removing tile from favorites:', error);
    }
  };

  // Function to open the marketplace window
  const openMarketplace = () => {
    if (createWindow) {
      setMarketplaceStatus('loading');
      
      try {
        // Create the marketplace window
        createWindow({
          type: 'marketplace',
          title: 'Tileset Marketplace',
          width: 900,
          height: 700
        });
        
        setMarketplaceStatus('success');
      } catch (error) {
        console.error('Error opening marketplace window:', error);
        setMarketplaceStatus('error');
      }
    } else {
      console.warn('createWindow function not provided');
      setMarketplaceStatus('error');
    }
  };

  // Function to refresh tilesets after marketplace changes
  const refreshTilesets = async () => {
    setLoading(true);
    try {
      await dynamicTileRegistry.refreshTileRegistry();
      
      // Get all sections
      const allSections = dynamicTileRegistry.getAllSections();
      setSections(allSections);
      
      // Get selected tilesets to load individual images
      const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
      const images = {};
      
      // Load each tileset image individually by ID
      for (const tileset of selectedTilesets) {
        images[tileset.id] = dynamicTileRegistry.getTilesetImageForCategory(tileType, tileset.id);
      }
      
      setTilesetImages(images);
      setMarketplaceStatus('success');
    } catch (error) {
      console.error('Error refreshing tilesets:', error);
      setMarketplaceStatus('error');
    } finally {
      setLoading(false);
    }
  };

  // Render a tile canvas with specific tileset
  const renderTileCanvas = (tileIndex, tilesetId, size = 40, rotation = 0) => {
    const image = tilesetImages[tilesetId];
    
    if (!image) return null;
    
    return (
      &lt;canvas
        ref={canvas => {
          if (canvas &amp;&amp; image) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, size, size);
            
            // Calculate coordinates
            const { sourceX, sourceY } = getTileCoordinates(tileIndex);
            
            // Save the context state before transformations
            ctx.save();
            
            // Move to the center of the canvas for rotation
            ctx.translate(size/2, size/2);
            
            // Convert degrees to radians and rotate
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            
            // Draw the image centered and rotated
            ctx.drawImage(
              image,
              sourceX, // sourceX
              sourceY, // sourceY
              TILE_SIZE, // sourceWidth
              TILE_SIZE, // sourceHeight
              -size/2, // destX (negative half-size to center)
              -size/2, // destY (negative half-size to center)
              size, // destWidth
              size  // destHeight
            );
            
            // Restore the context to its original state
            ctx.restore();
          }
        }}
        width={size}
        height={size}
        className="mx-auto"
        style={{ display: 'block' }}
      />
    );
  };

  // Get tiles to display based on current section filter and tile type
  // UPDATED: Now returns objects with both tilesetId and tileId
  const displayTiles = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    let sectionFilter = null;
    if (tileType === 'floor') sectionFilter = currentSection;
    else if (tileType === 'wall') sectionFilter = currentWallSection;
    else if (tileType === 'shadow') sectionFilter = currentShadowSection;
    
    let result = [];
    
    // If no section filter, show all tiles for this category
    if (!sectionFilter) {
      // Collect all tiles from all sections with tileset information
      for (const [sectionKey, section] of Object.entries(categorySections)) {
        const { startIndex, count, tilesetId } = section;
        for (let i = 0; i &lt; count; i++) {
          result.push({
            tileIndex: startIndex + i,
            tilesetId: tilesetId,
            sectionKey: sectionKey,
            sectionName: section.name,
            tilesetName: section.tilesetName
          });
        }
      }
    } else {
      // Show only tiles from the selected section
      const section = categorySections[sectionFilter];
      if (section) {
        const { startIndex, count, tilesetId } = section;
        result = Array.from({ length: count }, (_, i) => ({
          tileIndex: startIndex + i,
          tilesetId: tilesetId,
          sectionKey: sectionFilter,
          sectionName: section.name,
          tilesetName: section.tilesetName
        }));
      }
    }
    
    return result;
  }, [isInitialized, sections, tileType, currentSection, currentWallSection, currentShadowSection]);

  // Get section options for the dropdown
  const sectionOptions = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    return Object.entries(categorySections).map(([key, section]) => ({
      value: key,
      label: `${section.name} (${section.tilesetName})`
    }));
  }, [isInitialized, sections, tileType]);

  return (
    &lt;div className="bg-stone-800 border-t border-stone-700 p-2 max-h-64 overflow-y-auto">
      {/* Tile Type Selector with Marketplace Button */}
      &lt;div className="flex flex-col space-y-2 mb-4">
        &lt;div className="flex justify-between items-center">
          &lt;h3 className="text-sm font-mono text-teal-400">TILE TYPE&lt;/h3>
          
          {/* Buttons for Selected Tile */}
          &lt;div className="flex items-center">
            {/* Marketplace Button */}
            
            {/* Refresh Button */}
            &lt;button 
              className="text-green-400 hover:text-green-300 flex items-center mr-2"
              onClick={refreshTilesets}
              disabled={loading}
              title="Refresh Tilesets"
            >
              &lt;RotateCw size={16} className={`mr-1 ${loading ? 'animate-spin' : ''}`} />
              &lt;span className="text-xs">{loading ? '' : ''}&lt;/span>
            &lt;/button>
            
            {/* Rotate Button */}
            &lt;button 
              className="text-blue-400 hover:text-blue-300 flex items-center mr-2"
              onClick={() => {
                // Calculate the new rotation value
                const newRotation = (localRotation + 90) % 360;
                
                // Update local state immediately for visual feedback
                setLocalRotation(newRotation);
                
                // Then notify parent (if callback exists) 
                if (typeof onRotateTile === 'function') {
                  onRotateTile(newRotation);
                }
              }}
              title="Rotate tile"
            >
              &lt;RotateCw size={16} className="mr-1" />
              &lt;span className="text-xs" id="tile-rotation-display">{localRotation}°&lt;/span>
            &lt;/button>
            
            {/* Favorite Button */}
            {isFavorited ? (
              &lt;button 
                className="text-pink-500 hover:text-pink-400 flex items-center mr-2"
                onClick={removeFromFavorites}
                title="Remove from favorites"
              >
                &lt;Heart size={16} fill="currentColor" className="mr-1" />
                &lt;span className="text-xs">&lt;/span>
              &lt;/button>
            ) : (
              &lt;button 
                className="text-gray-400 hover:text-pink-500 flex items-center mr-2"
                onClick={addToFavorites}
                title="Add to favorites"
                disabled={isAddingToFavorites}
              >
                &lt;Heart size={16} className="mr-1" />
                &lt;span className="text-xs">{isAddingToFavorites ? '' : ''}&lt;/span>
              &lt;/button>
            )}
          &lt;/div>
        &lt;/div>
        
        {addFavoriteError &amp;&amp; (
          &lt;div className="text-red-500 text-xs mb-2">{addFavoriteError}&lt;/div>
        )}
        
        {/* Tile Type Select */}
        &lt;select
          className="bg-stone-700 text-teal-300 text-sm rounded p-2 w-full border-none"
          value={tileType}
          onChange={(e) => onChangeTileType(e.target.value)}
        >
          {tileTypes.map(type => (
            &lt;option key={type.id} value={type.id}>{type.name}&lt;/option>
          ))}
        &lt;/select>
      &lt;/div>
      
      {/* Favorite Tiles Section */}
      {Array.isArray(favoriteTiles) &amp;&amp; favoriteTiles.length > 0 &amp;&amp; (
        &lt;div className="mb-4">
          &lt;div className="flex justify-between items-center mb-2">
            &lt;h3 className="text-sm font-mono text-stone-400">FAVORITE TILES&lt;/h3>
            &lt;button 
              className="text-xs text-stone-400 hover:text-stone-300"
              onClick={() => setShowFavoritesSection(!showFavoritesSection)}
            >
              {showFavoritesSection ? 'Hide' : 'Show'}
            &lt;/button>
          &lt;/div>
          
          {showFavoritesSection &amp;&amp; (
            &lt;div className="grid grid-cols-5 gap-1 justify-items-center mb-3">
              {Array.isArray(favoriteTiles) &amp;&amp; favoriteTiles.map((tile) => (
                &lt;div
                  key={`fav-${tile.tileset_id || 'unknown'}-${tile.tile_type}-${tile.tile_index}`}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tile.tile_index &amp;&amp; 
                    tileType === tile.tile_type &amp;&amp;
                    selectedTilesetId === (tile.tileset_id || null)
                      ? 'bg-teal-900 border-teal-500' 
                      : 'hover:bg-stone-700 border-transparent'
                  }`}
                onClick={() => {
                    console.log('🔵 FAVORITE TILE CLICKED:', {
                      tileIndex: tile.tile_index,
                      tilesetId: tile.tileset_id,
                      tileType: tile.tile_type,
                      currentSelected: { selectedTileId, selectedTilesetId }
                    });
                    // UPDATED: Pass both tile index and tileset ID
                    onSelectTile(tile.tile_index, tile.tileset_id || null);
                    if (tile.tile_type !== tileType) {
                      onChangeTileType(tile.tile_type);
                    }
                  }}
                  title={getTileName(tile.tile_index, tile.tile_type)}
                >
                  &lt;div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                    {tile.tileset_id &amp;&amp; tilesetImages[tile.tileset_id]
                      ? renderTileCanvas(
                          tile.tile_index, 
                          tile.tileset_id, 
                          40, 
                          selectedTileId === tile.tile_index &amp;&amp; 
                          tileType === tile.tile_type &amp;&amp; 
                          selectedTilesetId === tile.tileset_id ? selectedRotation : 0
                        )
                      : &lt;div className="w-full h-full flex items-center justify-center text-xs text-stone-500">Loading&lt;/div>
                    }
                  &lt;/div>
                &lt;/div>
              ))}
            &lt;/div>
          )}
        &lt;/div>
      )}
      
      {/* Section filter dropdown */}
      &lt;div className="flex justify-between items-center mb-2">
        &lt;h3 className="text-sm font-mono text-teal-400">
          {tileType === 'floor' ? 'FLOORS' : 
          tileType === 'wall' ? 'WALLS' : 
          tileType === 'shadow' ? 'SHADOWS' : 
          tileType === 'door' ? 'DOORS' : 'TILES'}
        &lt;/h3>
        
        {/* Section filter dropdown */}
        {tileType !== 'door' &amp;&amp; (
          &lt;select 
            className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
            value={
              tileType === 'floor' ? currentSection || "" : 
              tileType === 'wall' ? currentWallSection || "" : 
              tileType === 'shadow' ? currentShadowSection || "" : ""
            }
            onChange={(e) => {
              const value = e.target.value || null;
              if (tileType === 'floor') setCurrentSection(value);
              else if (tileType === 'wall') setCurrentWallSection(value);
              else if (tileType === 'shadow') setCurrentShadowSection(value);
            }}
          >
            &lt;option value="">All Tiles&lt;/option>
            {sectionOptions.map(option => (
              &lt;option key={option.value} value={option.value}>{option.label}&lt;/option>
            ))}
          &lt;/select>
        )}
      &lt;/div>
      
      {/* Door tile simple selector */}
      {tileType === 'door' &amp;&amp; (
        &lt;div className="mb-2">
          &lt;div className="grid grid-cols-2 gap-2">
            &lt;div 
              className="bg-stone-700 p-3 rounded cursor-pointer border-2 border-teal-500 text-center"
              onClick={() => onSelectTile(0, null)} // No tileset for doors
            >
              &lt;div className="bg-slate-900 h-10 w-full flex items-center justify-center">
                &lt;div className="bg-amber-700 h-5 w-8">&lt;/div>
              &lt;/div>
              &lt;div className="mt-1 text-xs text-teal-300">Basic Door&lt;/div>
            &lt;/div>
          &lt;/div>
        &lt;/div>
      )}
      
      {/* Tiles grid - shown for all tile types except door */}
      {tileType !== 'door' &amp;&amp; (
        loading ? (
          &lt;div className="text-center p-4 text-stone-400">Loading...&lt;/div>
        ) : displayTiles.length === 0 ? (
          &lt;div className="text-center p-6 text-stone-400 bg-stone-900 rounded-lg border border-stone-700">
            &lt;div className="mb-4">
              &lt;Store size={48} className="mx-auto text-stone-500 mb-3" />
              &lt;h3 className="text-lg font-semibold text-teal-400 mb-2">No Tilesets Available&lt;/h3>
              &lt;p className="text-sm mb-4">
                You haven't selected any tilesets for {tileType} tiles yet. 
                Visit the marketplace to browse and select tilesets to use in your maps.
              &lt;/p>
            &lt;/div>
          &lt;/div>
        ) : (
          &lt;div className="grid grid-cols-5 gap-1 justify-items-center">
            {displayTiles.map(tile => (
              &lt;div
                key={`${tile.tilesetId}-${tile.tileIndex}`} // FIXED: Unique keys using tileset + tile
                className={`rounded cursor-pointer border ${
                  selectedTileId === tile.tileIndex &amp;&amp; selectedTilesetId === tile.tilesetId
                    ? 'bg-teal-900 border-teal-500' 
                    : 'hover:bg-stone-700 border-transparent'
                }`}
                onClick={() => {
                  console.log('🟢 REGULAR TILE CLICKED:', {
                    tileIndex: tile.tileIndex,
                    tilesetId: tile.tilesetId,
                    sectionName: tile.sectionName,
                    tilesetName: tile.tilesetName,
                    currentSelected: { selectedTileId, selectedTilesetId, tileType }
                  });
                  console.log('🔧 CALLING onSelectTile with:', tile.tileIndex, tile.tilesetId);
                  onSelectTile(tile.tileIndex, tile.tilesetId);
                }}
                title={`${tile.sectionName} - ${dynamicTileRegistry.getTileName(tile.tileIndex, tileType)} (${tile.tilesetName})`}
              >
                &lt;div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                  {renderTileCanvas(
                    tile.tileIndex, 
                    tile.tilesetId, 
                    40, 
                    selectedTileId === tile.tileIndex &amp;&amp; selectedTilesetId === tile.tilesetId ? selectedRotation : 0
                  )}
                &lt;/div>
              &lt;/div>
            ))}
          &lt;/div>
        )
      )}
    &lt;/div>
  );
};

export default TilePalette;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: docs/map-editor/TilesetSelector.jsx.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: TilesetSelector.jsx</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: TilesetSelector.jsx</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React, { useState, useEffect } from 'react';
import { Image, Check, X } from 'lucide-react';

/**
 * Component for selecting and previewing available tilesets
 */
const TilesetSelector = ({ 
  onSelectTileset, 
  onClose,
  currentTileset
}) => {
  const [tilesets, setTilesets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedTileset, setSelectedTileset] = useState(currentTileset || null);
  const [error, setError] = useState(null);

  // Predefined tilesets from the oryx_ultimate_fantasy_1.2 folder
  useEffect(() => {
    // In a real app, this would be fetched from the server or file system
    const availableTilesets = [
      {
        id: 'uf_terrain',
        name: 'Fantasy Terrain',
        path: '/oryx_ultimate_fantasy_1.2/uf_terrain.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_terrain.png',
        tileSize: 48,
        cols: 16
      },
      {
        id: 'uf_items',
        name: 'Fantasy Items',
        path: '/oryx_ultimate_fantasy_1.2/uf_items.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_items.png',
        tileSize: 48,
        cols: 16
      },
      {
        id: 'uf_heroes',
        name: 'Fantasy Heroes',
        path: '/oryx_ultimate_fantasy_1.2/uf_heroes.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_heroes.png',
        tileSize: 48,
        cols: 16
      }
    ];

    setTilesets(availableTilesets);
    setLoading(false);
  }, []);

  const handleSelectTileset = (tileset) => {
    setSelectedTileset(tileset);
  };

  const handleConfirm = () => {
    if (!selectedTileset) {
      setError('Please select a tileset first');
      return;
    }
    onSelectTileset(selectedTileset);
    onClose();
  };

  return (
    &lt;div className="bg-stone-800 border border-stone-700 rounded-lg p-4 w-full max-w-3xl">
      &lt;div className="flex justify-between items-center mb-4">
        &lt;h2 className="text-teal-400 text-lg font-semibold flex items-center">
          &lt;Image size={20} className="mr-2" />
          Select Tileset
        &lt;/h2>
        &lt;button
          onClick={onClose}
          className="text-stone-500 hover:text-stone-300"
        >
          &lt;X size={20} />
        &lt;/button>
      &lt;/div>
      
      {error &amp;&amp; (
        &lt;div className="bg-red-900/30 text-red-400 p-2 rounded mb-3 text-sm">
          {error}
        &lt;/div>
      )}
      
      {loading ? (
        &lt;div className="p-4 text-center text-stone-400">wuh available tilesets...&lt;/div>
      ) : (
        &lt;div className="grid grid-cols-2 gap-4 mb-4">
          {tilesets.map(tileset => (
            &lt;div 
              key={tileset.id}
              className={`p-3 rounded-lg cursor-pointer border ${
                selectedTileset?.id === tileset.id 
                  ? 'border-teal-500 bg-stone-700' 
                  : 'border-stone-700 hover:bg-stone-700/50'
              }`}
              onClick={() => handleSelectTileset(tileset)}
            >
              &lt;div className="flex justify-between items-start mb-2">
                &lt;h3 className="text-teal-300 font-medium">{tileset.name}&lt;/h3>
                {selectedTileset?.id === tileset.id &amp;&amp; (
                  &lt;Check size={16} className="text-teal-400" />
                )}
              &lt;/div>
              
              &lt;div className="bg-stone-900 rounded h-32 flex items-center justify-center overflow-hidden">
                &lt;img 
                  src={tileset.preview} 
                  alt={tileset.name}
                  className="max-w-full max-h-full object-contain"
                />
              &lt;/div>
              
              &lt;div className="mt-2 text-xs text-stone-400">
                &lt;div>Tile Size: {tileset.tileSize}px&lt;/div>
                &lt;div>Columns: {tileset.cols}&lt;/div>
              &lt;/div>
            &lt;/div>
          ))}
        &lt;/div>
      )}
      
      &lt;div className="flex justify-end space-x-2 mt-4 pt-3 border-t border-stone-700">
        &lt;button
          onClick={onClose}
          className="px-4 py-2 bg-stone-700 hover:bg-stone-600 text-stone-300 rounded text-sm"
        >
          Cancel
        &lt;/button>
        &lt;button
          onClick={handleConfirm}
          className="px-4 py-2 bg-teal-700 hover:bg-teal-600 text-white rounded text-sm flex items-center"
          disabled={!selectedTileset}
        >
          &lt;Check size={16} className="mr-1" />
          Select Tileset
        &lt;/button>
      &lt;/div>
    &lt;/div>
  );
};

export default TilesetSelector;
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Global</h3><ul><li><a href="global.html#LayerPanel">LayerPanel</a></li><li><a href="global.html#MapCanvas">MapCanvas</a></li><li><a href="global.html#MapPropertiesPanel">MapPropertiesPanel</a></li><li><a href="global.html#MapToolbar">MapToolbar</a></li><li><a href="global.html#TilePalette">TilePalette</a></li><li><a href="global.html#TilesetSelector">TilesetSelector</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.4</a> on Sun Jun 01 2025 20:54:15 GMT-0400 (Eastern Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/agooba_favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <title>SLUMNET</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: jsoncanvas-main/_config.yml
================
name:                'JSON Canvas'
title:               'JSON Canvas'
url:                 'https://jsoncanvas.org'
description:         'An open file format for infinite canvas data.'
exclude:             ['.obsidian']

github:              [metadata]

baseurl:             ''

layouts_dir:         .layouts
includes_dir:        .layouts

use_html_extension:  false

permalink:           pretty
relative_permalinks: false

defaults:
  - scope:
      path: "**/*"
    values:
      layout: "canvas"
  - scope:
      path: "spec/**/*.md"
    values:
      layout: "docs"
  - scope:
      path: "docs/**/*.md"
    values:
      layout: "docs"

================
File: jsoncanvas-main/.gitignore
================
_site
.sass-cache
.jekyll-cache
.jekyll-metadata
.obsidian
vendor
.DS_Store

================
File: jsoncanvas-main/.layouts/404.html
================
<!DOCTYPE html>
<html lang="en">
{% include head.html %}
  <body id="home" style="--scale: 1; --pan-x: 0px; --pan-y: 0px;">

  <div id="container">

    <div id="canvas-container">

      <svg id="canvas-edges">
        <defs>
          <marker id="arrowhead" markerWidth="10" markerHeight="8" 
          refX="5" refY="4" orient="auto">
            <polygon points="0 0, 10 4, 0 8"/>
          </marker>
        </defs>
        <g id="edge-paths">
        </g>
      </svg>

      <div id="canvas-nodes">
        <node id="logo" class="node node-file" data-node-type="file" data-node-file="logo.svg" style="left: 36px; top: 48px;">
            <div class="node-name">logo.svg</div>
            <img width="160" height="60" src="/logo.svg" alt="JSON Feed" />
        </node>

        <node id="readme" class="node node-link" data-node-type="file" data-node-file="readme.md" style="left: 36px; top: 240px;">
          <div class="node-name">404</div>
          {{ content }}
        </node>

        <node id="nav" class="node node-text" data-node-type="text" style="left: 336px; top: 36px;">
          <div class="node-name"></div>
          <div class="node-text-content">
            <p>Learn more:</p>
            <ul>
              <li><a href="/docs/apps">Apps</a></li>
              <li><a href="/spec/1.0">Spec</a></li>
              <li><a href="https://github.com/obsidianmd/jsoncanvas">GitHub</a></li>
            </ul>
          </div>
        </node>
      </div>

      <div id="output" class="theme-dark hidden">
        <div class="code-header">
          <span class="language">JSON&nbsp;Canvas</span>
          <span class="close-output">×</span>
        </div>
        <div id="output-code">
          <pre><code class="language-json" id="positionsOutput"></code></pre>
        </div>
         <div class="code-footer">
          <button class="button-copy">Copy code</button>
          <button class="button-download">Download file</button>
        </div>
      </div>

      <div id="controls">
        <div id="zoom-controls">
          <button id="toggle-output">Toggle output</button>
          <button id="zoom-out">Zoom out</button>
          <button id="zoom-in">Zoom in</button>
          <button id="zoom-reset">Reset</button>
        </div>
      </div>
    </div>

  </div>

  <script>
    let edges = [
      {
        id: "edge-logo-nav",
        fromNode: "logo",
        fromSide: "right",
        fromEnd: "none",
        toNode: "nav",
        toSide: "left",
        toEnd: "arrow",
      },
    ];
  </script>

  <script src="/assets/canvas.js"></script>
  <script src="/assets/prism.js"></script>
  </body>
</html>

================
File: jsoncanvas-main/.layouts/canvas.html
================
<!DOCTYPE html>
<html lang="en">
{% include head.html %}
  <body id="home" style="--scale: 1; --pan-x: 0px; --pan-y: 0px;">

  <div id="container">

    <div id="canvas-container">

      <svg id="canvas-edges">
        <defs>
          <marker id="arrowhead" markerWidth="10" markerHeight="8" 
          refX="5" refY="4" orient="auto">
            <polygon points="0 0, 10 4, 0 8"/>
          </marker>
        </defs>
        <g id="edge-paths">
        </g>
      </svg>

      <div id="canvas-nodes">
        <node id="spec" class="node node-link" data-node-type="file" data-node-file="spec/1.0.md" style="left: 600px; top: 140px;">
          <div class="node-name">spec/1.0</div>
          <iframe
            width="100%"
            height="100%"
            src="/spec/1.0?hidenav=true">
          </iframe>
        </node>

        <node id="readme" class="node node-link" data-node-type="file" data-node-file="readme.md" style="left: 36px; top: 240px;">
          <div class="node-name">readme</div>
          {{ content }}
        </node>

        <node id="nav" class="node node-text" data-node-type="text" style="left: 336px; top: 36px;">
          <div class="node-name"></div>
          <div class="node-text-content">
            <p>Learn more:</p>
            <ul>
              <li><a href="/docs/apps">Apps</a></li>
              <li><a href="/spec/1.0">Spec</a></li>
              <li><a href="https://github.com/obsidianmd/jsoncanvas">GitHub</a></li>
            </ul>
          </div>
        </node>
        
        <node id="logo" class="node node-file" data-node-type="file" data-node-file="logo.svg" style="left: 36px; top: 48px;">
            <div class="node-name">logo.svg</div>
            <img width="160" height="60" src="/logo.svg" alt="JSON Feed" />
        </node>
      </div>

      <div id="output" class="theme-dark hidden">
        <div class="code-header">
          <span class="language">JSON&nbsp;Canvas</span>
          <span class="close-output">×</span>
        </div>
        <div id="output-code">
          <pre><code class="language-json" id="positionsOutput"></code></pre>
        </div>
         <div class="code-footer">
          <button class="button-copy">Copy code</button>
          <button class="button-download">Download file</button>
        </div>
      </div>

      <div id="controls">
        <div id="zoom-controls">
          <button id="toggle-output">Toggle output</button>
          <button id="zoom-out">Zoom out</button>
          <button id="zoom-in">Zoom in</button>
          <button id="zoom-reset">Reset</button>
        </div>
      </div>
    </div>

  </div>

  <script>
    let edges = [
      {
        id: "edge-readme-spec",
        fromNode: "readme",
        fromSide: "right",
        fromEnd: "none",
        toNode: "spec",
        toSide: "left",
        toEnd: "arrow",
      },
      {
        id: "edge-logo-nav",
        fromNode: "logo",
        fromSide: "right",
        fromEnd: "none",
        toNode: "nav",
        toSide: "left",
        toEnd: "arrow",
      },
    ];
  </script>

  <script src="/assets/canvas.js"></script>
  <script src="/assets/prism.js"></script>
  </body>
</html>

================
File: jsoncanvas-main/.layouts/docs.html
================
<!DOCTYPE html>
<html lang="en">
{% include head.html %}
  <body>

    {% include nav.html %}

    <div class="page">
        {{ content }}
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function() {
          const urlParams = new URLSearchParams(window.location.search);
          const hideNav = urlParams.get('hidenav');
          if(hideNav === 'true') {
              document.body.classList.add('hidenav');
          }
      });
      document.addEventListener('DOMContentLoaded', function() {
        const links = document.querySelectorAll('a');
        links.forEach(link => {
          const url = new URL(link.href);
          if (url.hostname !== window.location.hostname) {
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
          }
        });
      });
    </script>
  </body>
</html>

================
File: jsoncanvas-main/.layouts/head.html
================
<head>
    <meta charset="UTF-8">
    <title>{{ site.title }} — {{ page.title }}</title>

    <meta name="viewport"            content="width=device-width, initial-scale=1.0">
    <meta name="description"         content="{% if page.content -%}{{ page.content | markdownify | strip_html | strip_newlines | truncate: 160 }}{% else -%}{{ site.description }}{% endif -%}">
    <meta name="author"              content="{{ site.name }}">

    <link rel="canonical"            href="{{ site.url }}{{ page.url }}">
    <link rel="icon"                 href="{{ site.url }}/favicon.ico" sizes="32x32">
    <link rel="icon"                 href="{{ site.url }}/assets/icon.svg"    type="image/svg+xml">
    <link rel="apple-touch-icon"     href="{{ site.url }}/assets/apple-touch-icon.png">
    <link rel="stylesheet"           href="{{ site.url }}/assets/style.css"  type="text/css">

    <meta property="og:site_name"    content="{{ site.title }}">
    <meta property="og:url"          content="{{ site.url }}{{ page.url }}">
    <meta property="og:title"        content="{{ site.title }}">
    <meta property="og:description"  content="{% if page.content -%}{{ page.content | markdownify | strip_html | strip_newlines | truncate: 160 }}{% else -%}{{ site.description }}{% endif -%}">
    <meta property="og:type"         content="{% if page.title -%}article{% else -%}website{% endif -%}">
    <meta property="og:image"        content="{{ site.url }}/assets/card.png">

    <meta name="twitter:card"        content="summary_large_image">
    <meta name="twitter:image"       content="{{ site.url }}/assets/card.png">
    <meta name="twitter:title"       content="{{ site.title }}">
    <meta name="twitter:description" content="{% if page.content -%}{{ page.content | markdownify | strip_html | strip_newlines | truncate: 160 }}{% else -%}{{ site.description }}{% endif -%}">
  </head>

================
File: jsoncanvas-main/.layouts/nav.html
================
<div id="navbar">
      <nav>
        <a href="/" id="logo"><img width="120" height="44" src="/logo.svg" alt="JSON Feed" /></a>
        <a href="/docs/apps" class="link">Apps</a>
        <a href="/spec/1.0" class="link">Spec</a>
        <a href="https://github.com/obsidianmd/jsoncanvas" class="link">GitHub</a>
      </nav>

      <hr>
    </div>

================
File: jsoncanvas-main/404.md
================
---
title: Not found
permalink: /404.html
layout: 404
---

<div class="container">
  <svg width="96" height="96" viewBox="0 0 128 128" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M-4.36441e-06 102.115C-1.95401e-06 88.3294 11.1757 77.1537 24.9615 77.1538V77.1538C38.7474 77.1538 49.9231 88.3294 49.9231 102.115V102.115C49.9231 115.901 38.7474 127.077 24.9615 127.077V127.077C11.1757 127.077 -6.77481e-06 115.901 -4.36441e-06 102.115V102.115Z" fill="var(--color-ax-1)"/>
  <path d="M77.1538 24.9615C77.1538 11.1757 88.3295 1.95401e-06 102.115 4.36441e-06V4.36441e-06C115.901 6.77481e-06 127.077 11.1757 127.077 24.9615V24.9615C127.077 38.7474 115.901 49.9231 102.115 49.9231V49.9231C88.3295 49.9231 77.1538 38.7474 77.1538 24.9615V24.9615Z" fill="var(--color-ax-1)"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M63.5386 104.102C63.5385 81.6995 81.699 63.539 104.101 63.539H113.462V82.2601H104.101C92.0384 82.2601 82.2597 92.0389 82.2597 104.102L82.2598 113.462L63.5386 113.462L63.5386 104.102Z" fill="var(--color-ax-1)"/>
  </svg>

  <h1>404</h1>

  <p>Whoops. You've found an unknown part of this infinite canvas. <a href="/">Head back home</a>.</p>
</div>

================
File: jsoncanvas-main/assets/canvas.js
================
// Initial state of the canvas
let scale, panOffsetX, panOffsetY;

const ZOOM_SPEED = 0.1;
const minScale = 0.35;
const maxScale = 1.25;
const container = document.getElementById('canvas-nodes');

let isDragging = false;
let isSpacePressed = false;
let isPanning = false;

let startX = 0;
let startY = 0;
let lastTouchX = 0;
let lastTouchY = 0;
let touchStartPanX = 0;
let touchStartPanY = 0;

function adjustCanvasToViewport() {
  const nodes = document.querySelectorAll('.node');
  let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;

  nodes.forEach(node => {
    const x = parseInt(node.style.left, 10);
    const y = parseInt(node.style.top, 10);
    const width = node.offsetWidth;
    const height = node.offsetHeight;

    minX = Math.min(minX, x);
    maxX = Math.max(maxX, x + width);
    minY = Math.min(minY, y);
    maxY = Math.max(maxY, y + height);
  });

  const boundingBoxWidth = maxX - minX;
  const boundingBoxHeight = maxY - minY;
  const viewportWidth = window.innerWidth;
  const viewportHeight = window.innerHeight;

  const scaleX = viewportWidth / (boundingBoxWidth + 80);
  const scaleY = viewportHeight / (boundingBoxHeight + 80);
  scale = Math.min(scaleX, scaleY, 1); // Ensure the scale is not more than 1

  panOffsetX = (viewportWidth - boundingBoxWidth * scale) / 2 - minX * scale;
  panOffsetY = (viewportHeight - boundingBoxHeight * scale) / 2 - minY * scale;

  // Apply the calculated scale and pan offsets
  applyPanAndZoom();

  document.getElementById('canvas-nodes').style.opacity = 1;
  document.getElementById('canvas-edges').style.opacity = 1;
}

document.addEventListener('DOMContentLoaded', adjustCanvasToViewport);

// Zoom
window.addEventListener('wheel', (e) => {
    if (e.ctrlKey || e.metaKey) {
        if (e.deltaY > 0) {
            scale = Math.max(scale - ZOOM_SPEED, minScale);
        } else {
            scale = Math.min(scale + ZOOM_SPEED, maxScale);
        }

        document.body.style.setProperty('--scale', scale);
        e.preventDefault();
    }
}, {passive: false});

// Buttons
document.getElementById('zoom-in').addEventListener('click', function() {
    scale = Math.min(scale + ZOOM_SPEED, maxScale);
    document.body.style.setProperty('--scale', scale);
});

document.getElementById('zoom-out').addEventListener('click', function() {
    scale = Math.max(scale - ZOOM_SPEED, minScale);
    document.body.style.setProperty('--scale', scale);
});

document.getElementById('zoom-reset').addEventListener('click', function() {
  adjustCanvasToViewport();
});

document.getElementById('toggle-output').addEventListener('click', function() {
  const output = document.getElementById('output');
  output.classList.toggle('hidden');
});

document.querySelector('.close-output').addEventListener('click', function() {
  const output = document.getElementById('output');
  output.classList.toggle('hidden');
});

document.querySelector('.button-copy').addEventListener('click', function() {
  const positionsOutput = document.getElementById('positionsOutput').textContent;
  navigator.clipboard.writeText(positionsOutput).catch(err => {
    console.error('Error copying canvas data: ', err);
  });
});

document.querySelector('.button-download').addEventListener('click', function() {
  const positionsOutput = document.getElementById('positionsOutput').textContent;
  const blob = new Blob([positionsOutput], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'sample.canvas';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
});

// Very simplified Markdown conversion
function htmlToMarkdown(html) {
  let markdown = html.replace(/<br\s*[\/]?>/gi, "\n");
  markdown = markdown.replace(/<a href="([^"]+)">([^<]+)<\/a>/gi, "[$2]($1)");
  markdown = markdown.replace(/<ul>/gi, "\n\n").replace(/<\/ul>/gi, "\n\n").replace(/<li>/gi, "- ").replace(/<\/li>/gi, "\n");
  markdown = markdown.replace(/<[^>]+>/g, '');
  markdown = markdown.replace(/\n\s*-\s+/g, "\n- ");
  markdown = markdown.trim().replace(/\n{3,}/g, "\n\n");
  return markdown;
}

document.addEventListener('DOMContentLoaded', function() {
  const links = document.querySelectorAll('a');
  links.forEach(link => {
    const url = new URL(link.href);
    if (url.hostname !== window.location.hostname) {
      link.target = '_blank';
      link.rel = 'noopener noreferrer';
    }
  });
});

function prepareForSerialization() {
  document.querySelectorAll('a').forEach(link => {
      if (link.hasAttribute('target') && link.target === '_blank') {
          link.removeAttribute('target');
          link.removeAttribute('rel');
      }
  });
}

// Serialize canvas data
function updateCanvasData() {
  prepareForSerialization();
  const nodes = Array.from(document.querySelectorAll('.node')).map(node => {
      const nodeObject = {
          id: node.id,
          type: node.getAttribute('data-node-type'),
          x: parseInt(node.style.left, 10),
          y: parseInt(node.style.top, 10),
          width: node.offsetWidth,
          height: node.offsetHeight,
      };

      const fileAttribute = node.getAttribute('data-node-file');
      if (fileAttribute) {
          nodeObject.file = fileAttribute;
      }

      if (nodeObject.type === 'text') {
          const textContent = node.querySelector('.node-text-content').innerHTML;
          nodeObject.text = htmlToMarkdown(textContent);
      }


      return nodeObject;
  });

  const canvasData = {
    nodes: nodes,
    edges: edges,
  };

  const positionsOutput = document.getElementById('positionsOutput');
  positionsOutput.textContent = JSON.stringify(canvasData, null, 2);

  Prism.highlightElement(positionsOutput);
}

function getAnchorPoint(node, side) {
  const x = parseInt(node.style.left, 10);
  const y = parseInt(node.style.top, 10);
  const width = node.offsetWidth;
  const height = node.offsetHeight;

  switch (side) {
    case 'top':
      return { x: x + width / 2, y: y };
    case 'right':
      return { x: x + width, y: y + height / 2 };
    case 'bottom':
      return { x: x + width / 2, y: y + height };
    case 'left':
      return { x: x, y: y + height / 2 };
    default: // center or unspecified case
      return { x: x + width / 2, y: y + height / 2 };
  }
}

function drawEdges() {
  const svgContainer = document.getElementById('edge-paths');
  svgContainer.innerHTML = ''; // Clear existing edges for redraw

  edges.forEach(edge => {
    const fromNode = document.getElementById(edge.fromNode);
    const toNode = document.getElementById(edge.toNode);

    if (fromNode && toNode) {
      const fromPoint = getAnchorPoint(fromNode, edge.fromSide);
      const toPoint = getAnchorPoint(toNode, edge.toSide);

      const curveTightness = 0.75;
      const controlPointX1 = fromPoint.x + (toPoint.x - fromPoint.x) * curveTightness;
      const controlPointX2 = fromPoint.x + (toPoint.x - fromPoint.x) * (1 - curveTightness);
      const controlPointY1 = fromPoint.y;
      const controlPointY2 = toPoint.y;

      const d = `M ${fromPoint.x} ${fromPoint.y} C ${controlPointX1} ${controlPointY1}, ${controlPointX2} ${controlPointY2}, ${toPoint.x} ${toPoint.y}`;

      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('d', d);
      path.setAttribute('stroke', 'black');
      path.setAttribute('fill', 'none');
      if (edge.toEnd === 'arrow') {
        path.setAttribute('marker-end', 'url(#arrowhead)');
      }

      svgContainer.appendChild(path);
    }
  });
}

// Drag nodes
document.querySelectorAll('.node .node-name').forEach(nodeName => {
  nodeName.addEventListener('mousedown', function(e) {
    if (isSpacePressed) return;
    
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    selectedElement = this.parentElement;
    selectedElement.classList.add('is-dragging');
  });
});

window.addEventListener('mousemove', function(e) {
  if (!isDragging || !selectedElement) return;
  
  const dx = (e.clientX - startX) / scale;
  const dy = (e.clientY - startY) / scale;

  selectedElement.style.left = `${parseInt(selectedElement.style.left, 10) + dx}px`;
  selectedElement.style.top = `${parseInt(selectedElement.style.top, 10) + dy}px`;

  startX = e.clientX;
  startY = e.clientY;

  drawEdges();
});

window.addEventListener('mouseup', function() {
  if (isDragging && selectedElement) {
    selectedElement.classList.remove('is-dragging');
    isDragging = false;
    selectedElement = null;
    updateCanvasData();
    drawEdges();
  }
});

// Panning
window.addEventListener('keydown', function(e) {
  if (e.code === 'Space') {
    e.preventDefault();
    isSpacePressed = true;
    document.body.classList.add('will-pan');
  }
});

window.addEventListener('keyup', function(e) {
  if (e.code === 'Space') {
    isSpacePressed = false;
    document.body.classList.remove('will-pan');
  }
});

window.addEventListener('mousedown', function(e) {
  if (isSpacePressed && !isDragging) {
    isPanning = true;
    document.body.style.cursor = 'grabbing';
    panStartX = e.clientX - panOffsetX;
    panStartY = e.clientY - panOffsetY;
  }
});

window.addEventListener('mousemove', function(e) {
  if (isPanning) {
    panOffsetX = e.clientX - panStartX;
    panOffsetY = e.clientY - panStartY;

    document.body.style.setProperty('--pan-x', `${panOffsetX}px`);
    document.body.style.setProperty('--pan-y', `${panOffsetY}px`);
  }
});

window.addEventListener('mouseup', function() {
  if (isPanning) {
    isPanning = false;
    document.body.style.cursor = '';
  }
});

// Touch-based devices 
let initialDistance = null;

document.addEventListener('gesturestart', function(e){ e.preventDefault(); });

document.getElementById('canvas-container').addEventListener('touchstart', function(e) {
  if (e.touches.length === 1) { // Single touch for panning
    isPanning = true;
    const touch = e.touches[0];
    touchStartPanX = touch.pageX - panOffsetX;
    touchStartPanY = touch.pageY - panOffsetY;
    lastTouchX = touch.pageX;
    lastTouchY = touch.pageY;
  } else if (e.touches.length === 2) { // Two-finger touch for zooming
    e.preventDefault(); // Prevent page zoom
    const touch1 = e.touches[0];
    const touch2 = e.touches[1];
    initialDistance = Math.sqrt((touch2.pageX - touch1.pageX) ** 2 + (touch2.pageY - touch1.pageY) ** 2);
  }
}, { passive: false });

// Touch move for panning and zooming
document.getElementById('canvas-container').addEventListener('touchmove', function(e) {
  if (e.touches.length === 1 && isPanning) {
    const touch = e.touches[0];
    const dx = touch.pageX - lastTouchX;
    const dy = touch.pageY - lastTouchY;
    panOffsetX += dx;
    panOffsetY += dy;
    lastTouchX = touch.pageX;
    lastTouchY = touch.pageY;
    applyPanAndZoom();
    drawEdges();
  } else if (e.touches.length === 2) { // Adjust for zooming
    e.preventDefault();
    const touch1 = e.touches[0];
    const touch2 = e.touches[1];
    const distance = Math.sqrt((touch2.pageX - touch1.pageX) ** 2 + (touch2.pageY - touch1.pageY) ** 2);
    const scaleChange = distance / initialDistance;
    scale = Math.min(Math.max(minScale, scale * scaleChange), maxScale); // Apply and limit scale
    document.body.style.setProperty('--scale', scale);
    initialDistance = distance;
    applyPanAndZoom();
  }
}, { passive: false });

document.getElementById('canvas-container').addEventListener('touchend', function(e) {
  if (isPanning) {
    isPanning = false;
  }
  if (e.touches.length < 2) {
    initialDistance = null; // Reset zoom tracking on lifting one finger
  }
});

// Activate node on touch
document.querySelectorAll('.node .node-name').forEach(nodeName => {
  nodeName.addEventListener('touchstart', function(e) {
    // Prevent activating multiple nodes simultaneously
    deactivateAllNodes();
    const node = this.parentElement;
    node.classList.add('is-active');
    // Prepare for potential drag
    isDragging = false;
    const touch = e.touches[0];
    startX = touch.pageX;
    startY = touch.pageY;
    selectedElement = node;
    e.stopPropagation();
  }, {passive: true});
});

// Deactivate nodes when tapping outside
document.addEventListener('touchstart', function(e) {
  if (!e.target.closest('.node')) {
    deactivateAllNodes();
  }
});

function deactivateAllNodes() {
  document.querySelectorAll('.node').forEach(node => {
    node.classList.remove('is-active');
  });
}

// Handling dragging for an activated node
document.addEventListener('touchmove', function(e) {
  if (isDragging && selectedElement && selectedElement.classList.contains('is-active')) {
    const touch = e.touches[0];
    const dx = (touch.pageX - startX) / scale;
    const dy = (touch.pageY - startY) / scale;
    selectedElement.style.left = `${parseInt(selectedElement.style.left, 10) + dx}px`;
    selectedElement.style.top = `${parseInt(selectedElement.style.top, 10) + dy}px`;

    // Update startX and startY for the next move event
    startX = touch.pageX;
    startY = touch.pageY;

    // Call drawEdges to update edge positions based on the new node positions
    drawEdges();

    e.preventDefault(); // Prevent default to avoid scrolling and other touch actions
  }
}, { passive: false });

// Determine if dragging should start
document.addEventListener('touchmove', function(e) {
  if (selectedElement && !isDragging) {
    const touch = e.touches[0];
    if (Math.abs(touch.pageX - startX) > 10 || Math.abs(touch.pageY - startY) > 10) {
      isDragging = true; // Start dragging if moved beyond threshold
    }
  }
}, {passive: true});

// End dragging
document.addEventListener('touchend', function() {
  if (isDragging && selectedElement) {
    selectedElement.classList.remove('is-dragging');
    isDragging = false;
    selectedElement = null;
  }
});

function applyPanAndZoom() {
  document.body.style.setProperty('--scale', scale);
  document.body.style.setProperty('--pan-x', `${panOffsetX}px`);
  document.body.style.setProperty('--pan-y', `${panOffsetY}px`);
}

// Prevent the whole page from zooming on pinch
document.addEventListener('gesturestart', function(e) {
  e.preventDefault();
});

document.addEventListener('gesturechange', function(e) {
  e.preventDefault();
});

drawEdges();
updateCanvasData();

================
File: jsoncanvas-main/assets/icon.svg
================
<svg width="1024" height="1024" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_33_23)">
<rect width="1024" height="1024" fill="#8B0A5F"/>
<path d="M157.538 748.306C157.538 668.55 222.192 603.896 301.948 603.896C381.703 603.896 446.358 668.55 446.358 748.306C446.358 828.062 381.703 892.716 301.948 892.716C222.192 892.716 157.538 828.062 157.538 748.306Z" fill="white"/>
<path d="M603.9 301.948C603.9 222.192 668.555 157.537 748.31 157.538C828.066 157.538 892.72 222.192 892.72 301.948C892.72 381.703 828.066 446.358 748.31 446.358C668.555 446.358 603.9 381.703 603.9 301.948Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M813.95 579.283C813.95 708.886 708.886 813.95 579.283 813.95L525.129 813.95L525.129 705.642L579.283 705.642C649.069 705.642 705.642 649.069 705.642 579.283L705.642 525.13L813.95 525.13L813.95 579.283Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_33_23">
<rect width="1024" height="1024" rx="196" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: jsoncanvas-main/assets/prism.js
================
/* PrismJS 1.29.0
https://prismjs.com/download.html#themes=prism&languages=clike+javascript+json */
var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(e){var n=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,t=0,r={},a={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function e(n){return n instanceof i?new i(n.type,e(n.content),n.alias):Array.isArray(n)?n.map(e):n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function e(n,t){var r,i;switch(t=t||{},a.util.type(n)){case"Object":if(i=a.util.objId(n),t[i])return t[i];for(var l in r={},t[i]=r,n)n.hasOwnProperty(l)&&(r[l]=e(n[l],t));return r;case"Array":return i=a.util.objId(n),t[i]?t[i]:(r=[],t[i]=r,n.forEach((function(n,a){r[a]=e(n,t)})),r);default:return n}},getLanguage:function(e){for(;e;){var t=n.exec(e.className);if(t)return t[1].toLowerCase();e=e.parentElement}return"none"},setLanguage:function(e,t){e.className=e.className.replace(RegExp(n,"gi"),""),e.classList.add("language-"+t)},currentScript:function(){if("undefined"==typeof document)return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var e=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack)||[])[1];if(e){var n=document.getElementsByTagName("script");for(var t in n)if(n[t].src==e)return n[t]}return null}},isActive:function(e,n,t){for(var r="no-"+n;e;){var a=e.classList;if(a.contains(n))return!0;if(a.contains(r))return!1;e=e.parentElement}return!!t}},languages:{plain:r,plaintext:r,text:r,txt:r,extend:function(e,n){var t=a.util.clone(a.languages[e]);for(var r in n)t[r]=n[r];return t},insertBefore:function(e,n,t,r){var i=(r=r||a.languages)[e],l={};for(var o in i)if(i.hasOwnProperty(o)){if(o==n)for(var s in t)t.hasOwnProperty(s)&&(l[s]=t[s]);t.hasOwnProperty(o)||(l[o]=i[o])}var u=r[e];return r[e]=l,a.languages.DFS(a.languages,(function(n,t){t===u&&n!=e&&(this[n]=l)})),l},DFS:function e(n,t,r,i){i=i||{};var l=a.util.objId;for(var o in n)if(n.hasOwnProperty(o)){t.call(n,o,n[o],r||o);var s=n[o],u=a.util.type(s);"Object"!==u||i[l(s)]?"Array"!==u||i[l(s)]||(i[l(s)]=!0,e(s,t,o,i)):(i[l(s)]=!0,e(s,t,null,i))}}},plugins:{},highlightAll:function(e,n){a.highlightAllUnder(document,e,n)},highlightAllUnder:function(e,n,t){var r={callback:t,container:e,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};a.hooks.run("before-highlightall",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),a.hooks.run("before-all-elements-highlight",r);for(var i,l=0;i=r.elements[l++];)a.highlightElement(i,!0===n,r.callback)},highlightElement:function(n,t,r){var i=a.util.getLanguage(n),l=a.languages[i];a.util.setLanguage(n,i);var o=n.parentElement;o&&"pre"===o.nodeName.toLowerCase()&&a.util.setLanguage(o,i);var s={element:n,language:i,grammar:l,code:n.textContent};function u(e){s.highlightedCode=e,a.hooks.run("before-insert",s),s.element.innerHTML=s.highlightedCode,a.hooks.run("after-highlight",s),a.hooks.run("complete",s),r&&r.call(s.element)}if(a.hooks.run("before-sanity-check",s),(o=s.element.parentElement)&&"pre"===o.nodeName.toLowerCase()&&!o.hasAttribute("tabindex")&&o.setAttribute("tabindex","0"),!s.code)return a.hooks.run("complete",s),void(r&&r.call(s.element));if(a.hooks.run("before-highlight",s),s.grammar)if(t&&e.Worker){var c=new Worker(a.filename);c.onmessage=function(e){u(e.data)},c.postMessage(JSON.stringify({language:s.language,code:s.code,immediateClose:!0}))}else u(a.highlight(s.code,s.grammar,s.language));else u(a.util.encode(s.code))},highlight:function(e,n,t){var r={code:e,grammar:n,language:t};if(a.hooks.run("before-tokenize",r),!r.grammar)throw new Error('The language "'+r.language+'" has no grammar.');return r.tokens=a.tokenize(r.code,r.grammar),a.hooks.run("after-tokenize",r),i.stringify(a.util.encode(r.tokens),r.language)},tokenize:function(e,n){var t=n.rest;if(t){for(var r in t)n[r]=t[r];delete n.rest}var a=new s;return u(a,a.head,e),o(e,a,n,a.head,0),function(e){for(var n=[],t=e.head.next;t!==e.tail;)n.push(t.value),t=t.next;return n}(a)},hooks:{all:{},add:function(e,n){var t=a.hooks.all;t[e]=t[e]||[],t[e].push(n)},run:function(e,n){var t=a.hooks.all[e];if(t&&t.length)for(var r,i=0;r=t[i++];)r(n)}},Token:i};function i(e,n,t,r){this.type=e,this.content=n,this.alias=t,this.length=0|(r||"").length}function l(e,n,t,r){e.lastIndex=n;var a=e.exec(t);if(a&&r&&a[1]){var i=a[1].length;a.index+=i,a[0]=a[0].slice(i)}return a}function o(e,n,t,r,s,g){for(var f in t)if(t.hasOwnProperty(f)&&t[f]){var h=t[f];h=Array.isArray(h)?h:[h];for(var d=0;d<h.length;++d){if(g&&g.cause==f+","+d)return;var v=h[d],p=v.inside,m=!!v.lookbehind,y=!!v.greedy,k=v.alias;if(y&&!v.pattern.global){var x=v.pattern.toString().match(/[imsuy]*$/)[0];v.pattern=RegExp(v.pattern.source,x+"g")}for(var b=v.pattern||v,w=r.next,A=s;w!==n.tail&&!(g&&A>=g.reach);A+=w.value.length,w=w.next){var E=w.value;if(n.length>e.length)return;if(!(E instanceof i)){var P,L=1;if(y){if(!(P=l(b,A,e,m))||P.index>=e.length)break;var S=P.index,O=P.index+P[0].length,j=A;for(j+=w.value.length;S>=j;)j+=(w=w.next).value.length;if(A=j-=w.value.length,w.value instanceof i)continue;for(var C=w;C!==n.tail&&(j<O||"string"==typeof C.value);C=C.next)L++,j+=C.value.length;L--,E=e.slice(A,j),P.index-=A}else if(!(P=l(b,0,E,m)))continue;S=P.index;var N=P[0],_=E.slice(0,S),M=E.slice(S+N.length),W=A+E.length;g&&W>g.reach&&(g.reach=W);var z=w.prev;if(_&&(z=u(n,z,_),A+=_.length),c(n,z,L),w=u(n,z,new i(f,p?a.tokenize(N,p):N,k,N)),M&&u(n,w,M),L>1){var I={cause:f+","+d,reach:W};o(e,n,t,w.prev,A,I),g&&I.reach>g.reach&&(g.reach=I.reach)}}}}}}function s(){var e={value:null,prev:null,next:null},n={value:null,prev:e,next:null};e.next=n,this.head=e,this.tail=n,this.length=0}function u(e,n,t){var r=n.next,a={value:t,prev:n,next:r};return n.next=a,r.prev=a,e.length++,a}function c(e,n,t){for(var r=n.next,a=0;a<t&&r!==e.tail;a++)r=r.next;n.next=r,r.prev=n,e.length-=a}if(e.Prism=a,i.stringify=function e(n,t){if("string"==typeof n)return n;if(Array.isArray(n)){var r="";return n.forEach((function(n){r+=e(n,t)})),r}var i={type:n.type,content:e(n.content,t),tag:"span",classes:["token",n.type],attributes:{},language:t},l=n.alias;l&&(Array.isArray(l)?Array.prototype.push.apply(i.classes,l):i.classes.push(l)),a.hooks.run("wrap",i);var o="";for(var s in i.attributes)o+=" "+s+'="'+(i.attributes[s]||"").replace(/"/g,"&quot;")+'"';return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+o+">"+i.content+"</"+i.tag+">"},!e.document)return e.addEventListener?(a.disableWorkerMessageHandler||e.addEventListener("message",(function(n){var t=JSON.parse(n.data),r=t.language,i=t.code,l=t.immediateClose;e.postMessage(a.highlight(i,a.languages[r],r)),l&&e.close()}),!1),a):a;var g=a.util.currentScript();function f(){a.manual||a.highlightAll()}if(g&&(a.filename=g.src,g.hasAttribute("data-manual")&&(a.manual=!0)),!a.manual){var h=document.readyState;"loading"===h||"interactive"===h&&g&&g.defer?document.addEventListener("DOMContentLoaded",f):window.requestAnimationFrame?window.requestAnimationFrame(f):window.setTimeout(f,16)}return a}(_self);"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/};
Prism.languages.javascript=Prism.languages.extend("clike",{"class-name":[Prism.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp("(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])"),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),Prism.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:RegExp("((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/(?:(?:\\[(?:[^\\]\\\\\r\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\r\n])+/[dgimyus]{0,7}|(?:\\[(?:[^[\\]\\\\\r\n]|\\\\.|\\[(?:[^[\\]\\\\\r\n]|\\\\.|\\[(?:[^[\\]\\\\\r\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\r\n])+/[dgimyus]{0,7}v[dgimyus]{0,7})(?=(?:\\s|/\\*(?:[^*]|\\*(?!/))*\\*/)*(?:$|[\r\n,.;:})\\]]|//))"),lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:Prism.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Prism.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),Prism.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),Prism.languages.markup&&(Prism.languages.markup.tag.addInlined("script","javascript"),Prism.languages.markup.tag.addAttribute("on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)","javascript")),Prism.languages.js=Prism.languages.javascript;
Prism.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},Prism.languages.webmanifest=Prism.languages.json;

================
File: jsoncanvas-main/assets/style.css
================
:root {
  --font-content: -apple-system, BlinkMacSystemFont, "Inter", "IBM Plex Sans", Segoe UI, Helvetica, Arial, sans-serif;
  --font-mono: ui-monospace, SFMono-Regular, "Cascadia Code", "Roboto Mono", "Source Code Pro", "DejaVu Sans Mono", "Liberation Mono", "Consolas", Menlo, Monaco, monospace;
  --font-small: 0.875em;
  --font-smaller: 0.8em;
  --wrap-wide: 1000px;
  --wrap-normal: 37em;
  --line-height: 1.5;

  --color-bg-1: #fff;
  --color-bg-2: #fafafa;
  --color-tx-1: #3F062D;
  --color-tx-2: #999;
  --color-ui-1: #ddd;
  --color-ui-2: #bbb;
  --color-ui-3: #5E0641;
  --color-ax-1: #8B0A5F;

  --color-selection: rgba(139,10,95,0.15);
}

.theme-dark {
  --color-bg-1: #1e0516;
  --color-bg-2: #140310;
  --color-tx-1: #fff;
  --color-tx-2: #a28397;
  --color-ui-1: #3F062D;
  --color-ui-2: #68154C;
  --color-ui-3: #b40e7a;
  --color-ax-1: #8B0A5F;

  --color-selection: rgba(139,10,95,0.5);
}

*, *:before, *:after {
  box-sizing:inherit;}

::selection {
  background: var(--color-selection);
}

::-moz-selection {
  background: var(--color-selection);
}

html, body {
  touch-action: manipulation;
}

html {
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  font-size: 62.5%;
}

body {
  color-scheme: light dark;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  background-color: var(--color-bg-1);
  font-family: var(--font-content);
  margin: 0 auto 0 auto;
  line-height: var(--line-height);
  padding: 0;
  font-size: 1.6rem;
  color: var(--color-tx-1);
}

/* Canvas area */
#home {
  overflow: hidden;
}
#container {
  touch-action: none;
  display: flex;
  flex: 1;
  flex-direction: row;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
}
#canvas-container {
  width: 100%;
  height: 100%;
  padding: 0;
  position: relative;
  background-color: var(--color-bg-2);
  background-image: radial-gradient(var(--color-ui-1) calc(var(--scale)*0.5px + 0.5px), transparent 0);
  background-size: calc(var(--scale) * 20px) calc(var(--scale) * 20px);
  overflow: hidden;
  background-position: calc(var(--pan-x) - 19px) calc(var(--pan-y) - 19px);
}
#canvas-edges,
#canvas-nodes {
  opacity: 0;
  transform: translate(var(--pan-x), var(--pan-y)) scale(var(--scale));
  transform-origin: left top;
}
#canvas-edges {
  z-index: 150;
  pointer-events: none;
  user-select: none;
  overflow:visible;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
#canvas-edges path {
  stroke: var(--color-ui-3);
  stroke-width: 2;
  fill: none;
}
#arrowhead {
  fill: var(--color-ui-3);
}
.will-pan {
  cursor: grab;
}

/* Canvas output pane */
#output.hidden {
  transform: translateX(120%);
}
#output {
  position: fixed;
  height: 92vh;
  top: 1rem;
  right: 1rem;
  bottom: auto;
  border-radius: 12px;
  color: var(--color-tx-1);
  background-color: var(--color-bg-1);
  border: 1px solid var(--color-ui-1);
  box-shadow: 0 5px 15px rgba(0,0,0,0.2);;
  z-index: 0;
  width: 24em;
  max-width: 40%;
  display: flex;
  flex-direction: column;
  transition: transform 200ms;
}
#output p {
  font-size: 90%;
  line-height: 1.3;
  padding-right: 0.5em;
}
#output-code {
  color-scheme: dark;
  flex-grow: 1;
  width: 100%;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  padding: 1rem;
  border-top: 1px solid var(--color-ui-1);
  border-bottom: 1px solid var(--color-ui-1);
}
#output pre {
  color-scheme: dark;
  width: 100%;
  padding: 0.5em;
  margin: 0;
}
.code-footer,
.code-header {
  font-size: 80%;
  font-weight: 500;
  padding: 0;
  display: flex;
  align-items: center;
  color: var(--color-tx-2);
  gap: 8px;
  padding: 1rem;
}
.code-footer {
  justify-content: center;
}
.code-header .language {
  flex-grow: 1;
}
.close-output {
  font-weight: 300;
  cursor: pointer;
  user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
  font-size: 24px;
  line-height: 0;
  display: flex;
  align-items: center;
  margin-top: -4px;
}
.close-output:hover {
  color: var(--color-tx-1);
}

/* Pages */
.page {
  padding: 36px 36px 48px;
  max-width: 48em;
  margin: 0 auto;
}
nav {
  padding: 24px 36px;
  max-width: 48em;
  margin: 0 auto;
  display: flex;
  align-items: center;
  gap: 4px;
}
nav #logo {
  flex-grow: 1;
}
nav .link {
  color: var(--color-ax-1);
  text-decoration: none;
  padding: 0.25em 0.5em;
  border-radius: 6px;
}
nav .link:hover {
  color: var(--color-bg-1);
  background-color: var(--color-ax-1);
}
.hidenav #navbar {
 display: none;
}

/* Specific nodes */
#logo {
  border-radius: 8px;
  line-height: 0;
  z-index: 100;
  padding: 4px 12px 4px 4px;
}
#logo .node-name {
  top: -1.25em;
  padding-left: 4px;
}
#nav {
  z-index: 90;
  white-space: nowrap;
  padding-right: 48px;
}
#readme {
  width: 480px;
  padding: 36px;
  z-index: 80;
}
#spec {
  width: 480px;
  height: 480px;
  z-index: 70;
}


/* General node styling */
.node {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  position: absolute;
  display: block;
}
.node.is-active {
  box-shadow:
    0 0 0 2px var(--color-ui-3);
}
.node.is-dragging {
  cursor: grabbing;
  box-shadow:
    0 0 0 2px var(--color-ui-3),
    0 5px 15px rgba(0,0,0,0.2);
}
.node.is-dragging iframe {
  pointer-events: none;
}
.node:hover .node-name {
  opacity: 1;
  color: var(--color-tx-1);
  border-radius: 8px 8px 0 0;
}
.node-name {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  cursor: grab;
  opacity: 1;
  position: absolute;
  height: 2.25em;
  padding: 0.25em 0.5em;
  width: 100%;
  top: -2.25em;
  left: 0;
  color: var(--color-ui-2);
  font-size: calc(var(--font-smaller) * 1/var(--scale));
  -ms-user-select: none;
  -webkit-user-select: none;
  user-select: none;
}
.node.is-dragging .node-name {
  cursor: grabbing;
}
.node-link,
.node-text {
  background-color: var(--color-bg-1);
  border-radius: 8px;
  box-shadow: 0 0 0 2px var(--color-ui-1);
}
.node-file img {
  -webkit-user-drag: none;
  -moz-user-drag: none;
  -o-user-drag: none;
  user-drag: none;
}
.node-text-content {
  padding: 12px 24px;
}

/* Canvas controls */
#controls {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 100;
  display: flex;
  align-items: center;
  gap: 6px;
  -ms-user-select: none;
  -webkit-user-select: none;
  user-select: none;
}

/* Page content */
h1 {
  line-height: 1.1;
  margin-top: 0.25em;
}
h2 {
  line-height: 1.2;
  margin-bottom: 0em;
  margin-top: 1.5em;
}
h2 + p {
  margin-top: 0.5em;
}

ul + h2,
ul + h3,
p + h2,
p + h3 {
  margin-top: 1.5em;
}

h2 + h3 {
  margin-top: 0.75em;
}

a {
  font-weight: 600;
  color: var(--color-tx-1);
  text-decoration: underline;
}
small {
  color: var(--color-tx-2);
}
small a {
  font-weight: 400;
  color: var(--color-tx-2);
}
hr {
  margin: 0;
  border: 0;
  height: 1px;
  background-color: var(--color-ui-1);
}
iframe {
  -webkit-appearance: none;
  border: none;
  outline: none;
  margin: 0;
  vertical-align: bottom;
  border-radius: 8px;
}
img {
  vertical-align: bottom;
}
code {
  -webkit-appearance: none;
  font-family: var(--font-mono);
  cursor: text;
}
pre {
  -webkit-appearance: none;
  font-family: var(--font-mono);
  background-color: transparent;
  border-radius: 4px;
  padding: 0;
  font-size: 85%;
  cursor: text;
}
pre:active,
pre:focus {
  outline: none;
  border: none;
}
pre code {
  color: var(--color-tx-2);
  background-color: transparent;
  border: none;
  padding: 0;
  font-size: inherit;
}
code {
  font-family: var(--font-mono);
  background-color: var(--color-bg-2);
  border: 1px solid var(--color-ui-1);
  border-radius: 4px;
  padding: 0 0.2em;
  font-size: 85%;
}
ul {
  padding-inline-start: 2em;
}
li::marker {
  color: var(--color-tx-2);
}

table {
  margin-top: 1.5em;
  margin-bottom: 2.5em;
  border-collapse:collapse;
  border-spacing:0;
}
tr {
  border-bottom: 1px solid var(--color-ui-1);
}
td {
  padding: 0.5em 1em 0.5em 0;
  line-height: 1.3;
}
th:not(:last-child) {
  padding-right: 1em;
}
td:last-child {
  padding-right: 0;
}
th {
  text-align: left;
  font-weight: 600;
  padding: 0 1em 0.5em 0;
}

button {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -ms-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  cursor: pointer;
  font-family: var(--font-content);
  background: var(--color-bg-1);
  outline: none;
  border: 1px solid var(--color-ui-1);
  padding: 4px 8px;
  color: var(--color-tx-1);
  border-radius: 4px;
  font-weight: 500;
}
button:hover {
  border-color: var(--color-ui-2);
}
.theme-dark button {
  background-color: var(--color-ui-1);
  color: var(--color-tx-2);
  border: 1px solid var(--color-ui-2);
}
.theme-dark button:hover {
  color: var(--color-tx-1);
  border: 1px solid var(--color-ui-3);
}

@media (max-width: 800px) {
  body:not(.hidenav) nav {
    padding: 24px;
    gap: 0;
  }
  body:not(.hidenav) .page {
    padding: 24px 24px 48px 24px;
  }
  #controls {
    bottom: 0;
    right: 0;
    left: 0;
    padding: 1rem;
    border-top: 1px solid var(--color-ui-1);
    width: 100%;
    background-color: var(--color-bg-1);
    justify-content: center;
    height: 48px;
  }
  #output {
    border-radius: 0;
    border: none;
    left: 0;
    top: 0;
    z-index: 200;
    width: 100vw;
    height: calc(100% - 48px);
    transition: none;
    max-width: 100vw;
    box-shadow: none;
  }
  #output-code {
    padding: 1rem 1rem 6rem;
  }
  .code-footer {

  }
}

/* PrismJS 1.29.0
https://prismjs.com/download.html#themes=prism&languages=json */
/**
 * prism.js default theme for JavaScript, CSS and HTML
 * Based on dabblet (http://dabblet.com)
 * @author Lea Verou
 */

code[class*="language-"],
pre[class*="language-"] {
  text-align: left;
  white-space: pre-wrap;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;

  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  overflow: auto;
  overflow-x: hidden;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}

.token.punctuation {
  color: var(--color-tx-2);
}

.token.namespace {
  opacity: .7;
}

.token.property,
.token.tag,
.token.boolean,
.token.constant,
.token.symbol,
.token.deleted {
  color: #f8aa59;
}

.token.number {
  color: #ee529d;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #fe7568;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: var(--color-tx-2);
}

.token.atrule,
.token.attr-value,
.token.keyword {
  color: #07a;
}

.token.function,
.token.class-name {
  color: #DD4A68;
}

.token.regex,
.token.important,
.token.variable {
  color: #e90;
}

.token.important,
.token.bold {
  font-weight: bold;
}
.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

================
File: jsoncanvas-main/CNAME
================
jsoncanvas.org

================
File: jsoncanvas-main/docs/apps.md
================
# Apps and tools

JSON Canvas is supported by the following apps and tools. If you would like to add an app or tool to this list, please submit a pull request on [GitHub](https://github.com/obsidianmd/jsoncanvas).

## Apps

| Name                                            | Storage | Import | Export |
| ----------------------------------------------- | :-----: | :----: | :----: |
| [Obsidian](https://obsidian.md/)                |    ✓    |   ✓    |   ✓    |
| [Kinopio](https://kinopio.club/)                |         |   ✓    |   ✓    |
| [Flowchart Fun](https://flowchart.fun/)         |         |   ✓    |   ✓    |
| [hi-canvas](https://hi-canvas.marknoteapp.com/) |         |   ✓    |   ✓    |
| [OrgPad](https://orgpad.info/)                  |         |   ✓    |   ✓    |

## Tools

To convert from other formats to JSON Canvas:

- [Heptabase to JSON Canvas](https://github.com/link-ding/Heptabase-Export)

To convert from JSON Canvas to other formats:

- [Mermaid](https://alexwiench.github.io/json-canvas-to-mermaid-demo/)
- [Property Graph Exchange Format](https://www.npmjs.org/package/pgraphs)

## Libraries

- [C single-header library](https://github.com/ossldossl/jsonCanvas)
- [Dart library](https://pub.dev/packages/json_canvas/)
- [Go library](https://github.com/supersonicpineapple/go-jsoncanvas)
- [Python library](https://pypi.org/project/PyJSONCanvas/)
- [React library](https://github.com/Digital-Tvilling/react-jsoncanvas)
- [Ruby library](https://github.com/ongaeshi/json_canvas)
- [Rust crate](https://crates.io/crates/jsoncanvas)
- [TypeScript library](https://npmjs.com/package/@trbn/jsoncanvas)
- [Rehype Rendering Library (inline)](https://github.com/lovettbarron/rehype-jsoncanvas)
- [Vue library](https://github.com/wujieli0207/vue-json-canvas)

================
File: jsoncanvas-main/Gemfile
================
source "https://rubygems.org"

gem "github-pages", group: :jekyll_plugins
# If you have any plugins, put them here!
group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
end

gem "webrick", "~> 1.8"

================
File: jsoncanvas-main/LICENSE
================
MIT License

Copyright (c) 2024 Obsidian.md

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: jsoncanvas-main/logo.svg
================
<svg width="163" height="60" viewBox="0 0 163 60" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M161.814 42.1702H157.484C157.461 41.9032 157.368 41.6731 157.203 41.4799C157.038 41.2867 156.825 41.139 156.564 41.0367C156.308 40.9287 156.024 40.8748 155.711 40.8748C155.308 40.8748 154.961 40.9486 154.672 41.0964C154.382 41.2441 154.24 41.4543 154.246 41.727C154.24 41.9202 154.322 42.0992 154.493 42.264C154.669 42.4287 155.007 42.5566 155.507 42.6475L158.166 43.1248C159.507 43.3691 160.504 43.781 161.158 44.3606C161.817 44.9344 162.149 45.7043 162.155 46.6702C162.149 47.602 161.871 48.4117 161.319 49.0992C160.774 49.781 160.027 50.3094 159.078 50.6844C158.135 51.0537 157.058 51.2384 155.848 51.2384C153.848 51.2384 152.283 50.8293 151.152 50.0111C150.027 49.193 149.399 48.1134 149.268 46.7725H153.939C154.001 47.1873 154.206 47.5083 154.552 47.7356C154.905 47.9572 155.348 48.0679 155.882 48.0679C156.314 48.0679 156.669 47.9941 156.947 47.8464C157.231 47.6986 157.376 47.4884 157.382 47.2157C157.376 46.9657 157.251 46.7668 157.007 46.6191C156.768 46.4714 156.393 46.352 155.882 46.2611L153.564 45.852C152.229 45.6191 151.229 45.1759 150.564 44.5225C149.899 43.8691 149.569 43.0282 149.575 41.9998C149.569 41.0907 149.808 40.3208 150.291 39.6901C150.78 39.0537 151.476 38.5708 152.379 38.2412C153.288 37.906 154.365 37.7384 155.609 37.7384C157.501 37.7384 158.993 38.1304 160.084 38.9145C161.18 39.6986 161.757 40.7839 161.814 42.1702Z" fill="#8B0A5F"/>
<path d="M139.796 51.2043C138.961 51.2043 138.222 51.068 137.58 50.7952C136.944 50.5168 136.444 50.0964 136.08 49.5339C135.716 48.9714 135.535 48.2554 135.535 47.3861C135.535 46.6702 135.657 46.0594 135.901 45.5537C136.145 45.0424 136.486 44.6248 136.924 44.3009C137.361 43.977 137.87 43.7299 138.449 43.5594C139.035 43.389 139.665 43.2782 140.341 43.227C141.074 43.1702 141.663 43.102 142.106 43.0225C142.555 42.9373 142.878 42.8208 143.077 42.6731C143.276 42.5197 143.376 42.3179 143.376 42.0679V42.0339C143.376 41.693 143.245 41.4316 142.984 41.2498C142.722 41.0679 142.387 40.977 141.978 40.977C141.529 40.977 141.163 41.0765 140.878 41.2753C140.6 41.4685 140.432 41.7668 140.376 42.1702H136.046C136.103 41.3748 136.356 40.6418 136.805 39.9714C137.259 39.2952 137.921 38.7554 138.79 38.352C139.66 37.9429 140.745 37.7384 142.046 37.7384C142.984 37.7384 143.824 37.8492 144.569 38.0708C145.313 38.2867 145.947 38.5907 146.469 38.9827C146.992 39.3691 147.39 39.8236 147.663 40.3464C147.941 40.8634 148.08 41.4259 148.08 42.0339V50.9998H143.682V49.1589H143.58C143.319 49.6475 143.001 50.0424 142.626 50.3435C142.256 50.6447 141.833 50.8634 141.356 50.9998C140.884 51.1361 140.364 51.2043 139.796 51.2043ZM141.33 48.2384C141.688 48.2384 142.023 48.1645 142.336 48.0168C142.654 47.8691 142.913 47.656 143.111 47.3776C143.31 47.0992 143.41 46.7611 143.41 46.3634V45.2725C143.285 45.3236 143.151 45.3719 143.009 45.4174C142.873 45.4628 142.725 45.5055 142.566 45.5452C142.413 45.585 142.248 45.6219 142.072 45.656C141.901 45.6901 141.722 45.7214 141.535 45.7498C141.171 45.8066 140.873 45.9003 140.64 46.031C140.413 46.156 140.242 46.3123 140.128 46.4998C140.02 46.6816 139.966 46.8861 139.966 47.1134C139.966 47.477 140.094 47.7554 140.35 47.9486C140.606 48.1418 140.932 48.2384 141.33 48.2384Z" fill="#8B0A5F"/>
<path d="M135.618 37.9089L131.221 50.9998H125.766L121.368 37.9089H126.311L128.425 46.568H128.561L130.675 37.9089H135.618Z" fill="#8B0A5F"/>
<path d="M112.563 43.6361V50.9998H107.858V37.9089H112.324V40.3975H112.46C112.744 39.5679 113.244 38.9174 113.96 38.4458C114.682 37.9742 115.523 37.7384 116.483 37.7384C117.409 37.7384 118.213 37.9515 118.895 38.3776C119.582 38.7981 120.114 39.3776 120.489 40.1162C120.869 40.8549 121.057 41.6986 121.051 42.6475V50.9998H116.347V43.6361C116.352 42.9884 116.188 42.4799 115.852 42.1106C115.523 41.7412 115.063 41.5566 114.472 41.5566C114.085 41.5566 113.747 41.6418 113.457 41.8123C113.173 41.977 112.955 42.2157 112.801 42.5282C112.648 42.835 112.568 43.2043 112.563 43.6361Z" fill="#8B0A5F"/>
<path d="M97.8063 51.2043C96.9711 51.2043 96.2324 51.068 95.5904 50.7952C94.954 50.5168 94.454 50.0964 94.0904 49.5339C93.7267 48.9714 93.5449 48.2554 93.5449 47.3861C93.5449 46.6702 93.6671 46.0594 93.9114 45.5537C94.1557 45.0424 94.4966 44.6248 94.9341 44.3009C95.3716 43.977 95.8801 43.7299 96.4597 43.5594C97.0449 43.389 97.6756 43.2782 98.3517 43.227C99.0847 43.1702 99.6728 43.102 100.116 43.0225C100.565 42.9373 100.889 42.8208 101.088 42.6731C101.286 42.5197 101.386 42.3179 101.386 42.0679V42.0339C101.386 41.693 101.255 41.4316 100.994 41.2498C100.732 41.0679 100.397 40.977 99.9881 40.977C99.5392 40.977 99.1728 41.0765 98.8887 41.2753C98.6103 41.4685 98.4426 41.7668 98.3858 42.1702H94.0563C94.1131 41.3748 94.3659 40.6418 94.8148 39.9714C95.2694 39.2952 95.9313 38.7554 96.8006 38.352C97.6699 37.9429 98.7551 37.7384 100.056 37.7384C100.994 37.7384 101.835 37.8492 102.579 38.0708C103.323 38.2867 103.957 38.5907 104.48 38.9827C105.002 39.3691 105.4 39.8236 105.673 40.3464C105.951 40.8634 106.09 41.4259 106.09 42.0339V50.9998H101.693V49.1589H101.59C101.329 49.6475 101.011 50.0424 100.636 50.3435C100.267 50.6447 99.8432 50.8634 99.3659 50.9998C98.8944 51.1361 98.3745 51.2043 97.8063 51.2043ZM99.3404 48.2384C99.6983 48.2384 100.034 48.1645 100.346 48.0168C100.664 47.8691 100.923 47.656 101.122 47.3776C101.32 47.0992 101.42 46.7611 101.42 46.3634V45.2725C101.295 45.3236 101.161 45.3719 101.019 45.4174C100.883 45.4628 100.735 45.5055 100.576 45.5452C100.423 45.585 100.258 45.6219 100.082 45.656C99.9114 45.6901 99.7324 45.7214 99.5449 45.7498C99.1813 45.8066 98.883 45.9003 98.65 46.031C98.4228 46.156 98.2523 46.3123 98.1387 46.4998C98.0307 46.6816 97.9767 46.8861 97.9767 47.1134C97.9767 47.477 98.1046 47.7554 98.3603 47.9486C98.6159 48.1418 98.9426 48.2384 99.3404 48.2384Z" fill="#8B0A5F"/>
<path d="M92.4205 40.0908H87.6137C87.5796 39.6931 87.4887 39.3323 87.341 39.0084C87.1989 38.6845 87.0001 38.4061 86.7444 38.1732C86.4944 37.9345 86.1904 37.7527 85.8325 37.6277C85.4745 37.497 85.0682 37.4317 84.6137 37.4317C83.8182 37.4317 83.145 37.6249 82.5938 38.0112C82.0484 38.3976 81.6336 38.9516 81.3495 39.6732C81.0711 40.3948 80.9319 41.2612 80.9319 42.2726C80.9319 43.3408 81.0739 44.2357 81.358 44.9573C81.6478 45.6732 82.0654 46.213 82.6109 46.5766C83.1563 46.9345 83.8126 47.1135 84.5796 47.1135C85.0171 47.1135 85.4092 47.0595 85.7557 46.9516C86.1023 46.838 86.4035 46.676 86.6592 46.4658C86.9148 46.2556 87.1222 46.0027 87.2813 45.7073C87.4461 45.4061 87.5569 45.0681 87.6137 44.6931L92.4205 44.7272C92.3637 45.4658 92.1563 46.2186 91.7984 46.9857C91.4404 47.747 90.9319 48.4516 90.2728 49.0993C89.6194 49.7414 88.8097 50.2584 87.8438 50.6505C86.8779 51.0425 85.7557 51.2385 84.4773 51.2385C82.8751 51.2385 81.4376 50.8948 80.1648 50.2073C78.8978 49.5198 77.895 48.5084 77.1563 47.1732C76.4234 45.838 76.0569 44.2044 76.0569 42.2726C76.0569 40.3294 76.4319 38.6931 77.1819 37.3635C77.9319 36.0283 78.9432 35.0198 80.216 34.338C81.4887 33.6505 82.9092 33.3067 84.4773 33.3067C85.5796 33.3067 86.5938 33.4573 87.52 33.7584C88.4461 34.0595 89.2586 34.4999 89.9575 35.0794C90.6563 35.6533 91.2188 36.3607 91.645 37.2016C92.0711 38.0425 92.3296 39.0056 92.4205 40.0908Z" fill="#8B0A5F"/>
<path d="M138.983 9.54547V27H135.028L128.721 17.8296H128.619V27H123.88V9.54547H127.903L134.108 18.6818H134.244V9.54547H138.983Z" fill="#8B0A5F"/>
<path d="M122.168 18.2726C122.168 20.2158 121.79 21.855 121.034 23.1902C120.279 24.5198 119.259 25.5283 117.975 26.2158C116.691 26.8976 115.259 27.2385 113.679 27.2385C112.088 27.2385 110.651 26.8948 109.367 26.2073C108.088 25.5141 107.071 24.5027 106.316 23.1732C105.566 21.838 105.191 20.2044 105.191 18.2726C105.191 16.3294 105.566 14.6931 106.316 13.3635C107.071 12.0283 108.088 11.0198 109.367 10.338C110.651 9.65045 112.088 9.3067 113.679 9.3067C115.259 9.3067 116.691 9.65045 117.975 10.338C119.259 11.0198 120.279 12.0283 121.034 13.3635C121.79 14.6931 122.168 16.3294 122.168 18.2726ZM117.293 18.2726C117.293 17.2272 117.154 16.3465 116.875 15.6306C116.602 14.909 116.196 14.3635 115.656 13.9942C115.122 13.6192 114.463 13.4317 113.679 13.4317C112.895 13.4317 112.233 13.6192 111.693 13.9942C111.159 14.3635 110.753 14.909 110.475 15.6306C110.202 16.3465 110.066 17.2272 110.066 18.2726C110.066 19.3181 110.202 20.2016 110.475 20.9232C110.753 21.6391 111.159 22.1845 111.693 22.5595C112.233 22.9289 112.895 23.1135 113.679 23.1135C114.463 23.1135 115.122 22.9289 115.656 22.5595C116.196 22.1845 116.602 21.6391 116.875 20.9232C117.154 20.2016 117.293 19.3181 117.293 18.2726Z" fill="#8B0A5F"/>
<path d="M99.1634 14.9999C99.118 14.4317 98.9049 13.9885 98.5242 13.6703C98.1492 13.3522 97.5782 13.1931 96.8112 13.1931C96.3225 13.1931 95.922 13.2527 95.6095 13.372C95.3026 13.4857 95.0754 13.6419 94.9276 13.8408C94.7799 14.0397 94.7032 14.2669 94.6975 14.5226C94.6862 14.7328 94.7231 14.9232 94.8083 15.0936C94.8992 15.2584 95.0413 15.409 95.2345 15.5453C95.4276 15.676 95.6748 15.7953 95.9759 15.9033C96.2771 16.0112 96.635 16.1078 97.0498 16.1931L98.4816 16.4999C99.4475 16.7044 100.274 16.9743 100.962 17.3095C101.649 17.6448 102.212 18.0397 102.649 18.4942C103.087 18.9431 103.408 19.4487 103.612 20.0112C103.823 20.5737 103.93 21.1874 103.936 21.8522C103.93 22.9999 103.644 23.9715 103.075 24.7669C102.507 25.5624 101.695 26.1675 100.638 26.5823C99.5867 26.997 98.3225 27.2044 96.8452 27.2044C95.3282 27.2044 94.0043 26.98 92.8737 26.5311C91.7487 26.0823 90.8737 25.3919 90.2487 24.4601C89.6293 23.5226 89.3168 22.3237 89.3112 20.8635H93.8112C93.8396 21.3976 93.9731 21.8465 94.2117 22.2101C94.4504 22.5737 94.7856 22.8493 95.2174 23.0368C95.6549 23.2243 96.1748 23.3181 96.7771 23.3181C97.2827 23.3181 97.706 23.2556 98.047 23.1306C98.3879 23.0056 98.6464 22.8323 98.8225 22.6107C98.9987 22.3891 99.0896 22.1362 99.0952 21.8522C99.0896 21.5851 99.0015 21.3522 98.831 21.1533C98.6663 20.9487 98.3935 20.7669 98.0129 20.6078C97.6322 20.4431 97.118 20.2897 96.4702 20.1476L94.7316 19.7726C93.1862 19.4374 91.9674 18.8777 91.0754 18.0936C90.189 17.3039 89.7487 16.2272 89.7543 14.8635C89.7487 13.7556 90.0441 12.7868 90.6407 11.9573C91.243 11.122 92.0754 10.4715 93.1379 10.0056C94.206 9.53966 95.4305 9.3067 96.8112 9.3067C98.2202 9.3067 99.439 9.5425 100.467 10.0141C101.496 10.4857 102.288 11.1505 102.845 12.0084C103.408 12.8607 103.692 13.8578 103.698 14.9999H99.1634Z" fill="#8B0A5F"/>
<path d="M83.3181 9.54547H87.9886V21.5114C87.9829 22.6477 87.696 23.6477 87.1278 24.5114C86.5653 25.3693 85.7869 26.0398 84.7926 26.5227C83.8039 27 82.6647 27.2387 81.3749 27.2387C80.2556 27.2387 79.2329 27.0455 78.3068 26.6591C77.3806 26.2671 76.642 25.6534 76.0909 24.8182C75.5397 23.9773 75.267 22.8864 75.2727 21.5455H80.0113C80.0284 21.983 80.1022 22.3523 80.2329 22.6534C80.3693 22.9546 80.5568 23.1818 80.7954 23.3352C81.0397 23.483 81.3352 23.5568 81.6818 23.5568C82.034 23.5568 82.3295 23.4801 82.5681 23.3267C82.8124 23.1733 82.9971 22.946 83.1221 22.6449C83.2471 22.3381 83.3124 21.9602 83.3181 21.5114V9.54547Z" fill="#8B0A5F"/>
<path d="M5 60C2.23858 60 -9.78513e-08 57.7614 -2.18557e-07 55L-2.40413e-06 5C-2.52483e-06 2.23858 2.23857 -9.78513e-08 5 -2.18557e-07L55 -2.40413e-06C57.7614 -2.52483e-06 60 2.23857 60 5L60 55C60 57.7614 57.7614 60 55 60L5 60Z" fill="#8B0A5F"/>
<path d="M9.23071 43.8461C9.23071 39.1729 13.0191 35.3846 17.6923 35.3846V35.3846C22.3654 35.3846 26.1538 39.1729 26.1538 43.8461V43.8461C26.1538 48.5193 22.3654 52.3077 17.6922 52.3077V52.3077C13.0191 52.3077 9.23071 48.5193 9.23071 43.8461V43.8461Z" fill="white"/>
<path d="M35.3845 17.6924C35.3845 13.0192 39.1729 9.23084 43.8461 9.23084V9.23084C48.5192 9.23084 52.3076 13.0192 52.3076 17.6924V17.6924C52.3076 22.3656 48.5192 26.1539 43.8461 26.1539V26.1539C39.1729 26.1539 35.3845 22.3655 35.3845 17.6924V17.6924Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M47.6924 33.9422C47.6924 41.5362 41.5363 47.6923 33.9424 47.6923L30.7693 47.6923L30.7693 41.3461L33.9424 41.3461C38.0314 41.3461 41.3462 38.0313 41.3462 33.9423L41.3462 30.7692L47.6924 30.7692L47.6924 33.9422Z" fill="white"/>
</svg>

================
File: jsoncanvas-main/readme.md
================
# An open file format for infinite canvas data.

Infinite canvas tools are a way to view and organize information spatially, like a digital whiteboard. Infinite canvases encourage freedom and exploration, and have become a popular interface pattern across many apps.

The JSON Canvas format was created to provide longevity, readability, interoperability, and extensibility to data created with infinite canvas apps. The format is designed to be easy to parse and give users [ownership over their data](https://stephango.com/file-over-app). JSON Canvas files use the `.canvas` extension. 

JSON Canvas was originally created for [Obsidian](https://obsidian.md/blog/json-canvas/). JSON Canvas can be implemented freely as an import, export, and storage format for any [app or tool](/docs/apps.md). This site, and all the resources associated with JSON Canvas are [open source](https://github.com/obsidianmd/jsoncanvas) under the MIT license.

================
File: jsoncanvas-main/sample.canvas
================
{
	"nodes":[
		{"id":"754a8ef995f366bc","type":"group","x":-300,"y":-460,"width":610,"height":200,"label":"JSON Canvas"},
		{"id":"8132d4d894c80022","type":"file","file":"readme.md","x":-280,"y":-200,"width":570,"height":560,"color":"6"},
		{"id":"7efdbbe0c4742315","type":"file","file":"_site/logo.svg","x":-280,"y":-440,"width":217,"height":80},
		{"id":"59e896bc8da20699","type":"text","text":"Learn more:\n\n- [Apps](/docs/apps.md)\n- [Spec](spec/1.0.md)\n- [Github](https://github.com/obsidianmd/jsoncanvas)","x":40,"y":-440,"width":250,"height":160},
		{"id":"0ba565e7f30e0652","type":"file","file":"spec/1.0.md","x":360,"y":-400,"width":400,"height":400}
	],
	"edges":[
		{"id":"6fa11ab87f90b8af","fromNode":"7efdbbe0c4742315","fromSide":"right","toNode":"59e896bc8da20699","toSide":"left"}
	]
}

================
File: jsoncanvas-main/spec/1.0.md
================
# JSON Canvas Spec

<small>Version 1.0 — 2024-03-11</small>

## Top level

The top level of JSON Canvas contains two arrays:

- `nodes` (optional, array of nodes)
- `edges` (optional, array of edges)

## Nodes

Nodes are objects within the canvas. Nodes may be text, files, links, or groups.

Nodes are placed in the array in ascending order by z-index. The first node in the array should be displayed below all other nodes, and the last node in the array should be displayed on top of all other nodes.

### Generic node

All nodes include the following attributes:

- `id` (required, string) is a unique ID for the node.
- `type` (required, string) is the node type.
  - `text`
  - `file`
  - `link`
  - `group`
- `x` (required, integer) is the `x` position of the node in pixels.
- `y` (required, integer) is the `y` position of the node in pixels.
- `width` (required, integer) is the width of the node in pixels.
- `height` (required, integer) is the height of the node in pixels.
- `color` (optional, `canvasColor`) is the color of the node, see the Color section.

### Text type nodes

Text type nodes store text. Along with generic node attributes, text nodes include the following attribute:

- `text` (required, string) in plain text with Markdown syntax.

### File type nodes

File type nodes reference other files or attachments, such as images, videos, etc. Along with generic node attributes, file nodes include the following attributes:

- `file` (required, string) is the path to the file within the system.
- `subpath` (optional, string) is a subpath that may link to a heading or a block. Always starts with a `#`.

### Link type nodes

Link type nodes reference a URL. Along with generic node attributes, link nodes include the following attribute:

- `url` (required, string)

### Group type nodes

Group type nodes are used as a visual container for nodes within it. Along with generic node attributes, group nodes include the following attributes:

- `label` (optional, string) is a text label for the group.
- `background` (optional, string) is the path to the background image.
- `backgroundStyle` (optional, string) is the rendering style of the background image. Valid values:
  - `cover` fills the entire width and height of the node.
  - `ratio` maintains the aspect ratio of the background image.
  - `repeat` repeats the image as a pattern in both x/y directions.

## Edges

Edges are lines that connect one node to another.

- `id` (required, string) is a unique ID for the edge.
- `fromNode` (required, string) is the node `id` where the connection starts.
- `fromSide` (optional, string) is the side where this edge starts. Valid values:
  - `top`
  - `right`
  - `bottom`
  - `left`
- `fromEnd` (optional, string) is the shape of the endpoint at the edge start. Defaults to `none` if not specified. Valid values:
  - `none`
  - `arrow`
- `toNode` (required, string) is the node `id` where the connection ends.
- `toSide` (optional, string) is the side where this edge ends. Valid values:
  - `top`
  - `right`
  - `bottom`
  - `left`
- `toEnd`  (optional, string) is the shape of the endpoint at the edge end. Defaults to `arrow` if not specified. Valid values:
  - `none`
  - `arrow`
- `color` (optional, `canvasColor`) is the color of the line, see the Color section.
- `label` (optional, string) is a text label for the edge.


## Color

The `canvasColor` type is used to encode color data for nodes and edges. Colors attributes expect a string. Colors can be specified in hex format e.g. `"#FF0000"`, or using one of the preset colors, e.g. `"1"` for red. Six preset colors exist, mapped to the following numbers:

- `"1"` red
- `"2"` orange
- `"3"` yellow
- `"4"` green
- `"5"` cyan
- `"6"` purple

Specific values for the preset colors are intentionally not defined so that applications can tailor the presets to their specific brand colors or color scheme.

================
File: package.json
================
{
  "name": "window-manager",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/typography": "^0.5.16",
    "@tailwindcss/vite": "^4.0.6",
    "axios": "^1.8.1",
    "buffer": "^6.0.3",
    "events": "^3.3.0",
    "jszip": "^3.10.1",
    "lucide-react": "^0.475.0",
    "markdown-it": "^14.1.0",
    "path-browserify": "^1.0.1",
    "process-nextick-args": "^2.0.1",
    "prosemirror-commands": "^1.7.1",
    "prosemirror-history": "^1.4.1",
    "prosemirror-inputrules": "^1.5.0",
    "prosemirror-keymap": "^1.2.3",
    "prosemirror-markdown": "^1.13.2",
    "prosemirror-model": "^1.25.1",
    "prosemirror-schema-basic": "^1.2.4",
    "prosemirror-schema-list": "^1.5.1",
    "prosemirror-state": "^1.4.3",
    "prosemirror-tables": "^1.7.1",
    "prosemirror-view": "^1.40.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "reactflow": "^11.11.4",
    "showdown": "^2.1.0",
    "simple-peer": "^9.11.1",
    "socket.io-client": "^4.8.1",
    "stream-browserify": "^3.0.0",
    "tailwindcss": "^4.0.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^1.3.2",
    "eslint": "^9.19.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.18",
    "global": "^4.4.0",
    "globals": "^15.14.0",
    "process": "^0.11.10",
    "vite": "^6.1.0",
    "vite-compatible-readable-stream": "^3.6.1",
    "vite-plugin-node-polyfills": "^0.23.0"
  }
}

================
File: public/agooba_favicon.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 855.46 855.46">
  <defs>
    <style>
      .cls-1 {
        stroke: #fff;
        stroke-miterlimit: 10;
        stroke-width: 4px;
      }

      .cls-1, .cls-2 {
        fill: #00d5be;
      }
    </style>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1-2">
    <g>
      <g>
        <g>
          <polygon class="cls-2" points="162.5 726.45 159.81 729.46 156.85 726.77 159.53 723.8 162.5 726.45"/>
          <path class="cls-2" d="M262.38,791.47l-1.64,3.65c-1.24-.52-2.45-1.08-3.65-1.68l1.68-3.61c1.2.56,2.41,1.12,3.61,1.64h0Z"/>
          <rect class="cls-2" x="172.91" y="737.62" width="4.02" height="4.02" transform="translate(-510.37 410.94) rotate(-51.07)"/>
          <path class="cls-2" d="M226.96,773.18l-2.01,3.49c-1.16-.68-2.33-1.36-3.49-2.05l2.09-3.45c1.12.68,2.29,1.36,3.41,2.01Z"/>
          <polygon class="cls-2" points="210 762.75 207.83 766.12 204.46 763.87 206.67 760.54 210 762.75"/>
          <path class="cls-2" d="M244.45,782.81l-1.85,3.53c-1.2-.6-2.37-1.2-3.57-1.85l1.89-3.57c1.16.64,2.37,1.24,3.53,1.89h0Z"/>
          <rect class="cls-2" x="188.78" y="749.84" width="4.02" height="4.02" transform="translate(-529.26 463.4) rotate(-53.93)"/>
          <polygon class="cls-2" points="280.75 799.29 279.27 803.02 275.54 801.5 277.02 797.81 280.75 799.29"/>
          <polygon class="cls-2" points="376.99 823.96 376.46 827.97 372.49 827.41 373.05 823.44 376.99 823.96"/>
          <polygon class="cls-2" points="396.8 826.01 396.48 830.02 392.47 829.66 392.83 825.69 396.8 826.01"/>
          <polygon class="cls-2" points="416.7 827.05 416.58 831.06 412.57 830.9 412.73 826.93 416.7 827.05"/>
          <path class="cls-2" d="M299.45,806.11l-1.28,3.81c-1.28-.44-2.53-.84-3.81-1.28l1.32-3.81c1.24.44,2.53.88,3.77,1.28Z"/>
          <path class="cls-2" d="M318.46,812.05l-1.08,3.85c-1.28-.36-2.57-.72-3.85-1.12l1.12-3.85c1.28.4,2.57.76,3.81,1.12Z"/>
          <path class="cls-2" d="M337.8,816.98l-.92,3.93c-1.32-.32-2.61-.64-3.93-.92l.96-3.93c1.28.32,2.57.64,3.89.92Z"/>
          <polygon class="cls-2" points="357.29 820.95 356.61 824.92 352.64 824.2 353.36 820.27 357.29 820.95"/>
          <polygon class="cls-2" points="86.21 635.11 82.76 637.2 80.71 633.75 84.16 631.7 86.21 635.11"/>
          <polygon class="cls-2" points="45.61 544.54 41.8 545.7 40.64 541.85 44.49 540.73 45.61 544.54"/>
          <path class="cls-2" d="M59.13,581.96l-3.69,1.56c-.52-1.24-1.04-2.49-1.56-3.73l3.73-1.52c.48,1.24,1,2.49,1.52,3.69Z"/>
          <path class="cls-2" d="M35.95,505.91l-3.93.8c-.28-1.32-.52-2.65-.76-3.97l3.93-.72c.24,1.28.48,2.61.76,3.89Z"/>
          <path class="cls-2" d="M51.91,563.43l-3.77,1.32c-.48-1.24-.92-2.49-1.36-3.77l3.81-1.32c.44,1.24.88,2.49,1.32,3.77Z"/>
          <polygon class="cls-2" points="147.94 712.85 145.13 715.7 142.29 712.89 145.25 710.2 147.94 712.85"/>
          <path class="cls-2" d="M28.69,446.66l-3.97.2c-.08-1.36-.12-2.69-.2-4.05l4.01-.12c.04,1.32.12,2.65.16,3.97h0Z"/>
          <path class="cls-2" d="M30.13,466.52l-3.97.4c-.16-1.36-.28-2.69-.4-4.01l4.01-.36c.12,1.32.24,2.65.36,3.97Z"/>
          <polygon class="cls-2" points="32.54 486.29 28.57 486.85 28 482.88 31.98 482.36 32.54 486.29"/>
          <path class="cls-2" d="M40.32,525.32l-3.89,1c-.32-1.32-.64-2.61-.96-3.93l3.89-.92c.32,1.28.64,2.57.96,3.85Z"/>
          <path class="cls-2" d="M120.91,683.61l-3.05,2.57c-.88-1.04-1.72-2.09-2.57-3.13l3.09-2.53c.84,1.04,1.68,2.05,2.53,3.09Z"/>
          <path class="cls-2" d="M134.06,698.57l-2.93,2.69c-.92-.96-1.81-1.97-2.73-2.97l2.97-2.69c.92,1,1.81,1.97,2.69,2.97h0Z"/>
          <path class="cls-2" d="M67.27,600.13l-3.65,1.72c-.56-1.2-1.12-2.41-1.68-3.65l3.61-1.68c.56,1.2,1.12,2.41,1.72,3.61h0Z"/>
          <path class="cls-2" d="M108.55,668l-3.21,2.41c-.8-1.04-1.6-2.13-2.41-3.21l3.25-2.37c.76,1.04,1.56,2.13,2.37,3.17h0Z"/>
          <polygon class="cls-2" points="76.3 617.86 72.77 619.79 70.89 616.22 74.42 614.37 76.3 617.86"/>
          <path class="cls-2" d="M436.71,831.1c-1.32.04-2.69.04-4.01.08l-.08-4.01c1.32-.04,2.69-.04,4.01-.08l.08,4.01Z"/>
          <polygon class="cls-2" points="96.96 651.84 93.63 654.08 91.42 650.75 94.75 648.55 96.96 651.84"/>
          <polygon class="cls-2" points="826.65 448.83 830.66 449.03 830.42 453.04 826.41 452.8 826.65 448.83"/>
          <polygon class="cls-2" points="790.83 603.94 789.06 607.55 785.45 605.75 787.22 602.18 790.83 603.94"/>
          <polygon class="cls-2" points="781.56 621.83 779.64 625.36 776.11 623.4 778.07 619.91 781.56 621.83"/>
          <path class="cls-2" d="M799.17,585.61c-.52,1.24-1.08,2.49-1.6,3.69l-3.69-1.6c.56-1.2,1.08-2.45,1.6-3.65l3.69,1.56Z"/>
          <path class="cls-2" d="M806.55,566.88c-.44,1.28-.92,2.53-1.4,3.77l-3.73-1.4c.44-1.24.92-2.49,1.36-3.73l3.77,1.36Z"/>
          <path class="cls-2" d="M748.63,672.42c-.84,1.04-1.64,2.13-2.49,3.17l-3.17-2.45c.84-1.04,1.64-2.13,2.45-3.17l3.21,2.45h0Z"/>
          <rect class="cls-2" x="766.65" y="637.81" width="4.02" height="4.02" transform="translate(-180.94 953.63) rotate(-58.06)"/>
          <path class="cls-2" d="M760.46,656.09c-.76,1.12-1.52,2.21-2.33,3.33l-3.29-2.33c.8-1.08,1.52-2.17,2.29-3.25l3.33,2.25Z"/>
          <polygon class="cls-2" points="28.25 426.73 24.23 426.73 24.27 422.71 28.29 422.75 28.25 426.73"/>
          <path class="cls-2" d="M735.99,688.1c-.88,1.04-1.77,2.05-2.65,3.09l-3.01-2.65c.84-1,1.72-2.01,2.57-3.05l3.09,2.61Z"/>
          <polygon class="cls-2" points="825.12 468.68 829.1 469.08 828.69 473.1 824.68 472.65 825.12 468.68"/>
          <rect class="cls-2" x="827.14" y="428.89" width="4.01" height="4.01" transform="translate(390.02 1255.71) rotate(-89.43)"/>
          <path class="cls-2" d="M819.07,508.03l3.97.8-.84,3.97-3.93-.84c.28-1.32.56-2.61.8-3.93h0Z"/>
          <polygon class="cls-2" points="818.51 528.45 817.46 532.34 813.61 531.34 814.62 527.45 818.51 528.45"/>
          <path class="cls-2" d="M813.01,547.83c-.4,1.28-.8,2.57-1.2,3.85l-3.81-1.24c.4-1.24.8-2.53,1.2-3.81l3.81,1.2Z"/>
          <rect class="cls-2" x="822.26" y="488.73" width="4.02" height="4.02" transform="translate(208.31 1226.17) rotate(-80.82)"/>
          <polygon class="cls-2" points="722.6 703.14 719.83 706.07 716.94 703.3 719.67 700.41 722.6 703.14"/>
          <path class="cls-2" d="M535.95,816.5c-1.28.36-2.57.68-3.89,1.04l-1-3.89c1.28-.32,2.57-.68,3.81-1.04l1.08,3.89Z"/>
          <polygon class="cls-2" points="555.21 810.64 551.36 811.89 550.15 808.08 553.92 806.83 555.21 810.64"/>
          <path class="cls-2" d="M574.1,803.82l-3.73,1.44-1.4-3.77c1.2-.44,2.45-.92,3.69-1.4l1.44,3.73h0Z"/>
          <path class="cls-2" d="M496.72,825.28c-1.32.24-2.65.44-3.97.68l-.64-3.97c1.32-.2,2.61-.44,3.93-.64l.68,3.93h0Z"/>
          <path class="cls-2" d="M516.46,821.39c-1.32.28-2.61.56-3.93.84l-.84-3.93c1.28-.28,2.61-.56,3.89-.84l.88,3.93Z"/>
          <polygon class="cls-2" points="476.83 828.21 472.81 828.69 472.37 824.68 476.34 824.24 476.83 828.21"/>
          <path class="cls-2" d="M592.67,796.08c-1.24.52-2.45,1.08-3.69,1.6l-1.6-3.65c1.24-.56,2.45-1.08,3.65-1.6l1.64,3.65h0Z"/>
          <polygon class="cls-2" points="662.27 756.09 659.02 758.42 656.69 755.13 659.94 752.84 662.27 756.09"/>
          <path class="cls-2" d="M693.72,731.14c-1,.88-2.01,1.76-3.01,2.65l-2.65-3.05c1-.88,2.01-1.76,3.01-2.61l2.65,3.01h0Z"/>
          <polygon class="cls-2" points="678.31 744.02 675.14 746.5 672.7 743.33 675.82 740.89 678.31 744.02"/>
          <polygon class="cls-2" points="708.52 717.5 705.63 720.27 702.86 717.38 705.71 714.61 708.52 717.5"/>
          <polygon class="cls-2" points="645.66 767.4 642.25 769.53 640.12 766.16 643.49 764.03 645.66 767.4"/>
          <path class="cls-2" d="M456.81,830.18c-1.32.08-2.69.16-4.01.24l-.24-4.01c1.32-.08,2.65-.16,3.97-.24l.28,4.01Z"/>
          <path class="cls-2" d="M628.49,777.83c-1.16.68-2.33,1.32-3.53,1.97l-1.93-3.49c1.12-.64,2.29-1.28,3.45-1.97l2.01,3.49Z"/>
          <path class="cls-2" d="M610.8,787.42c-1.2.6-2.41,1.2-3.57,1.81l-1.81-3.61c1.16-.6,2.37-1.16,3.53-1.76l1.85,3.57h0Z"/>
          <path class="cls-2" d="M815.22,330.29l3.89-.96c.32,1.28.64,2.61.96,3.89l-3.93.92c-.28-1.28-.6-2.57-.92-3.85h0Z"/>
          <polygon class="cls-2" points="803.62 292.23 807.39 290.86 808.76 294.63 804.95 295.96 803.62 292.23"/>
          <polygon class="cls-2" points="809.88 311.12 813.73 309.96 814.9 313.81 811.04 314.93 809.88 311.12"/>
          <polygon class="cls-2" points="819.55 349.75 823.52 348.95 824.24 352.92 820.31 353.64 819.55 349.75"/>
          <polygon class="cls-2" points="822.96 369.36 826.93 368.76 827.49 372.77 823.52 373.29 822.96 369.36"/>
          <rect class="cls-2" x="779.97" y="236.54" width="4" height="4" transform="translate(-20.15 396.58) rotate(-28.11)"/>
          <path class="cls-2" d="M788.3,255.52l3.61-1.77c.6,1.2,1.16,2.41,1.72,3.65l-3.65,1.68c-.56-1.2-1.12-2.41-1.68-3.57h0Z"/>
          <path class="cls-2" d="M769.37,220.51l3.45-2.09c.68,1.16,1.36,2.29,2.05,3.45l-3.45,2.05c-.68-1.12-1.36-2.29-2.05-3.41Z"/>
          <path class="cls-2" d="M796.44,273.66l3.69-1.52c.52,1.2,1,2.45,1.52,3.69l-3.73,1.52c-.48-1.24-1-2.45-1.48-3.69h0Z"/>
          <polygon class="cls-2" points="497.97 34.42 498.65 30.49 502.62 31.21 501.9 35.14 497.97 34.42"/>
          <path class="cls-2" d="M438.56,28.41l.12-4.01c1.32,0,2.65.08,4.01.12l-.16,4.01c-1.32-.04-2.65-.12-3.97-.12Z"/>
          <polygon class="cls-2" points="458.45 29.41 458.74 25.44 462.75 25.76 462.43 29.73 458.45 29.41"/>
          <polygon class="cls-2" points="478.27 31.41 478.75 27.44 482.76 27.96 482.2 31.94 478.27 31.41"/>
          <path class="cls-2" d="M826.77,409l4.01-.2c.08,1.36.12,2.69.16,4.05l-4.01.12c-.04-1.32-.08-2.65-.16-3.97h0Z"/>
          <polygon class="cls-2" points="28.81 406.83 24.8 406.63 25.04 402.62 29.05 402.86 28.81 406.83"/>
          <path class="cls-2" d="M517.5,38.39l.88-3.89c1.28.28,2.61.6,3.93.92l-.96,3.89c-1.28-.32-2.57-.6-3.85-.92Z"/>
          <path class="cls-2" d="M825.37,389.14l3.97-.4c.12,1.32.24,2.69.36,4.01l-3.97.32c-.12-1.28-.24-2.61-.36-3.93h0Z"/>
          <path class="cls-2" d="M610.84,72.57l1.81-3.57c1.2.6,2.41,1.24,3.61,1.85l-1.89,3.57c-1.2-.64-2.37-1.24-3.53-1.85h0Z"/>
          <path class="cls-2" d="M628.29,82.12l2.01-3.45c1.16.68,2.33,1.36,3.49,2.05l-2.05,3.45c-1.12-.68-2.29-1.36-3.45-2.05Z"/>
          <polygon class="cls-2" points="645.3 92.59 647.47 89.22 650.83 91.42 648.63 94.79 645.3 92.59"/>
          <path class="cls-2" d="M574.54,56.08l1.44-3.73c1.28.48,2.53,1,3.77,1.48l-1.52,3.73c-1.24-.48-2.45-1-3.69-1.48Z"/>
          <path class="cls-2" d="M758.62,203.78l3.33-2.25c.72,1.08,1.48,2.21,2.25,3.33l-3.37,2.21c-.72-1.12-1.44-2.21-2.21-3.29h0Z"/>
          <rect class="cls-2" x="556.3" y="45.97" width="4.02" height="4.02" transform="translate(334.67 561.79) rotate(-71.39)"/>
          <polygon class="cls-2" points="661.71 103.86 664.07 100.61 667.32 103.02 664.95 106.22 661.71 103.86"/>
          <polygon class="cls-2" points="592.87 63.87 594.56 60.22 598.21 61.9 596.52 65.51 592.87 63.87"/>
          <polygon class="cls-2" points="734.67 172.01 737.76 169.44 740.33 172.53 737.2 175.1 734.67 172.01"/>
          <path class="cls-2" d="M721.55,157.05l2.93-2.73c.92,1,1.81,1.97,2.73,2.97l-3.01,2.69c-.88-.96-1.77-1.97-2.65-2.93h0Z"/>
          <polygon class="cls-2" points="677.59 115.97 680.08 112.84 683.21 115.37 680.68 118.5 677.59 115.97"/>
          <rect class="cls-2" x="747.84" y="185.98" width="4.01" height="4.01" transform="translate(37.18 487.5) rotate(-36.87)"/>
          <polygon class="cls-2" points="692.79 128.85 695.48 125.84 698.49 128.53 695.76 131.5 692.79 128.85"/>
          <path class="cls-2" d="M710.2,145.25c-.92-.96-1.89-1.89-2.85-2.81l2.81-2.89c.96.96,1.93,1.89,2.89,2.85l.28.28-2.85,2.85-.28-.28h0Z"/>
          <polygon class="cls-2" points="536.79 43.37 537.88 39.48 541.73 40.6 540.6 44.45 536.79 43.37"/>
          <path class="cls-2" d="M64.55,251.67c.6-1.2,1.16-2.41,1.76-3.61l3.61,1.8c-.6,1.16-1.16,2.37-1.76,3.57l-3.61-1.77h0Z"/>
          <path class="cls-2" d="M73.77,233.78c.64-1.16,1.32-2.33,1.97-3.53l3.49,1.97c-.64,1.16-1.28,2.33-1.93,3.49l-3.53-1.93h0Z"/>
          <polygon class="cls-2" points="94.91 199.53 97.2 196.2 100.49 198.48 98.2 201.77 94.91 199.53"/>
          <rect class="cls-2" x="147.65" y="136.12" width="4" height="4" transform="translate(-53.96 141.94) rotate(-43.78)"/>
          <path class="cls-2" d="M132.7,152.47c.92-1,1.85-1.97,2.77-2.93l2.93,2.73c-.92.96-1.85,1.97-2.73,2.93l-2.97-2.73Z"/>
          <polygon class="cls-2" points="106.71 183.2 109.19 179.99 112.36 182.48 109.91 185.65 106.71 183.2"/>
          <path class="cls-2" d="M119.34,167.52c.88-1.04,1.72-2.09,2.61-3.09l3.05,2.61c-.88,1-1.72,2.05-2.61,3.05l-3.05-2.57Z"/>
          <path class="cls-2" d="M83.92,216.37c.68-1.12,1.4-2.29,2.13-3.41l3.41,2.13c-.72,1.12-1.44,2.29-2.13,3.41l-3.41-2.13Z"/>
          <path class="cls-2" d="M418.54,24.35c1.36-.04,2.69-.08,4.01-.08l.08,4.01c-1.32,0-2.69.04-4.01.08l-.08-4.01Z"/>
          <path class="cls-2" d="M36.35,347.58l-3.93-.8c.24-1.32.52-2.65.8-3.93l3.93.84c-.28,1.28-.56,2.61-.8,3.89h0Z"/>
          <path class="cls-2" d="M56.24,270c.52-1.2,1.04-2.45,1.56-3.69l3.69,1.6c-.52,1.2-1.04,2.45-1.56,3.65l-3.69-1.56Z"/>
          <polygon class="cls-2" points="30.33 386.97 26.32 386.53 26.76 382.56 30.77 383 30.33 386.97"/>
          <path class="cls-2" d="M48.82,288.74c.48-1.24.92-2.53,1.4-3.77l3.77,1.4c-.48,1.24-.92,2.49-1.4,3.73l-3.77-1.36h0Z"/>
          <polygon class="cls-2" points="36.91 327.17 37.91 323.27 41.8 324.32 40.8 328.17 36.91 327.17"/>
          <path class="cls-2" d="M42.41,307.79c.4-1.28.8-2.53,1.2-3.81l3.81,1.2c-.4,1.28-.8,2.53-1.2,3.81l-3.81-1.2Z"/>
          <polygon class="cls-2" points="32.86 367.2 28.89 366.6 29.49 362.62 33.46 363.27 32.86 367.2"/>
          <polygon class="cls-2" points="319.3 39 323.19 37.95 324.2 41.8 320.39 42.89 319.3 39"/>
          <path class="cls-2" d="M338.8,34.1c1.32-.28,2.61-.6,3.93-.88l.84,3.93c-1.28.28-2.61.56-3.89.84l-.88-3.89h0Z"/>
          <polygon class="cls-2" points="300.05 44.85 303.9 43.61 305.1 47.42 301.33 48.66 300.05 44.85"/>
          <polygon class="cls-2" points="358.53 30.17 362.5 29.53 363.15 33.46 359.22 34.14 358.53 30.17"/>
          <path class="cls-2" d="M161.58,124.44c1-.88,2.01-1.77,3.05-2.65l2.61,3.05c-1,.88-2.01,1.77-3.01,2.61l-2.65-3.01h0Z"/>
          <polygon class="cls-2" points="378.43 27.24 382.44 26.76 382.88 30.77 378.91 31.21 378.43 27.24"/>
          <polygon class="cls-2" points="281.16 51.67 284.89 50.27 286.33 54 282.6 55.44 281.16 51.67"/>
          <path class="cls-2" d="M398.45,25.28c1.32-.08,2.69-.16,4.01-.24l.24,3.97c-1.32.08-2.65.2-3.97.28l-.28-4.01Z"/>
          <polygon class="cls-2" points="262.62 59.45 266.27 57.81 267.88 61.5 264.23 63.1 262.62 59.45"/>
          <path class="cls-2" d="M176.98,111.56c1.04-.84,2.09-1.68,3.17-2.49l2.45,3.17c-1.04.8-2.09,1.6-3.13,2.45l-2.49-3.13h0Z"/>
          <path class="cls-2" d="M209.64,88.17c1.12-.76,2.25-1.44,3.37-2.17l2.17,3.37c-1.12.72-2.25,1.44-3.37,2.17l-2.17-3.37Z"/>
          <path class="cls-2" d="M193.03,99.45c1.08-.76,2.17-1.56,3.25-2.33l2.33,3.29c-1.08.76-2.17,1.52-3.25,2.29l-2.33-3.25Z"/>
          <path class="cls-2" d="M244.49,68.12c1.16-.6,2.37-1.2,3.57-1.8l1.76,3.61c-1.16.56-2.33,1.16-3.53,1.76l-1.8-3.57Z"/>
          <path class="cls-2" d="M226.8,77.7c1.16-.68,2.33-1.32,3.49-2.01l1.97,3.53c-1.16.64-2.29,1.28-3.45,1.97l-2.01-3.49h0Z"/>
          <path class="cls-2" d="M737.72,202.5l-191.58-139.19h-118.29l-.12-.08-.12.08h-118.29l-.52.36L117.74,202.5l-.2.6-73.01,224.63.2.6,73.01,224.63.52.36,191.06,138.83h118.37l.04.04.04-.04h118.37l191.58-139.19.2-.64,73.01-224.59-.2-.64-73.01-224.59h0ZM635.35,140.53l-35.14,48.01-64.3-46.73h0c.17-.41.29-.84.4-1.28h99.04ZM319.14,140.53c.11.46.24.91.42,1.34l-64.32,46.71-35.14-48.05h99.04ZM121.47,436.33c.25.02.48.07.73.07.23,0,.44-.05.66-.07h0l26.43,81.4-60.81,20.1,32.97-101.48v-.02h.02ZM220.1,714.93l35.14-48.05,64.31,46.71c-.18.43-.31.88-.42,1.34h-99.03,0ZM536.31,714.93c-.11-.46-.24-.91-.42-1.34l64.31-46.71,35.14,48.05h-99.04,0ZM733.97,419.09c-.21-.01-.41-.06-.62-.06-.26,0-.51.05-.76.08v-.04l-26.45-81.35,60.77-20.1-32.93,101.44v.03h-.01ZM674.53,253.4l26.55,81.79-18.25,6.02c-12.8-38.03-34.34-73.77-64.62-104.01-9.39-9.39-19.33-17.97-29.76-25.75l12.64-17.29,64.74,47.05h0c-.48,1.08-.76,2.27-.76,3.53,0,4.8,3.89,8.69,8.69,8.69.26,0,.5-.05.76-.08l.02.05h-.01ZM597.83,191.79l-12.64,17.29c-44.89-32.49-98.56-50.26-155-50.74l-.48-.36v-17.45h89.72c.91,3.82,4.33,6.67,8.43,6.67,2.16,0,4.11-.82,5.63-2.12l.03.03,64.3,46.69h.01ZM425.71,140.53v17.49l-.4.32c-56.44.48-110.15,18.21-155.08,50.74l-12.64-17.29,64.3-46.69.03-.02c1.52,1.3,3.47,2.12,5.63,2.12,4.1,0,7.52-2.85,8.43-6.67h89.73ZM190.39,244.48c0-1.19-.24-2.33-.68-3.36l64.64-46.96,12.64,17.29c-10.43,7.78-20.38,16.37-29.76,25.75-30.29,30.24-51.83,65.99-64.62,104.01l-18.25-6.06,26.63-82.03v-.03c.25.02.47.07.71.07,4.8,0,8.69-3.89,8.69-8.69h0ZM130.89,427.73c0-3.16-1.7-5.9-4.22-7.42v-.03l26.44-81.31,18.25,6.06c-17.25,53.71-17.21,111.75,0,165.42l-18.25,6.02-26.43-81.31h0c2.52-1.54,4.22-4.27,4.22-7.43h0ZM180.99,602.31l-26.68-82.03,18.33-6.06c12.8,38.03,34.34,73.77,64.58,104.01,9.39,9.39,19.33,17.97,29.76,25.79l-12.64,17.25-64.63-46.95c.43-1.03.67-2.16.67-3.34,0-4.8-3.89-8.69-8.69-8.69-.24,0-.46.05-.7.07l-.02-.05h.02ZM257.61,663.64l12.64-17.25h.04c44.89,32.49,98.56,50.22,154.96,50.7l.48.36v17.49h-89.71c-.91-3.83-4.33-6.69-8.44-6.69-2.17,0-4.12.82-5.64,2.13h-.02l-64.3-46.75h-.01ZM429.73,714.94v-17.49l.48-.36c35.1-.28,69.15-7.3,100.68-20.34,19.13-7.9,37.3-18.09,54.27-30.37h.04l12.64,17.25-64.3,46.73-.02.02c-1.52-1.31-3.48-2.13-5.64-2.13-4.11,0-7.53,2.86-8.44,6.69h-89.71ZM665.07,610.71c0,1.26.28,2.46.77,3.54h-.01l-64.74,47.02-12.64-17.25c10.43-7.82,20.38-16.41,29.76-25.79,30.24-30.24,51.79-65.99,64.58-104.01l18.33,6.06-26.59,81.79v.03c-.27-.02-.51-.08-.77-.08-4.8,0-8.69,3.89-8.69,8.69ZM429.73,162.95l66.19,48.1,2.77,2.01,2.77,2.01,51.83,37.67,3.25,2.37,52.11,37.83,2.77,2.05,2.77,1.97,63.38,46.05,1.97,1.44-.76,2.37-24.23,74.49-1.04,3.21-1.04,3.25-21.18,65.22-1.24,3.77-21.38,65.78-1.04,3.21-1.04,3.29-22.46,69.03-.76,2.37h-311.19l-.76-2.37-22.42-69.03-1.08-3.29-1.04-3.25-21.38-65.74-1.2-3.77-21.18-65.22-1.08-3.25-1.04-3.29-24.19-74.37-.76-2.41,1.97-1.44,63.34-46.01,2.81-2.01,2.73-2.01,52.11-37.87,3.25-2.37,51.87-37.67,2.73-2.01,2.77-2.01,66.19-48.1.88-.64h2.25l.88.64h-.1ZM425.72,692.52l-66.15-48.1h136.34l-66.19,48.1-.84.6h-2.33l-.84-.6h0ZM654.56,434.19l24.19,74.45.76,2.37-2.01,1.44-63.34,46.05,19.66-60.49,1.24-3.81,19.49-60.01h.01ZM176.74,508.64l24.19-74.41,19.45,59.97,1.24,3.81,19.66,60.45-63.34-46.01-1.97-1.44.76-2.33v-.04h0ZM299.81,249.47l-3.25,2.37-47.61,34.62,22.42-69.03.76-2.37h75.09l-47.41,34.42h0ZM508.28,215.05h75.05l.76,2.37,22.46,69.03-47.65-34.62-3.25-2.37-47.37-34.42h0ZM677.52,517.42c-12.8,35.78-33.49,69.36-62.09,97.96-8.7,8.7-17.89,16.73-27.52,23.99l24.15-74.37,65.46-47.57h0ZM581.05,644.42c-42.36,30.12-92.46,47.01-145.17,48.58l66.83-48.58h78.34ZM419.6,693c-52.71-1.56-102.81-18.45-145.17-48.58h78.34l66.83,48.58ZM240.06,615.38c-28.6-28.6-49.3-62.13-62.05-97.92l65.42,47.53,24.15,74.37c-9.63-7.26-18.81-15.28-27.52-23.99h0ZM173.83,350.76l24.99,76.98-24.99,76.98c-15.12-50.1-15.12-103.85,0-153.95h0ZM178,338c12.76-35.78,33.45-69.35,62.05-97.96,8.7-8.7,17.93-16.73,27.56-23.99l-24.19,74.41-65.42,47.53h0ZM274.35,211.04c42.36-30.12,92.5-47.05,145.29-48.62l-66.87,48.62h-78.42ZM435.88,162.42c52.75,1.56,102.89,18.49,145.25,48.62h-78.38l-66.87-48.62h0ZM587.87,216.05c9.63,7.26,18.85,15.28,27.56,23.99,28.6,28.6,49.3,62.17,62.09,98l-65.46-47.57-24.19-74.41h0ZM681.69,504.78l-25.03-77.06,25.03-77.06c15.12,50.14,15.12,103.93,0,154.11h0ZM702.35,338.99l26.43,81.35v.02c-2.45,1.54-4.1,4.24-4.1,7.36s1.65,5.82,4.1,7.35l-26.43,81.39-18.25-6.02c17.21-53.67,17.25-111.71.04-165.42l18.21-6.02h0ZM734,436.34l32.97,101.48-60.81-20.14,26.43-81.35v-.02c.27.02.51.08.78.08.21,0,.41-.05.62-.06h0ZM765.77,541.64l-86.2,62.62c-.38-.34-.77-.65-1.21-.92h0l26.55-81.83,60.85,20.14h.01ZM669.34,618.13h0l-30.69,94.47-35.18-48.1,64.78-47.09.04-.03c.33.27.68.52,1.04.74h.01ZM519.88,720.3l-90.13,65.46v-66.83h89.71c.11.46.24.92.42,1.35h0v.02ZM425.74,785.76l-90.13-65.46h0c.18-.45.31-.9.42-1.36h89.71v66.83h0ZM216.83,712.59l-30.61-94.22h0c.41-.26.79-.55,1.15-.86l.02.02,64.62,46.97-35.18,48.1h0ZM89.71,541.63l60.85-20.14,26.63,82.03v.03c-.39.24-.75.52-1.11.82h-.02l-86.36-62.75h.01ZM121.48,419.05l-32.97-101.44,60.81,20.1-26.43,81.35v.03c-.23-.02-.44-.07-.66-.07-.25,0-.48.05-.73.07v-.04h-.02ZM89.71,313.75l86.32-62.7.05-.04c.35.3.73.59,1.13.83l-.02.05-26.63,81.99-60.85-20.14h0ZM186.22,237.05l30.6-94.22,35.18,48.06-64.62,46.97-.03.02c-.36-.3-.73-.58-1.13-.83ZM335.6,135.13l90.13-65.5v66.87h-89.71c-.11-.47-.24-.93-.42-1.37ZM429.74,69.63l90.13,65.5c-.18.44-.31.9-.42,1.37h-89.71v-66.87h0ZM638.65,142.84l30.69,94.43v.02c-.35.22-.69.46-1.01.72l-.03-.02-64.82-47.09,35.18-48.06h0ZM765.77,313.76l-60.85,20.14-26.55-81.79v-.02c.44-.28.84-.59,1.23-.94,0,0,.01,0,.01,0l86.16,62.62h0ZM806.72,427.72l-35.66,109.71-33.21-102.29v-.02c2.51-1.52,4.21-4.26,4.21-7.42s-1.7-5.9-4.22-7.42v-.03l33.22-102.25,35.66,109.71h0ZM734.32,650.47l-92.14,66.95-.64-.84,31.61-97.23v-.02c.22.02.42.06.63.06,4.8,0,8.69-3.89,8.69-8.69,0-1.12-.23-2.17-.61-3.15l86.96-63.17-34.5,106.1h0ZM433.31,788.14l88.93-64.62h.02c1.52,1.29,3.47,2.11,5.63,2.11,4.1,0,7.52-2.85,8.43-6.68h101.97l.64.84-94.06,68.35h-111.56ZM216.54,719.79l.64-.84h101.97c.91,3.83,4.33,6.68,8.43,6.68,2.16,0,4.11-.82,5.63-2.12h.02l88.93,64.63h-111.51l-94.1-68.35h0ZM86.7,544.42l87,63.18h0c-.43,1.05-.68,2.18-.68,3.37,0,4.8,3.89,8.69,8.69,8.69.23,0,.45-.05.68-.07v.04l31.54,96.95-.64.84-92.14-66.95-34.46-106.06h.01ZM48.79,427.73l35.62-109.67,33.25,102.25v.03c-2.47,1.53-4.14,4.25-4.14,7.38s1.67,5.85,4.14,7.38v.02l-33.26,102.29-35.62-109.67h.01ZM121.15,204.98l92.14-66.95.64.84-31.53,96.95v.02c-.24-.02-.46-.07-.69-.07-4.8,0-8.69,3.89-8.69,8.69,0,1.19.24,2.32.67,3.36l-87,63.18s34.46-106.02,34.46-106.02ZM422.15,67.32l-88.93,64.62h0c-1.52-1.31-3.48-2.13-5.64-2.13-4.11,0-7.54,2.86-8.44,6.7h-101.96l-.64-.84,94.1-68.35h111.51ZM638.92,135.67l-.64.84h-101.96c-.9-3.84-4.33-6.7-8.44-6.7-2.14,0-4.08.81-5.6,2.09h0l-88.93-64.59h111.51l94.06,68.35h0ZM734.31,204.98l34.46,106.02-86.91-63.13c.38-.98.61-2.03.61-3.14,0-4.8-3.89-8.69-8.69-8.69-.21,0-.41.05-.62.06v-.04l-31.62-97.19.64-.84,92.14,66.95h-.01Z"/>
        </g>
        <path class="cls-2" d="M427.73,855.46c-114.25,0-221.66-44.49-302.45-125.28C44.49,649.39,0,541.98,0,427.73S44.49,206.07,125.28,125.28C206.07,44.49,313.48,0,427.73,0s221.66,44.49,302.45,125.28c80.79,80.79,125.28,188.2,125.28,302.45s-44.49,221.66-125.28,302.45-188.2,125.28-302.45,125.28h0ZM427.73,5.24C194.76,5.23,5.23,194.76,5.23,427.73s189.53,422.49,422.49,422.49,422.49-189.53,422.49-422.49S660.69,5.23,427.73,5.23h0Z"/>
      </g>
      <g>
        <polygon class="cls-1" points="401.06 270.63 472.12 278.65 485.24 295.86 431.92 323.05 381.86 285.65 401.06 270.63"/>
        <polygon class="cls-1" points="309.7 311.09 440.44 334.95 534.13 308.7 546.85 343.7 430.75 356.83 295.4 344.99 309.7 311.09"/>
        <polygon class="cls-1" points="294.34 377.22 432.01 366.63 552.66 380.84 561.12 414.38 434.49 386.23 305.45 409.6 294.34 377.22"/>
        <polygon class="cls-1" points="433.55 396.53 449.98 412.48 450.76 485.65 433.55 584.82 421.13 548.65 410.86 426.31 433.55 396.53"/>
      </g>
    </g>
  </g>
</svg>

================
File: public/images/tileset-placeholder.txt
================
PLACEHOLDER IMAGE NEEDED

To complete the marketplace functionality:

1. Add a placeholder image file named "tileset-placeholder.png" in this directory
2. The image should be a simple grid pattern representing a tileset
3. Recommended size: 256x256 pixels
4. The file should be a PNG image

When a tileset image fails to load, the application will try to use this placeholder image instead.

================
File: public/markdown_test/demo-text-file.txt
================
{
  "type": "doc",
  "content": [
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "Welcome to Text Files!"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This looks like a simple "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "code"
            }
          ],
          "text": ".txt"
        },
        {
          "type": "text",
          "text": " file to users, but it's actually powered by ProseMirror behind the scenes!"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Users can now:"
        }
      ]
    },
    {
      "type": "bullet_list",
      "content": [
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Type "
                },
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ],
                  "text": ".txt"
                },
                {
                  "type": "text",
                  "text": " in autocomplete"
                }
              ]
            }
          ]
        },
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Get a full "
                },
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ],
                  "text": "WYSIWYG editor"
                }
              ]
            }
          ]
        },
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Have "
                },
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "em"
                    }
                  ],
                  "text": "perfect data preservation"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Behind the scenes, this file is stored as "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "code"
            }
          ],
          "text": ".prosemirror"
        },
        {
          "type": "text",
          "text": " with perfect JSON structure!"
        }
      ]
    }
  ]
}

================
File: public/markdown_test/README.md
================
# Public Markdown Files

This is a demonstration of the public markdown files feature. This file is stored in the public folder and can be read by all users, but only edited by administrators.

## Features

- **Public Access**: All users can read markdown files in this folder
- **Admin Editing**: Only administrators can edit these files
- **Markdown Support**: Full markdown formatting is supported

## How to Use

1. Open the Explorer window
2. Navigate to the Public tab
3. Select a markdown file to view
4. If you're an admin, you can click the "Edit" button to make changes

## Markdown Examples

### Text Formatting

You can use **bold**, *italic*, or ~~strikethrough~~ text.

### Lists

Unordered list:
- Item 1
- Item 2
- Item 3

Ordered list:
1. First item
2. Second item
3. Third item

### Code

Inline code: `const example = "Hello World";`

Code block:
```javascript
function greet(name) {
  return `Hello, ${name}!`;
}

console.log(greet("User"));
```

### Tables

| Name | Role | Department |
|------|------|------------|
| John | Developer | Engineering |
| Sarah | Designer | UX/UI |
| Mike | Manager | Operations |

### Links and Images

[Link to documentation](https://www.markdownguide.org/)

![Image placeholder](https://via.placeholder.com/150)

## Contributing

If you're an administrator, you can edit this file to add more information or create new markdown files in the public folder.

================
File: public/markdown_test/test-document.prosemirror
================
{
  "type": "doc",
  "content": [
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "Welcome to ProseMirror!"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This is a "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "strong"
            }
          ],
          "text": "test document"
        },
        {
          "type": "text",
          "text": " using ProseMirror's native JSON format."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Here's what you can do:"
        }
      ]
    },
    {
      "type": "bullet_list",
      "content": [
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "em"
                    }
                  ],
                  "text": "Format text"
                },
                {
                  "type": "text",
                  "text": " with bold, italic, etc."
                }
              ]
            }
          ]
        },
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Create "
                },
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "link",
                      "attrs": {
                        "href": "https://example.com",
                        "title": null
                      }
                    }
                  ],
                  "text": "links"
                },
                {
                  "type": "text",
                  "text": " and lists"
                }
              ]
            }
          ]
        },
        {
          "type": "list_item",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Add line breaks"
                },
                {
                  "type": "hard_break"
                },
                {
                  "type": "text",
                  "text": "that actually work!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Everything is automatically saved as you type with "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "strong"
            }
          ],
          "text": "zero data loss"
        },
        {
          "type": "text",
          "text": "!"
        }
      ]
    }
  ]
}

================
File: public/sample.canvas
================
{
  "name": "Sample Canvas",
  "nodes": [
    {
      "id": "node-1",
      "type": "text",
      "position": {
        "x": 100,
        "y": 100
      },
      "data": {
        "text": "Welcome to Canvas Editor!\n\nThis is a text node. You can edit it by clicking the 'Add Node' button above."
      }
    },
    {
      "id": "node-2",
      "type": "text",
      "position": {
        "x": 400,
        "y": 300
      },
      "data": {
        "text": "You can connect nodes with arrows.\n\nTry selecting this node and dragging from a connection point to another node."
      }
    },
    {
      "id": "node-3",
      "type": "text",
      "position": {
        "x": 150,
        "y": 400
      },
      "data": {
        "text": "Drag nodes around to reposition them.\n\nYou can also delete selected nodes or connections."
      }
    }
  ],
  "edges": [
    {
      "id": "edge-1",
      "source": "node-1",
      "target": "node-2",
      "type": "default",
      "style": {
        "stroke": "#14b8a6"
      }
    }
  ],
  "version": "1.0",
  "metadata": {
    "created": "2025-04-16T13:20:00.000Z",
    "modified": "2025-04-16T13:20:00.000Z"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/App.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

#root {
  width: 100%;
  height: 100%;
}

================
File: src/App.jsx
================
import React, { useState, useCallback } from 'react';
import { WindowManager } from './components/WindowManager';
import { CommandBar } from './components/CommandBar';
import { EmptyState } from './components/EmptyState';
import { AuthScreen } from './components/auth';
import { useWindowManager } from './hooks/useWindowManager';
import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';
import { useAuth } from './context/AuthContext';
import { ActiveUsersProvider } from './context/ActiveUsersContext';
import { SocketProvider } from './context/SocketContext';
import { WINDOW_CONTENT, WINDOW_TYPES } from './utils/windowTypes';

/**
 * Main application component that composes our window management system.
 * This component is intentionally kept simple, delegating most functionality
 * to specialized components and hooks.
 */
function App() {
  const { isAuthenticated, loading, user, logout } = useAuth();
  
  // State for tracking which windows are currently flashing
  const [flashingWindowIds, setFlashingWindowIds] = useState(new Set());
  
  // Function to flash a window's border red
  const flashWindowBorder = useCallback((windowId) => {
    setFlashingWindowIds(prev => {
      const newSet = new Set(prev);
      newSet.add(windowId);
      return newSet;
    });
    
    // Remove the window from flashing state after 500ms
    setTimeout(() => {
      setFlashingWindowIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(windowId);
        return newSet;
      });
    }, 200);
  }, []);
  
  // Call all hooks at the top level, before any conditional returns
  const {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    createNewWindow,
    splitWindow,
    closeWindow,
    transformWindow,
    handleCommand,
    handleResizeStart,
    handleResizeMove,
    handleResizeEnd,
    hasActiveWindow,
    hasRootNode,
    currentWorkspaceIndex,
    switchWorkspace,
    isResizeMode,
    isMoveMode,
    setIsResizeMode,
    resizeActiveWindow,
    moveSourceWindowId
  } = useWindowManager({
    onFlashBorder: flashWindowBorder
  });

  // Set up keyboard shortcuts - always call this hook, even if we'll return early
  // But don't include move mode props to avoid conflicts with WindowManager
  useKeyboardShortcuts({
    onSplitVertical: () => splitWindow(activeNodeId, 'vertical'),
    onSplitHorizontal: () => splitWindow(activeNodeId, 'horizontal'),
    onClose: () => closeWindow(activeNodeId),
    createNewWindow,
    hasActiveWindow,
    hasRootNode,
    isResizeMode,
    isMoveMode,
    setIsResizeMode,
    resizeActiveWindow,
    activeNodeId
  });
  
  // If authentication is still loading, show a loading screen
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-stone-900">
        <div className="text-teal-500 text-2xl font-mono">Loading...</div>
      </div>
    );
  }
  
// If not authenticated, show the auth screen
  if (!isAuthenticated) {
    return <AuthScreen />;
  }

  // Define component to render based on whether we have a root node
  const renderContent = () => {
    if (!rootNode) {
      return <EmptyState />;
    }

    // Render the window tree with all necessary props
    return (
      <WindowTreeRenderer
        node={rootNode}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={handleResizeStart}
        onResizeMove={handleResizeMove}
        onResizeEnd={handleResizeEnd}
        isResizeMode={isResizeMode} // Pass isResizeMode to WindowTreeRenderer
        isMoveMode={isMoveMode}
        moveSourceWindowId={moveSourceWindowId} // Pass moveSourceWindowId to WindowTreeRenderer
        flashingWindowIds={flashingWindowIds} // Pass flashingWindowIds to WindowTreeRenderer
      />
    );
  };

  return (
    <SocketProvider>
      <ActiveUsersProvider>
        <div className="w-full h-screen flex flex-col">
          {/* Global command bar with user info */}
          <CommandBar 
            onCommand={handleCommand}
            currentWorkspaceIndex={currentWorkspaceIndex}
            switchWorkspace={switchWorkspace}
            user={user}
            onLogout={logout}
          />
          
          {/* Main content area */}
          <div className="flex-1 relative">
            {renderContent()}
          </div>
        </div>
      </ActiveUsersProvider>
    </SocketProvider>
  );
}

/**
 * Renders the window tree recursively. This component is kept within App.jsx
 * since it's tightly coupled with the WindowManager's functionality.
 */
const WindowTreeRenderer = ({
  node,
  depth = 0,
  available = { x: 0, y: 0, width: 100, height: 100 },
  activeNodeId,
  setActiveNodeId,
  transformWindow,
  onResizeStart,
  onResizeMove,
  onResizeEnd,
  isResizeMode, // Add isResizeMode prop
  isMoveMode,
  moveSourceWindowId,
  flashingWindowIds
}) => {
  if (node.type === 'window') {
    const windowContent = WINDOW_CONTENT[node.windowType];
    
    // Check if window content exists (window type might have been removed)
    if (!windowContent) {
      console.warn(`Window type "${node.windowType}" is no longer supported`);
      return (
        <div
          className="absolute overflow-hidden border-1 border-red-500"
          style={{
            left: `${available.x}%`,
            top: `${available.y}%`,
            width: `${available.width}%`,
            height: `${available.height}%`,
          }}
          onClick={() => setActiveNodeId(node.id)}
        >
          <div className="flex h-full items-center justify-center bg-stone-800 text-red-400 p-4 text-center">
            <div>
              <p className="font-bold mb-2">Unsupported Window Type</p>
              <p className="text-sm">Window type "{node.windowType}" is no longer available</p>
              <button 
                className="mt-4 px-3 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs text-teal-400"
                onClick={(e) => {
                  e.stopPropagation();
                  // Convert to terminal window
                  transformWindow(node.id, WINDOW_TYPES.TERMINAL);
                }}
              >
                Convert to Terminal
              </button>
            </div>
          </div>
        </div>
      );
    }
    
    const Component = windowContent.component;
    const isActive = node.id === activeNodeId;
    // Check if this is the first selected window in move mode
    const isFirstSelectedWindow = isMoveMode && moveSourceWindowId === node.id;
    // Check if this window is currently flashing
    const isFlashing = flashingWindowIds.has(node.id);

    return (
      <div
        className={`absolute overflow-hidden border-1 ${
          isFlashing ? 'border-red-600' : 
          isFirstSelectedWindow 
            ? 'border-blue-300' 
            : isActive 
              ? isResizeMode 
                ? 'border-yellow-500'
                : isMoveMode
                  ? 'border-blue-500'
                  : 'border-teal-500'
              : 'border-stone-600'
        } $`}
        style={{
          left: `${available.x}%`,
          top: `${available.y}%`,
          width: `${available.width}%`,
          height: `${available.height}%`,
        }}
        onClick={() => setActiveNodeId(node.id)}
      >
        <Component
          key={`window-${node.id}-${node.windowType}`}
          isActive={isActive}
          nodeId={node.id}
          transformWindow={transformWindow}
        />
      </div>
    );
  }

  // Handle split nodes...
  let firstDimensions, secondDimensions;
  if (node.direction === 'horizontal') {
    firstDimensions = {
      x: available.x,
      y: available.y,
      width: available.width * node.splitRatio,
      height: available.height
    };
    secondDimensions = {
      x: available.x + (available.width * node.splitRatio),
      y: available.y,
      width: available.width * (1 - node.splitRatio),
      height: available.height
    };
  } else {
    firstDimensions = {
      x: available.x,
      y: available.y,
      width: available.width,
      height: available.height * node.splitRatio
    };
    secondDimensions = {
      x: available.x,
      y: available.y + (available.height * node.splitRatio),
      width: available.width,
      height: available.height * (1 - node.splitRatio)
    };
  }

  return (
    <>
      <WindowTreeRenderer
        node={node.first}
        depth={depth + 1}
        available={firstDimensions}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={onResizeStart}
        onResizeMove={onResizeMove}
        onResizeEnd={onResizeEnd}
        isResizeMode={isResizeMode} // Pass down isResizeMode
        isMoveMode={isMoveMode} // Pass down isMoveMode
        moveSourceWindowId={moveSourceWindowId} // Pass down moveSourceWindowId
        flashingWindowIds={flashingWindowIds} // Pass down flashingWindowIds
      />
      
      <div
        className={`absolute z-10 ${
          node.direction === 'horizontal' 
            ? 'w-1 cursor-col-resize hover:bg-teal-500' 
            : 'h-1 cursor-row-resize hover:bg-teal-500'
        }`}
        style={{
          left: node.direction === 'horizontal' ? `${available.x + (available.width * node.splitRatio)}%` : `${available.x}%`,
          top: node.direction === 'horizontal' ? `${available.y}%` : `${available.y + (available.height * node.splitRatio)}%`,
          height: node.direction === 'horizontal' ? `${available.height}%` : '2px',
          width: node.direction === 'horizontal' ? '2px' : `${available.width}%`,
        }}
        onMouseDown={(e) => onResizeStart(e, node)}
      />
      
      <WindowTreeRenderer
        node={node.second}
        depth={depth + 1}
        available={secondDimensions}
        activeNodeId={activeNodeId}
        setActiveNodeId={setActiveNodeId}
        transformWindow={transformWindow}
        onResizeStart={onResizeStart}
        onResizeMove={onResizeMove}
        onResizeEnd={onResizeEnd}
        isResizeMode={isResizeMode} // Pass down isResizeMode
        isMoveMode={isMoveMode} // Pass down isMoveMode
        moveSourceWindowId={moveSourceWindowId} // Pass down moveSourceWindowId
        flashingWindowIds={flashingWindowIds} // Pass down flashingWindowIds
      />
    </>
  );
};

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/assets/SVG/emptyState.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1781 1145.9">
  <defs>
    <style>
      .cls-1, .cls-2 {
        fill: none;
        stroke: #48c0b2;
        stroke-miterlimit: 10;
      }

      .cls-2 {
        stroke-width: 3px;
      }

      .cls-3 {
        clip-path: url(#clippath);
      }
    </style>
    <clipPath id="clippath">
      <polyline class="cls-1" points="270.6 1145.4 .5 1145.4 .5 .5 1780.5 .5 1780.5 1145.4 270.6 1145.4"/>
    </clipPath>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1">
    <g>
      <g class="cls-3">
        <path class="cls-2" d="M1029.18,973.3c-1.01-7.48-1.99-14.93-2.93-22.34M1044.76,1073.01c1.48,8.41,3.02,16.87,4.6,25.35,2.18,11.57,4.39,23.05,6.69,34.42M1056.05,1132.78v.03M1029.72,972.17l9.78,59.68M982,1151.26c13.28,18.04,34.44,25.19,50.69,18.7,11.91-4.77,17.69-15.46,19.61-19.55M1217.44,708.86c.02-.74.07-1.44.12-2.11.05-.58.1-1.12.17-1.61.93-6.9,3.48-6.88,4.77-14.78,2.69-16.44-6.71-26.62-1.32-32.23,1.75-1.82,4-2.04,6.02-2.45,1.77-.36,3.35-.88,4.27-2.69,1.32-2.64-.39-4.74-.82-11.84-.26-4.19.14-6.95.24-8.56.84-12.18-3.72-37.43-7.1-53.92-.55-2.68-1.06-5.13-1.53-7.26M1211.99,522.22c-2.45-14.09-2.63-17.86-6.16-24.45M1196.66,484.67c-3.5-4.44-9.15-11.86-19.34-25.98-14.91-20.68-15.39-22.33-20.4-26.89-14.95-13.63-23.29-10.35-45.73-24.06-17.35-10.59-13.64-13.32-33.58-27.04-26.08-17.95-45.17-22.03-44.24-29.17.98-7.48,22.53-7.31,25.17-18.88,1.2-5.23-2.13-10.09-3.81-12.58-9.61-14.16-17.61-29.36-26.74-43.83-2.49-3.95-5.06-7.84-7.77-11.65-16.66-23.34-26.02-44-30.13-53.2-7.71-17.25-5.34-16.44-18.12-49.2-14.71-37.72-20.82-46.4-26.12-52.72-10.14-12.08-20.56-19.24-29.17-25.17-12.84-8.84-20.03-13.66-30.03-14.29-9.64-.62-17.93,2.9-31.16,11.43-26.53,17.09-41.13,26.51-52.92,45.48-8.29,13.37-12.96,35.99-22.31,81.24-5.34,25.88-4.14,25.07-6.57,30.31-1.44,3.09-3.21,6.26-5.18,9.46-3.02,4.84-6.56,9.71-10.31,14.43-12.77,16.11-27.83,30.29-32.12,34.32-1.24,1.15-4.56,4.26-6.25,9.34-.14.45-2.76,8.73,1.08,16.47,5.56,11.19,19.1,10.18,19.61,15.24.55,5.66-16.25,9.7-45.48,23.44-21.18,9.95-31.95,15.14-41.77,24.88-7.69,7.65-8.68,11.45-16.9,16.7-4.58,2.92-7.52,3.81-29.82,12.1-13.92,5.17-15.08,5.68-17.04,7.24-8.82,7.07-9.71,16.46-13.45,26.03-6.8,17.47-18.09,22.98-27.73,33.84-9.85,11.09-10.64,19.48-15.41,50.76M1097.89,709.58c-7.45-10.83-12.61-19.96-17.04-31.52-5.23-13.68-5.1-25.4-9.44-25.74-1.49-.12-2.75,1.13-8.44,10.74-1.03,1.75-2.21,3.78-3.57,6.13-4.99,8.63-7.89,13.87-9.64,17.21M1110.05,726.36c1.97,2.63,4.05,5.39,6.26,8.32,2.59,3.45,5.65,7.43,9.18,11.88M706.52,665.13c-5.59-9.99-8.25-15.34-10.43-17.92-1.27-1.53-2.39-2.09-3.84-2.06-.58.02-1.13.12-1.68.31-6.97,2.4-11.34,18.55-17.09,34.2M613.79,672.74c13.47-6.56,26.87-14.26,37.86-23.37,24.39-20.25,34.08-45.2,36.93-53.44.6-1.73,1.15-3.45,1.65-5.13,4.55-15.36,5.13-28.88,4.86-38.04M1062.96,663.06c-10,4.63-17.62,9.58-23.22,13.8M795.98,693.24c-3.57-1.63-7.52-3.47-11.93-5.46-.48-.21-.94-.43-1.41-.62M696.09,647.22c3.81,2.32,9.35,5.63,16.18,9.39,3.64,2.01,6.92,3.74,9.95,5.29M1203.78,571.06c6.04,2.69,12.68,5.25,20.01,7.6h.02M1160.75,541.54c-1.15-1.2-2.23-2.39-3.24-3.54-9.49-10.83-18.21-24.92-36.04-29.57-6.4-1.66-7.43-.41-20.46-.05-2.49.07-5.42.1-8.92.07-19.12-.15-33.41-.38-48.62-6.11-4.67-1.75-6.93-3.09-22.24-12.51-25.4-15.62-46.11-28.5-68.14-40.69-4.55-2.52-8.37-4.58-11.63-6.26-13.2-6.83-17.04-7.62-20.76-7.95-1.77-.15-3.48-.21-5.17-.17-16.53.39-29.31,9.76-43.74,19.01-63.15,40.45-111.87,49.35-130.57,49.53-14.52.12-23.32.21-32.42-5.39-6.16-3.81-11.94-9.92-15.77-7.91-2.08,1.08-1.54,3.48-5.71,10.3-1.9,3.09-2.9,4.67-4.72,6.14-1.25,1-3.64,2.59-10.16,3.72-6.04,1.05-10.74.86-11.1.84-11.57-.43-26.34,11.07-33.65,16.32-4.93,3.52-16.94,9.66-40.96,21.93-9.11,4.65-21.04,10.11-35.85,15.29M1101.01,508.39c-.53,1.06-1.39,2.66-2.57,4.5-2.33,3.62-3.84,4.89-5.01,6.73-2.33,3.64-2.13,7.57-1.99,11.15.21,5.65.38,10.28.46,14.16.17,6.98.1,11.51-.46,15.02-.57,3.57-2.73,7.5-6.74,13.44M967.14,541.29c1.17.14,2.4.31,3.69.53,1.44.24,5.22.7,10.71,2.28,5.51,1.58,12.73,4.27,21.12,8.97,6.88,3.84,19.37,10.74,30.61,24.02,14.74,17.42,14.31,30.41,21.97,30.89,4.99.31,10.86-8.05,22.6-24.75,2.69-3.84,4.98-7.05,6.85-9.85M938.31,526.87c-1.08-4.38-2.32-9.3-6.98-14.35-3.6-3.91-6.21-4.72-7.88-4.96-6.74-.96-12.53,5.54-13.21,6.32-.12.14-.24.27-.34.43M788,582.42c-1.92,1.6-3.76,3.12-5.42,4.53-4.87,4.1-8.36,7.05-8.48,7.16-10.9,9.2-11.81,15.6-16.35,16.17-3.02.38-5.27-1.87-6.57-2.95-29.43-24.39-44.14-36.57-48.24-45.66-1.25-2.78-3.02-6.35-6.68-8.39-.39-.22-.79-.39-1.18-.51-4.19-1.46-9.04,1.41-18.28,4.89-19.15,7.26-21.4,4.12-26.12,9.16-6.09,6.5-2.3,11.84-8.39,24.11-4.2,8.48-9.73,13.45-15.34,18.5-4.77,4.29-12.48,10.31-33.09,19.55-12.8,5.73-20.71,8.25-28.04,10.79-6.45,2.23-12.46,4.48-20.97,8.97-3.35,1.75-6.44,3.5-9.23,5.18M1091.9,544.92c2.76.98,7.19,2.51,12.68,4.29,12.42,4,14.29,4.08,16.46,6.44,4.48,4.89,1.12,9.75,4.05,19.82,2.4,8.27,7.14,13.52,11.53,18.36,7.46,8.24,15.17,12.29,26.03,17.86,10.07,5.18,10.78,4.2,22.58,10.16,8.12,4.08,14.72,7.41,22.03,13.01,5.3,4.07,12.73,10.67,19.94,20.8M1071.41,652.32c2.47-12.17,4.8-24.69,7-37.62.6-3.57,1.2-7.12,1.77-10.66,1.66-10.42,3.17-20.64,4.51-30.65v-.02M690.22,590.79c-.07,7.71-.1,15.48-.07,23.34.05,10.61.19,21.04.41,31.34v.02M1080.18,604.04c3.83,9.52,8.36,16.49,11.82,21.11,7.02,9.35,14.36,15.32,23.46,22.74,5.44,4.43,9.16,7.46,14.59,10.86,9.22,5.78,14.55,7.14,32.31,13.87,18.21,6.92,27.46,10.45,34.89,15.17,9.59,6.07,16.34,12.72,20.49,17.35M923.91,520.13c-.05-3.69-.21-7.83-.46-12.56-.33-6.11-.86-13.2-1.63-21.61-1.27-13.8-3.21-31.13-6.3-51.17M1027.99,276.24c-7.21-4.51-17.85-11.75-29.52-22.05-16.44-14.5-21.67-23.36-41.89-49.87-2.06-2.73-4.31-5.65-6.73-8.77-6.69-8.61-29.7-37.98-64.08-68.06-11.38-9.97-15.27-12.36-20.59-12.6-24.26-1.03-48.62,44.41-59.38,67.25-2.63,5.56-4.44,9.78-5.25,11.69-1.73,4.02-5.42,12.99-12.01,24.61-7.45,13.09-14.9,23.06-20.06,29.46M886.64,70.01c-1.18,1.68-3.91,5.58-7.43,10.57-8.34,11.86-10.16,14.36-11.72,18.6-1.24,3.31-2.63,8.56-2.3,15.72M852.13,375.95c29.5,11.43,40.5,16.54,59.68,15.24,7.6-.51,12.82-1.77,20.64-4.56,2.63-.94,5.56-2.06,8.99-3.38,7.62-2.92,17.66-6.83,32.24-12.06,25.38-9.1,46.26-15.62,59.67-19.65M852.11,375.93c-5.29-2.04-11.17-4.31-17.81-6.76-18.6-6.9-45.66-16.34-79.5-26.03M932.46,386.6c3-2.44,5.99-4.87,8.99-7.31,9.08-7.38,18.14-14.76,27.22-22.14,5.44-4.41,10.86-8.84,16.3-13.25,4.89-3.98,9.76-7.95,14.66-11.93M852.13,375.95s-.02,0-.02-.02c-14.69-10.5-29.38-20.99-44.09-31.49-9.15-6.54-18.31-13.09-27.47-19.63-2.39-1.7-4.79-3.41-7.17-5.11M805.81,182.15c.76,39.26,2.99,64.35,5.89,80.19,1.73,9.58,3.72,15.79,5.77,19.72,1.22,2.35,2.47,3.88,3.69,4.84.58.45,9.32,7.17,16.58,12.96,13.02,10.38,11.74,9.85,13.73,11.07,18.62,11.31,41.97,3.98,44.81,3.04,4.77-1.56,2.32-1.42,16.41-8.37,13.97-6.9,22.77-10.24,28.78-13.45,4.93-2.61,7.96-5.15,10.4-9.49,1.92-3.38,2.66-7.1,4.15-14.59,1.96-9.82,1.9-17.31,1.72-26.87-.27-14.16-.69-26.56-1.13-36.86M951.85,282.64c.14,14.31.43,25.81.84,34.97.02.5.03,1,.07,1.48.55,11.74,1.32,19.51,2.18,24.44.86,4.79,1.8,6.88,2.78,7.34.14.07,1.77.82,3.95,1.99,2.95,1.6,5.3,3.12,7,4.29M808.03,344.44c1.54-.79,3.62-2.15,5.25-4.44.55-.79.98-1.56,1.3-2.33.89-2.02,1.12-3.9,1.22-5.01.33-3.23.7-10.43,1.03-20.59,0-.31.02-.62.03-.94.24-8.08.46-17.93.6-29.05M816.85,311.11c-5.1.45-12.1,1.61-19.92,4.67-7.04,2.75-12.49,6.18-16.37,9.03M984.66,343.53c-1.7-3.59-5.65-10.71-13.64-16.59-7.26-5.34-14.41-7.16-18.26-7.84M1219.69,741.04c.55.12,1.12.26,1.68.43,4.74,1.39,9.11,4.26,10.11,3.04.57-.7-.55-2.15-1.9-6.09-.84-2.42-1.32-4.53-1.63-6.09M803.7,448.11c-32.14-.02-55.62-6.71-71.51-13.16-17.18-6.95-31.16-15.92-49.18-12.01-7.05,1.54-12.49,4.56-27.18,16.59-39.47,32.35-49.7,51.1-78.65,67.22-10.52,5.85-19.65,9.2-24.59,10.86M790.83,429.79c8.37.58,18.91.6,30.89-1.13,10.95-1.6,20.3-4.22,27.75-6.86M845.18,436.66c10.59-3.31,21.91-7.34,33.74-12.29,8.01-3.35,15.55-6.81,22.6-10.3M1085.7,452.69c-45.54.55-72.66-6.23-86.08-10.59-30.31-9.83-45.46-14.74-56.06-20.88-.41-.24-1.13-.65-2.11-1.17-1.9-.96-4.8-2.25-8.48-3.12-10.45-2.49-19.46.15-24.59,1.72-4.55,1.39-11.67,4.19-19.17,10.02M1142.62,457.84c-2.57-3.35-6.49-8.12-11.72-13.45-5.73-5.83-8.6-8.75-11.45-10-9.04-3.98-17.16,2.56-31.18,6.57-7.34,2.11-18.6,4.2-33.74,2.57M1108.68,415.21c9.51,6.06,16.47,10.64,22.12,14.5,3.67,2.51,6.07,4.2,9.92,4.91,5.56,1.01,8.6-1.05,12.8.72,3.41,1.42,5.44,4.48,6.64,6.95M1076.26,416.55c-8.15,1.44-20.23,2.71-34.51.77-11.65-1.6-17.85-4.41-26.17-6.49-11.53-2.87-28.56-4.7-51.62.76M1053.2,403.01c-20.27-.12-41.05.05-62.36.58-16.8.41-33.26,1.01-49.39,1.82-.63.02-1.27.05-1.89.09M1046.52,390.05c-5.97.17-15.05.41-26.12.57-14.23.21-22.63.15-26.89.19-11.74.12-28.95,1.25-52.07,6.09-.62.12-1.25.26-1.89.39M813.52,415.41c14.4-4.75,25.81-5.06,33.75-4.39,9.66.82,19.65,3.55,33.36.19,3.95-.96,7.09-2.16,9.16-3.05M884.84,399.58c-13.92-1.51-28.09-2.92-42.52-4.19-17.25-1.53-34.15-2.78-50.73-3.81M687.68,396.73c28.19,4.46,40.93.76,47.28-3.83,1.18-.84,4.62-3.48,9.92-6.28,7.58-4,14.47-5.89,19.07-6.86M749.08,484.43c-19,.62-29.4-4.72-35.47-10.11-5.89-5.23-8.53-11.26-13.35-10.86-5.73.46-6.14,9.34-14.48,18.1-5.97,6.26-13.3,8.79-27.99,13.85-7.95,2.75-19.13,5.99-33.03,8.08M1184.96,520.09c-1.39-.93-2.63-1.87-3.72-2.78-8.8-7.33-9.92-14.11-18.88-22.02-9.88-8.73-21.45-11.88-29.74-13.16M1038.73,719.52c.65-.12,1.32-.24,1.99-.38h.02M959.76,769.11c12.97-3.09,25.95-6.18,38.9-9.27M816.81,312.06h.02c20.18,5.95,30.96,15.02,37.12,22.5,4.17,5.08,8.31,12,17.35,15.44,5.23,2.01,9.78,1.97,18.1,1.92,8.68-.07,15.55-.12,22.89-3.24,6.42-2.75,8.68-5.9,16.39-12.78,3.28-2.93,7.52-6.5,12.77-10.43,3.35-2.51,7.09-5.15,11.24-7.84M814.58,337.66c9.25,3.31,16.63,7.02,22.02,10.06,12.34,6.98,21.24,14.48,23.25,16.22,7.48,6.38,6.95,7.28,10.86,9.34,2.23,1.17,6.49,3,25.55,2.87,11.79-.1,17.78-.17,21.93-2.11,6.32-2.92,7.95-6.61,15.07-13.73,2.15-2.15,4.86-4.65,8.19-7.38,3.69-2.97,8.15-6.19,13.49-9.39M836.87,202.14c-9.22-2.3-19.58,2.15-19.73,6.01-.26,6.83,31.34,16.77,34.9,11.15,2.13-3.36-4.43-14.5-15.17-17.16ZM835.42,182.7c-6.33-1.06-13.45,1.7-13.44,4,0,4.24,23.9,9.64,25.69,5.9,1.01-2.18-4.77-8.65-12.25-9.9ZM890.26,215.67c3.55,5.61,35.14-4.31,34.9-11.15-.15-3.86-10.52-8.31-19.73-6.01-10.74,2.68-17.3,13.8-15.17,17.16ZM894.64,188.96c1.77,3.74,25.67-1.66,25.69-5.89.02-2.32-7.1-5.06-13.44-4.02-7.5,1.25-13.28,7.74-12.25,9.9ZM482.05,567.99v.02M453.7,901.42l.02.02.15.14M404,611.9h.02M309.46,1053.08h.02M453.71,901.43c-1.73-7.83-4.94-18.17-11.26-29.16-3.55-6.18-7.36-11.31-10.9-15.43M267.4,1153.44c4.29-6.97,7.26-12.78,9.04-16.47,7.1-14.64,8.53-22.5,16.05-43.04,1.13-3.09,2.4-6.47,3.86-10.21,2.25-5.82,3.38-8.72,4.62-11.67,1.46-3.47,2.87-6.64,4.2-9.54,1.58-3.48,3.04-6.59,4.31-9.4v-.02c4.19-9.27,6.28-15.24,3.95-20.63-.34-.81-.82-1.65-1.24-2.75-.33-.84-.6-1.84-.77-3.07-.43-3.28.45-5.01,2.01-11.86,1.15-4.96,1.72-7.43,1.54-8.82-.27-2.32-1.05-3.64-1.92-5.25-.7-1.29-1.46-2.78-2.08-5.1-.79-2.99-.88-5.59-.77-7.4,0-.14,0-.26.02-.38M643.12,699.87c.7-3.83,1.06-7.48-.89-11.67-4.58-9.78-17.47-13.11-22.72-14.47-1.08-.29-2.08-.5-2.99-.65-1-.19-1.89-.29-2.73-.34-5.95-.46-8.96,1.37-18.4-.41-8.73-1.66-9.59-4-21.14-7.69-1.39-.45-2.95-.93-4.68-1.41-10.54-2.97-16.03-3.38-20.2-.6-.7.46-2.4,2.2-5.83,5.68-6.02,6.13-7.71,8.2-8.56,8.24h-.02c-.07,0-.14-.02-.21-.05-1.7-.84,4.63-9.35,1.96-19-.27-1.01-.72-2.18-1.08-3.59-.46-1.7-.79-3.72-.57-6.21.24-2.66.36-4.05,1.2-5.35.55-.84,1.25-1.44,2.11-1.87,2.93-1.54,7.64-1.22,13.32-1.82,3.86-.39,9.1-.77,13.52-2.06,3.98-1.15,7.31-3,8.37-6.28,1.75-5.37.43-13.14-3.71-15.38-2.49-1.34-4.63,1.27-5.83-.7-1.03-1.68-.67-5.71-.31-6.52,1.78-4.07,5.39-4.12,6.44-7.45.31-.98-.03-2.52-.76-5.58-1.46-6.28-2.28-9.58-4.77-10.69-1.8-.82-2.49.41-4.32,0-5.37-1.22-6.37-13.49-9.46-19.44-.91-1.73-1.99-2.93-3.4-3.17-.96-.15-6.62-.65-7.24-1.3-.05-.05-.1-.12-.1-.12-.19-.31-.15-.82-.79-3.6-.21-.82-.27-1.39-.29-1.73-.03-.31-.02-.45-.02-.45,1.73.26,3.48.51,5.22.77-.24-1.66-.65-3.66-1.41-5.82-.84-2.49-1.87-4.53-2.8-6.13-1.48-.63-2.95-1.27-4.43-1.92,0,0-1.01-3.23-2.71-8.37-1.56-4.8-3.69-11.29-6.13-18.4-.84-2.45-1.53-4.5-2.88-7.14,0,0-3.67-7.31-10.19-13.51-4.46-4.26-19.91-14.33-47.12-16.78-4.74-.43-9.82-.62-15.27-.51-3.52.07-8.56.19-14.38.58-19.84,1.32-48.62,5.89-55.91,22.89-1.27,2.97-10.69,26.87-12.2,34.92-.17.94-.86,5.11-1.03,6.14-.02.14-.03.22-.03.22-2.16.65-4.32,1.29-6.49,1.94-1.13,4.32-2.28,8.67-3.41,12.99,1.3-.22,2.59-.45,3.9-.67.6-.1,1.22-.21,1.82-.31.02,3.14-.86,4.68-1.89,5.49-1.68,1.34-3.29.27-6.02,1.51-2.11.96-3.28,2.54-4.74,4.53-.69.94-1.66,2.52-3.6,6.93-2.83,6.37-3.29,9.85-5.63,10.35-1.17.24-1.58-.5-2.71-.1-1.63.57-2.13,2.54-3.23,6.02-2.42,7.76-2.99,7.96-2.51,9.15,1.18,2.97,5.15,2.66,5.82,5.94.17.77.05,1.65-.19,3.41-.36,2.63-.57,4.1-1.61,5.03-1.39,1.2-2.75.1-4.43.89-1.36.65-1.9,2.09-3.31,10.06-1.12,6.3-1.12,7.46-.39,8.73.77,1.39,1.99,2.23,5.11,3.62.43.19.86.38,1.27.55,6.33,2.71,10.09,3.36,10.09,3.36,10.9,1.82,17.38.53,21.21,1.3,1.41.27,2.45.84,3.21,1.92.53.76.7,3.67,1.05,9.49.31,4.93.39,7.38.19,8.97-.93,7.21-4.91,12.58-7.36,15.41-.5.57-.93,1.03-1.25,1.39-1.73,1.87-2.59,2.8-3.23,3.04-.24.09-.48.15-.72.19-8.37,1.48-17.57-23.46-32.38-23.01-3.47.09-7.79,1.6-12.77,3.72-2.3.98-4.75,2.11-7.33,3.29-4.8,2.23-7.41,3.07-10.26,3.86-3.6,1-7.58,1.9-16.87,5.39-3.54,1.32-6.61,2.49-9.28,3.52-15.43,5.95-17.73,7.48-19.46,9.75-5.73,7.52-2.04,15.63-3.64,24.99-.03.27-.09.55-.14.82-1.03,5.11-2.97,6.5-7.28,13.78-2.93,4.94-8.49,14.33-12.08,25.45-2.39,7.36-3.9,15.5-3.19,23.6.88,10.18,4.48,11.65,7.02,18.76.72,2.02,1.36,4.51,1.82,7.77.88,6.19.22,10.54-.98,14.5-2.06,6.93-5.75,12.75-5.65,25.48.05,6.56,1,10.3,1.9,14.11,1,4.2,1.97,8.46,1.7,16.65-.33,10.16-2.01,9.04-3.91,24.42-2.01,16.23-1.49,28.57-.91,42.7.48,11.6,1.15,14,1.51,15.19.41,1.39,2.99,9.68,9.87,16.87,2.18,2.28,4.8,4.46,7.93,6.26.77.46,1.58.89,2.4,1.29,9.73,4.63,20.82,3.79,27.13,3.31,22.84-1.75,25.17-2.27,25.17-2.27,2.57-1.53,5.37-1.77,7.52-1.01,1.05.36,1.94.96,2.57,1.77,1.48,1.85,1.2,4.26,1.1,4.99M585.25,1000.59c-2.32.63-4.05,1.68-4.93,3.64-.7,1.56-.96,3.96-1.01,4.32-.29,2.15.29,4.93,1.61,10.45.82,3.4,1.7,5.83,2.11,7.88.17.81.27,1.53.27,2.25,0,.93-.17,1.82-.58,2.73-1.13,2.51-2.75,2.32-3.81,4.62-2.11,4.53,1.66,10.43,2.95,12.56.33.55.65,1.12.94,1.66.41.77.79,1.56,1.12,2.35M630.16,1163.78c-1.29-2.57-3.19-6.04-5.83-9.92-.72-1.06-1.37-1.97-1.84-2.61M535.6,541.08c-1.3-.26-2.59-.5-3.9-.76-1.82-.34-3.64-.7-5.46-1.05l3.02,12.87c.17.05.34.09.51.14,3.07.77,6.16,1.56,9.23,2.33M313.07,1000.71c13.95,1.75,25.67,2.99,34.63,3.91,2.32.24,6.23.6,10.45-1.2,5.59-2.4,8.41-7.17,9.04-8.13,3.67-5.61,19.19-13.47,67.82-23.97.22-.05.46-.1.7-.15M583.04,1026.88c-4.46,1.08-11.7,2.95-20.52,5.78-15.77,5.05-21.11,8.22-28.61,6.73-7.76-1.56-11.63-6.9-16.7-11.75-24.51-23.56-62.84-22.63-68.01-22.51-6.28.15-23.66.76-41.72,10.45-19.07,10.26-25.52,23.48-43.21,24.13-3.26.12-8.67-.82-19.49-2.81-13.78-2.54-24.97-5.22-32.57-7.17M309.48,1053.1c16.68,4.41,30,8.82,39.31,12.12,13.81,4.89,18.89,7.4,26.74,6.23,11.24-1.66,14.23-8.77,26.92-17.49,3.98-2.71,24.68-16.92,49.23-15.67,21.24,1.08,37.92,13.32,42.21,16.47,14.57,10.71,16.23,19.15,26.92,20.51,8.41,1.06,13.23-3.43,29.74-11.46,13.45-6.54,24.87-10.67,32.24-13.11M451.16,1171.94c25.83,0,47.33-18.53,51.94-43.02.6-3.17.91-6.47.91-9.83,0-29.19-23.66-52.85-52.85-52.85s-52.85,23.66-52.85,52.85c0,4.12.48,8.13,1.37,12,5.42,23.41,26.41,40.86,51.48,40.86ZM584.15,1064.7c-27.03,21.4-54.02,42.8-81.05,64.21M399.68,1131.08c-31.51-22.86-63-45.72-94.5-68.57M411.1,1194.24c-39.54-33.45-79.08-66.89-118.61-100.32M586.33,1100.48c-30.27,29.31-60.56,58.62-90.81,87.93M267.4,1153.44c41.89,67.85,116.18,108.21,194,104.92,104.39-4.43,162.27-85.18,168.76-94.57M388.4,949.48c11.67,6.4,24.3,12.58,37.92,18.31,2.9,1.22,5.8,2.4,8.68,3.52,10.23,4.03,20.34,7.52,30.29,10.55,44.65,13.57,86.09,17.8,120.02,18.17M589.4,905.48c-6.66-1.2-17.02-3.09-29.79-5.46-21.83-4.07-26.14-4.98-33.17-5.71-9.08-.94-22.14-1.56-38.32.34M473.43,897.93c-2.97,6.45-5.8,14.04-7.95,22.67-1.56,6.33-2.54,12.44-3.09,18.28-.81,8.24-.74,15.91-.19,22.81.62,7.83,1.84,14.66,3.09,20.16M601.4,937.56c-12.29-3.41-28.3-7.62-47.21-11.91-10.09-2.3-15.79-3.59-22.46-4.68-15.12-2.49-37.53-4.38-66.24-.36M594.21,961.94c-43.93-7.69-87.86-15.38-131.81-23.06h-.02M462.21,961.69c20.46,3.93,41.22,7.74,62.29,11.43,21.42,3.76,42.58,7.28,63.51,10.59M387.03,741.45c-10.45,4.8-24.01,12.61-36.65,25.07-6.04,5.95-9.7,10.85-15.36,18.41-8.49,11.31-9.68,15.12-10.18,18.02-1.3,7.93,2.04,14,3.86,18.89,3.07,8.22,5.9,21.52,4.26,43.43M541.44,705.39c4.65-6.85,6.9-11.1,6.57-13.99-.31-2.75-1.78-5.34-4.2-7.71-2.3-2.3-5.44-4.41-9.25-6.35-1.1-.55-2.25-1.1-3.45-1.61-6.45-2.87-14.38-5.29-23.03-7.26-17.19-3.96-37.29-6.16-54.78-6.4h-.93c-19.01-.21-36.24,1.87-51.28,4.94-14.64,3-27.18,6.93-37.22,10.64M358.68,682.28c-1.42,1.56-3.23,4.03-3.84,7.33-.03.17-.07.33-.07.5-1.2,7.88,5.22,14.79,11.46,22.41.67.82,1.32,1.61,1.92,2.37,14.93,18.64,11.67,20.49,18.88,26.56,10.83,9.15,19.63,5.18,62.86,5.89,36.26.58,48.34,3.67,59.1-2.25,1.3-.7,2.61-1.56,3.91-2.57,2.27-1.75,4.51-4.17,7.31-7.72,2.32-2.93,5.01-6.62,8.41-11.34.7-.98,1.44-2.01,2.21-3.09.5-.7,1-1.37,1.48-2.04,2.09-2.92,3.98-5.56,5.66-7.95,1.29-1.8,2.44-3.45,3.45-4.96M508.99,745.09c.55,1.01,1.17,2.13,1.85,3.33,2.81,4.99,6.64,11.5,11.48,18.95.94,1.44,1.92,2.93,2.93,4.44,14.16,21.07,17.97,21.79,20.9,31.95,4.99,17.31.34,37.31-.6,41.39-.38,1.6-1.84,7.64-3.12,15.94-.24,1.54-.45,2.97-.65,4.31-1.25,8.46-1.68,13.02-.1,15.41.62.94,1.37,1.63,2.23,2.15,5.42,3.28,15.34-.57,27.37,5.01,5.99,2.78,10.07,7.84,18.12,17.52.31.38.63.77.96,1.17,5.18,6.25,9.76,11.75,13.28,17.52M374.31,629.97c.22,9.11,3.11,13.66,5.73,16.11,1.15,1.08,5.08,3.33,12.97,7.84,3.48,2.01,5.94,3.36,7.31,5.78.19.31.34.65.48,1.01.94,2.37.63,4.72.27,6.21M531.33,630.62c.88,7.04-.69,11.33-2.76,14.07-3.4,4.46-8.67,5.47-13.18,7.04-3.11,1.08-5.87,2.42-7.41,5.32-.33.6-.57,1.22-.74,1.85-.88,3.11-.15,6.52.88,9.39M404,611.9c.09,2.42.46,5.42,1.12,9.27,1.72,10.02,2.99,16.83,4.91,21.62,1.2,2.95,2.64,5.13,4.6,6.81,1.8,1.56,7,2.75,17.38,5.13,10.33,2.37,15.5,3.55,20.39,3.52h.02c8.61-.07,15.1-2.3,20.7-4.22,7.79-2.68,11.69-4,14.76-6.93.91-.86,1.9-1.9,3.45-5.46,1.53-3.45,3.55-9.32,6.5-19.72,1.13-3.95,1.94-7,2.49-9.46,1.2-5.51,1.01-7.93-.38-10.19-2.25-3.67-6.38-4.93-9.58-5.82-18.33-5.18-27.51-7.77-39.45-7.74-1.29,0-19.77.22-36.65,7.65-2.54,1.13-5.97,2.81-8.27,6.42-1.46,2.27-2.15,4.8-1.97,9.11ZM384.27,629.58c-4.19-.14-7.45-.09-9.97.1v.02c-5.92.45-7.81,1.61-8.13,2.85-.17.63.1,1.15.38,3.93.22,2.28.26,4.15.26,5.39M538.37,641.23v-.76c-.02-1.12-.02-2.57.03-4.27.1-3.04.1-3.57.03-3.9-.02-.05-.03-.09-.03-.1-.14-.45-1.1-1.24-7.05-1.8-2.95-.29-7.12-.51-13.02-.63M400.33,659.71c1.01-3.19,1.94-7.07,2.45-11.55.36-3.09.45-5.9.39-8.41M502.57,635.65c0,.12.02.22.03.34.21,2.88.57,6.04,1.17,9.37.91,5.11,2.16,9.64,3.47,13.54v.02M566.27,636.7c-.05,0-.1,0-.17-.02-.27-.02-.58-.05-.89-.09-2.42-.26-5.73-.89-9.4-2.45-2.2-.94-3.62-1.56-5.23-2.95-.86-.76-2.59-2.63-6.09-10.54-1.15-2.61-1.85-4.63-2.11-5.44-1.48-4.32-8.97-25.71-14.83-43.52-.09-.27-.17-.53-.26-.79-.15-.46-.29-.91-.45-1.36-1.63-5.01-2.8-8.77-3.66-11.6-2.81-9.28-2.28-8.79-3.16-9.94-6.64-8.7-18.07-12.03-66.62-11.75-58.12.34-65.83,5.39-70.72,10.93-1.49,1.7-2.81,6.64-4.27,12.84-1.75,7.45-3.71,16.7-6.38,24.21-5.11,14.41-12.39,28.09-16.27,42.88-.36,1.39-1.3,4.86-4.31,6.83-1.46.96-2.73,1.12-7.07,1.78-1.92.31-4.99.79-8.89,1.46M436.93,477.14c.02,15.91.05,31.82.07,47.72h30.07c-.17-15.99-.33-31.99-.5-47.98M404,611.9c-3.81.07-6.59.45-8.27.74-1.15.19-2.11.43-3.21.79-1.73.58-2.81,1.29-3.72,1.82-.51.31-1.03.6-1.61.91-1.01.53-2.23,1.1-4.08,1.73l-.74.27c-.12,2.52.05,7.31,2.16,11.27.38.72.82,1.42,1.36,2.08,1.82,2.27,3.55,2.54,10.57,5.41,1.84.76,4.1,1.7,6.73,2.83,2.08.89,4.36,1.9,6.85,3.04.21.09.39.19.6.27M491.57,641.78s.02,0,.02-.02c2.15-1.42,5.59-3.5,10.11-5.41.31-.14.62-.26.91-.36,6.57-2.69,11.7-3.54,14.59-5.35.45-.26.82-.55,1.13-.88.57-.53.96-1.15,1.2-1.89.39-1.18.96-4.14.98-7.31,0-.94-.03-1.73-.07-2.3l-.72-.51c-.26-.1-.51-.22-.76-.33-.77-.34-1.48-.65-2.09-.96-.89-.41-1.65-.81-2.27-1.12-2.32-1.2-2.92-1.66-4.43-2.01-.82-.21-1.49-.33-3.91-.51-1.51-.1-3.54-.24-5.95-.36M378.41,560.03c1.15,11.57,2.76,23.75,4.96,36.45,1.17,6.78,2.45,13.33,3.81,19.68M516.87,616.47c.6-2.27,1.46-5.68,2.27-9.87,1.82-9.66,1.87-15.99,2.61-28.54.27-4.77.72-11.67,1.44-20.11M361.63,554.84l11.89-3c.07,0,2.92-12.66,2.92-12.66-2.9.58-5.78,1.15-8.67,1.73-.38.07-.76.15-1.13.22M543.91,882.95c-8.8-1.15-16.22-1.51-21.67-1.63-21.83-.43-26.07,3.21-27.53,4.43-.84.7-1.46,1.37-1.94,2.02-1.87,2.47-1.82,4.67-4.65,6.88-.31.24-.65.5-1.05.74-2.18,1.39-4,1.75-13.64,2.54-.46.05-.93.09-1.42.12-13.06,1.03-14.93.91-17.3,2.76-.31.24-.6.5-.84.76-2.92,2.9-2.45,6.38-4.98,11.31-3.24,6.3-7.84,8.13-18.7,14.67-12.78,7.72-34.22,21.93-41.79,21.93-.76,0-1.36-.14-1.82-.43-.21-.12-.91-.63-1.92-.91-.34-.1-.72-.15-1.13-.17-2.51-.1-4.43,1.78-4.79,2.09-2.25,1.97-19.63,9.94-72.21,31.39M541.78,865.4c-9.22-3.74-16.92-5.25-22.26-5.92-15.55-1.97-23.34-2.97-30.44-1.46-1.37.29-4.82,1.12-8.46.24-1.06-.26-2.15-.65-3.19-1.25-1.32-.74-1.78-1.36-2.63-2.01-4.6-3.59-10-.38-19.89,0-10.33.41-17.8-2.56-22.51,1.22-.19.15-.46.38-.84.63-.26.19-.58.38-.96.57-4.46,2.18-9.73-.27-11.02-.82-1.85-.79-11.93-.6-31.99-.19-20.11.43-31.85.86-37.19,6.44-.21.21-.53.57-1.01,1.05-.17.15-.34.34-.55.53-.67.63-1.44,1.3-1.75,1.54-1.89,1.36-5.46-.12-5.94-.31-1.73-.69-4.62-.74-8.2-.38-8.92.93-22.24,4.53-32.98,7.62-15.07,4.34-22.6,6.5-24.59,7.6-10.02,5.49-16.61,13.16-21.31,20.4M254.05,900.9c-2.47,3.76-4.43,7.43-6.13,10.61-2.92,5.53-5.18,11.03-6.9,16.42-3.14,9.75-4.53,19.03-4.99,27.11-.45,7.53-.12,14.02.34,18.83M492.77,887.78c-1.12-5.73-3.12-12.82-6.86-20.39-1.7-3.43-3.5-6.47-5.29-9.13M351.8,873.55c-7.5.67-16.58,1.51-26.91,2.56-12.84,1.29-17.56,1.87-23.99,3.69-4.46,1.29-8.01,2.68-16.2,6.35-7.71,3.47-18.16,8.36-30.63,14.76h-.02M356.4,888.84c-7.58,1.66-18.76,4.15-32.31,7.36-17.42,4.12-20.92,5.2-22.91,5.83-9.28,2.95-13.97,5.27-33.96,14.26-5.97,2.68-15,6.71-26.19,11.63M365.08,911.39c-43.02,14.55-86.04,29.1-129.05,43.66M244.3,980.13c21.83-7.22,44.36-15.2,67.53-24.04,21.78-8.31,42.66-16.82,62.62-25.4M349.4,863.89c.72,3.12,1.53,6.35,2.42,9.66,1.3,4.93,2.83,10.02,4.58,15.29.84,2.49,1.72,5.01,2.66,7.57,1.9,5.22,3.93,10.21,6.02,14.98,3,6.9,6.18,13.33,9.37,19.31,3.41,6.35,6.85,12.17,10.21,17.45M368.15,714.88c-2.57.53-5.17,1.06-7.77,1.63-2.42.51-4.86,1.05-7.31,1.6-.96.21-1.9.41-2.87.63-6.21,1.41-12.32,2.87-18.29,4.36-.02-.02-.02,0-.02,0-2.4.58-4.79,1.2-7.16,1.8M228.11,858.05h.02c15.22-7.17,27.83-11.69,36.67-14.5,11.12-3.55,18.09-5.03,22.91-11.67,4.08-5.59,2.42-9.1,4.63-21.5.34-1.92.76-3.81,1.3-5.71,2.45-8.63,7.29-17.78,17.57-33.07,1.61-2.39,2.97-4.29,3.86-5.49M331.91,723.09c-6.44-7.28-15.22-15.99-26.75-24.39-1.73-1.27-3.54-2.52-5.39-3.78-10.91-7.29-21.28-12.36-29.98-15.87M353.05,718.06c-7.02-8.46-16.23-18.19-27.97-27.85-10.36-8.53-20.39-15.08-29.14-20.06M354.75,690.1c-5.87-5.85-13.85-12.65-24.23-18.79-6.04-3.57-11.81-6.26-16.99-8.32M348.67,730.69c-7.62-2.02-15.6-3.96-23.94-5.78-12.49-2.71-25.76-5.15-39.74-7.12-9.08-1.27-17.9-2.27-26.43-3.04-4.02-.38-7.98-.69-11.86-.96M305.16,698.7c-7.53,1.58-15.98,3.79-25,6.95-8.05,2.8-15.26,5.89-21.55,8.94M336.83,747.8c-10.69-3.64-38.94-12.34-63.44-8.31-2.28.38-9.04,1.61-17.49,3.93-12.17,3.33-21.91,7.31-28.71,10.42M231.02,796.19c7.41-6.26,32.95-27.03,55.77-29.72,17.66-2.08,22.46-1.2,22.46-1.2,2.01.22,3.96.53,5.82.84,6.78,1.12,12.41,2.23,14.88-.89.55-.69.46-.96,1.17-3.47.6-2.16,2.32-8.1,5.71-13.95.67-1.13,1.39-2.28,2.18-3.38,2.59-3.59,5.17-6.38,5.17-6.38,2.21-2.4,4.84-4.86,4.55-7.4-.02-.1-.03-.22-.05-.33-.02-.14-.05-.24-.07-.31M293.4,804.6c-8.44-.43-20.22-.12-33.74,3.17-11.62,2.83-20.99,7.02-27.8,10.69M348.67,730.69l.05-.05c3.88-4.7,7.77-9.4,11.65-14.12.03-.03.07-.09.1-.12M574.25,664.64c-5.2,2.15-11.26,5.13-17.64,9.28-5.03,3.29-9.28,6.66-12.8,9.78M595.39,672.32c-9.11,4.34-19,9.63-29.31,16.03-9.2,5.71-17.38,11.48-24.64,17.04l-.02.02M528.62,723.45c.72.07,1.54.15,2.47.26,2.52.24,5.77.58,9.54,1.01.88.1,1.7.19,2.44.27,6.02.7,8,1,10.97,1.1,7.24.22,12.6-.93,14.93-1.37,6.04-1.12,19.82-2.76,51.67-5.22M616.52,673.08c-14.21,8.67-29.02,18.45-44.17,29.45-1.12.81-2.25,1.63-3.38,2.45-9.11,6.69-17.73,13.37-25.9,20.01l-.02.02M572.33,702.53h.02M559.05,770.89c-.45,9.56-.91,16.95-1.24,21.66-.43,6.33-.94,12.73,1.96,14.17,2.08,1.03,6.5-.17,8.24,1.24.72.58,1.37,1.34,1.37,1.34.31.36.67.81,1.1,1.49,2.61,4.17,2.68,8.19,2.81,15.07.29,14.81.34,16.03,1.6,17.49,2.45,2.87,5.66,2.35,13.47,3.83,4.36,0,8.13.91,11.31,2.09s5.71,2.64,7.58,3.72c1.89,1.1,4.39,2.75,7.43,4.91M520.21,734.79c1.1,1.32,2.08,2.63,2.95,3.9.51.72.98,1.42,1.41,2.11,2.59,4.15,4.14,7.89,5.1,10.91.1.31.19.6.27.89,2.11,7.09,1.58,11.33,4.51,14.26.26.24.53.48.84.72,1.61,1.2,2.9,1.32,14.07,2.37,5.56.51,3.21.51,9.68.94.48.03,1,.07,1.58.1,9.1.57,27.34,4.63,43.26,10.91,4.53,1.78,8.84,3.74,12.92,5.82M603.17,747.04c-10.12-1.48-18.45-1.01-32.35.24-1.68.15-3.45.33-5.32.5-9.15.86-21.28,2.28-35.56,4.82M629.1,828.71c-4.99-3.23-10.55-6.37-16.71-9.18-17.66-8.08-33.65-10.69-44.38-11.57M424.34,568.4c3.93.81,8.29,1.51,12.87,2.01,4.43.48,9.06.79,13.71.82h.02c.36.02.74.02,1.1.02h.46c4.56,0,9.11-.26,13.47-.7,5.87-.57,11.38-1.48,16.08-2.52v-.02c9.15-2.02,15.29-4.62,15.17-6.5-.15-2.08-7.79-3.33-16.73-4.08-4.75-.41-9.88-.67-14.43-.84-6.85-.26-12.41-.31-13.49-.31h-.89c-3.78-.02-9.13.02-14.84.21-4.84.12-9.94.36-14.55.74M422.28,557.21c-8.79.7-15.8,1.9-15.96,3.9-.15,2.09,7.29,5.1,18.02,7.29M482.03,567.99h.02s.04-.04.06-.06M436.83,556.53s-.03.07-.05.11M466.17,557.03c-.04-.11-.08-.23-.12-.34l-.02-.02M465.97,570.49c.11-.29.21-.57.3-.84M451.69,556.32s-.05.07-.08.11M452.5,571.09c-.03-.06-.09-.18-.16-.34M1425.55,888.82l.07-.19M1165.74,535.26l.02.02M1497.52,1015c-.29-.05-.55-.03-.74.1-.15.12-.22.27-.26.33-.72,1.49-5.85,7.05-14.88,19.92-2.83,4.05-5.25,7.64-7.19,10.59-.69,1.05-2.54,3.88-4.99,7.77-2.85,4.55-6.68,10.78-11.15,18.58-.07.1-.1.19-.12.29-.26,1.1.07,2.16.22,2.59.02.05.03.09.05.12.58,1.24,1.68,1.9,2.92,2.61,2.61,1.46,3.91,2.2,5.15,2.63,2.52.89,3.71,18.5.31,78.75-.05.84-.1,1.7-.15,2.56M1497.56,1015.02c.63.12,1.44.58,2.11,1,1.44.86,1.58,1.25,2.15,1.2.89-.07,1.78-1.17,1.66-2.01-.07-.45-.39-.6-1.82-1.75-.91-.76-1.36-1.15-1.56-1.41M1553.53,1039.37c.41-.98.89-2.09,1.46-3.38,3.31-7.55,4.96-11.33,7.31-14.09.5-.58,1.96-2.21,1.56-3.84-.02-.07-.03-.14-.07-.19-.21-.62-.65-1.15-1.12-1.44-1.72-1.08-4.03.69-7.33,1.94-6.76,2.56-13.76,1.39-18.38,1.77-.09.02-.6.05-1.29.05-.46-.02-.79-.02-1.13-.09-.65-.12-1.15-.41-1.48-.65-13.51-9.18-15.48-10.93-15.48-10.93-1.03-.91-2.47-2.23-4.39-2.18-.09.02-.22.02-.43.05-.46.12-1.29.41-2.92,1.3-3.6,1.96-4.36,3.16-5.73,2.83-1.29-.31-1.56-1.48-2.57-1.32-.24.03-.48.15-.7.31-.65.5-1.12,1.41-.98,2.13.02.1.07.22.21.39M1553.53,1039.39c-1.13,2.76-1.58,4.55-1.08,6.25.82,2.76,3.74,4.53,9.54,7.96,4.96,2.93,7.43,4.41,9.64,4.58,3.24.26,6.37-1.13,14.84-8.97,9.97-9.22,17.3-18.17,22.82-25.23,2.11-2.69,4.2-5.54,6.4-8.73,5.94-8.63,4.14-7.04,11.69-19.07.19-.31,2.33-3.72,4.34-8.63,1.32-3.24,1.99-4.91,1.84-6.45-.09-.86-.5-3.21-8.6-9.54-4.96-3.86-7.6-5.89-10.54-6.13-.12,0-.26-.02-.38-.02-.72-.02-3.26-.02-8.08,3.07-8.87,5.7-12.46,13.51-15.62,14.93-.5.24-1,.29-1.51.15-1.18-.33-1.78-1.58-1.84-1.7-.5-1.08-.36-2.59,2.75-7.89,2.61-4.44,3.31-4.77,3.5-6.52.09-1-.62-2.81-2.04-6.38-2.01-5.08-2.93-6.47-4.02-7.64-.82-.91-1.54-1.46-2.61-2.25-6.06-4.51-9.3-6.45-9.3-6.45-9.39-5.61-12.92-7.43-14.48-8.85M1560.79,935.86c-.67-.6-.98-1.13-1.22-1.87-.45-1.34-.43-3.86-.39-8.91.03-3.66-.86-5.73.17-7,.03-.07.1-.14.17-.21.96-.93,2.95-1.36,4.19-1.63,1.42-.31,2.01-.21,2.51-.72.91-.93.46-2.71.14-4.12-1.73-7.62-.74-9.64-2.4-10.45-.96-.48-1.48.12-6.21,1.73-5.47,1.85-6.62,1.65-7.4,2.99-1.24,2.13.89,4.08.07,6.32-.07.14-.12.29-.21.43-.82,1.53-2.16,1.05-6.92,3.33-4.14,1.99-4.75,2.78-6.47,2.73-.77-.02-1.44-.21-2.09-.51M1534.67,917.93c-1.18-.58-2.28-1.61-3.72-2.87-2.54-2.2-6.93-5.1-15.72-10.93-1.08-.72-2.99-2.49-6.06-3.54-1.61-.55-2.99-.76-4.03-.89-1.97-.27-3.21-.22-7.45-.1-5.54.17-5.53.14-5.68.22-2.78,1.53-3.78,6.13-6.02,9.82-.29.48-.89,1.41-1.66,1.65-.14.05-.27.07-.41.07-.15,0-.27-.03-.33-.05-3.79-1.13-3.79-1.92-15.31-5.49-.82-.26-3.11-.94-3.35-2.35-.02-.1-.03-.19-.03-.29-.02-1.75,2.61-2.83,2.61-4.91-.02-1.8-2.06-2.32-9.13-7.1-1.68-1.15-4.58-3.16-8.82-4.96-2.2-.94-2.97-1.06-3.74-.82-1.51.46-2.81,2.45-5.35,6.38-.5.79-1.01,1.6-1.92,1.82-.91.21-1.53-.34-2.97-1.15,0,0-3.59-2.04-8.24-3.28-.41-.1-.65-.17-1.15-.33-.21-.07-.39-.14-.57-.19-1.15-.39-1.41-.58-1.51-.67-.63-.53-.81-1.27-.91-1.61-.5-1.9-1.73-3.62-3.07-6.09-1.36-2.47-2.81-5.66-3.79-10.52-.48-2.44-.65-4.5-.65-6.19,0-4.44,1.18-6.5,1.18-6.5v-.02s.02-.07.02-.07c0-.07,1.96-11.84,2.44-16.15.46-4.1.22-7.1-.09-11.27-.15-2.16-.58-6.64-1.85-12.32-1.8-7.96-3.21-9.1-4.79-15.84-.98-4.24-.51-4.19-1.72-13.99-.07-.5-.12-.98-.17-1.46-1.42-11.43-2.27-17.45-4.82-22.5-3.29-6.56-7.5-10.23-8.72-11.26-3.31-2.76-6.35-4.22-7.36-4.67-5.94-2.69-9.25-1.8-16.71-2.57-.51-.03-1.06-.1-1.63-.17-4.74-.58-12.06-1.56-19.46-5.78-1.2-.69-5.06-2.9-7.76-5.59-1.77-1.77-3.02-3.76-2.69-5.66.46-2.64,3.69-3.41,7.4-5.58,5.99-3.47,10-10.3,17.8-23.82,6.52-11.31,9.78-16.97,11.03-21.42,4.03-14.17,1.39-26.46,6.57-34.58.62-1,1.36-1.9,2.23-2.76.93-.88,2.18-1.9,3.38-3.91,1.7-2.85,1.54-4.82,2.18-16.11.21-3.74.41-6.81,1.46-10.4.51-1.73,1.24-3.6,1.24-3.6,1.22-3.23,2.42-5.41,2.73-6.02,4.03-7.88-.36-24.87-.79-26.46-.53-2.02-.94-3.16-1.03-4.02-.05-.55.02-.98.26-1.44,2.54-5.1,18.04-1.97,23.48-1.05,29.12,4.94,66.21-2.93,89.84-16.41,10.07-5.75,18.81-14.72,36.28-32.66,21-21.57,34.85-40.77,33.53-41.97-1.94-1.78-32.93,37.96-77.93,52.6-5.61,1.82-13.71,4.39-24.69,4.98-11.14.6-13.2-1.49-45.41-6.56-16.85-2.64-25.28-3.96-30.27-3.86-2.63.07-7.26-.33-16.53-1.08-2.51-.21-4.77-.41-7.33-1.49v-.02c-.14-.03-.26-.09-.39-.15-4.67-2.09-7.16-5.66-8.17-6.98-3.83-5.01-9.59-7.69-21.14-13.06-17.9-8.34-44.94-11.51-67.15-3.45-5.49,2.01-11.89,4.32-18.21,10.07-7.16,6.52-6.14,10.06-11.81,13.16-.1.05-.21.1-.29.15-7.09,3.72-10.42-1.2-26.17.63-5.34.63-8.96,1.66-11.65,1.77-1.75.09-3.12-.22-4.34-1.27-.36-.31-.69-.65-.94-1.05-1.65-2.3-1.58-5.82-1.39-10.38.12-3.05.31-7.14.51-11.75.58-12.25,1.32-28.19,1.32-38.3,0-3.47-.09-7.09-.88-7.21-1.18-.17-3.24,7.64-5.15,14.96-1.7,6.57-3.17,12.36-4.46,17.45-5.08,19.97-7.58,29.57-11.7,35.42-.34.48-.69.93-1.05,1.36-1.17,1.41-2.49,2.59-4.02,3.67-3.67,2.59-5.73,2.59-10.21,6.52-1.18,1.03-2.56,2.23-3.93,3.64-1.8,1.77-3.6,3.86-5.01,6.26-1.7,2.92-2.83,6.32-2.64,10.19.36,8.01,6.09,14.88,11.98,17.95.72.38,1.25.6,1.82.84,6.64,2.73,12.05,2.06,19.72,1.29,2.49-.24,5.23-.5,8.34-.65,1.46-.07,2.73-.1,3.83-.1,6.42-.05,8.27.76,16.56.34.63-.03,1.29-.03,1.92,0,3.36.07,6.73.65,10.02.12,1.48-.22,3.83-.7,4.82.5.26.31.39.72.45,1.13.1.93-.22,1.9-.33,2.23,0,.02.21,6.81.6,20.39.6,19.68,1.25,17.52,1.08,26.53-.03,1.34-.07,2.93-.03,4.84,0,1.89.09,4.08.29,6.64.57,6.78.89,10.31,3.14,13.99,2.76,4.56,5.18,3.96,5.9,7.36.81,3.83-2.08,5.42-1.68,11.58.1,1.73.45,3.5.67,4.44.1.46.17.74.17.74.55,2.09,1.08,3.19,1.36,4.03,1.03,3.05-.34,6.09-2.69,11.12-3.21,6.9-7.07,11.27-8.61,12.94-2.59,2.78-4.86,4.55-5.73,5.22-1.82,1.37-3.28,2.47-4.75,3.26-.55.29-1.1.55-1.68.76-2.71.98-4.74.55-7.19-.17-.21-.07-.41-.12-.62-.19-2.61-.79-5.77-1.8-10.69-1.89-5.61-.1-8.41,1.1-9.16,1.44-3.86,1.75-5.65,4.43-7.09,5.95-2.68,2.85-5.95,3.64-9.83,3.83-5.27.24-11.62-.63-18.95,1-10.4,2.32-17.06,8.39-26.7,17.21-3.81,3.48-6.78,6.74-9.52,10.16-2.59,3.23-4.96,6.61-7.69,10.43-5.2,7.31-10.18,14.35-14.55,23.06M1037.38,947.99c-.07.33-.12.62-.17.89-.14.82-.98,5.37-2.68,10.55-1.61,4.91-2.73,8.31-4.8,12.73-.17.36-.36.74-.55,1.13-1.27,2.63-2.9,5.65-5.15,9.52-8.99,15.55-18.45,51.76-4.19,70.77,1.17,1.54.09-.22,20.51,15.92,1.17.93,2.64,2.09,4.41,3.48.53.41,1.1.86,1.7,1.32,3.14,2.44,7.04,5.44,11.6,8.85M1110.77,1115.17c4.6,1.84,8.94,4.34,13.54,6.23,1.1.45,3.57,1.46,4.82,3.86.5.91.69,1.82.74,2.75.05,1.17-.1,2.39-.22,3.72-.33,3.71.38,7.43.46,11.14.1,5.1,39.16,27.49,155.66,83.3M1285.79,1226.16l1.39.67M1441.59,936.46c.03.22.07.43.1.65,1.97,13.01,2.3,20.52,2.15,25.12-.03,1.24-.21,5.97.24,12.22.14,1.94.34,4.05.67,6.37.72,5.3,1.72,9.66,2.51,12.7.45,1.66.82,2.97,1.01,3.59.05.19.1.33.1.34,5.32,17.56,7.4,43.73,7.4,43.73.09.98.21,2.63.34,4.75v.02M1163.18,1030.88c1.48-.72,3.16-1.9,3.6-3.71.43-1.75-.43-3.62-3.04-6.52-1.08-1.2-2.47-2.57-4.2-4.2-7.26-6.81-8.32-6.47-11.34-9.66-2.61-2.76-3.26-4.55-9.71-20.52M1130.75,970.49c-.36-.22-.72-.34-1.12-.38-3.45-.34-7.02,4.82-8.44,8.44-.5,1.24-2.02,5.15-.5,8.94,1.12,2.73,2.85,2.97,5.56,6.5,2.39,3.12,3.26,5.82,3.86,7.24,1.41,3.36,4.07,6.04,7.45,8.67,6.95,5.39,16.95,10.55,25.62,20.97,5.94,7.17,9.64,14.88,14.21,14.04.98-.19,1.78-.72,2.59-1.34M1369.71,1165.93c-103.48-69.21-173-116.26-178.07-121.26-.58-.58-3.24-3.48-6.76-3.38-2.18.07-3.52,1.25-4.84,2.25M1137.6,966.42c1.3-.88,2.37-1.65,3.19-2.28,22.24-16.89,34.56-47.33,36.21-64.47.21-2.11.48-6.5,3.21-11.1,3.12-5.25,7.09-6.83,13.35-11.74,0,0,3.26-2.54,12.56-12.24,25.14-26.19,27.82-56.77,27.82-56.77,1.36-15.48-1.94-30.37-7.84-42.71-3.62-7.65-8.25-14.33-13.39-19.55-.79-.79-2.39-2.42-4.6-4.32-4.94-4.22-12.94-9.78-21.74-10.31-5.8-.34-10.81.81-10.81.81-4.74,1.08-6.5,2.52-12.06,4.34-5.42,1.77-9.35,2.23-11.26,2.57-4.75.84-12.12,3.57-24.04,11.22-3.12,2.01-6.57,4.38-10.38,7.12M1226.93,708.46c3.78,1.99,9.03,4.93,15.03,8.89,21.69,14.29,33.72,28.98,55.19,44.94,0,0,4.36,3.24,15.55,9.44,10.26,5.68,12.65,5.97,14.84,5.53,4.93-1.01,7.71-5.49,12.39-13.02,3.64-5.87,3.43-8.1,3.05-9.34-.88-2.88-3.29-2.63-5.15-5.95-2.28-4.1-1.06-8.92-.15-12.54.51-2.06,1.56-5.22,3.86-8.68M1430.97,1165.07c-.07-.67-.14-1.32-.21-1.99-.14-1.48-.29-2.97-.45-4.44-1.36-13.63-2.75-27.23-4.12-40.86M1410.79,785.45c-.03.15-.05.33-.09.48-1.32,7.21-2.37,13.59-3.21,19-2.78,17.85-2.11,18.09-3.9,24.47-2.27,8.15-4.29,11.24-4.96,18.96-.1,1.3-.15,2.54-.15,3.69-.07,3.96.34,6.9.53,8.27.38,2.81,1.54,15.98,3.26,35.09,3.05,33.94,7.79,86.68,12.84,133.65,1.24,11.6,3.02,27.71,5.39,47.26.74,6.07,1.53,12.48,2.37,19.19M1398.47,852.05c-1.65-.65-3.54-1.36-5.63-2.06-5.18-1.77-11.7-3.6-19.29-4.86-4.29-.7-7.5-1-10.95-1.06-6.07-.15-12.85.39-27.41.58-21.61.27-32.74-.62-41.96.05-4.7.34-8.92,1.1-13.78,2.61-1.99.62-8.56,2.75-15.68,5.18-1.61.55-3.02,1.03-4.26,1.46-9.95,3.47-9.2,3.55-15.65,5.54-1.82.57-1.9.63-2.2.79-7.36,3.88-6.74,18.31-6.28,26.99,1.39,26.58,1.68,53.2,3.05,79.78.6,11.7.51,13.8-.74,16.82-4.31,10.45-15.56,14.05-52.12,28.38-8.7,3.41-16.15,6.25-21.85,8.39M1259.52,853.97v-.02c-1.22-8.51-3.04-20.64-5.53-35.23-3.4-20.09-4.68-25.04-5.78-28.71-1.15-3.86-4.19-13.85-9.95-24.64-1.82-3.41-3.93-6.93-6.33-10.35-3.76-5.34-7.91-9.97-12.24-13.99-14-13.06-29.7-19.65-39.02-22.84M1293.24,844.7c-2.73-17.57-6.9-38.44-13.54-61.57-2.09-7.28-3.84-12.78-5.32-16.99-1.89-5.41-3.29-8.68-4.31-10.78-.45-.91-.81-1.61-1.12-2.16-5.61-10.36-18.89-29.65-50.9-44.15-.15-.09-.31-.15-.46-.22M1392.84,849.99c-1.6-18.69-3.33-35.28-4.98-49.41-1.6-13.83-2.93-23.61-6.92-36.04-2.68-8.36-5.65-15.05-7.86-19.6M1362.6,844.05c-.55-18.64-1.99-34.27-3.36-46.04-1.44-12.29-2.64-22.19-5.8-35.23-.19-.77-.38-1.54-.57-2.3-2.81-11.15-6.02-20.35-8.63-27.1l-.15-.41M1135,948.57c12.54-10.02,17.73-19.63,19.96-24.78,3.45-7.98,5.78-17.01,5.78-17.01,2.08-8.03,2.15-11.75,4.41-18.77,2.08-6.42,4.63-11.38,6.45-14.53M1116.15,866.2c12.25,6.97,20.76,5.92,24.09,5.23,4.44-.91,7.55-2.78,21.73-13.28,17.42-12.92,26.14-19.37,29.67-22.67,8.61-8.03,23-23.9,33.77-51.64M1247.2,671.16c10.9,23.58,19.92,30.79,26.34,32.81,1.56.48,6.11,1.65,11.79,4.68,5.83,3.12,7.65,5.42,12.22,8.44,7.89,5.23,15.48,6.98,19.22,7.81,13.49,2.95,25.38-.24,32.18-2.76M1333.05,668.89c3.04,1.77,7.41-4.27,14.55-3.14,4.08.65,4.99,3,7.12,2.28,3.93-1.36,4.75-10.78,3.33-17.73-.27-1.41-2.85-14.02-9.39-15.07-7.12-1.13-14.84,12.1-16.82,22.39-.34,1.75-1.84,9.49,1.2,11.26ZM1302.3,611.82c-.05.6,3.31,1.25,18.81,3.86,22.65,3.83,24.35,3.91,26.68,3.88,6.11-.1,4.77-.91,24.64-3.84,11.48-1.7,17.14-2.21,17.13-2.92-.03-.91-9.22-1.7-17.04-1.82-12.22-.17-17.59,1.39-20.2-2.04-.39-.51-.94-3.26-2.06-8.75-1.3-6.49-1.6-8.31-2.16-8.32-.86,0-1.68,4.12-2.54,8.51-1.41,7.14-.79,7.38-1.61,8.56-2.63,3.76-9.37,1.82-23.05,1.56-8.25-.15-18.53.33-18.6,1.32ZM1165.76,535.28c-.45,1.66-1,4.48.22,5.37,1.97,1.44,7.34-3.05,8.24-3.81,2.78-2.33,7.09-6.9,9.7-15.39M1191.55,571.13c1.82-.81,3.76-1.89,5.42-3.31,1.73-1.44,3.19-3.26,3.98-5.53.45-1.3.53-2.35.57-2.75.41-4.48,1.87-15.65,4.07-31.59.36-2.56.72-5.25,1.12-8.05M1297.55,717.1c.36-5.46.48-10.28.48-14.31.02-4.14,0-6.23-.36-7.72-1.68-7.02-6.09-7.71-6.26-13.27-.02-.53.43-3.05,1.32-8.08.94-5.29,1-4.99.98-5.34-.07-4.94-8.8-9.66-36.5-21.5-2.92-1.25-7.02-3-10.91-7-4.27-4.39-6.25-9.37-7.22-12.73M1385.98,641.04c-.57.43-1.1.86-1.63,1.29-11.63,9.4-13.99,16.11-13.71,20.7.14,2.59,1.32,7.52-.22,13.69-.36,1.48-.88,3.05-1.53,6.19-.55,2.66-.84,4.74-1.24,7.69-.27,1.99-.6,4.62-.91,7.72M1237.56,573.15c1.12-.29,2.76-.84,4.56-1.87,6.07-3.47,8.37-9.35,12-19.05,2.71-7.24,3.45-11.81,4.89-20.94.53-3.35,1.42-9.7-1.03-10.98-.38-.21-.72-.21-3.24-.29-2.27-.09-4.02-.15-4.93-.21M1395.4,569.72c-.02-.21-.05-.41-.07-.63-1.12-9.87-3.9-22.91-10.91-36.64-2.37-4.63-4.91-8.75-7.45-12.36M1219.62,961.19c-2.59-10-5.63-20.47-9.16-31.37-3.19-9.76-6.52-19.01-9.9-27.75M1211.9,956.13c-1.78-3.76-4-7.83-6.76-12.06-4.8-7.38-9.94-13.2-14.47-17.62M1170.65,935.86c5.8,8.1,11.09,14.16,14.71,18.09,7.38,7.98,12.05,11.63,24.37,23.65,5.71,5.56,10.23,10.16,13.04,13.02M1179.57,963.13c6.44,5.15,10.67,10.04,13.37,13.56,3.26,4.27,4.8,7.29,8.82,11.05,4.03,3.74,8.1,5.95,10.86,7.22M1193.08,1001.48c-1.72-3.93-3.78-8.15-6.26-12.54-3.43-6.04-6.98-11.26-10.38-15.68M1279.7,761.42s.02.02.03.03c1.92,1.73,3.81,3.36,5.66,4.91,7.71,6.42,14.67,11.17,20.11,14.59,19.41,12.17,24.92,10.5,26.55,9.9,5.95-2.23,9.37-8.96,13.27-16.65,2.75-5.42,4.24-10.24,5.06-13.52M1320.96,824.62c-2.76-4.36-5.65-8.79-8.68-13.27-6.42-9.47-12.89-18.31-19.31-26.55M1195.98,884.7c5.75-.93,16.68-3.59,25.57-12.54,5.44-5.49,7.77-10.97,11.82-20.51,2.02-4.75,6.4-15.89,8.68-31.13,1.18-7.88,2.09-18.72.98-31.61M1050.25,1010.88c-3.45,5.73-6.85,13.25-5.9,20.18.19,1.34.53,2.66,1.08,3.95,1.8,4.27,5.29,7.02,9.95,9.23M1180.03,1043.54s-.03.03-.05.03c-6.97,6.49-14.53,14.57-21.81,24.51-16.3,22.26-24.23,44.27-28.3,59.92,0,.02-.02.03-.02.05M1485.95,987.87c.07.1.14.21.19.33.5,1.06-.12,1.9-.74,4.14-.76,2.69-1.22,4.36-.46,5.61.82,1.32,2.52,1.22,2.57,2.35.03.69-.38,1.44-1,1.72-.12.05-.29.1-.65.05-.38-.03-.98-.21-2.01-.58-1.72-.65-2.02-.94-2.59-.79-.88.24-1.61,1.3-1.42,2.02.14.51.7.67,1.61,1.17.69.39,1.65,1.05,2.66,2.09-.03.03-.24.34-.27.39-7.57,11.15-15.82,22.96-15.96,23.13-1.39,2.02-3.12,4.56-5.15,7.53-1.84,2.73-3.91,5.82-6.18,9.2-.21.33-.43.63-.63.96,0,0-.17.26-.46.69-.88,1.32-2.83,4.29-4.65,7.09-4.27,6.56-8.68,13.02-13.14,19.46-4.87,7.05-9.83,14.07-14.79,21.07-13.93,19.75-27.83,39.54-39.92,60.44-.41.7-1.96,3.45-4.02,3.45-1.68,0-2.35-1.85-3.83-1.65-.96.12-1.34,1.01-3.33,4.55-.93,1.63-1.61,2.78-2.08,3.64-.77,1.42-.94,2.02-.67,2.71.53,1.32,2.06,1.48,2.25,2.9.14,1.01-.5,1.87-.79,2.25-8.63,11.45-17.81,23.68-24.13,35.3v.02c-6.44,11.81-8.72,14.09-16.32,24.16-.91,1.2-1.9,2.52-2.99,3.98-.26.36-.6.82-1.2,1.29-2.37,1.84-4.51.43-7,1.68-1.29.65-2.13,2.04-3.78,4.82-1.56,2.63-2.35,3.95-2.42,5.23-.22,4.22,5.08,7.58,9.1,10.12,4.08,2.61,6.33,4.03,9.16,3.47,2.28-.46,4.03-2.4,7.57-6.28,1.44-1.6,2.04-2.51,2.18-3.69.24-1.96-.79-4.19-1.36-4.79-.02-.03-.07-.09-.12-.17-.41-.74.46-1.92.74-2.3,2.15-2.99,30.85-45.7,32-47.43,8.03-12,12.06-17.98,12.06-18.02.05-.19.24-.98.77-1.15,1.15-.38,2.21,2.59,3.9,2.59,1.32,0,1.65-1.82,4.43-5.54,2.25-3,3.36-3.6,3.14-4.84-.31-1.68-2.59-1.73-3.31-3.6-.82-2.18,1.24-4.84,1.82-5.63.55-.72,1.68-2.32,3.35-4.7,5.01-7.14,14.88-21.36,28.11-40.53,8.56-12.41,18.55-26.89,29.58-42.85.81-1.2,1.65-2.42,2.49-3.64M1460.15,947.15c-.26.53-.88.72-1.34,1.61-1.54,2.99-.55,6.35.12,8.53,3.19,10.31,4.79,15.48,6.14,16.8,1.37,1.34,4.63,3.17,11.14,6.88.46.26,2.51,1.41,4.93,3.12,1.75,1.24,1.01.88,3.28,2.54.89.65,1.29.91,1.53,1.22M1425.58,888.84h-.03v-.02c-2.08-.67-5.39-1.48-9.34-1-5.44.65-12.3,3.71-12.34,7.12,0,.1,0,.21.02.31.15,1.27,1.42,2.21,4.53,4.65,10.43,8.22,17.47,11.45,17.09,15.27-.09.81-.48,1.65-1.18,3.12-1.37,2.9-2.66,3.72-2.44,5.18.17,1.25,1.2,2.06,2.08,2.71,8.58,6.5,10.83,7.83,12.01,8.34.12.05.55.19,1.1.45,1.15.53,2.04,1.13,2.71,1.65l.19.12c.81.43,1.36.45,1.72.36.07-.02.14-.03.21-.07.69-.29.74-1,1.75-2.25.58-.72.88-1.08,1.2-1.24.07-.03.15-.05.22-.07,1.49-.31,3.79,2.9,7.69,6.23,4.56,3.86,7.79,5.15,7.48,7.1-.02.1-.03.19-.07.27M1455.34,1044.67c.03,1.06.09,2.15.12,3.21M1484.12,1005.98c4.46,3.02,8.94,6.01,13.4,9.03.02,0,.02.02.03.02M1500.09,1012.05s-.02,0-.02-.02c-4.74-3.31-9.47-6.64-14.21-9.95M1500.85,1009.51c-4.44-3.07-8.89-6.14-13.33-9.22M1485.94,987.86s.02,0,.02.02c8.94,6.18,17.88,12.36,26.82,18.52,0,.02.02.02.02.02M1460.15,947.15s.02-.03.03-.05c8.05-11.94,16.11-23.87,24.14-35.81M1445.08,933.49l19.82-30.32M1563.79,1017.87c3.57-.27,6.13-1.34,7.84-2.32,1.1-.62,2.83-1.77,9.46-10.33,3.38-4.38,4.53-6.13,5.15-7.12,3.28-5.22,3.84-7.69,4.07-8.84.43-2.45.26-4.53.05-5.85M1553.53,1039.37v.02c.39,1.41,1.25,3.55,3.07,4.24,2.75,1.03,6.13-1.87,7.96-3.54,12.63-11.5,26.29-31.13,26.29-31.13,11.57-16.61,14.93-19.77,19.15-30,2.27-5.51,3.62-10.26,4.43-13.54M1550.41,911.99c2.95,1.97,5.9,3.93,8.87,5.89M1534.67,917.93s.03.02.05.03c8.7,5.97,17.37,11.94,26.07,17.9,0,.02.02.02.02.02M1398.88,787.71c-1.96-2.42-4.58-5.22-6.02-4.58-1.77.77-.81,6.32-.24,10.86.77,6.19,1.41,15.29.48,27.01M1437.66,1074.43c-2.2-.07-4.67-.03-7.34.22-3.54.33-6.66.93-9.3,1.61M1455.67,1074.91s.09,0,.12.02c.89.09,1.75.17,2.63.26M1274.79,733.83c-2.18-6.26-5.18-13.47-9.34-21.18-4.41-8.13-9.08-14.9-13.35-20.32M1289.76,749.1c-1.03-2.39-2.54-6.14-4.03-10.93-1.34-4.34-1.61-6.13-2.73-9.42-1-2.95-2.73-7.21-5.78-12.13M1328.03,738.02c-.74,1.87-1.94,4.7-3.69,8.03-2.63,4.99-3.95,6.32-4.99,9.01-1.08,2.8-1.89,7.12-.15,13.52M1419.15,1003.16c5.06-1.37,7.95-3.64,9.66-5.54,1.39-1.53,1.94-2.75,4.1-5.3,2.13-2.52,4.14-4.36,5.54-5.56M1415.68,973.73c-.65-8.72-1.06-15.8-1.32-20.51-.76-13.49-.72-17.76-1.82-24.85-1.27-8.24-3.21-14.76-4.58-18.81M1430.25,1163.13c-10.71-1.61-21.43-3.21-32.16-4.82M1330.05,1233.27c-14.76-2.37-29.5-4.74-44.26-7.1h-.02M1466.84,1159.29c-12.18-.22-24.33-.45-36.52-.65h-.02M619.21,791.71c.46-.69.91-1.36,1.34-2.02,7.72-11.63,13.44-21.31,17.38-28.33.46-.81.93-1.61,1.41-2.44,1.82-3.11,3.91-6.47,7.07-11.5.72-1.15,1.51-2.4,2.37-3.76,2.39-3.76,4.22-6.61,5.75-8.8,2.83-4.05,4.63-5.9,6.88-7.17.34-.22.7-.39,1.08-.58,7.86-3.76,16.11-1.1,17.69-.57.91.31,1.73.65,2.47,1.03,2.32,1.15,3.98,2.59,5.85,4.34,1.75,1.65,3.69,3.57,6.52,5.77,6.42,4.99,10.95,6.4,20.56,10.55,2.21.96,4,1.75,5.54,2.47,5.34,2.51,7.72,4.02,14.31,7.46,3.57,1.87,8.37,4.31,15.53,7.77,1,.48,2.01.96,3,1.46,23.39,11.27,46.52,22.12,66.93,26.79,11.34,2.61,22.17,4.08,22.17,4.08,6.78.93,9.13.98,13.56,1.48.79.09,1.63.19,2.57.33,12.89,1.73,18.07,4.08,28.13,6.35,10.76,2.4,18.5,2.8,32.33,3.47,6.8.33,13.99.69,21.79.58,9.25-.12,19.39-.88,30.85-3.04,7.86-1.48,20.37-3.93,35.26-10.67,14.43-6.54,23.9-13.87,28.26-17.13,4.79-3.59,10.57-7.64,17.57-12.08l1.13-.72c4.74-2.97,10-6.11,15.89-9.39,9.73-5.42,21.14-11.24,34.48-17.31M663.3,1069.47c4.63,9.88,6.18,18.34,6.61,24.69.79,11.21-1.58,19.91,2.57,22.27,3.83,2.18,8.8-3.5,13.27-.86.67.39,1.13.84,1.46,1.37,1.39,2.13.82,5.25,3.91,8.8,3.43,3.91,6.69,3,12.61,6.95,3.98,2.63,6.59,5.73,8.19,7.98M967.83,1086.75c6.83,1.42,10.43.03,12.48-1.58,4.15-3.28,3.35-8.63,8.56-12.41,2.73-1.97,5.29-.53,6.86-2.57,1.85-2.42.55-6.26.17-7.48-3.91-12.9,8.51-25.72,6.81-50.45-.74-10.73-3.35-12.39-1.85-20.42,1.51-8.13,5.49-13.33,10.71-20.4,3.69-5.03,8.65-11.86,14.67-20.47,2.39-3.43,4.94-7.12,7.65-11.1M658.35,720.41c-1.42-.09-3.17-.12-5.2-.03-2.44.12-5.27.43-8.36,1.13-2.13.46-4.36,1.12-6.68,1.99-3.52,1.34-6.57,2.99-9.22,4.72-5.41,3.52-8.99,7.38-10.95,9.75M657.7,695.58c-.72,4.2-1.22,9.71-.57,15.99.07.65.15,1.3.24,1.97.31,2.18.76,4.43,1.41,6.74.72,2.68,1.61,5.11,2.56,7.28M657.14,711.57c-2.56-.03-5.63.12-9.06.7-2.23.36-4.26.86-6.06,1.41-1.22.38-2.35.76-3.36,1.15M694.63,702.96c-2.97-2.3-6.38-4.72-10.28-7.07-3.09-1.87-6.07-3.47-8.87-4.8M682.65,727.56c5.41-3.59,11.12-7.67,16.99-12.29,1.25-.96,2.51-1.97,3.78-3,3.93-3.21,7.62-6.42,11.07-9.56,2.66-2.42,5.18-4.8,7.55-7.14M727.7,702c-6.4,4.51-12.94,9.28-19.58,14.35-.86.65-1.7,1.29-2.54,1.96-5.83,4.46-11.45,8.92-16.83,13.35M668.2,693.33c2.59,3.5,6.5,7.98,12.08,12.2,7.36,5.54,14.53,8.32,19.36,9.75M692.38,686.16c2.51,2.73,5.73,5.82,9.73,8.85.43.33.86.65,1.3.98,3.96,2.92,7.76,5.1,11.07,6.73h.02M702.11,695.01c1-.79,2.11-1.78,3.23-2.97,1.58-1.72,2.76-3.38,3.64-4.82M694.63,669.66c7.36,9.03,13.97,11.63,18.65,12.34,1.22.19,2.25.22,3.21.24,2.59.03,4.56-.24,7.79,1.08,6.11,2.52,6.02,6.38,12.41,9.11,2.71,1.13,5.66,1.37,11.57,1.85,6.92.55,10.59.19,13.27.27,5.41.19,13.01,2.39,22.38,11.5M722.04,668.81c1.13,2.95,2.76,5.92,4.96,6.07,2.18.15,2.92-2.63,5.85-3.29,4-.91,6.3,3.38,9.85,3.43,1.24.02,2.76-.48,4.53-2.23,1.96-1.92,4.2-5.35,6.76-11.27M854.82,686.16c1.56,1.94,3.6,4.19,6.25,6.42,3.35,2.81,6.59,4.72,9.22,5.99M849.75,691.08c4.8,5.35,9.46,8.03,12.78,9.47,4.68,2.04,7.67,2.06,15.67,4.43,5.11,1.53,9.18,3.09,11.77,4.15M876.28,711.57c-4.48.81-10.12,2.25-16.3,4.96-4.94,2.18-9.03,4.63-12.24,6.86M960.46,691.08c-6.06,2.75-12.42,5.9-19.01,9.49-2.21,1.22-4.46,2.47-6.73,3.79-8.46,4.91-16.17,9.94-23.13,14.93-3.91,2.78-7.6,5.56-11.05,8.27M935.93,713.2c1.51-.27,3.38-.69,5.53-1.3,5.05-1.44,11.53-4.05,18.09-8.84,8.12-5.9,12.92-12.66,15.5-16.9M930.5,757.44c4.26.17,7.89-.19,10.95-.81,2.92-.58,5.29-1.41,7.17-2.2,8.32-3.48,8.49-7.1,19.7-12.63,6.37-3.14,8.82-3.21,13.61-6.76,1.39-1.03,2.64-2.09,3.74-3.16,2.52-2.44,4.36-4.86,5.63-6.76M987.6,711.57c10.93-.5,14.79-3.59,16.27-6.37.72-1.34.86-2.57,1.03-5.2.14-1.77.29-4.17.67-7.65.41-3.66.84-6.66,1.15-8.63M928.22,791.9c3.07-1.72,7.55-3.98,13.23-6.02.81-.27,1.63-.55,2.47-.82,6.73-2.18,9.56-2.18,15.41-3.64,12.75-3.17,21.9-8.77,25.69-11.14,3.76-2.35,8.55-5.71,13.64-10.43,2.16-1.99,4.39-4.24,6.62-6.76M727.7,716.82c1.48.41,3.17.93,5.06,1.54,3.78,1.25,8.32,2.93,13.35,5.18,9.16,4.07,15.31,7.96,18.41,9.83,8.01,4.84,20.39,11.09,38.95,16.56M705.56,718.28l.02.02c5.68,5.01,13.73,11.6,24.02,18.45.43.29.84.57,1.27.86,1.54,1,3.12,1.99,4.75,3,18.14,11.22,32.83,16.59,61.43,26.89,23.94,8.61,38.13,13.64,58.88,17.78,32.07,6.4,46.99,4.1,50.95,3.41,14.83-2.54,26.55-7.98,34.56-12.6.94-.55,1.84-1.08,2.68-1.6M938.41,803.24c.89-.34,1.9-.72,3.04-1.1,2.99-1,6.8-2.01,11.24-2.54,5.53-.65,9.13-.26,11.34-.21,6.19.12,12.7-2.39,32.76-19.07,6.86-5.7,15.36-13.09,24.78-22.17M1023.55,725.13c4.84-1.63,9.92-3.48,15.19-5.61.67-.26,1.34-.53,2.02-.81,2.78-1.15,5.61-2.37,8.48-3.66,11.07-5.01,20.87-10.31,29.4-15.46M1049.27,685.71c-5.23,2.68-10.69,5.66-16.3,9.01-8.12,4.84-15.46,9.78-22.05,14.6M1048.64,693.86c-1.1.88-2.15,1.66-3.14,2.37-1.96,1.37-3.69,2.42-5.03,3.19-3.5,1.99-5.37,2.61-8.56,4.72-2.83,1.85-4.91,3.71-6.21,4.99M772.99,657.17c-.31,4.96.02,12.27,3.41,20.01,1.68,3.83,3.83,7.14,6.25,9.99,5.58,6.57,12.58,10.74,18.5,13.32,5.94,2.59,10.78,3.59,11.98,3.81M801.15,700.49c.94-.7,2.28-1.75,3.76-3.21,2.73-2.66,5.92-6.68,8-12.2,2.04-5.41,2.27-10.23,2.15-13.27M997.15,697.52c-.6-2.54-1.41-5.49-2.56-8.68-2.27-6.3-5.83-13.54-11.57-20.47-.05-.07-.1-.12-.15-.19-8.25-9.9-13.13-9.71-20.76-19.48-3.04-3.9-4.72-7.07-5.95-10.24-2.45-6.35-3.07-12.66-8.84-24.47-.89-1.84-1.78-3.64-2.64-5.37-.38-.76-.76-1.49-1.13-2.23-.69-1.34-1.39-2.64-2.09-3.91-1.27-2.32-2.59-4.53-4.03-6.62-.93-1.39-1.9-2.71-2.95-4-2.93-3.62-6.35-6.85-10.62-9.63-5.85-3.81-12.06-6.01-19.44-7.53-6.56-1.37-14.04-2.25-23-3.28-7.12-.82-12.06-.96-15.84-.86-13.4.38-23.39,2.99-26.55,3.86-3.86,1.06-12.39,3.66-22.26,8.99-.58.31-1.15.62-1.68.91-.69.38-1.34.72-1.96,1.06-4.74,2.61-7.34,4.29-8.79,6.59-2.51,4-1.82,12.05-.34,28.01.62,6.61,1.24,11.36-.29,17.8-.86,3.62-1.58,4.38-2.78,8.36-.57,1.89-2.04,7.16-2.35,19.27-.17,6.5-.02,15.24,1.27,25.69M815.08,584.31c.12,1.12.24,2.2.34,3.24,1.08,10.79.91,18,.48,22.82-.46,5.22-.31,8.25,0,14.33.09,1.82.26,4.17,1.06,7.07.94,3.29,2.27,5.68,3.21,7.28,7.74,12.96,14,20.34,16.13,22.7.51.57.79.84.79.84,11.63,11.89,21.86,22.34,37.03,23.77,7.91.76,15.15-1.99,27.82-7.65,1.82-.82,3.74-1.7,5.8-2.63,11.38-5.15,20.11-9.46,26.32-19.05,2.8-4.31,4.56-8.91,5.56-12.08.65-2.06.98-3.5,1.06-3.88.36-1.68.58-3.12.76-4.56.31-3,.36-6.06.86-11.34.65-6.98,1.61-12.68,2.35-16.56M868.88,617.24c3.95,1.06,7.24,1.41,9.35,1.53.94.05,1.63.05,2.04.05,1.2,0,4.1-.05,7.91-.77,3.81-.7,8.55-2.09,13.4-4.74,1.9-1.03,3.83-2.09,5.42-3.23,2.23-1.6,3.84-3.4,3.96-5.61.21-3.81-4.05-6.98-7.81-9.25-.89-.55-1.75-1.05-2.52-1.48-4.86-2.78-9.59-4.1-13.45-4.77-2.95-.5-5.39-.62-6.95-.67-.5-.02-1.05-.03-1.65-.03-2.68-.02-6.19.17-10.18,1-2.95.6-6.16,1.54-9.47,3-5.46,2.37-12.18,5.32-12.41,9.78-.22,4.75,7.05,8.58,12.29,11.31,3.35,1.75,6.59,2.95,9.52,3.74.17.07.36.1.53.14ZM868.47,589.46h-.02c-.88.82-6.45,6.19-6.11,14.66.29,7.22,4.72,11.77,6.01,12.99.09.07.15.14.21.19M888.17,617.93c.77-.76,4.75-4.79,5.66-11.24.15-.96.22-1.96.21-3.02-.02-.65-.05-1.29-.15-1.9-.86-7.46-5.89-11.91-6.71-12.63M878.69,503.22c-.07.17-.15.34-.22.53-.79,1.77-2.01,4.14-3.88,6.69-5.06,6.9-8.6,6.49-10.59,11.15-1.32,3.05-.31,4.43.57,15.7.19,2.39.31,4.53.39,6.38.09,1.78.14,3.29.17,4.46M966.75,633.97c-.21-7.72-1.97-13.3-3.48-16.9-.96-2.3-1.77-3.64-2.76-5.22-1.3-2.01-2.93-4.41-5.68-9.66-2.76-5.27-4.67-9.64-6.44-13.68-2.13-4.86-3.81-9.11-5.1-12.48M877.29,613.22c.14.63.53.79.82,1.94.12.53.15.96.27.96s.21-.43.39-.98c.38-1.18.63-1.27.77-1.85.27-1.08-.57-1.41-.69-2.76,0-.05-.02-.1,0-.14-.1-1.49.91-1.68.98-3.47.07-1.63-.77-1.8-.69-3.52.09-1.48.72-1.51.77-2.95.07-1.77-.96-1.96-.82-3.55.17-1.97,1.32-2.75.94-3.71-.22-.53-.69-.45-1.1-1.32-.22-.5-.26-.93-.39-.93-.14.02-.15.45-.34.94-.38,1.01-.98,1.08-1.18,1.66-.38,1.05,1.17,1.66,1.41,3.31.22,1.49-1.17,1.84-1.1,3.55.03,1.41,1.01,1.49,1.1,2.88.1,1.6-1.1,1.85-1.15,3.57-.07,1.73,1.13,2.01.89,3.62-.02.14-.05.26-.09.38-.27,1.05-1.03,1.37-.81,2.35ZM847.74,862.39c.69-3.78,1.36-7.58,1.99-11.41,2.57-15.43,4.75-31.18,6.49-47.26.14-1.32.27-2.64.41-3.98M858.93,828.3c.93,4.75,2.11,9.85,3.64,15.19,1.06,3.69,2.18,7.17,3.36,10.49,1.2,3.41,2.44,6.62,3.71,9.64M703.09,811.17c.84,5.82,3.62,22.7,11.46,38.37,5.71,11.39,14.12,22.15,26.43,27.56,7.81,3.43,17.38,4.77,26.12,5.99,19.41,2.73,34.99,1.17,44.31.17,7.4-.79,17.23-2.23,28.69-5.1M849.75,1103.59c.22-68.78,3.17-105.81,6.13-127.19.46-3.35,1.84-12.9,2.85-26.08,1.92-25.23,1.17-45.9.21-59.51M783.37,898.09c-2.42,6.25-5.58,15.48-8.13,26.96-3.33,14.96-4.91,22.53-1.29,27.83,4.2,6.16,12.73,7.33,27.83,9.42,10.3,1.42,13.56.41,22.26,2.57,7.98,1.97,14.12,5.05,17.98,7.28M867.28,973.87c3.57-1.82,8.97-4.14,15.84-5.58,7.1-1.48,11.63-1.13,15.84-1.29,2.49-.09,27.01-1.22,36.4-14.98,1.2-1.77,3.48-5.68,2.99-29.1-.27-13.33-1.25-24.37-2.13-32.12M777.81,976.43c2.27,7.21,5.41,18.4,7.64,32.35,4.03,25.35,1.6,37.96,3.48,54.57,1.63,14.35,6.86,34.89,23.77,59.08M842.02,1032.95c-3.23-1.77-7.79-4.08-13.42-6.44-4.1-1.7-7.98-3.31-13.04-4.62-4.17-1.06-10.33-2.25-18.07-2.23M907.52,1026.31c-8.68.57-18.43,1.75-28.97,3.93-6.85,1.41-13.18,3.07-18.98,4.84M886.13,1124.57c15.22-21.5,21.48-40.22,24.4-53.09,3.79-16.77,2.54-26.22,6.85-48.38,3.78-19.39,9.11-34.61,12.84-44.1M952.91,1011.11l-11.46,8.32-15.51,11.27M943.36,1072.77c-.6.74-1.25,1.53-1.9,2.39-3.41,4.41-7.38,10.45-10.67,18.12-2.69,6.26-3.26,9.71-6.13,17.59-2.08,5.71-5.3,13.57-10.28,22.7M783.37,1131.42c-5.49-10.52-8.53-19.41-10.28-25.48-3-10.36-3.41-16.66-7.98-25.95-3.4-6.88-7.33-11.89-10-14.93M752.55,1006.41c2.44,3.47,5.53,7.36,9.4,11.34,3.35,3.43,6.64,6.25,9.64,8.56M874.99,874.96c20.3,3.91,37.46,5.41,50.09,6.01,6.33.29,11.72.36,16.37.26,15.74-.29,22.75-2.51,27.73-4.55,4.89-2.01,14.29-6.54,23.12-15.41,9.27-9.32,14.41-19.96,17.3-29.21,2.4-7.67,3.23-14.38,3.55-18.6.07-.88.1-1.63.14-2.28M794.51,1056.07c4.07,3.5,10.31,8.07,18.83,11.55,11.07,4.55,20.95,5.22,26.98,5.15M859.15,1073.62c9.94-.19,17.66-.29,24.83-.34,4.62-.03,9.64-.03,15.41-2.66,3.28-1.49,5.7-3.33,7.28-4.7M722.14,1125c31.28,8.7,75.71,17.47,129.3,16.7,23-.33,44.22-2.39,63.36-5.35,9.4-1.46,18.29-3.14,26.65-4.96,11.72-2.54,22.38-5.32,31.87-8.1M755.1,905.21l10.42,9.71M763.24,924.34l-13.69-12.85M760.32,937.75l-14.21-14.83M965.9,898.09c-3.17.53-7.24,1.51-11.7,3.41-4.2,1.8-7.57,3.9-10.07,5.71M949.05,916.64l7.43-5.15M949.05,928.91l19.97-12.27M739.44,893.04c-.89,6.42-1.66,13.08-2.28,19.97-1.25,13.88-1.75,26.99-1.72,39.23M1009.54,831.71l.05.34,11.98,75.54M709.18,910.44l5.37-60.9.1-1.2M985.18,943.2v-53.18M637.37,834.71c1.48,3.09,3.72,7.05,7.14,11.14,3.21,3.83,6.49,6.61,9.13,8.56M633.95,924.34c1.12-2.78,2.93-7.09,5.42-12.27,1-2.08,1.9-3.91,2.76-5.58,4.6-8.85,7.62-12.77,12.22-21.98,3.84-7.71,5.94-13.45,9.7-23.72,3.74-10.19,6.47-19.1,8.43-26.08M642.82,928.57c3.59-9.23,7.24-16.53,10.24-21.91,4.03-7.28,5.99-9.54,9.06-16.71,3.76-8.79,4.19-13.23,8.07-23.25,2.76-7.12,5.56-12.68,7.41-16.13M653.21,982c-4.26-11.17-9.63-16.7-13.83-19.7-.96-.69-2.27-1.51-3.9-2.66-1.42-1.03-3.12-2.28-5.1-3.91-4-3.29-6.97-6.35-8.85-8.41M613.39,964.65c-1.06,1.05-2.35,2.4-3.59,4.12-1.12,1.48-2.2,3.23-3.12,5.23-2.33,5.05-2.63,9.37-2.85,11.55-.02.21-.05.41-.09.62-.38,3.28-1.27,7.34-3.21,12.24-1.34,3.41-3.21,7.21-5.77,11.41M591.56,1073.62c1.39-15.36,5.1-24.21,8.41-29.55,1-1.58,3.52-5.37,4.14-10.85.21-1.77.19-3.45.02-5.03-.33-2.99-1.18-5.58-2.01-7.53M611.9,1083.04c1.53-3.6,3.59-9.78,3.05-17.42-.63-9.4-5.11-20.47-8.84-20.27-2.56.14-5.8,5.61-8.79,29.55M621.53,964.65c-2.42,3.23-5.58,8-8.27,14.21-1.41,3.23-2.45,6.32-3.26,9.32-.69,2.63-1.2,5.18-1.56,7.71-.72,4.93-.98,9.71-1.18,14.66-.27,6.37-.51,11.94-.03,17.37.46,5.03,1.53,9.92,3.76,15.17,2.63,6.19,5.95,10.78,8.41,13.69M1112.18,983.93c-.57,5.68-.76,12.03-.29,18.91.05.86.12,1.7.21,2.54.74,8.01,2.27,15.41,4.24,22.07,3.43,11.58,8.15,21.02,12.24,27.92M1107.46,1086.75c1.12-.22,9.94-8,13.83-11.46,1.06-.94,1.75-1.58,1.84-1.65l.02-.02M1103.48,1082.75c2.33-.89,5.68-2.47,9.13-5.29,1.99-1.61,3.57-3.31,4.77-4.84.86-1.05,1.54-2.02,2.08-2.87,4.17-8.15,4.02-13.95,3.14-17.69-1.39-5.9-4.58-6.88-7.71-15.27-1.65-4.43-2.13-7.83-2.52-10.19-.36-2.16-.67-3.43-1.77-3.79-.79-.26-1.94,0-3.64,1.49-2.09,1.84-5.03,5.56-9.2,12.49M1078.24,937.75c-.89-6.02-2.49-15.24-5.44-26.26-2.92-10.78-6.02-19.2-12.94-35.13-3.29-7.62-7.46-16.95-12.9-29.09-4.44-9.95-9.8-21.9-13.56-30.25M1091.62,943.2c-.41-7.02-1.7-18.1-6.13-30.85-5.1-14.62-10.64-20.73-17.56-35.81-.91-1.97-1.89-4.22-2.9-6.71-3.14-7.72-6.59-17.88-9.23-30.41M1085.63,818.88c-2.88,2.71-5.92,5.85-8.99,9.42-3.33,3.88-6.16,7.64-8.56,11.12M1070.65,973.87c7.76-7.55,14.62-11.79,19.55-14.28,2.57-1.3,6.25-2.93,10.31-6.5,4.02-3.5,6.57-7.24,8.1-9.88M1090.63,1037.23c2.15-1.72,4.93-4.24,7.71-7.71,1.2-1.49,2.97-3.74,4.68-6.86M611.25,1098.23c2.11-4.74,4.26-10.43,6.01-16.97,1.92-7.26,2.92-13.85,3.41-19.41M735.44,758.16c-4.58,3.31-9.52,7.24-14.59,11.91-1.63,1.51-3.19,3-4.68,4.5-3.91,3.93-7.34,7.76-10.3,11.34M723.86,793.19c2.21-1.46,4.53-3.07,6.92-4.82,3.07-2.28,6.25-4.8,9.49-7.6,5.32-4.6,9.87-9.13,13.71-13.37l.02-.02M1078.24,799.74c.38-6.64-.15-12.05-.74-15.84-.7-4.58-1.7-8.15-3.6-14.96-1.34-4.79-2.56-8.73-3.47-11.5M671.48,735.96c-2.85,1.73-6.92,4.6-10.71,9.13-.31.38-.67.82-1.05,1.32-1.54,2.01-3.52,5.08-5.39,9.71-1.06,2.66-2.11,5.83-2.99,9.63-.1.39-.19.79-.27,1.18-3.79,17.13-1.82,33.43.19,43.69.19.84.34,1.65.51,2.4M627.57,813.02c1.9,7.09,2.35,12.63,1.53,15.68v.02c-.76,2.78-1.77,5.03-1.77,5.03-2.13,4.5-5.01,6.8-9.64,16.66-1.2,2.56-2.16,4.96-3,7.48-1.92,5.89-3.07,12.42-4.8,23.24-3.83,23.9-4.98,34.24-6.23,43.04-.55,3.91-1.12,7.52-1.96,11.88-.1.51-.21,1.03-.29,1.51-2.59,13.01-4.82,18.12-7.19,24.39-1.73,4.58-3.54,9.8-5.65,19.2-.19.86-.38,1.72-.55,2.56-1.18,5.65-2.06,10.98-2.69,16.34-.02.19-.03.38-.07.55-1.03,8.96-1.41,17.98-1.48,28.54-.05,7.12.03,14.95.15,23.92.03,1.32.05,2.66.07,4.02.03,2.61.09,5.17.15,7.64.39,14.28,1.29,26.39,2.18,35.78.86,8.94,1.73,15.38,2.23,18.81,1.82,12.8,3.91,23.66,5.71,31.97h40.52c8.7-16.82,14.45-31.8,18.28-43.38,2.21-6.71,6.81-21.26,10.23-38.41,1.99-10.07,3.59-21.02,4.05-31.82.17-4.27.46-15.1,0-28.54-.41-11.89-.93-12.01-.86-15.99.43-25.62,22.07-30.94,34.53-66.22,2.39-6.71,4.77-15.51,8-15.41,3.04.1,3.78,8.08,10.28,17.69,4.02,5.95,8.49,9.97,11.62,12.42,3.09,7.93,6.64,18.83,8.92,32.11,2.64,15.29,4.55,26.41,2.01,40.53-2.76,15.31-8.85,23.46-5.42,37.1,1.22,4.84,3.16,8.55,4.56,10.85.48,5.23.51,12.15-1.15,19.99-.77,3.72-1.82,7.05-2.9,9.92-3.52,4.1-8.12,10.47-11.36,19.19-1.92,5.13-2.92,9.83-3.43,13.71-3.41,5.23-6.83,10.45-10.23,15.68-2.3,3.52-4.6,7.05-6.9,10.57h279.15l-.02-.03-10.83-27.94c1.41-14.09-.91-24.4-3.43-31.4-.67-1.85-1.37-3.55-2.06-5.13-3.43-7.81-6.69-12.7-4.79-19.41,1.65-5.77,5.46-7.02,8.29-15.14,1.94-5.59,2.09-10.67,1.92-14.12-1.65-8.82-2.73-16.22-3.43-21.62-1.63-12.51-1.37-15.14-1.06-17.06.6-3.74,1.41-4.99,5.94-17.73,1.75-4.89,2.97-7.98,3.76-10.81,4.65-16.58,1.99-21.38,6.73-27.66.26-.34.53-.69.84-1.03,6.01-6.95,10.74-4.02,19.55-11.55,11.69-10,11.5-22.15,15.86-21.98,4.51.17,5.94,14.26,12.48,31.21,1,2.57,2.11,5.22,3.36,7.89.03.09.07.17.12.24,6.9,14.55,15.87,24.97,22.7,31.73-2.99,12.12-4.46,22.77-5.15,31.56-.34,4.19-.5,7.95-.55,11.24-.14,8.12.29,13.52,1,21.73.65,7.53,1.54,17.44,2.42,33.94.09,1.77.19,3.43.26,4.99.6,11.38.91,17.95.6,24.69-.39,8.97-1.34,17.31-2.61,24.9-1.06,6.42-2.35,12.32-3.74,17.64-.07.29-.14.57-.21.84h47.95l10.73-36.09,12.36-41.53,5.44-18.28,4.58-15.43c1.75-8.32,3.45-18.43,4.41-30.03.34-4.26.6-8.72.74-13.35.09-3.02.19-6.47.19-10.3,0-5.77-.19-12.41-.89-19.84-.53-5.53-1.36-11.5-2.59-17.85-.27-1.36-.55-2.73-.86-4.12-2.59-11.91-3.48-10.35-7.95-27.13-6.25-23.46-6.38-33.51-10.06-51.12-.29-1.46-.62-2.95-.98-4.51-2.52-11.19-6.95-27.39-15.12-46.68,1.85-6.16,3.86-15.08,3.78-25.9-.03-3.59-.26-6.38-.57-9.06-.43-3.88-.98-7.52-1.13-12.99-.21-6.62.19-15.8,2.78-26.94,2.83-5.66,4.43-10.18,5.15-13.76,1.18-5.75.19-9.18-1.44-11.36-1.65-2.2-3.16-2.06-10.73-5.42-.41-.17-.82-.36-1.27-.57-10.62-4.84-11.51-6.74-17.98-9.42-.45-.19-.91-.38-1.42-.57-10.23-3.93-11.21-1.36-18.26-4.56-5.01-2.28-7.17-5.13-9.2-8.07-2.21-3.21-4.26-6.54-9.64-9.35-.12-.07-.24-.12-.36-.19-4.94-2.49-9.63-3.04-18.76-4.08-7.24-.84-13.35-.81-17.71-.58-2.85-6.37-6.71-15.43-10.85-26.55-4.84-13.04-7.28-19.58-8.27-25.96-.91-5.8-.39-6.73-.86-32.83-.24-13.42-.39-14.67-.63-16.1-.81-4.68-3.04-17.78-12.78-27.58-.46-.46-1.37-1.08-2.75-1.89-4.07-2.37-12.24-6.35-25.23-12.66-.15-.07-.31-.15-.46-.22-1.12-.55-2.16-1.05-3.14-1.53-7.34-3.57-10.86-5.18-14.4-6.74l-.82-.36c-5.27-2.3-9.87-4.15-13.2-5.46-2.44-.96-4.2-1.63-5.08-1.96-6.95-2.59-15.8-5.63-26.34-8.6-.63-.17-1.27-.36-1.92-.53-16.53,11.05-30.82,17.8-41.1,21.97-12.99,5.29-23.87,8.22-33.39,19.13-5.9,6.76-8.58,13.52-9.99,17.13-2.9,7.45-3.88,14.14-4.07,20.97-.19,6.33.33,12.8.65,20.13.48,11.19.63,27.49-1.15,47.95-3.83,2.18-8.7,4.62-14.52,6.68-4.58,1.65-9.75,3.04-15.44,3.9-1.24.19-2.42.34-3.55.45-12.03,1.25-19.05-.98-31.76.38-.86.09-1.75.19-2.66.31-4.8.67-8.96,1.63-13.04,2.93-3.88,1.22-7.67,2.73-11.89,4.53-2.02.88-4.17,1.8-6.45,2.81-5.25,2.3-10.16,4.74-14.71,7.19-13.42,7.26-23.66,14.78-30.36,20.2-2.21,1.78-4.03,3.35-5.46,4.58-4.14,3.6-7.96,6.92-11.46,10-1.97,1.75-3.83,3.43-5.56,5.05-10.49,9.78-16.85,17.78-17.47,27.54-.05.63-.05,1.27-.05,1.92.07,4.86,1.48,10.45,2.88,14.91.86,2.73,1.72,5.03,2.27,6.5,2.64,7.16,5.8,12.96,8.55,17.35.6.94,1.17,1.82,1.72,2.63.24.46.46.91.69,1.36,3.96,7.88,6.71,15.19,8.36,21.31ZM687.2,1116.95c.31,6.86.33,14.43-.15,22.58-.74,12.65-4.91,19.32-2.28,21.43,1.78,1.42,6.52.86,20.25-9.71"/>
      </g>
      <polyline class="cls-1" points="270.6 1145.4 .5 1145.4 .5 .5 1780.5 .5 1780.5 1145.4 270.6 1145.4"/>
    </g>
  </g>
</svg>

================
File: src/components/auth/AuthScreen.jsx
================
import React from 'react';
import { Login } from './Login';

export function AuthScreen() {
  return <Login />;
}

================
File: src/components/auth/index.js
================
export { AuthScreen } from './AuthScreen';
export { Login } from './Login';

================
File: src/components/auth/Login.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import emptyStateSvg from '../../assets/SVG/emptyState.svg';

export function Login() {
  const { login, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    await login(username, password);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-stone-950">
      <div className="bg-stone-950 p-8 rounded-lg w-full max-w-md">
      <div className="flex justify-center mb-4">
          <img 
            src={emptyStateSvg} 
            alt="Empty State" 
            className="h-auto"
          />
        </div>
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">SLUMNET</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-stone-800 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-stone-800 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-mono text-sm py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <p className="text-stone-400 text-sm font-mono">
            You're not ready for the Hyperwar
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/auth/Register.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export function Register({ onSwitchToLogin }) {
  const { register, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    setPasswordError('');
    
    // Validate passwords match
    if (password !== confirmPassword) {
      setPasswordError('Passwords do not match');
      return;
    }
    
    // Validate password strength
    if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      return;
    }
    
    const result = await register(username, email, password);
    if (result.success) {
      setSuccess(true);
      // Reset form
      setUsername('');
      setEmail('');
      setPassword('');
      setConfirmPassword('');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">Create an Account</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {passwordError && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {passwordError}
          </div>
        )}
        
        {success && (
          <div className="bg-green-900 text-white p-3 rounded mb-4">
            Registration successful! You can now login.
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="email">
              Email
            </label>
            <input
              id="email"
              type="email"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <p className="text-gray-400 text-xs mt-1">Must be at least 8 characters long</p>
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-300 mb-2" htmlFor="confirmPassword">
              Confirm Password
            </label>
            <input
              id="confirmPassword"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <button
            onClick={onSwitchToLogin}
            className="text-teal-400 hover:text-teal-300 text-sm"
          >
            Already have an account? Login
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/CommandBar.jsx
================
import React, { useEffect, useRef } from 'react';
import { useAnnouncement } from '../context/AnnouncementContext';
import { useActiveUsers } from '../context/ActiveUsersContext';

export const CommandBar = ({ 
  currentWorkspaceIndex = 0,
  switchWorkspace,
  user,
  onLogout
}) => {
  console.log('CommandBar render, currentWorkspaceIndex:', currentWorkspaceIndex);
  const { announcement } = useAnnouncement();
  const { activeUserCount } = useActiveUsers();
  const announcementRef = useRef(null);
  const containerRef = useRef(null);

  // Carousel effect for long announcements with consistent speed
  useEffect(() => {
    if (!announcement || !announcementRef.current || !containerRef.current) return;
    
    const textElement = announcementRef.current;
    const containerElement = containerRef.current;
    const isOverflowing = textElement.scrollWidth > containerElement.clientWidth;
    
    if (isOverflowing) {
      // Fixed animation duration of 15 seconds
      textElement.style.animation = 'scroll-text 40s linear infinite';
    } else {
      textElement.style.animation = 'none';
    }
  }, [announcement]);

  return (
    <div className="w-full bg-stone-800 p-2 flex items-center gap-2">
      <div className="flex gap-2 items-center pr-2 border-r border-stone-600">
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 0 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(0)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 1 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(1)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 2 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(2)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 3 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(3)} />
      </div>
      
      {/* Announcement section with improved container */}
      <div ref={containerRef} className="flex-1 announcement-container">
        {announcement ? (
          <div 
            ref={announcementRef}
            className="announcement-text text-teal-300 text-sm font-mono"
          >
            {announcement}
          </div>
        ) : (
          <div className="text-gray-500 text-sm font-mono italic">No announcements</div>
        )}
      </div>
      
      {/* Command bar right section with active users and user info */}
      {user && (
        <>
          {/* Active users section */}
          <div className="flex items-center border-l border-stone-600 ml-2 pl-2">
            <div className="flex items-center text-teal-400 text-sm font-mono">
              <span className="leading-none">{activeUserCount}</span>
              <svg className="h-3 w-3 ml-0.5" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" /></svg>
            </div>
          </div>
          
          {/* Username and logout section */}
          <div className="flex items-center pl-2">
            <span className="text-white text-sm font-mono mr-2">
              {user?.username || 'User'} 
            </span>
            <button 
              onClick={onLogout}
              className="bg-stone-700 hover:bg-stone-600 text-white text-sm px-2 py-1 rounded"
            >
              Logout
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default CommandBar;

================
File: src/components/EmptyState.jsx
================
import React from 'react';
import emptyStateSvg from '../assets/SVG/emptyState.svg';

export const EmptyState = () => (
  <div className="absolute inset-0 flex flex-col items-center justify-center bg-stone-950">
    <img 
      src={emptyStateSvg} 
      alt="Empty State" 
      className="w-1/4 h-auto"
    />
    <h2 className="text-xl font-semibold text-teal-400 mt-4">SLUMNET</h2>
  </div>
);

export default EmptyState;

================
File: src/components/repomix-output.txt
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
auth/AuthScreen.jsx
auth/index.js
auth/Login.jsx
auth/Register.jsx
CommandBar.jsx
EmptyState.jsx
WindowManager.jsx
windows/AdminWindow.jsx
windows/AudioWindow.jsx
windows/CanvasPreview.jsx
windows/CanvasWindow.jsx
windows/ChatWindow.jsx
windows/DiceRollGif.jsx
windows/explorer/api/fileOperations.js
windows/explorer/components/canvas/CanvasContainer.jsx
windows/explorer/components/canvas/CanvasEditor.jsx
windows/explorer/components/canvas/TextNode.jsx
windows/explorer/components/CanvasEditor.jsx
windows/explorer/components/CommandInput.jsx
windows/explorer/components/dialogs/FileDialogs.jsx
windows/explorer/components/FileContent.jsx
windows/explorer/components/FileTree.jsx
windows/explorer/components/MapEditor.jsx
windows/explorer/components/nodes/index.js
windows/explorer/components/nodes/TextNode.jsx
windows/explorer/components/StorageStats.jsx
windows/explorer/ExplorerWindow.jsx
windows/explorer/README.md
windows/explorer/state/useExplorerState.js
windows/explorer/utils/canvasUtils.js
windows/explorer/utils/fileUtils.js
windows/explorer/utils/markdownUtils.js
windows/ExplorerWindow-fix.jsx
windows/ExplorerWindow.css
windows/ExplorerWindow.jsx
windows/index.js
windows/mapeditor/components/OpacitySlider.jsx
windows/mapeditor/LayerPanel.jsx
windows/mapeditor/MapCanvas.jsx
windows/mapeditor/MapPropertiesPanel.jsx
windows/mapeditor/MapToolbar.jsx
windows/mapeditor/README.md
windows/mapeditor/styles/RangeSlider.css
windows/mapeditor/TilePalette.jsx
windows/mapeditor/TilePaletteWithMarketplace.jsx
windows/mapeditor/TilesetSelector.jsx
windows/mapeditor/utils/dynamicTileRegistry.js
windows/mapeditor/utils/mapUtils.js
windows/mapeditor/utils/tileRegistry.js
windows/MapEditorWindow.jsx
windows/MarketplaceWindow.jsx
windows/TerminalWindow.jsx

================================================================
Files
================================================================

================
File: auth/AuthScreen.jsx
================
import React from 'react';
import { Login } from './Login';

export function AuthScreen() {
  return <Login />;
}

================
File: auth/index.js
================
export { AuthScreen } from './AuthScreen';
export { Login } from './Login';

================
File: auth/Login.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import emptyStateSvg from '../../assets/SVG/emptyState.svg';

export function Login() {
  const { login, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    await login(username, password);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-stone-950">
      <div className="bg-stone-950 p-8 rounded-lg w-full max-w-md">
      <div className="flex justify-center mb-4">
          <img 
            src={emptyStateSvg} 
            alt="Empty State" 
            className="h-auto"
          />
        </div>
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">SLUMNET</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-stone-800 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-6">
            <label className="block text-stone-300 mb-2 font-mono text-sm" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-stone-800 text-white border border-stone-600 focus:border-teal-500 focus:outline-none font-mono text-sm"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-mono text-sm py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <p className="text-stone-400 text-sm font-mono">
            Are ya in the know?
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: auth/Register.jsx
================
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export function Register({ onSwitchToLogin }) {
  const { register, error, clearError, loading } = useAuth();
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    clearError();
    setPasswordError('');
    
    // Validate passwords match
    if (password !== confirmPassword) {
      setPasswordError('Passwords do not match');
      return;
    }
    
    // Validate password strength
    if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      return;
    }
    
    const result = await register(username, email, password);
    if (result.success) {
      setSuccess(true);
      // Reset form
      setUsername('');
      setEmail('');
      setPassword('');
      setConfirmPassword('');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-teal-500 mb-6 text-center">Create an Account</h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {passwordError && (
          <div className="bg-red-900 text-white p-3 rounded mb-4">
            {passwordError}
          </div>
        )}
        
        {success && (
          <div className="bg-green-900 text-white p-3 rounded mb-4">
            Registration successful! You can now login.
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="username">
              Username
            </label>
            <input
              id="username"
              type="text"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="email">
              Email
            </label>
            <input
              id="email"
              type="email"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-300 mb-2" htmlFor="password">
              Password
            </label>
            <input
              id="password"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <p className="text-gray-400 text-xs mt-1">Must be at least 8 characters long</p>
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-300 mb-2" htmlFor="confirmPassword">
              Confirm Password
            </label>
            <input
              id="confirmPassword"
              type="password"
              className="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-teal-500 focus:outline-none"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            disabled={loading}
          >
            {loading ? 'Registering...' : 'Register'}
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <button
            onClick={onSwitchToLogin}
            className="text-teal-400 hover:text-teal-300 text-sm"
          >
            Already have an account? Login
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: CommandBar.jsx
================
import React, { useEffect, useRef } from 'react';
import { useAnnouncement } from '../context/AnnouncementContext';
import { useActiveUsers } from '../context/ActiveUsersContext';

export const CommandBar = ({ 
  currentWorkspaceIndex = 0,
  switchWorkspace,
  user,
  onLogout
}) => {
  console.log('CommandBar render, currentWorkspaceIndex:', currentWorkspaceIndex);
  const { announcement } = useAnnouncement();
  const { activeUserCount } = useActiveUsers();
  const announcementRef = useRef(null);
  const containerRef = useRef(null);

  // Carousel effect for long announcements with consistent speed
  useEffect(() => {
    if (!announcement || !announcementRef.current || !containerRef.current) return;
    
    const textElement = announcementRef.current;
    const containerElement = containerRef.current;
    const isOverflowing = textElement.scrollWidth > containerElement.clientWidth;
    
    if (isOverflowing) {
      // Fixed animation duration of 15 seconds
      textElement.style.animation = 'scroll-text 40s linear infinite';
    } else {
      textElement.style.animation = 'none';
    }
  }, [announcement]);

  return (
    <div className="w-full bg-stone-800 p-2 flex items-center gap-2">
      <div className="flex gap-2 items-center pr-2 border-r border-stone-600">
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 0 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(0)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 1 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(1)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 2 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(2)} />
        <div className={`rounded-full cursor-pointer ${currentWorkspaceIndex === 3 ? 'w-3 h-3 bg-teal-400' : 'w-2 h-2 bg-stone-600 hover:bg-stone-500'}`} onClick={() => typeof switchWorkspace === 'function' && switchWorkspace(3)} />
      </div>
      
      {/* Announcement section with improved container */}
      <div ref={containerRef} className="flex-1 announcement-container">
        {announcement ? (
          <div 
            ref={announcementRef}
            className="announcement-text text-teal-300 text-sm font-mono"
          >
            {announcement}
          </div>
        ) : (
          <div className="text-gray-500 text-sm font-mono italic">No announcements</div>
        )}
      </div>
      
      {/* Command bar right section with active users and user info */}
      {user && (
        <>
          {/* Active users section */}
          <div className="flex items-center border-l border-stone-600 ml-2 pl-2">
            <div className="flex items-center text-teal-400 text-sm font-mono">
              <span className="leading-none">{activeUserCount}</span>
              <svg className="h-3 w-3 ml-0.5" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" /></svg>
            </div>
          </div>
          
          {/* Username and logout section */}
          <div className="flex items-center pl-2">
            <span className="text-white text-sm font-mono mr-2">
              {user?.username || 'User'} 
            </span>
            <button 
              onClick={onLogout}
              className="bg-stone-700 hover:bg-stone-600 text-white text-sm px-2 py-1 rounded"
            >
              Logout
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default CommandBar;

================
File: EmptyState.jsx
================
import React from 'react';
import emptyStateSvg from '../assets/SVG/emptyState.svg';

export const EmptyState = () => (
  <div className="absolute inset-0 flex flex-col items-center justify-center bg-stone-950">
    <img 
      src={emptyStateSvg} 
      alt="Empty State" 
      className="w-1/4 h-auto"
    />
    <h2 className="text-xl font-semibold text-teal-400 mt-4">SLUMNET</h2>
  </div>
);

export default EmptyState;

================
File: WindowManager.jsx
================
import React, { useState, useCallback, useEffect } from 'react';
import { WINDOW_CONTENT, WINDOW_TYPES } from '../utils/windowTypes';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowManager } from '../hooks/useWindowManager';
import { useKeyboardShortcuts } from '../hooks/useKeyboardShortcuts';
import { CommandBar } from './CommandBar';
import EmptyState from './EmptyState';

export const WindowManager = ({ defaultLayout = null }) => {
  const [dragState, setDragState] = useState(null);
  const [notification, setNotification] = useState(null);
  const [flashingWindowIds, setFlashingWindowIds] = useState(new Set());
  
  // Function to flash a window's border red
  const flashWindowBorder = useCallback((windowId) => {
    setFlashingWindowIds(prev => {
      const newSet = new Set(prev);
      newSet.add(windowId);
      return newSet;
    });
    
    // Remove the window from flashing state after 500ms
    setTimeout(() => {
      setFlashingWindowIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(windowId);
        return newSet;
      });
    }, 200);
  }, []);

  const {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    splitWindow,
    createNewWindow,
    closeWindow,
    transformWindow,
    currentWorkspaceIndex,
    workspaceCount,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  } = useWindowManager({ 
    defaultLayout,
    onFlashBorder: flashWindowBorder
  });
  
  // Override window.alert to use our notification system
  useEffect(() => {
    const originalAlert = window.alert;
    window.alert = (message) => {
      console.log('Alert:', message);
      
      // If the message is about splitting or creating windows, flash the active window border
      if (message.includes('split') || message.includes('create')) {
        if (activeNodeId) {
          flashWindowBorder(activeNodeId);
        }
      } else {
        // For other alerts, show the notification
        setNotification(message);
        setTimeout(() => setNotification(null), 3000); // Hide after 3 seconds
      }
    };
    
    return () => {
      window.alert = originalAlert;
    };
  }, [activeNodeId, flashWindowBorder]);

  // Log when component mounts
  useEffect(() => {
    console.log('WindowManager component mounted');
    console.log('setIsMoveMode is a function:', typeof setIsMoveMode === 'function');
    console.log('Initial isMoveMode state:', isMoveMode);
  }, [isMoveMode]);
  
  // Log move mode state changes
  useEffect(() => {
    console.log('Move mode changed to:', isMoveMode);
  }, [isMoveMode]);

  // Add keyboard shortcuts
  useKeyboardShortcuts({
    onSplitVertical: () => splitWindow(activeNodeId, 'vertical'),
    onSplitHorizontal: () => splitWindow(activeNodeId, 'horizontal'),
    onClose: () => closeWindow(activeNodeId),
    createNewWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows,
    activeNodeId
  });

  // Command handling for terminal
  const handleCommand = useCallback((command) => {
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();

    switch (cmd) {
      case 'split':
        if (activeNodeId) {
          const direction = parts[1] === 'vertical' ? 'vertical' : 'horizontal';
          splitWindow(activeNodeId, direction);
        }
        break;
      case 'close':
        if (activeNodeId) {
          closeWindow(activeNodeId);
        }
        break;
    }
  }, [activeNodeId, splitWindow, closeWindow]);

  // Resize handling
  const handleResizeStart = useCallback((e, split) => {
    e.preventDefault();
    e.stopPropagation();
    const rect = e.currentTarget.getBoundingClientRect();
    setDragState({
      split,
      initialPos: {
        x: e.clientX,
        y: e.clientY
      },
      initialRatio: split.splitRatio
    });
  }, []);

  // Helper function to convert percentage-based bounds to pixel dimensions
  const calculatePixelDimensions = useCallback((bounds) => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    return {
      width: (bounds.width / 100) * windowWidth,
      height: (bounds.height / 100) * windowHeight
    };
  }, []);
  
  // Helper function to check if a window tree would have any windows smaller than the minimum size
  const hasWindowsBelowMinSize = useCallback((root) => {
    if (!root) return false;
    
    // Import constants directly here to avoid dependency issues
    const MIN_WINDOW_WIDTH_PX = 300;
    const MIN_WINDOW_HEIGHT_PX = 200;
    
    // Calculate the bounds of all windows
    const allWindows = getWindowBounds(root);
    
    // Check if any window would be smaller than the minimum size
    return allWindows.some(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      const isTooSmall = pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
                         pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
      
      if (isTooSmall) {
        console.log('Window too small:', window.id);
        console.log('Dimensions:', pixelDimensions);
      }
      
      return isTooSmall;
    });
  }, [calculatePixelDimensions]);

  const handleResizeMove = useCallback((e) => {
    if (!dragState) return;

    const { split, initialPos, initialRatio } = dragState;
    const delta = split.direction === 'horizontal' 
      ? (e.clientX - initialPos.x) / window.innerWidth 
      : (e.clientY - initialPos.y) / window.innerHeight;

    const newRatio = Math.max(0.1, Math.min(0.9, initialRatio + delta));
    
    // Store the original ratio
    const originalRatio = split.splitRatio;
    
    // Apply the new ratio
    split.splitRatio = newRatio;
    
    // Check if this would result in windows that are too small, but don't block the resize
    if (hasWindowsBelowMinSize(rootNode)) {
      console.log('Windows are below minimum size, but resize is allowed');
    }
    
    // If we get here, the resize is allowed
    // Force a re-render
    setDragState(prev => ({ ...prev }));
  }, [dragState, rootNode, hasWindowsBelowMinSize, activeNodeId, flashWindowBorder]);

  const handleResizeEnd = useCallback(() => {
    setDragState(null);
  }, []);

  useEffect(() => {
    if (dragState) {
      window.addEventListener('mousemove', handleResizeMove);
      window.addEventListener('mouseup', handleResizeEnd);
      return () => {
        window.removeEventListener('mousemove', handleResizeMove);
        window.removeEventListener('mouseup', handleResizeEnd);
      };
    }
  }, [dragState, handleResizeMove, handleResizeEnd]);

  // Window tree renderer
  const WindowTreeRenderer = ({ node, depth = 0, available = { x: 0, y: 0, width: 100, height: 100 } }) => {
    if (!node) return null;

    if (node.type === 'window') {
      const windowContent = WINDOW_CONTENT[node.windowType];
      if (!windowContent) {
        console.error('No window content found for type:', node.windowType);
        return null;
      }
      const Component = windowContent.component;
      const isActive = node.id === activeNodeId;
  
      // Check if this window is currently flashing
      const isFlashing = flashingWindowIds.has(node.id);
      
      // Check if this is the first selected window in move mode
      const isFirstSelectedWindow = isMoveMode && moveSourceWindowId === node.id;
      
      return (
        <div
          className={`absolute overflow-hidden border-1 ${
            isFlashing ? 'border-red-600' : 
            isFirstSelectedWindow ? 'border-blue-300' :
            isActive ? (
              isMoveMode ? 'border-green-500' : 
              isResizeMode ? 'border-yellow-500' : 
              'border-teal-500'
            ) : 'border-stone-600'
          } ${isFlashing ? 'animate-pulse' : ''}`}
          style={{
            left: `${available.x}%`,
            top: `${available.y}%`,
            width: `${available.width}%`,
            height: `${available.height}%`,
            transition: 'border-color 0.2s ease-in-out'
          }}
          onClick={() => setActiveNodeId(node.id)}
        >
          <Component 
            key={`window-${node.id}-${node.windowType}`}
            onCommand={handleCommand} 
            isActive={isActive}
            nodeState={node.state}
            nodeId={node.id}
            transformWindow={transformWindow}
            windowState={node.windowType === WINDOW_TYPES.TERMINAL ? terminalStates[node.id] : node.state}
            updateWindowState={(newState) => {
              updateTerminalState(node.id, newState);
            }}
          />
        </div>
      );
    }

    // Calculate split dimensions
    let firstDimensions, secondDimensions;
    if (node.direction === 'horizontal') {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width * node.splitRatio,
        height: available.height
      };
      secondDimensions = {
        x: available.x + (available.width * node.splitRatio),
        y: available.y,
        width: available.width * (1 - node.splitRatio),
        height: available.height
      };
    } else {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width,
        height: available.height * node.splitRatio
      };
      secondDimensions = {
        x: available.x,
        y: available.y + (available.height * node.splitRatio),
        width: available.width,
        height: available.height * (1 - node.splitRatio)
      };
    }

    return (
      <div className="absolute inset-0" style={{ pointerEvents: 'none' }}>
        <WindowTreeRenderer 
          node={node.first} 
          depth={depth + 1} 
          available={firstDimensions} 
        />
        <div
          className="absolute bg-stone-700 hover:bg-stone-500 transition-colors"
          style={{
            left: node.direction === 'horizontal' ? `${firstDimensions.width}%` : 0,
            top: node.direction === 'vertical' ? `${firstDimensions.height}%` : 0,
            width: node.direction === 'horizontal' ? '4px' : '100%',
            height: node.direction === 'vertical' ? '4px' : '100%',
            cursor: node.direction === 'horizontal' ? 'col-resize' : 'row-resize',
            pointerEvents: 'auto',
            zIndex: 10
          }}
          onMouseDown={(e) => handleResizeStart(e, node)}
        />
        <WindowTreeRenderer 
          node={node.second} 
          depth={depth + 1} 
          available={secondDimensions}
        />
      </div>
    );
  };

  return (
    <div className="w-full h-screen flex flex-col">
      <CommandBar
        onCommand={handleCommand}
        currentWorkspaceIndex={currentWorkspaceIndex}
        switchWorkspace={switchWorkspace}
      />
      <div className="flex-1 relative bg-stone-900">
        {rootNode ? (
          <WindowTreeRenderer
            node={rootNode}
            terminalStates={terminalStates}
            updateTerminalState={updateTerminalState}
          />
        ) : (
          <EmptyState />
        )}
        
        {/* Notification system */}
        {notification && (
          <div 
            className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50"
            style={{ maxWidth: '80%' }}
          >
            {notification}
          </div>
        )}
      </div>
    </div>
  );
};

export default WindowManager;

================
File: windows/AdminWindow.jsx
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { Trash } from 'lucide-react'; // Import Trash icon

const AdminWindow = ({ isActive }) => {
  const { user } = useAuth();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingUser, setEditingUser] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    is_admin: false,
    has_file_access: false
  });
  const [createFormData, setCreateFormData] = useState({
    username: '',
    password: '',
    is_admin: false,
    has_file_access: false
  });
  
  // Chat channels state
  const [activeTab, setActiveTab] = useState('users'); // 'users' or 'channels'
  const [channels, setChannels] = useState([]);
  const [channelLoading, setChannelLoading] = useState(false);
  const [channelError, setChannelError] = useState(null);
  const [newChannelName, setNewChannelName] = useState('');
  const [showCreateChannelForm, setShowCreateChannelForm] = useState(false);

  // Fetch users when component mounts
  useEffect(() => {
    fetchUsers();
  }, []); // Empty dependency array means this runs once on mount
  
  // Load channels when tab changes to channels
  useEffect(() => {
    if (activeTab === 'channels') {
      fetchChannels();
    }
  }, [activeTab]);
  
  // Reset form visibility when switching tabs
  useEffect(() => {
    // Hide forms when switching tabs
    setShowCreateForm(false);
    setShowCreateChannelForm(false);
  }, [activeTab]);

  // Fetch all users from the API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setUsers(response.data);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch users:', err);
      setError('Failed to load users. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Start editing a user
  const handleEdit = (user) => {
    setEditingUser(user.id);
    setFormData({
      username: user.username,
      password: '', // Don't populate password for security
      is_admin: user.is_admin === 1 || user.is_admin === true,
      has_file_access: user.has_file_access === 1 || user.has_file_access === true,
      storage_quota: user.storage_quota || 52428800 // Default to 50MB (52428800 bytes)
    });
  };

  // Cancel editing
  const handleCancel = () => {
    setEditingUser(null);
    setFormData({
      username: '',
      password: '',
      is_admin: false,
      has_file_access: false
    });
  };

  // Handle form input changes for editing
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  // Handle form input changes for creating
  const handleCreateChange = (e) => {
    const { name, value, type, checked } = e.target;
    setCreateFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  // Save user changes
  const handleSave = async (userId) => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Build user data object
      const userData = {
        username: formData.username,
        is_admin: formData.is_admin,
        has_file_access: formData.has_file_access,
        storage_quota: formData.storage_quota
      };
      
      // Only include password in the request if it was changed
      if (formData.password) {
        userData.password = formData.password;
      }
      
      await axios.put(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
        userData,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the user list
      await fetchUsers();
      setEditingUser(null);
      setFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
    } catch (err) {
      console.error('Failed to update user:', err);
      setError('Failed to update user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Create a new user
  const handleCreateUser = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Validate form data - only username and password are required
      if (!createFormData.username || !createFormData.password) {
        setError('Username and password are required.');
        setLoading(false);
        return;
      }
      
      // Use the register endpoint instead of users endpoint
      await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.REGISTER}`,
        {
          username: createFormData.username,
          password: createFormData.password
        }
      );
      
      // If admin status or file access permissions need to be set, we need to do that in a separate request
      if (createFormData.is_admin || createFormData.has_file_access) {
        try {
          // Get the newly created user
          const usersResponse = await axios.get(
            `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          
          const newUser = usersResponse.data.find(u => u.username === createFormData.username);
          
          if (newUser) {
            // Update the user with admin status and file access permissions
            await axios.put(
              `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${newUser.id}`,
              { 
                is_admin: createFormData.is_admin,
                has_file_access: createFormData.has_file_access,
                storage_quota: createFormData.storage_quota || 52428800 // Default to 50MB
              },
              { headers: { Authorization: `Bearer ${token}` } }
            );
          }
        } catch (adminErr) {
          console.error('Failed to set admin status:', adminErr);
          // Don't fail the whole operation if just the admin part fails
        }
      }
      
      // Refresh the user list
      await fetchUsers();
      
      // Reset form and hide it
      setCreateFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
      setShowCreateForm(false);
      setError(null);
    } catch (err) {
      console.error('Failed to create user:', err);
      setError(err.response?.data?.message || 'Failed to create user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Toggle create form visibility
  const toggleCreateForm = () => {
    setShowCreateForm(!showCreateForm);
    if (!showCreateForm) {
      // Reset form data when opening
      setCreateFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
    }
  };
  
  // Toggle create channel form visibility
  const toggleCreateChannelForm = () => {
    setShowCreateChannelForm(!showCreateChannelForm);
    if (!showCreateChannelForm) {
      // Reset channel name when opening the form
      setNewChannelName('');
    }
  };

  // Render loading state
  if (loading && users.length === 0) {
    return (
      <div className="bg-stone-900 text-white p-4 h-full flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-teal-500 mx-auto mb-4"></div>
          <p>Loading users...</p>
        </div>
      </div>
    );
  }

  // Render error state
  if (error && users.length === 0) {
    return (
      <div className="bg-stone-900 text-white p-4 h-full flex items-center justify-center">
        <div className="text-center text-red-500">
          <p>{error}</p>
          <button 
            onClick={fetchUsers}
            className="mt-4 px-4 py-2 bg-stone-700 hover:bg-stone-600 rounded"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  // Fetch chat channels
  const fetchChannels = async () => {
    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CHAT_ROOMS}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setChannels(response.data);
      setChannelError(null);
    } catch (err) {
      console.error('Failed to fetch channels:', err);
      setChannelError('Failed to load chat channels. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };

  // Create a new chat channel
  const handleCreateChannel = async (e) => {
    e.preventDefault();
    if (!newChannelName.trim()) return;

    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CHAT_ROOMS}`,
        { name: newChannelName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the channel list
      await fetchChannels();
      
      // Reset form and hide it
      setNewChannelName('');
      setShowCreateChannelForm(false);
      setChannelError(null);
    } catch (err) {
      console.error('Failed to create channel:', err);
      setChannelError('Failed to create channel. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };

  // Delete a chat channel
  const handleDeleteChannel = async (channelId) => {
    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      const endpoint = API_CONFIG.ENDPOINTS.CHAT_DELETE_ROOM.replace(':id', channelId);
      await axios.delete(
        `${API_CONFIG.BASE_URL}${endpoint}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the channel list
      await fetchChannels();
      setChannelError(null);
    } catch (err) {
      console.error('Failed to delete channel:', err);
      setChannelError('Failed to delete channel. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };
  
  // Delete a user
  const handleDeleteUser = async (userId) => {
    // Confirm deletion
    if (!window.confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
      return;
    }
    
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Use the DELETE endpoint
      await axios.delete(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the user list
      await fetchUsers();
      setError(null);
    } catch (err) {
      console.error('Failed to delete user:', err);
      setError(err.response?.data?.message || 'Failed to delete user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-stone-900 text-white h-full overflow-auto flex flex-col">
      {/* Header Bar */}
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <h2 className="text-teal-400 font-medium">ADMIN PANEL</h2>
        
        {/* Tab Navigation */}
        <div className="flex">
          <button
            className={`px-3 py-1 rounded-t text-xs flex items-center ${
              activeTab === 'users'
                ? 'bg-stone-800 text-teal-300'
                : 'text-stone-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('users')}
          >
            Users
          </button>
          <button
            className={`px-3 py-1 rounded-t text-xs flex items-center ml-1 ${
              activeTab === 'channels'
                ? 'bg-stone-800 text-teal-300'
                : 'text-stone-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('channels')}
          >
            Chat Channels
          </button>
        </div>
      </div>
      
      {/* Create User/Channel Button - Only shown when respective tab is active */}
      {activeTab === 'users' && (
        <div className="p-2 flex justify-end">
          <button
            onClick={toggleCreateForm}
            className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
          >
            {showCreateForm ? 'Cancel' : 'Create User'}
          </button>
        </div>
      )}
      
      {activeTab === 'channels' && (
        <div className="p-2 border-b border-stone-700 flex justify-end">
          <button
            onClick={toggleCreateChannelForm}
            className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
          >
            {showCreateChannelForm ? 'Cancel' : 'Create Channel'}
          </button>
        </div>
      )}
      
      {/* Main Content Area */}
      <div className="p-4 flex-1 overflow-auto">
        {activeTab === 'users' && error && <p className="text-red-500 mb-4">{error}</p>}
        {activeTab === 'channels' && channelError && <p className="text-red-500 mb-4">{channelError}</p>}
        
        {/* Show users tab content */}
        {activeTab === 'users' && (
          <>
            {/* Create User Form */}
            {showCreateForm && (
              <div className="mb-6 p-4 bg-stone-800 rounded">
                <h3 className="text-lg mb-3 text-teal-400">Create New User</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Username: <span className="text-red-500">*</span></label>
                    <input
                      type="text"
                      name="username"
                      value={createFormData.username}
                      onChange={handleCreateChange}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter username"
                    />
                  </div>
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Password: <span className="text-red-500">*</span></label>
                    <input
                      type="password"
                      name="password"
                      value={createFormData.password}
                      onChange={handleCreateChange}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter password"
                    />
                  </div>
                  <div className="flex flex-col space-y-2">
                    <label className="flex items-center text-sm text-gray-400">
                      <input
                        type="checkbox"
                        name="is_admin"
                        checked={createFormData.is_admin}
                        onChange={handleCreateChange}
                        className="form-checkbox h-5 w-5 text-teal-500 mr-2"
                      />
                      Admin User
                    </label>
                    <label className="flex items-center text-sm text-gray-400">
                      <input
                        type="checkbox"
                        name="has_file_access"
                        checked={createFormData.has_file_access}
                        onChange={handleCreateChange}
                        className="form-checkbox h-5 w-5 text-teal-500 mr-2"
                      />
                      Private File Access
                    </label>
                  </div>
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Storage Quota:</label>
                    <div className="flex items-center">
                      <input
                        type="number"
                        name="storage_quota"
                        value={Math.round((createFormData.storage_quota || 52428800) / 1048576)}
                        onChange={(e) => {
                          const mbValue = parseInt(e.target.value) || 0;
                          handleCreateChange({
                            target: {
                              name: 'storage_quota',
                              value: mbValue * 1048576, // Convert MB to bytes
                              type: 'number'
                            }
                          });
                        }}
                        className="bg-stone-700 text-white px-2 py-1 rounded w-20 mr-2"
                        min="0"
                        step="1"
                        disabled={createFormData.is_admin}
                      />
                      <span className="text-sm text-gray-400">MB {createFormData.is_admin && "(Unlimited for admins)"}</span>
                    </div>
                  </div>
                </div>
                <div className="mt-4">
                  <button
                    onClick={handleCreateUser}
                    className="px-4 py-2 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                    disabled={loading}
                  >
                    {loading ? 'Creating...' : 'Create User'}
                  </button>
                </div>
              </div>
            )}
            
            {/* Users Table */}
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b border-stone-700">
                  <th className="text-left p-2">User ID</th>
                  <th className="text-left p-2">Username</th>
                  <th className="text-left p-2">Admin</th>
                  <th className="text-left p-2">File Access</th>
                  <th className="text-left p-2">Storage Quota</th>
                  <th className="text-left p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {users.map(userItem => (
                  <tr key={userItem.id} className="border-b border-stone-800 hover:bg-stone-800">
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <span className="text-white px-2 py-1 rounded w-full">
                          {userItem.id}
                        </span>
                      ) : (
                        userItem.id
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="text"
                          name="username"
                          value={formData.username}
                          onChange={handleChange}
                          className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                        />
                      ) : (
                        userItem.username
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="checkbox"
                          name="is_admin"
                          checked={formData.is_admin}
                          onChange={handleChange}
                          className="form-checkbox h-5 w-5 text-teal-500"
                        />
                      ) : (
                        userItem.is_admin === 1 || userItem.is_admin === true ? 'Yes' : 'No'
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="checkbox"
                          name="has_file_access"
                          checked={formData.has_file_access}
                          onChange={handleChange}
                          className="form-checkbox h-5 w-5 text-teal-500"
                        />
                      ) : (
                        userItem.has_file_access === 1 || userItem.has_file_access === true ? 'Yes' : 'No'
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <div className="flex items-center">
                          <input
                            type="number"
                            name="storage_quota"
                            value={Math.round((formData.storage_quota || 52428800) / 1048576)}
                            onChange={(e) => {
                              const mbValue = parseInt(e.target.value) || 0;
                              handleChange({
                                target: {
                                  name: 'storage_quota',
                                  value: mbValue * 1048576, // Convert MB to bytes
                                  type: 'number'
                                }
                              });
                            }}
                            className="bg-stone-700 text-white px-2 py-1 rounded w-20 mr-2"
                            min="0"
                            step="1"
                            disabled={formData.is_admin}
                          />
                          <span className="text-sm text-gray-400">MB {formData.is_admin && "(Unlimited for admins)"}</span>
                        </div>
                      ) : (
                        userItem.is_admin ? 'Unlimited' : 
                        `${Math.round((userItem.storage_quota || 52428800) / 1048576)} MB`
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <div className="flex flex-col space-y-2">
                          <div className="mb-2">
                            <label className="block text-sm text-gray-400">New Password:</label>
                            <input
                              type="password"
                              name="password"
                              value={formData.password}
                              onChange={handleChange}
                              placeholder="Leave blank to keep current"
                              className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                            />
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleSave(userItem.id)}
                              className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                            >
                              Save
                            </button>
                            <button
                              onClick={handleCancel}
                              className="px-3 py-1 bg-stone-600 hover:bg-stone-500 rounded text-sm"
                            >
                              Cancel
                            </button>
                            <button
                              onClick={() => {
                                handleCancel();
                                handleDeleteUser(userItem.id);
                              }}
                              className="px-3 py-1 bg-stone-600 hover:bg-stone-500 rounded text-sm text-red-400 hover:text-red-300"
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEdit(userItem)}
                            className="px-3 py-1 bg-stone-700 hover:bg-stone-600 rounded text-sm"
                            disabled={loading}
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDeleteUser(userItem.id)}
                            className="px-3 py-1 focus:outline-none text-sm"
                            disabled={loading}
                            title="Delete user"
                          >
                            <Trash size={16} className="text-stone-400 hover:text-stone-300" />
                          </button>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {loading && users.length > 0 && (
              <div className="mt-4 text-center">
                <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-teal-500 mx-auto"></div>
              </div>
            )}
          </>
        )}
        
        {/* Show channels tab content */}
        {activeTab === 'channels' && (
          <>
            {/* Create Channel Form - Only shown when showCreateChannelForm is true */}
            {showCreateChannelForm && (
              <div className="mb-6 p-4 bg-stone-800 rounded">
                <h3 className="text-lg mb-3 text-teal-400">Create New Channel</h3>
                <form onSubmit={handleCreateChannel} className="flex items-end gap-4">
                  <div className="flex-1">
                    <label className="block text-sm text-gray-400 mb-1">Channel Name:</label>
                    <input
                      type="text"
                      value={newChannelName}
                      onChange={(e) => setNewChannelName(e.target.value)}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter channel name"
                    />
                  </div>
                  <button
                    type="submit"
                    className="px-4 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                    disabled={channelLoading}
                  >
                    {channelLoading ? 'Creating...' : 'Create Channel'}
                  </button>
                </form>
              </div>
            )}
            
            {/* Channels Table */}
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b border-stone-700">
                  <th className="text-left p-2">Channel Name</th>
                  <th className="text-left p-2">Created By</th>
                  <th className="text-left p-2">Created At</th>
                  <th className="text-left p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {channels.map(channel => (
                  <tr key={channel.id} className="border-b border-stone-800 hover:bg-stone-800">
                    <td className="p-2">{channel.name}</td>
                    <td className="p-2">{channel.created_by || '-'}</td>
                    <td className="p-2">
                      {new Date(channel.created_at).toLocaleString()}
                    </td>
                    <td className="p-2">
                      <button
                        onClick={() => handleDeleteChannel(channel.id)}
                        className="focus:outline-none"
                        title="Delete channel"
                        disabled={channelLoading}
                      >
                        <Trash size={16} className="text-stone-400 hover:text-stone-300" />
                      </button>
                    </td>
                  </tr>
                ))}
                {channels.length === 0 && !channelLoading && (
                  <tr>
                    <td colSpan="4" className="p-4 text-center text-stone-500">
                      No channels found. Create one above.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
            
            {channelLoading && (
              <div className="mt-4 text-center">
                <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-teal-500 mx-auto"></div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default AdminWindow;

================
File: windows/AudioWindow.jsx
================
import React, { useRef, useState, useEffect, useCallback } from 'react';
import { Play, Pause, Volume2 } from 'lucide-react';

const AudioWindow = ({ nodeId, onCommand, windowState, updateWindowState }) => {
  const canvasRef = useRef(null);
  const audioRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const animationRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(windowState?.isPlaying || false);
  const [currentTime, setCurrentTime] = useState(windowState?.currentTime || 0);

  // Define draw function outside of other functions to avoid dependency issues
  const draw = useCallback(() => {
    if (!canvasRef.current || !analyserRef.current) {
      console.error('Cannot draw: canvas or analyser is null');
      return;
    }

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const analyser = analyserRef.current;
    
    // Make sure canvas dimensions are set correctly
    if (canvas.width === 0 || canvas.height === 0) {
      canvas.width = canvas.offsetWidth || 300;
      canvas.height = canvas.offsetHeight || 150;
    }
    
    // Use a smaller FFT size for better visualization
    analyser.fftSize = 512;
    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    const drawFrame = () => {
      // Cancel any existing animation frame
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      
      // Request next frame
      animationRef.current = requestAnimationFrame(drawFrame);
      
      // Get frequency data
      analyser.getByteFrequencyData(dataArray);

      // Clear canvas
      ctx.fillStyle = 'rgb(28, 25, 23)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Draw visualizer
      const barWidth = (canvas.width / bufferLength) * 2.5;
      let barHeight;
      let x = 0;

      for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i] * 1.5;
        
        // Make sure we have a minimum height for bars
        if (barHeight < 1) barHeight = 1;
        
        const gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);
        gradient.addColorStop(0, '#14b8a6');
        gradient.addColorStop(1, '#2dd4bf');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

        x += barWidth + 1;
      }
    };

    // Start the animation
    drawFrame();
    
    console.log('Visualization started');
    
    // Return a cleanup function
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
    };
  }, []);

  // Track if audio element has been connected to a source
  const sourceConnectedRef = useRef(false);

  // Setup audio with Web Audio API for visualization
  const setupAudio = useCallback(async () => {
    try {
      const audio = audioRef.current;
      if (!audio) {
        console.error('Audio element reference is null');
        return false;
      }
      
      // Force reset the sourceConnected flag if we're having issues
      if (audioContextRef.current?.state === 'closed') {
        sourceConnectedRef.current = false;
      }
      
      // Create new AudioContext if needed
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Creating new AudioContext');
        
        // Create new AudioContext
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Create and configure analyser
        const analyser = audioContext.createAnalyser();
        analyser.fftSize = 256; // Smaller FFT size for better visualization
        analyser.smoothingTimeConstant = 0.8; // Add smoothing
        
        // Resume audio context (needed due to browser autoplay policies)
        await audioContext.resume();
        
        // Create a new MediaElementSource and connect it
        try {
          console.log('Creating new MediaElementSource');
          const source = audioContext.createMediaElementSource(audio);
          source.connect(analyser);
          analyser.connect(audioContext.destination);
          sourceConnectedRef.current = true;
          
          // Store references
          audioContextRef.current = audioContext;
          analyserRef.current = analyser;
          
          console.log('Audio setup complete with new AudioContext');
        } catch (sourceError) {
          console.error('Error creating MediaElementSource:', sourceError);
          return false;
        }
      } else {
        // If AudioContext exists but is suspended, resume it
        if (audioContextRef.current.state === 'suspended') {
          console.log('Resuming suspended AudioContext');
          await audioContextRef.current.resume();
        }
        
        console.log('Using existing AudioContext');
      }
      
      // Restore playback position from window state
      if (windowState?.currentTime) {
        audio.currentTime = windowState.currentTime;
      }
      
      return true;
    } catch (error) {
      console.error('Error setting up audio:', error);
      return false;
    }
  }, [windowState]);

  // Initialize audio on mount or when windowState changes
  useEffect(() => {
    const initializeAudio = async () => {
      // Set up the audio context
      const success = await setupAudio();
      
      // If setup was successful and we should be playing, start playback
      if (success && windowState?.isPlaying) {
        try {
          await audioRef.current.play();
          draw();
        } catch (error) {
          console.error('Error auto-playing audio:', error);
          setIsPlaying(false);
        }
      }
    };

    if (audioRef.current && 
        (!audioContextRef.current || audioContextRef.current.state === 'closed')) {
      initializeAudio();
    }

    return () => {
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        try {
          audioContextRef.current.close();
        } catch (error) {
          console.error('Error closing AudioContext:', error);
        }
      }
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [windowState, setupAudio, draw]);

  // Toggle play/pause
  const togglePlay = useCallback(async () => {
    if (!audioRef.current) return;

    try {
      console.log('Toggle play clicked, current state:', isPlaying);
      
      // Make sure audio context is initialized and running
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Setting up audio again');
        const success = await setupAudio();
        if (!success) {
          console.error('Failed to set up audio');
          return;
        }
      } else if (audioContextRef.current.state === 'suspended') {
        console.log('Resuming suspended AudioContext');
        await audioContextRef.current.resume();
      }

      if (isPlaying) {
        console.log('Pausing audio');
        audioRef.current.pause();
        if (animationRef.current) {
          cancelAnimationFrame(animationRef.current);
          animationRef.current = null;
        }
      } else {
        console.log('Starting audio playback');
        try {
          // Start visualization before playing to ensure it's ready
          if (analyserRef.current && !animationRef.current) {
            console.log('Starting visualization');
            draw();
          }
          
          // Play the audio
          const playPromise = audioRef.current.play();
          if (playPromise) {
            await playPromise;
            console.log('Audio playback started successfully');
            
            // Make sure visualization is running
            if (!animationRef.current && analyserRef.current) {
              console.log('Starting visualization after successful play');
              draw();
            }
          }
        } catch (playError) {
          console.error('Error playing audio:', playError);
        }
      }
      
      setIsPlaying(!isPlaying);
    } catch (error) {
      console.error('Error in togglePlay:', error);
    }
  }, [isPlaying, setupAudio, draw]);

  // Handle canvas resize
  useEffect(() => {
    const resizeCanvas = () => {
      const canvas = canvasRef.current;
      if (!canvas) return;
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    return () => window.removeEventListener('resize', resizeCanvas);
  }, []);

  // Update current time when playing
  useEffect(() => {
    if (!audioRef.current) return;
    
    const updateTime = () => {
      setCurrentTime(audioRef.current.currentTime);
    };
    
    audioRef.current.addEventListener('timeupdate', updateTime);
    return () => {
      audioRef.current?.removeEventListener('timeupdate', updateTime);
    };
  }, []);
  
  // Start visualization when audio is playing
  useEffect(() => {
    // If audio is playing but visualization is not running, start it
    if (isPlaying && audioRef.current && analyserRef.current && !animationRef.current) {
      console.log('Starting visualization due to isPlaying state change');
      draw();
    }
    
    // If audio is not playing but visualization is running, stop it
    if (!isPlaying && animationRef.current) {
      console.log('Stopping visualization due to isPlaying state change');
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
  }, [isPlaying, draw]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        isPlaying,
        currentTime
      });
    }
  }, [isPlaying, currentTime, updateWindowState]);

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
      <div className="flex-1 relative">
        <canvas 
          ref={canvasRef}
          className="absolute inset-0 w-full h-full"
        />
      </div>

      <div className="border-t border-stone-700">
        <div className="flex items-center gap-4 mb-4">
          <button 
            onClick={togglePlay}
            className="p-2 hover:bg-stone-800 rounded-full transition-colors"
          >
            {isPlaying ? <Pause size={24} /> : <Play size={24} />}
          </button>
          <Volume2 size={24} />
        </div>

        <audio
          ref={audioRef}
          src="scamming-on-runescape.mp3"
          preload="auto"
          crossOrigin="anonymous"
          onPlay={() => setIsPlaying(true)}
          onPause={() => setIsPlaying(false)}
          onEnded={() => setIsPlaying(false)}
        />

        <div className="p-2 flex items-center gap-2 border-t border-stone-700">
          <span>$</span>
          <input
            type="text"
            className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && e.target.value.trim()) {
                onCommand(e.target.value.trim());
                e.target.value = '';
              }
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default AudioWindow;

================
File: windows/CanvasPreview.jsx
================
import React, { useMemo } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState
} from 'reactflow';
import 'reactflow/dist/style.css';
import nodeTypes from '../../utils/canvasNodeTypes';

const CanvasPreview = ({ fileContent, nodeTypes: propNodeTypes }) => {
  // Parse the canvas data
  let canvasData;
  try {
    canvasData = JSON.parse(fileContent);
  } catch (error) {
    return (
      <div className="text-red-400 p-4">
        <p>Error parsing canvas file: {error.message}</p>
        <p className="mt-2">Raw content:</p>
        <pre className="font-mono text-sm whitespace-pre-wrap mt-2 bg-stone-800 p-2 rounded">
          {fileContent}
        </pre>
      </div>
    );
  }

  // Memoize the nodeTypes to prevent recreation on each render
  const memoizedNodeTypes = useMemo(() => propNodeTypes || nodeTypes, [propNodeTypes]);
  
  // Use React Flow hooks at the top level of the component
  const [nodes, setNodes] = useNodesState(canvasData.nodes || []);
  const [edges, setEdges] = useEdgesState(canvasData.edges || []);
  
  return (
    <div style={{ width: '100%', height: '100%', minHeight: '300px' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        nodeTypes={memoizedNodeTypes}
        fitView
        attributionPosition="bottom-right"
        minZoom={0.1}
        maxZoom={4}
        defaultViewport={{ x: 0, y: 0, zoom: 1 }}
      >
      <Background color="#44403c" gap={16} />
      <Controls showInteractive={false} />
      <MiniMap
        nodeColor={(node) => {
          switch (node.type) {
            case 'group':
              return node.data.color ? `rgba(${node.data.color}, 0.6)` : 'rgba(20, 184, 166, 0.6)';
            default:
              return '#14b8a6';
          }
        }}
        maskColor="rgba(0, 0, 0, 0.5)"
        style={{ backgroundColor: '#292524' }}
      />
      </ReactFlow>
    </div>
  );
};

export default CanvasPreview;

================
File: windows/CanvasWindow.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel
} from 'reactflow';
import 'reactflow/dist/style.css';
import { 
  Plus, 
  Minus, 
  Save, 
  FileText, 
  Trash2, 
  Edit, 
  Link as LinkIcon,
  Square,
  Type
} from 'lucide-react';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveCanvasState, getCanvasState } from '../../services/indexedDBService';

// Custom node types
const TextNode = ({ data }) => {
  return (
    <div className="p-2 bg-stone-800 border border-stone-700 rounded shadow-md">
      <div className="text-teal-400 text-sm whitespace-pre-wrap">{data.text}</div>
    </div>
  );
};

const GroupNode = ({ data }) => {
  return (
    <div 
      className="p-2 bg-stone-900 border border-stone-700 rounded shadow-md"
      style={{ backgroundColor: data.color ? `rgba(${data.color}, 0.2)` : 'rgba(20, 20, 20, 0.7)' }}
    >
      <div className="text-teal-300 font-bold mb-1">{data.label || 'Group'}</div>
      <div className="text-teal-400 text-sm">{data.children?.length || 0} items</div>
    </div>
  );
};

// Node types configuration
const nodeTypes = {
  text: TextNode,
  group: GroupNode
};

const CanvasWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [canvasName, setCanvasName] = useState(windowState?.canvasName || 'Untitled Canvas');
  const [currentCanvasPath, setCurrentCanvasPath] = useState(windowState?.currentCanvasPath || null);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // ReactFlow states
  const [nodes, setNodes, onNodesChange] = useNodesState(windowState?.nodes || []);
  const [edges, setEdges, onEdgesChange] = useEdgesState(windowState?.edges || []);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  // UI states
  const [selectedElements, setSelectedElements] = useState([]);
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeType, setNewNodeType] = useState('text');
  const [newNodeText, setNewNodeText] = useState('');
  const [newNodeLabel, setNewNodeLabel] = useState('');
  const [newNodeColor, setNewNodeColor] = useState('');
  
  // For auto-save functionality
  const saveTimeoutRef = useRef(null);
  
  // Load canvas state from IndexedDB on mount
  useEffect(() => {
    const loadCanvasState = async () => {
      try {
        // Try to load canvas state from IndexedDB
        const savedState = await getCanvasState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded canvas state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // Update state with saved values
          if (savedState.content.nodes) {
            setNodes(savedState.content.nodes);
          }
          
          if (savedState.content.edges) {
            setEdges(savedState.content.edges);
          }
          
          if (savedState.content.canvasName) {
            setCanvasName(savedState.content.canvasName);
          }
          
          if (savedState.content.currentCanvasPath) {
            setCurrentCanvasPath(savedState.content.currentCanvasPath);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`Failed to load canvas state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadCanvasState();
  }, [nodeId, setNodes, setEdges]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active canvas window
      setActiveWindow(nodeId, WINDOW_TYPES.CANVAS);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Save canvas state to IndexedDB when it changes
  useEffect(() => {
    if (!stateLoadedRef.current) return;
    
    // Save the canvas state to IndexedDB
    saveCanvasState({
      id: nodeId,
      content: {
        nodes,
        edges,
        canvasName,
        currentCanvasPath
      }
    }).catch(error => {
      console.error(`Failed to save canvas state for window ${nodeId} to IndexedDB:`, error);
    });
    
  }, [nodes, edges, canvasName, currentCanvasPath, nodeId]);
  
  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        nodes,
        edges,
        canvasName,
        currentCanvasPath,
        saveStatus
      });
    }
  }, [nodes, edges, canvasName, currentCanvasPath, saveStatus, updateWindowState]);
  
  // Auto-save functionality with debounce
  useEffect(() => {
    // Only auto-save if we have a path and user is admin
    if (currentCanvasPath && isAdmin) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        saveCanvas();
      }, 2000); // 2 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [nodes, edges, currentCanvasPath, isAdmin]);
  
  // Handle connection (edge) creation
  const onConnect = useCallback((params) => {
    setEdges((eds) => addEdge({
      ...params,
      id: `edge-${Date.now()}`,
      type: 'default',
      animated: false,
      style: { stroke: '#14b8a6' }
    }, eds));
  }, [setEdges]);
  
  // Handle node selection
  const onSelectionChange = useCallback(({ nodes, edges }) => {
    setSelectedElements([...nodes, ...edges]);
  }, []);
  
  // Handle drag over for node creation
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);
  
  // Handle drop for node creation
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      
      const type = event.dataTransfer.getData('application/reactflow/type');
      if (!type) return;
      
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });
      
      const newNode = {
        id: `node-${Date.now()}`,
        type,
        position,
        data: type === 'text' 
          ? { text: 'New text node' } 
          : { label: 'New Group', color: '20, 184, 166' },
        style: type === 'group' 
          ? { width: 400, height: 400, backgroundColor: 'rgba(20, 184, 166, 0.1)' } 
          : undefined
      };
      
      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance, setNodes]
  );
  
  // Load canvas from file
  const loadCanvas = async (filePath) => {
    try {
      setIsLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsLoading(false);
        return;
      }
      
      // Fetch file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view file content.');
        } else {
          setErrorMessage(`Failed to load canvas: ${response.statusText}`);
        }
        setIsLoading(false);
        return;
      }
      
      const data = await response.json();
      
      try {
        const canvasData = JSON.parse(data.content);
        
        if (canvasData.nodes && canvasData.edges) {
          setNodes(canvasData.nodes);
          setEdges(canvasData.edges);
          setCurrentCanvasPath(filePath);
          
          // Extract canvas name from file path
          const pathParts = filePath.split('/');
          const fileName = pathParts[pathParts.length - 1];
          setCanvasName(fileName.replace('.canvas', ''));
          
          setSaveStatus('saved');
        } else {
          setErrorMessage('Invalid canvas file format.');
        }
      } catch (parseError) {
        console.error('Error parsing canvas file:', parseError);
        setErrorMessage('Failed to parse canvas file. Invalid format.');
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error('Error loading canvas:', error);
      setErrorMessage(`Error loading canvas: ${error.message}`);
      setSaveStatus('error');
      setIsLoading(false);
    }
  };
  
  // Save canvas to file
  const saveCanvas = async () => {
    try {
      // Check if we have a path
      if (!currentCanvasPath) {
        setErrorMessage('No file path specified. Please save as a new file first.');
        setSaveStatus('error');
        return;
      }
      
      setSaveStatus('saving');
      
      const canvasData = {
        nodes,
        edges
      };
      
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          path: currentCanvasPath,
          content: JSON.stringify(canvasData, null, 2)
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to save canvas: ${response.statusText}`);
      }
      
      setSaveStatus('saved');
      setErrorMessage('');
    } catch (error) {
      console.error('Error saving canvas:', error);
      setErrorMessage(`Error saving canvas: ${error.message}`);
      setSaveStatus('error');
    }
  };
  
  // Create a new node
  const createNode = (type) => {
    if (!reactFlowInstance) return;
    
    const position = {
      x: Math.random() * 400,
      y: Math.random() * 400
    };
    
    let newNode = {
      id: `node-${Date.now()}`,
      type,
      position,
      data: {}
    };
    
    if (type === 'text') {
      newNode.data = { text: newNodeText || 'New text node' };
    } else if (type === 'group') {
      newNode.data = { 
        label: newNodeLabel || 'New Group', 
        color: newNodeColor || '20, 184, 166' 
      };
      newNode.style = { 
        width: 400, 
        height: 400, 
        backgroundColor: `rgba(${newNodeColor || '20, 184, 166'}, 0.1)` 
      };
    }
    
    setNodes((nds) => nds.concat(newNode));
    setShowNodeCreator(false);
    setNewNodeText('');
    setNewNodeLabel('');
    setNewNodeColor('');
  };
  
  // Delete selected elements
  const deleteSelected = () => {
    const selectedNodeIds = selectedElements
      .filter(el => el.type !== 'default')
      .map(el => el.id);
    
    const selectedEdgeIds = selectedElements
      .filter(el => el.type === 'default')
      .map(el => el.id);
    
    setNodes(nodes.filter(node => !selectedNodeIds.includes(node.id)));
    setEdges(edges.filter(edge => !selectedEdgeIds.includes(edge.id)));
    setSelectedElements([]);
  };
  
  // Handle command input
  const handleCommand = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      onCommand(cmd);
      e.target.value = '';
      
      // Commands:
      // - save: save the canvas
      // - load [path]: load a canvas from a file
      // - new-text: create a new text node
      // - new-group: create a new group node
      // - delete: delete selected elements
      if (cmd === 'save') {
        saveCanvas();
      } else if (cmd.startsWith('load ')) {
        const path = cmd.substring(5).trim();
        loadCanvas(path);
      } else if (cmd === 'new-text') {
        setNewNodeType('text');
        setShowNodeCreator(true);
      } else if (cmd === 'new-group') {
        setNewNodeType('group');
        setShowNodeCreator(true);
      } else if (cmd === 'delete') {
        deleteSelected();
      }
    }
  };
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <span className="mr-2">{canvasName}</span>
          {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
          {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
          {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
        </div>
        
        <div className="flex gap-2">
          <button 
            onClick={() => saveCanvas()}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('text');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Text
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('group');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Add group node"
          >
            <Square size={14} />
            Group
          </button>
          
          {selectedElements.length > 0 && (
            <button 
              onClick={deleteSelected}
              className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
              title="Delete selected"
            >
              <Trash2 size={14} />
              Delete
            </button>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {errorMessage && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {errorMessage}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              {newNodeType === 'text' ? 'New Text Node' : 'New Group Node'}
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          {newNodeType === 'text' ? (
            <div className="flex flex-col gap-2">
              <textarea
                value={newNodeText}
                onChange={(e) => setNewNodeText(e.target.value)}
                placeholder="Enter text content"
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                rows={3}
              />
              <div className="flex justify-end">
                <button
                  onClick={() => createNode('text')}
                  className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
                >
                  Create
                </button>
              </div>
            </div>
          ) : (
            <div className="flex flex-col gap-2">
              <input
                type="text"
                value={newNodeLabel}
                onChange={(e) => setNewNodeLabel(e.target.value)}
                placeholder="Group label"
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              />
              <select
                value={newNodeColor}
                onChange={(e) => setNewNodeColor(e.target.value)}
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              >
                <option value="20, 184, 166">Teal</option>
                <option value="244, 63, 94">Red</option>
                <option value="234, 179, 8">Yellow</option>
                <option value="59, 130, 246">Blue</option>
                <option value="168, 85, 247">Purple</option>
                <option value="34, 197, 94">Green</option>
              </select>
              <div className="flex justify-end">
                <button
                  onClick={() => createNode('group')}
                  className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
                >
                  Create
                </button>
              </div>
            </div>
          )}
        </div>
      )}
      
      {/* Canvas area */}
      <div className="flex-1 overflow-hidden">
        {isLoading ? (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading canvas...</span>
          </div>
        ) : (
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            onSelectionChange={onSelectionChange}
            nodeTypes={nodeTypes}
            fitView
            snapToGrid
            snapGrid={[15, 15]}
            defaultViewport={{ x: 0, y: 0, zoom: 1 }}
            minZoom={0.1}
            maxZoom={4}
            deleteKeyCode="Delete"
            multiSelectionKeyCode="Control"
            selectionKeyCode="Shift"
          >
            <Background color="#44403c" gap={16} />
            <Controls showInteractive={false} />
            <MiniMap
              nodeColor={(node) => {
                switch (node.type) {
                  case 'group':
                    return node.data.color ? `rgba(${node.data.color}, 0.6)` : 'rgba(20, 184, 166, 0.6)';
                  default:
                    return '#14b8a6';
                }
              }}
              maskColor="rgba(0, 0, 0, 0.5)"
              style={{ backgroundColor: '#292524' }}
            />
            
            <Panel position="top-left" className="bg-stone-800 p-2 rounded shadow-md">
              <div className="flex flex-col gap-1">
                <div className="text-xs text-stone-400">Drag to create:</div>
                <div 
                  className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                  draggable
                  onDragStart={(event) => {
                    event.dataTransfer.setData('application/reactflow/type', 'text');
                    event.dataTransfer.effectAllowed = 'move';
                  }}
                >
                  <Type size={14} />
                  <span className="text-xs">Text Node</span>
                </div>
                <div 
                  className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                  draggable
                  onDragStart={(event) => {
                    event.dataTransfer.setData('application/reactflow/type', 'group');
                    event.dataTransfer.effectAllowed = 'move';
                  }}
                >
                  <Square size={14} />
                  <span className="text-xs">Group Node</span>
                </div>
              </div>
            </Panel>
          </ReactFlow>
        )}
      </div>
      
      {/* Command input */}
      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="text-teal-400">$</span>
        <input
          ref={focusRef}
          type="text"
          onKeyDown={handleCommand}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          placeholder="Commands: save, load [path], new-text, new-group, delete"
        />
      </div>
    </div>
  );
};

export default CanvasWindow;

================
File: windows/ChatWindow.jsx
================
import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { io } from 'socket.io-client';
import axios from 'axios';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveChatState, getChatState } from '../../services/indexedDBService';
import { MoreVertical, Trash, Mic, MicOff, Phone, PhoneOff, Plus } from 'lucide-react'; // Import additional icons
import SimplePeer from 'simple-peer';

// Helper function to safely destroy a peer connection
const safelyDestroyPeer = (peer, userId, destroyedPeersRef) => {
  if (!peer) return;
  
  try {
    // Stop any tracks in the peer's stream
    if (peer._localStream) {
      try {
        peer._localStream.getTracks().forEach(track => track.stop());
      } catch (err) {
        console.error('Error stopping local stream tracks:', err);
      }
    }
    
    // Destroy the peer
    if (peer.destroy) {
      peer.destroy();
      
      // Mark this peer as destroyed if we have a userId and ref
      if (userId && destroyedPeersRef?.current) {
        console.log(`Marking peer ${userId} as destroyed`);
        destroyedPeersRef.current.add(userId);
      }
    }
  } catch (err) {
    console.error('Error safely destroying peer:', err);
  }
};

// Parse a command input
const parseCommand = (input) => {
  // Check if this is a command (starts with /)
  if (!input.startsWith('/')) return null;
  
  // Split the input into command and arguments
  const parts = input.substring(1).trim().split(/\s+/);
  const command = parts[0].toLowerCase();
  const args = parts.slice(1);
  
  return { command, args };
};

const ChatWindow = ({ isActive, nodeId }) => {
  const { user } = useAuth();
  const { setActiveWindow } = useWindowState();
  const [rooms, setRooms] = useState([]);
  const [activeRoom, setActiveRoom] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [charCount, setCharCount] = useState(0);
  const [newRoomName, setNewRoomName] = useState('');
  const [socket, setSocket] = useState(null);
  const messagesEndRef = useRef(null);
  // Refs to track loading state
  const stateLoadedRef = useRef(false);
  const roomsLoadedRef = useRef(false);
  
  // Voice chat state
  const [voiceChannels, setVoiceChannels] = useState([]);
  const [activeVoiceChannel, setActiveVoiceChannel] = useState(null);
  const [voiceParticipants, setVoiceParticipants] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [peers, setPeers] = useState({});
  const [newVoiceChannelName, setNewVoiceChannelName] = useState('');
  const [speakingUsers, setSpeakingUsers] = useState(new Set());
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const speakingTimeoutRef = useRef(null);
  const joinSoundRef = useRef(null);
  const leaveSoundRef = useRef(null);
  
  // Track destroyed peers to prevent signaling to them
  const destroyedPeersRef = useRef(new Set());
  
  // Helper function to create audio elements for remote streams
  const createAudioElement = (userId, stream) => {
    console.log('Creating audio element for user:', userId);
    const existingAudio = document.getElementById(`remote-audio-${userId}`);
    if (existingAudio) {
      console.log('Audio element already exists, removing it first');
      existingAudio.remove();
    }
    
    const audio = document.createElement('audio');
    audio.id = `remote-audio-${userId}`;
    audio.srcObject = stream;
    audio.autoplay = true;
    audio.controls = false; // Hide controls
    audio.volume = 1.0; // Full volume
    document.body.appendChild(audio);
    
    // Verify the audio element was created and is working
    console.log('Audio element created:', audio);
    console.log('Audio element autoplay:', audio.autoplay);
    console.log('Audio element srcObject:', audio.srcObject);
    
    return audio;
  };
  
  const MAX_CHARS = 500; // Maximum character limit

  // New state for tracking which message's menu is open
  const [activeMenu, setActiveMenu] = useState(null);

  // Initialize sound effects
  useEffect(() => {
    // Create the audio element for the join sound
    const joinSound = new Audio('/audio/vine-boom.mp3');
    joinSound.volume = 0.5; // Set volume to 50%
    joinSoundRef.current = joinSound;
    
    // Create the audio element for the leave sound
    const leaveSound = new Audio('/audio/vine-boom-leave.mp3');
    leaveSound.volume = 0.5; // Set volume to 50%
    leaveSoundRef.current = leaveSound;
    
    return () => {
      // Clean up
      if (joinSoundRef.current) {
        joinSoundRef.current.pause();
        joinSoundRef.current.src = '';
      }
      if (leaveSoundRef.current) {
        leaveSoundRef.current.pause();
        leaveSoundRef.current.src = '';
      }
    };
  }, []);
  
  // Connect to WebSocket server
  useEffect(() => {
    const socketInstance = io(API_CONFIG.BASE_URL.replace('/api', ''));
    setSocket(socketInstance);

    // Authenticate the socket connection
    const token = localStorage.getItem('auth_token');
    if (token) {
      socketInstance.emit('authenticate', token);
    }

    return () => {
      // Clean up voice chat if active
      if (localStream) {
        try {
          localStream.getTracks().forEach(track => track.stop());
        } catch (err) {
          console.error('Error stopping local stream tracks on unmount:', err);
        }
      }
      
      // Clean up peer connections safely using our helper function
      try {
        Object.values(peers).forEach(peer => {
          safelyDestroyPeer(peer);
        });
      } catch (err) {
        console.error('Error cleaning up peer connections on unmount:', err);
      }
      
      socketInstance.disconnect();
    };
  }, []);
  
  // Add effects to listen for message_deleted and room_deleted events
  useEffect(() => {
    if (!socket) return;
    
    const handleMessageDeleted = (data) => {
      setMessages(prev => prev.filter(msg => msg.id !== data.id));
    };
    
    const handleRoomDeleted = (data) => {
      // If the active room was deleted, set activeRoom to null
      if (activeRoom && activeRoom.id === data.id) {
        setActiveRoom(null);
      }
      
      // Remove the deleted room from the rooms list
      setRooms(prev => prev.filter(room => room.id !== data.id));
    };
    
    const handleVoiceChannelDeleted = (data) => {
      // If the active voice channel was deleted, leave it
      if (activeVoiceChannel && activeVoiceChannel.id === data.id) {
        leaveVoiceChannel();
      }
      
      // Remove the deleted voice channel from the list
      setVoiceChannels(prev => prev.filter(channel => channel.id !== data.id));
    };

    const handleMessagesCleared = (data) => {
      if (activeRoom && activeRoom.id === data.roomId) {
        // If this is for our current room, clear the messages
        if (data.count === 'all') {
          setMessages([]);
        } else {
          // Remove the most recent N messages
          const messageCount = parseInt(data.count, 10);
          if (!isNaN(messageCount)) {
            setMessages(prev => prev.slice(0, Math.max(0, prev.length - messageCount)));
          }
        }
        
        // Add a system message
        setMessages(prev => [...prev, {
          id: 'system-' + Date.now(),
          username: 'System',
          message: `Messages have been cleared by an admin.`,
          created_at: new Date().toISOString(),
          isSystem: true
        }]);
      }
    };
    
    socket.on('message_deleted', handleMessageDeleted);
    socket.on('room_deleted', handleRoomDeleted);
    socket.on('voice_channel_deleted', handleVoiceChannelDeleted);
    socket.on('messages_cleared', handleMessagesCleared);
    
    return () => {
      socket.off('message_deleted', handleMessageDeleted);
      socket.off('room_deleted', handleRoomDeleted);
      socket.off('voice_channel_deleted', handleVoiceChannelDeleted);
      socket.off('messages_cleared', handleMessagesCleared);
    };
  }, [socket, activeRoom, activeVoiceChannel]);

  // Load chat state from IndexedDB on mount
  useEffect(() => {
    const loadChatState = async () => {
      try {
        // Try to load chat state from IndexedDB
        const savedState = await getChatState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded chat state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // If we have a saved active room ID, we'll use it after fetching rooms
          stateLoadedRef.current = true;
          
          // Store the active room ID to use after fetching rooms
          if (savedState.content.activeRoomId) {
            // We'll set this after fetching rooms
            window.setTimeout(() => {
              if (rooms.length > 0) {
                const savedRoom = rooms.find(room => room.id === savedState.content.activeRoomId);
                if (savedRoom) {
                  setActiveRoom(savedRoom);
                  console.log(`Restored active room: ${savedRoom.name}`);
                }
              }
            }, 100);
          }
        }
      } catch (error) {
        console.error(`Failed to load chat state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadChatState();
  }, [nodeId]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active chat window
      setActiveWindow(nodeId, WINDOW_TYPES.CHAT);
    }
  }, [isActive, nodeId, setActiveWindow]);

  // Fetch available rooms
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(`${API_CONFIG.BASE_URL}/chat/rooms`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setRooms(response.data);
        roomsLoadedRef.current = true;
        
        // Get saved active room ID from sessionStorage
        const savedRoomId = sessionStorage.getItem(`chat_active_room_${nodeId}`);
        
        if (savedRoomId && response.data.length > 0) {
          // Try to find the saved room
          const savedRoom = response.data.find(room => 
            room.id === parseInt(savedRoomId, 10) || room.id === savedRoomId
          );
          
          if (savedRoom) {
            console.log(`Restoring saved room: ${savedRoom.name}`);
            setActiveRoom(savedRoom);
            
            // Load any saved draft message for this room
            const savedDraft = localStorage.getItem(`chat_draft_${nodeId}_${savedRoom.id}`);
            if (savedDraft) {
              setNewMessage(savedDraft);
              setCharCount(savedDraft.length);
            }
            
            return;
          }
        }
        
        // If no saved room was found or restored, and there are rooms but no active room,
        // set the first one as active
        if (response.data.length > 0 && !activeRoom) {
          setActiveRoom(response.data[0]);
        }
      } catch (error) {
        console.error('Failed to fetch rooms:', error);
      }
    };

    fetchRooms();
  }, []); // Only run once on mount

  // Save active room to IndexedDB and sessionStorage when it changes
  useEffect(() => {
    if (!activeRoom) return;
    
    // Save to sessionStorage for immediate persistence across refreshes
    sessionStorage.setItem(`chat_active_room_${nodeId}`, activeRoom.id);
    
    // Also save to IndexedDB for longer term storage if state is loaded
    if (stateLoadedRef.current) {
      saveChatState({
        id: nodeId,
        content: {
          activeRoomId: activeRoom.id
        }
      }).catch(error => {
        console.error(`Failed to save chat state for window ${nodeId} to IndexedDB:`, error);
      });
      
      console.log(`Saved active room ID ${activeRoom.id} to IndexedDB for window ${nodeId}`);
    }
    
    // Check for any saved draft message
    const savedDraft = localStorage.getItem(`chat_draft_${nodeId}_${activeRoom.id}`);
    if (savedDraft && newMessage !== savedDraft) {
      setNewMessage(savedDraft);
      setCharCount(savedDraft.length);
    }
  }, [activeRoom, nodeId, newMessage]);

  // Join room and fetch messages
  useEffect(() => {
    if (!activeRoom || !socket) return;

    // Join the room via WebSocket
    socket.emit('join_room', activeRoom.id);

    // Fetch messages for the room
    const fetchMessages = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setMessages(response.data);
      } catch (error) {
        console.error('Failed to fetch messages:', error);
      }
    };

    // Fetch voice channels for the room
    const fetchVoiceChannels = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/voice-channels`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setVoiceChannels(response.data);
      } catch (error) {
        console.error('Failed to fetch voice channels:', error);
      }
    };

    fetchMessages();
    fetchVoiceChannels();

    // Listen for new messages
    const handleNewMessage = (message) => {
      setMessages((prev) => [...prev, message]);
    };

    socket.on('new_message', handleNewMessage);
//test
    return () => {
      // Leave the room when component unmounts or room changes
      socket.emit('leave_room', activeRoom.id);
      socket.off('new_message', handleNewMessage);
    };
  }, [activeRoom, socket]);

  // Set up voice activity detection
  useEffect(() => {
    if (!localStream || !socket || !activeVoiceChannel) return;
    
    // Create audio context and analyzer
    try {
      // Clean up any existing audio context
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
      
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      audioContextRef.current = audioContext;
      
      // Create analyzer node
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 256;
      analyser.smoothingTimeConstant = 0.8;
      analyserRef.current = analyser;
      
      // Connect the stream to the analyzer
      const source = audioContext.createMediaStreamSource(localStream);
      source.connect(analyser);
      
      // Set up the buffer for the analyzer
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      
      // Function to check if user is speaking
      const checkSpeaking = () => {
        if (!analyser || !socket || !activeVoiceChannel || isMuted) return;
        
        analyser.getByteFrequencyData(dataArray);
        
        // Calculate average volume
        let sum = 0;
        for (let i = 0; i < bufferLength; i++) {
          sum += dataArray[i];
        }
        const average = sum / bufferLength;
        
        // Threshold for speaking detection
        const threshold = 20; // Adjust as needed
        
        // Check if speaking
        const isSpeaking = average > threshold;
        
        // If speaking state changed, emit event
        if (isSpeaking && !speakingUsers.has(user.id)) {
          // User started speaking
          socket.emit('voice_speaking_start', {
            channelId: activeVoiceChannel.id
          });
          
          // Update local state
          setSpeakingUsers(prev => {
            const newSet = new Set(prev);
            newSet.add(user.id);
            return newSet;
          });
          
          // Clear any existing timeout
          if (speakingTimeoutRef.current) {
            clearTimeout(speakingTimeoutRef.current);
          }
        } else if (!isSpeaking && speakingUsers.has(user.id)) {
          // Set a timeout to stop speaking status after a short delay
          // This prevents the speaking status from flickering
          if (!speakingTimeoutRef.current) {
            speakingTimeoutRef.current = setTimeout(() => {
              socket.emit('voice_speaking_stop', {
                channelId: activeVoiceChannel.id
              });
              
              // Update local state
              setSpeakingUsers(prev => {
                const newSet = new Set(prev);
                newSet.delete(user.id);
                return newSet;
              });
              
              speakingTimeoutRef.current = null;
            }, 300); // 300ms delay
          }
        }
      };
      
      // Set up interval to check speaking
      const intervalId = setInterval(checkSpeaking, 100); // Check every 100ms
      
      return () => {
        clearInterval(intervalId);
        if (speakingTimeoutRef.current) {
          clearTimeout(speakingTimeoutRef.current);
        }
        if (audioContextRef.current) {
          audioContextRef.current.close();
          audioContextRef.current = null;
        }
        analyserRef.current = null;
      };
    } catch (error) {
      console.error('Error setting up voice activity detection:', error);
    }
  }, [localStream, socket, activeVoiceChannel, isMuted, user.id, speakingUsers]);
  
  // Voice chat socket event handlers
  useEffect(() => {
    if (!socket) return;
    
    // Handle speaking events
    const handleUserSpeakingStart = (data) => {
      if (data.channelId === activeVoiceChannel?.id && data.userId !== user.id) {
        setSpeakingUsers(prev => {
          const newSet = new Set(prev);
          newSet.add(data.userId);
          return newSet;
        });
      }
    };
    
    const handleUserSpeakingStop = (data) => {
      if (data.channelId === activeVoiceChannel?.id && data.userId !== user.id) {
        setSpeakingUsers(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.userId);
          return newSet;
        });
      }
    };
    
    socket.on('user_speaking_start', handleUserSpeakingStart);
    socket.on('user_speaking_stop', handleUserSpeakingStop);
    
    // Handle when a user joins a voice channel
    const handleUserJoinedVoice = (data) => {
      console.log('User joined voice:', data);
      
      // Add to participants list
      setVoiceParticipants(prev => {
        // Check if user is already in the list
        if (prev.some(p => p.user_id === data.userId)) {
          return prev;
        }
        
        // Play join sound if this is our active channel and we're not the one joining
        if (activeVoiceChannel && 
            activeVoiceChannel.id === data.channelId && 
            data.userId !== user.id &&
            joinSoundRef.current) {
          // Reset the audio to the beginning and play it
          joinSoundRef.current.currentTime = 0;
          joinSoundRef.current.play().catch(err => {
            console.error('Error playing join sound:', err);
          });
        }
        
        return [...prev, {
          user_id: data.userId,
          username: data.username,
          is_muted: data.isMuted,
          channel_id: data.channelId
        }];
      });
      
      // If this is our active voice channel and we have a local stream,
      // initiate a peer connection to the new user
      if (activeVoiceChannel && 
          activeVoiceChannel.id === data.channelId && 
          localStream && 
          localStream.active && // Check that stream is active
          data.userId !== user.id) {
        
        console.log('Creating new peer connection to user:', data.userId);
        
        // Create peer connection with optimized settings
        try {
          // Track connection start time for performance monitoring
          const connectionStartTime = performance.now();
          
          const peer = new SimplePeer({
            initiator: true,
            trickle: true, // Enable trickle ICE for faster connections
            stream: localStream,
            config: {
              iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' },
                { urls: 'stun:stun3.l.google.com:19302' },
                { urls: 'stun:stun4.l.google.com:19302' }
              ],
              iceCandidatePoolSize: 10 // Pre-gather some ICE candidates
            }
          });
            
            peer.on('signal', signal => {
              console.log('Generated signal for user:', data.userId, signal);
              console.time('signaling-' + data.userId);
              socket.emit('voice_signal', {
                channelId: activeVoiceChannel.id,
                targetUserId: data.userId,
                signal
              });
            });
            
            peer.on('stream', stream => {
              console.log('Received stream from user:', data.userId, stream);
              // Create audio element for the remote stream
              createAudioElement(data.userId, stream);
            });
            
            // Add error handling
            peer.on('error', err => {
              console.error('Peer connection error (initiator):', err);
            });
            
            // Monitor ICE connection state
            peer.on('iceStateChange', state => {
              console.log('ICE state change (initiator):', state);
            });
            
            // Monitor connection state with timing
            peer.on('connect', () => {
              console.timeEnd('signaling-' + data.userId);
              const connectionTime = performance.now() - connectionStartTime;
              console.log('Peer connection established (initiator) with user:', data.userId, 'in', connectionTime.toFixed(0), 'ms');
            });
            
            // Add to peers state
            setPeers(prev => ({
              ...prev,
              [data.userId]: peer
            }));
          } catch (err) {
            console.error('Error creating peer connection (initiator):', err);
          }
      }
    };

    
    
    // Handle when a user leaves a voice channel
    const handleUserLeftVoice = (data) => {
      console.log('User left voice:', data);
      
      // Play leave sound if this is our active channel and we're not the one leaving
      if (activeVoiceChannel && 
          activeVoiceChannel.id === data.channelId && 
          data.userId !== user.id &&
          leaveSoundRef.current) {
        // Reset the audio to the beginning and play it
        leaveSoundRef.current.currentTime = 0;
        leaveSoundRef.current.play().catch(err => {
          console.error('Error playing leave sound:', err);
        });
      }
      
      // Remove from participants list
      setVoiceParticipants(prev => 
        prev.filter(p => !(p.user_id === data.userId && p.channel_id === data.channelId))
      );
      
      // If we have a peer connection to this user, clean it up
      if (peers[data.userId]) {
        // Use our helper function to safely destroy the peer
        safelyDestroyPeer(peers[data.userId], data.userId, destroyedPeersRef);
        
        // Remove the audio element
        const audioElement = document.getElementById(`remote-audio-${data.userId}`);
        if (audioElement) {
          try {
            audioElement.remove();
          } catch (err) {
            console.error('Error removing audio element:', err);
          }
        }
        
        // Remove from peers state with a small delay to allow cleanup
        setTimeout(() => {
          setPeers(prev => {
            const newPeers = { ...prev };
            delete newPeers[data.userId];
            return newPeers;
          });
        }, 200);
      }
    };
    
    // Handle voice participants list
    const handleVoiceParticipants = (data) => {
      if (data.channelId === activeVoiceChannel?.id) {
        setVoiceParticipants(data.participants);
      }
    };
    
    // Handle WebRTC signaling
    const handleVoiceSignal = (data) => {
      console.log('Received voice signal:', data);
      
      // If the signal is for us and we're in the same channel
      if (data.channelId === activeVoiceChannel?.id && data.fromUserId !== user.id) {
        
        // If we already have a peer for this user and it's not in the destroyed list
        if (peers[data.fromUserId] && !destroyedPeersRef.current.has(data.fromUserId)) {
          console.log('Signaling existing peer for user:', data.fromUserId);
          try {
            peers[data.fromUserId].signal(data.signal);
          } catch (err) {
            console.error('Error signaling peer, it may have been destroyed:', err);
            // Mark this peer as destroyed to prevent future signaling attempts
            destroyedPeersRef.current.add(data.fromUserId);
          }
        } else {
          // Check if we have a valid stream
          if (!localStream || !localStream.active) {
            console.error('Cannot create peer connection: localStream is not available or not active');
            return;
          }
          
          // Create a new peer with optimized settings
          console.log('Creating new non-initiator peer for user:', data.fromUserId);
          
          try {
            // Track connection start time for performance monitoring
            const connectionStartTime = performance.now();
            
            const peer = new SimplePeer({
              initiator: false,
              trickle: true, // Enable trickle ICE for faster connections
              stream: localStream,
              config: {
                iceServers: [
                  { urls: 'stun:stun.l.google.com:19302' },
                  { urls: 'stun:stun1.l.google.com:19302' },
                  { urls: 'stun:stun2.l.google.com:19302' },
                  { urls: 'stun:stun3.l.google.com:19302' },
                  { urls: 'stun:stun4.l.google.com:19302' }
                ],
                iceCandidatePoolSize: 10 // Pre-gather some ICE candidates
              }
            });
              
              peer.on('signal', signal => {
                console.log('Generated response signal for user:', data.fromUserId, signal);
                console.time('signaling-' + data.fromUserId);
                socket.emit('voice_signal', {
                  channelId: activeVoiceChannel.id,
                  targetUserId: data.fromUserId,
                  signal
                });
              });
              
              peer.on('stream', stream => {
                console.log('Received stream from user:', data.fromUserId, stream);
                // Create audio element for the remote stream
                createAudioElement(data.fromUserId, stream);
              });
              
              // Add error handling
              peer.on('error', err => {
                console.error('Peer connection error (non-initiator):', err);
              });
              
              // Monitor ICE connection state
              peer.on('iceStateChange', state => {
                console.log('ICE state change (non-initiator):', state);
              });
              
              // Monitor connection state with timing
              peer.on('connect', () => {
                console.timeEnd('signaling-' + data.fromUserId);
                const connectionTime = performance.now() - connectionStartTime;
                console.log('Peer connection established (non-initiator) with user:', data.fromUserId, 'in', connectionTime.toFixed(0), 'ms');
              });
              
              // Signal with the received data
              peer.signal(data.signal);
              
              // Add to peers state
              setPeers(prev => ({
                ...prev,
                [data.fromUserId]: peer
              }));
            } catch (err) {
              console.error('Error creating peer connection (non-initiator):', err);
            }
        }
      }
    };
    
    // Handle mute status changes
    const handleUserMuteChanged = (data) => {
      setVoiceParticipants(prev => 
        prev.map(p => 
          p.user_id === data.userId && p.channel_id === data.channelId
            ? { ...p, is_muted: data.isMuted }
            : p
        )
      );
    };
    
    socket.on('user_joined_voice', handleUserJoinedVoice);
    socket.on('user_left_voice', handleUserLeftVoice);
    socket.on('voice_participants', handleVoiceParticipants);
    socket.on('voice_signal', handleVoiceSignal);
    socket.on('user_mute_changed', handleUserMuteChanged);
    
    return () => {
      socket.off('user_joined_voice', handleUserJoinedVoice);
      socket.off('user_left_voice', handleUserLeftVoice);
      socket.off('voice_participants', handleVoiceParticipants);
      socket.off('voice_signal', handleVoiceSignal);
      socket.off('user_mute_changed', handleUserMuteChanged);
    };
  }, [socket, activeVoiceChannel, localStream, peers, user]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleMessageChange = (e) => {
    const value = e.target.value;
    if (value.length <= MAX_CHARS) {
      setNewMessage(value);
      setCharCount(value.length);
      
      // Save draft message to localStorage
      if (activeRoom) {
        localStorage.setItem(`chat_draft_${nodeId}_${activeRoom.id}`, value);
      }
    }
  };

    // Command execution function
    const executeCommand = async (parsedCommand) => {
      const { command, args } = parsedCommand;
      
      // Handle different commands
      switch (command) {
        case 'clear':
        case 'delete':
          // Check if user is admin
          if (!user?.is_admin) {
            // Add system message that only admins can use this command
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: 'Command failed: Admin privileges required',
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
            return;
          }
          
          try {
            let count = 'all';
            if (args.length > 0) {
              count = args[0].toLowerCase() === 'all' ? 'all' : parseInt(args[0], 10);
              if (count !== 'all' && (isNaN(count) || count <= 0)) {
                setMessages(prev => [...prev, {
                  id: 'system-' + Date.now(),
                  username: 'System',
                  message: 'Invalid count. Usage: /clear [count|all]',
                  created_at: new Date().toISOString(),
                  isSystem: true
                }]);
                return;
              }
            }
            
            // Call the API to delete messages
            const token = localStorage.getItem('auth_token');
            const response = await axios.delete(
              `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages?count=${count}`,
              { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // Add system message about successful deletion
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: `${response.data.count} messages have been deleted from this channel.`,
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
          } catch (error) {
            console.error('Failed to clear messages:', error);
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: `Failed to clear messages: ${error.response?.data?.message || error.message}`,
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
          }
          break;
          
        // Add other commands here in the future if needed
        
        default:
          // Unknown command
          setMessages(prev => [...prev, {
            id: 'system-' + Date.now(),
            username: 'System',
            message: `Unknown command: /${command}`,
            created_at: new Date().toISOString(),
            isSystem: true
          }]);
      }
    };

    const handleSendMessage = async (e) => {
      e.preventDefault();
      if (!newMessage.trim() || !activeRoom) return;
  
      // Check if this is a command
      const parsedCommand = parseCommand(newMessage);
      if (parsedCommand) {
        // This is a command, handle it with executeCommand
        await executeCommand(parsedCommand);
        setNewMessage('');
        setCharCount(0);
        // Clear the draft message from localStorage
        localStorage.removeItem(`chat_draft_${nodeId}_${activeRoom.id}`);
        return;
      }
  
      // This is a regular message, send it to the server
      try {
        const token = localStorage.getItem('auth_token');
        await axios.post(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
          { message: newMessage },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setNewMessage('');
        setCharCount(0);
        // Clear the draft message from localStorage
        localStorage.removeItem(`chat_draft_${nodeId}_${activeRoom.id}`);
      } catch (error) {
        console.error('Failed to send message:', error);
      }
    };

  const handleCreateRoom = async (e) => {
    e.preventDefault();
    if (!newRoomName.trim()) return;

    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms`,
        { name: newRoomName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setRooms((prev) => [response.data, ...prev]);
      setNewRoomName('');
      setActiveRoom(response.data);
    } catch (error) {
      console.error('Failed to create room:', error);
    }
  };
  
  // Add new function to handle message deletion
  const handleDeleteMessage = async (messageId) => {
    try {
      const token = localStorage.getItem('auth_token');
      const endpoint = API_CONFIG.ENDPOINTS.CHAT_DELETE_MESSAGE.replace(':id', messageId);
      await axios.delete(
        `${API_CONFIG.BASE_URL}${endpoint}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      // The message will be removed from the UI when the socket event is received
      setActiveMenu(null); // Close the menu
    } catch (error) {
      console.error('Failed to delete message:', error);
    }
  };

  // Toggle menu function
  const toggleMenu = (messageId) => {
    setActiveMenu(activeMenu === messageId ? null : messageId);
  };

  const joinRoom = async (room) => {
    try {
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${room.id}/join`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setActiveRoom(room);
    } catch (error) {
      console.error('Failed to join room:', error);
    }
  };
  
  // Voice chat functions
  const createVoiceChannel = async (e) => {
    e.preventDefault();
    if (!newVoiceChannelName.trim() || !activeRoom) return;
    
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/voice-channels`,
        { name: newVoiceChannelName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setVoiceChannels(prev => [response.data, ...prev]);
      setNewVoiceChannelName('');
    } catch (error) {
      console.error('Failed to create voice channel:', error);
    }
  };
  
  const joinVoiceChannel = async (channel) => {
    // If already in a voice channel, leave it first
    if (activeVoiceChannel) {
      await leaveVoiceChannel();
    }
    
    try {
      // Request microphone access
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      
      // Verify we have an active stream with audio tracks
      if (!stream || !stream.active || stream.getAudioTracks().length === 0) {
        console.error('Failed to get active audio stream');
        alert('Could not access microphone. Please check your permissions.');
        return;
      }
      
      // Set initial mute state
      stream.getAudioTracks()[0].enabled = !isMuted;
      
      // Store the stream
      setLocalStream(stream);
      
      // Set the active voice channel
      setActiveVoiceChannel(channel);
      
      // Join the channel via socket
      socket.emit('join_voice', { 
        channelId: channel.id,
        isMuted
      });
      
      console.log(`Joined voice channel: ${channel.name}`);
    } catch (error) {
      console.error('Failed to join voice channel:', error);
      alert('Could not access microphone. Please check your permissions.');
    }
  };
  
  const leaveVoiceChannel = async () => {
    if (!activeVoiceChannel || !socket) return;
    
    // Notify server
    socket.emit('leave_voice', activeVoiceChannel.id);
    
    // Clean up peer connections safely using our helper function
    try {
      // Get keys (user IDs) from the peers object to use with safelyDestroyPeer
      Object.entries(peers).forEach(([userId, peer]) => {
        safelyDestroyPeer(peer, userId, destroyedPeersRef);
      });
    } catch (err) {
      console.error('Error cleaning up peer connections:', err);
    }
    
    // Clear the destroyed peers set when leaving a channel
    destroyedPeersRef.current = new Set();
    
    // Delay setting peers to empty to allow cleanup to complete
    setTimeout(() => {
      setPeers({});
    }, 300);
    
    // Remove remote audio elements
    document.querySelectorAll('[id^="remote-audio-"]').forEach(el => {
      try {
        el.remove();
      } catch (err) {
        console.error('Error removing audio element:', err);
      }
    });
    
    // Stop local stream
    if (localStream) {
      try {
        localStream.getTracks().forEach(track => track.stop());
      } catch (err) {
        console.error('Error stopping local stream tracks:', err);
      }
      setLocalStream(null);
    }
    
    // Clear active voice channel
    setActiveVoiceChannel(null);
    setVoiceParticipants([]);
    
    console.log('Left voice channel');
  };
  
  const toggleMute = () => {
    if (!localStream) return;
    
    // Toggle mute state
    const newMuteState = !isMuted;
    setIsMuted(newMuteState);
    
    // Update audio track
    localStream.getAudioTracks()[0].enabled = !newMuteState;
    
    // Notify others
    if (socket && activeVoiceChannel) {
      socket.emit('voice_mute_toggle', {
        channelId: activeVoiceChannel.id,
        isMuted: newMuteState
      });
    }
  };

  return (
    <div className="flex h-full">
      {/* Room sidebar */}
      <div className="w-1/9 max-w-[20%] min-w-[10%] bg-stone-900 border-r border-stone-700 flex flex-col">
        {/* Text channels */}
        <div className="p-2 border-b border-stone-700">
          <h3 className="text-teal-400 font-medium text-sm">Text Channels</h3>
        </div>
        <div className="flex-1 overflow-y-auto">
          {rooms.map((room) => (
            <div
              key={room.id}
              className={`text-sm p-2 cursor-pointer hover:bg-stone-700 ${
                activeRoom?.id === room.id ? 'bg-stone-800' : ''
              }`}
              onClick={() => joinRoom(room)}
            >
              <div className="text-white">{room.name}</div>
            </div>
          ))}
        </div>
        
        {/* Voice channels
        {activeRoom && (
          <>
            <div className="p-2 border-t border-b border-stone-700 flex justify-between items-center">
              <h3 className="text-teal-400 font-medium text-sm">Voice Channels</h3>
            </div>   
            <div className="overflow-y-auto">
              {voiceChannels.map((channel) => (
                <div
                  key={channel.id}
                  className={`text-sm p-2 cursor-pointer hover:bg-stone-700 ${
                    activeVoiceChannel?.id === channel.id ? 'bg-stone-800' : ''
                  }`}
                >
                  <div 
                    className="text-white flex items-center justify-between"
                    onClick={() => activeVoiceChannel?.id === channel.id ? leaveVoiceChannel() : joinVoiceChannel(channel)}
                  >
                    <span>{channel.name}</span>
                    {activeVoiceChannel?.id === channel.id ? (
                      <PhoneOff size={16} className="text-red-500" />
                    ) : (
                      <Phone size={16} className="text-teal-400" />
                    )}
                  </div> 
                  
                  {voiceParticipants.length > 0 && channel.id === activeVoiceChannel?.id && (
                    <div className="mt-1 pl-2 border-l border-stone-700">
                      {voiceParticipants.map(participant => (
                        <div key={participant.user_id} className="flex items-center text-xs text-stone-400 py-1">
                          {participant.is_muted ? (
                            <MicOff size={12} className="mr-1 text-red-500" />
                          ) : (
                            <Mic size={12} className={`mr-1 ${speakingUsers.has(participant.user_id) ? 'text-teal-400 animate-pulse' : 'text-green-500'}`} />
                          )}
                          <span 
                            className={`${speakingUsers.has(participant.user_id) && !participant.is_muted ? 'text-teal-400 font-medium animate-pulse' : ''}`}
                            style={{
                              textShadow: speakingUsers.has(participant.user_id) && !participant.is_muted ? '0 0 10px rgba(20, 184, 166, 0.5)' : 'none'
                            }}
                          >
                            {participant.username}
                          </span>
                          {participant.user_id === user.id && (
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                toggleMute();
                              }}
                              className="ml-2 text-stone-400 hover:text-teal-400"
                              title={isMuted ? "Unmute" : "Mute"}
                            >
                              {isMuted ? <MicOff size={12} /> : <Mic size={12} />}
                            </button>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </>
        )}*/}
      </div>

      {/* Chat area */}
      <div className="flex-1 flex flex-col">
        {activeRoom ? (
          <>
            <div className="p-2 bg-stone-900 border-b border-stone-700 font-mono text-sm">
              <h3 className="text-teal-400 font-medium">{activeRoom.name}</h3>
            </div>
            <div className="flex-1 overflow-y-auto p-4 bg-stone-900">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className="mb-1"
                >
                  <div
                    className="hover:bg-stone-800 inline-block rounded-lg px-4 py-2 w-[100%] break-all overflow-wrap break-word hyphens-auto overflow-hidden whitespace-pre-wrap relative text-white"
                    style={{ wordBreak: 'break-word', overflowWrap: 'break-word' }}
                  >
                    <div className="text-teal-400 flex font-medium text-s mb-1">
                      {msg.username}
                      <div className="text-xs text-white opacity-75 mt-1 ml-3">
                        {(() => {
                          // Ensure UTC interpretation by appending 'Z' if not already present
                          const timestamp = msg.created_at.endsWith('Z') ? 
                            msg.created_at : 
                            msg.created_at + 'Z';
                          
                          const msgDate = new Date(timestamp);
                          
                          return msgDate.toLocaleTimeString('en-US', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: 'numeric',
                            minute: '2-digit',
                            timeZoneName: 'short',
                            hour12: false
                          });
                        })()}
                      </div>
                      
                      {/* Admin controls - only show if user is admin */}
                      {user?.is_admin && (
                        <div className="ml-auto">
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteMessage(msg.id);
                            }}
                            className="text-stone-400 hover:text-stone-300 focus:outline-none"
                            title="Delete message"
                          >
                            <Trash size={16} />
                          </button>
                        </div>
                      )}
                    </div>
                    <div>{msg.message}</div>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            <form
              onSubmit={handleSendMessage}
              className="p-2 bg-stone-900 border-t border-stone-700 flex"
            >
              <div className="flex-1 flex flex-col">
                <input
                  type="text"
                  value={newMessage}
                  onChange={handleMessageChange}
                  className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none focus:ring-1 focus:ring-teal-400"
                  maxLength={MAX_CHARS}
                />
              </div>
            </form>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-stone-900">
            <div className="text-stone-500">
              Select a channel to start chatting
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatWindow;

================
File: windows/DiceRollGif.jsx
================
import React, { useEffect, useRef, useState } from 'react';

/**
 * Component to display dice roll GIF with animation completion detection
 */
const DiceRollGif = ({ src, onAnimationComplete }) => {
  const imgRef = useRef(null);
  const [isLoaded, setIsLoaded] = useState(false);
  
  // When the image loads, start tracking animation completion
  const handleImageLoad = () => {
    setIsLoaded(true);
  };
  
  // Effect to handle animation completion
  useEffect(() => {
    if (!isLoaded || !imgRef.current) return;
    
    // Create a temporary canvas to analyze the GIF
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Set a timeout that slightly exceeds typical GIF durations
    // This is a fallback in case we can't detect the exact animation end
    const timeoutId = setTimeout(() => {
      onAnimationComplete();
    }, 3000); // 3 seconds should be enough for most dice roll animations
    
    // For a more accurate approach (future improvement):
    // We could load the GIF via a GIF parsing library to get exact duration
    // Or track the animation via requestAnimationFrame and pixel comparison

    return () => {
      clearTimeout(timeoutId);
    };
  }, [isLoaded, onAnimationComplete]);
  
  return (
    <img 
      ref={imgRef}
      src={src} 
      alt="Rolling dice" 
      className="inline-block max-w-full h-32"
      onLoad={handleImageLoad}
    />
  );
};

export default DiceRollGif;

================
File: windows/explorer/api/fileOperations.js
================
import API_CONFIG from '../../../../config/api';

// Function to fetch public directory contents
export const fetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : publicPath;
    
    // Fetch public directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`Failed to load public files: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || [],
      isPublic: true
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    console.error('Error fetching public directory contents:', error);
    return {
      files: [],
      error: error.message || 'Failed to load public files. Please try again.'
    };
  }
};

// Function to fetch public file content
export const fetchPublicFileContent = async (filePath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch public file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    const data = await response.json();
    console.log(`[DEBUG] Public file fetch - Content received length: ${data.content?.length || 0} characters`);
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    console.error('[DEBUG] Error fetching public file content:', error);
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to fetch private directory contents from the server (admin only)
export const fetchDirectoryContents = async (path = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : path;
    
    // Fetch directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view files.');
      } else {
        throw new Error(`Failed to load files: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || []
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    return {
      files: [],
      error: error.message || 'Failed to load files. Please try again.'
    };
  }
};

// Function to fetch file content
export const fetchFileContent = async (filePath) => {
  console.log(`[DEBUG] fetchFileContent called with path: ${filePath}`);
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view file content.');
      } else {
        const errorText = await response.text();
        throw new Error(`Failed to load file content: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to save file content
export const saveFileContent = async (filePath, content) => {

  
  try {
    // Check if filePath is valid
    if (!filePath || filePath.trim() === '') {
      throw new Error('No file selected. Please select a file first.');
    }
    
    // Special handling for .map files to ensure rotation is included
    let contentToSave = content;
    if (filePath?.endsWith('.map') && typeof content === 'string') {
      // For map files, parse the JSON, process it, and re-stringify it
      try {
        const mapData = JSON.parse(content);
        
        // Ensure all cells have rotation property
        if (mapData.layers && Array.isArray(mapData.layers)) {
          mapData.layers.forEach(layer => {
            if (layer.cells && Array.isArray(layer.cells)) {
              layer.cells = layer.cells.map(cell => {
                // If rotation doesn't exist, add it with default value of 0
                if (cell.rotation === undefined) {
                  return { ...cell, rotation: 0 };
                }
                // Ensure rotation is a number
                if (typeof cell.rotation !== 'number') {
                  return { ...cell, rotation: Number(cell.rotation) };
                }
                return cell;
              });
            }
          });
        }
        
        // Use a custom replacer to guarantee rotation values are included
        contentToSave = JSON.stringify(mapData, (key, value) => {
          if (key === 'rotation') {
            return value === undefined ? 0 : Number(value);
          }
          return value;
        }, 2);
        
      } catch (parseError) {
        // If we can't parse, just use the original content
        contentToSave = content;
      }
    }
    
    // Create request body
    const requestBody = JSON.stringify({
      path: filePath,
      content: contentToSave
    });
    
    
    // Make the API request
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      },
      body: requestBody
    });
    
    
    const responseData = await response.json();
    
    if (!response.ok) {
      throw new Error(responseData.message || `Failed to save file: ${response.statusText}`);
    }
    
    console.log(`[DEBUG] saveFileContent - Success!`);
    return { 
      error: null,
      size: responseData.size,
      modified: responseData.modified
    };
  } catch (error) {
    console.error('[DEBUG] Error saving file:', error);
    return { error: error.message || 'Error saving file' };
  }
};

// Simple path join function for browser environment
const joinPaths = (...parts) => {
  // Filter out empty parts and normalize
  const normalized = parts.map(part => {
    if (part === undefined || part === null) return '';
    // Remove leading/trailing slashes
    return part.toString().replace(/^\/+|\/+$/g, '');
  }).filter(Boolean);
  
  // Join with slashes and add leading slash
  return '/' + normalized.join('/');
};

// Function to create a new file or folder
export const createNewItem = async (activeTab, activeFolderPath, newItemName, createType) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Determine if we're creating in the public folder or private folder
    const isPublicFolder = activeTab === 'public';
    
    // Construct the full path for the new item
    let newItemPath;
    if (isPublicFolder) {
      // For public folder, prefix with /public if not already included
      const publicPrefix = activeFolderPath.startsWith('/public') ? '' : '/public';
      // Remove any leading slash from activeFolderPath if it exists and if using publicPrefix
      const folderPath = publicPrefix && activeFolderPath.startsWith('/') 
        ? activeFolderPath.substring(1) 
        : activeFolderPath;
      newItemPath = joinPaths(publicPrefix, folderPath, newItemName.trim());
    } else {
      // For private folder (admin only)
      newItemPath = joinPaths(activeFolderPath, newItemName.trim());
    }
    
    // Create the new file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CREATE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        path: newItemPath,
        type: createType,
        content: createType === 'file' ? '' : undefined
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to create ${createType}: ${response.statusText}`);
    }
    
    return { 
      success: true, 
      path: newItemPath,
      error: null
    };
  } catch (error) {
    console.error(`Error creating ${createType}:`, error);
    return { 
      success: false, 
      path: null,
      error: error.message || `Failed to create ${createType}` 
    };
  }
};

// Function to rename a file or folder
export const renameItem = async (itemPath, newName) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Rename the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_RENAME}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        oldPath: itemPath,
        newName: newName.trim()
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to rename: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error renaming:', error);
    return { success: false, error: error.message || 'Failed to rename' };
  }
};

// Function to delete a file or folder
export const deleteItem = async (itemPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Delete the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_DELETE}?path=${encodeURIComponent(itemPath)}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to delete: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error deleting:', error);
    return { success: false, error: error.message || 'Failed to delete' };
  }
};

// Function to move a file or folder
// Function to get storage usage statistics
export const getStorageStats = async () => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch storage stats from the server
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STORAGE_STATS}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`Failed to load storage stats: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    return {
      quota: data.quota,
      used: data.used,
      available: data.available,
      unlimited: data.unlimited,
      error: null
    };
  } catch (error) {
    console.error('Error fetching storage stats:', error);
    return {
      quota: 0,
      used: 0,
      available: 0,
      unlimited: false,
      error: error.message || 'Failed to load storage stats'
    };
  }
};

export const moveItem = async (sourcePath, destinationPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Call the API to move the file
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        sourcePath,
        destinationPath
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to move: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error moving item:', error);
    return { success: false, error: error.message || 'Failed to move item' };
  }
};

================
File: windows/explorer/components/canvas/CanvasContainer.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  generateId, 
  isPointInNode, 
  createTextNode, 
  createEdge,
  calculateBestConnectionSides,
  getConnectionPoints,
  drawConnection,
  getCanvasColor
} from '../../utils/canvasUtils';
import TextNode from './TextNode';

/**
 * CanvasContainer handles the infinite canvas, viewport, and interactions
 */
const CanvasContainer = ({ 
  canvasData, 
  onChange,
  readOnly = false
}) => {
  // State for viewport and interaction
  const [scale, setScale] = useState(1);
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const [isPanning, setIsPanning] = useState(false);
  const [panStart, setPanStart] = useState({ x: 0, y: 0 });
  const [selectedNodeIds, setSelectedNodeIds] = useState([]);
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStart, setConnectionStart] = useState(null);
  const [hoveredNodeId, setHoveredNodeId] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [draggedNodeIds, setDraggedNodeIds] = useState([]);

  // Refs for canvas elements
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  const interactionLayerRef = useRef(null);

  // Get the currently selected node
  const selectedNode = canvasData.nodes.find(node => node.id === selectedNodeIds[0]);

  // Draw the canvas with nodes and edges
  const drawCanvas = useCallback(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const { width, height } = canvas;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Apply viewport transformation
    ctx.save();
    ctx.translate(offset.x, offset.y);
    ctx.scale(scale, scale);
    
    // Draw background grid (optional)
    ctx.strokeStyle = '#2a2a2a';
    ctx.lineWidth = 1 / scale;
    
    const gridSize = 20;
    const startX = Math.floor(-offset.x / scale / gridSize) * gridSize;
    const startY = Math.floor(-offset.y / scale / gridSize) * gridSize;
    const endX = Math.ceil((width - offset.x) / scale / gridSize) * gridSize;
    const endY = Math.ceil((height - offset.y) / scale / gridSize) * gridSize;
    
    // Draw vertical grid lines
    for (let x = startX; x <= endX; x += gridSize) {
      ctx.beginPath();
      ctx.moveTo(x, startY);
      ctx.lineTo(x, endY);
      ctx.stroke();
    }
    
    // Draw horizontal grid lines
    for (let y = startY; y <= endY; y += gridSize) {
      ctx.beginPath();
      ctx.moveTo(startX, y);
      ctx.lineTo(endX, y);
      ctx.stroke();
    }
    
    // Draw edges
    canvasData.edges.forEach(edge => {
      const sourceNode = canvasData.nodes.find(n => n.id === edge.fromNode);
      const targetNode = canvasData.nodes.find(n => n.id === edge.toNode);
      
      if (sourceNode && targetNode) {
        // Get connection points
        const points = getConnectionPoints(
          sourceNode, 
          targetNode, 
          edge.fromSide, 
          edge.toSide
        );
        
        // Draw the connection
        drawConnection(
          ctx, 
          points.source, 
          points.target, 
          getCanvasColor(edge.color),
          edge.fromEnd === 'arrow',
          edge.toEnd === 'arrow'
        );
      }
    });
    
    // Restore the context
    ctx.restore();
  }, [canvasData, offset, scale]);

  // Resize canvas to fit container
  const resizeCanvas = useCallback(() => {
    if (!containerRef.current || !canvasRef.current || !interactionLayerRef.current) return;
    
    const container = containerRef.current;
    const canvas = canvasRef.current;
    const interactionLayer = interactionLayerRef.current;
    
    // Set canvas size to match container
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    interactionLayer.width = container.clientWidth;
    interactionLayer.height = container.clientHeight;
    
    // Redraw canvas
    drawCanvas();
  }, [drawCanvas]);

  // Initialize and set up event listeners
  useEffect(() => {
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, [resizeCanvas]);

  // Redraw canvas when data changes
  useEffect(() => {
    drawCanvas();
  }, [canvasData, drawCanvas, selectedNodeIds, scale, offset]);

  // Handle mouse wheel for zooming
  const handleWheel = (e) => {
    e.preventDefault();
    
    const { deltaY } = e;
    const direction = deltaY > 0 ? -1 : 1;
    
    // Calculate zoom
    const factor = 0.1;
    const newScale = Math.max(0.1, scale * (1 + direction * factor));
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Calculate new offset to zoom around mouse position
    const newOffsetX = mouseX - (mouseX - offset.x) * (newScale / scale);
    const newOffsetY = mouseY - (mouseY - offset.y) * (newScale / scale);
    
    setScale(newScale);
    setOffset({ x: newOffsetX, y: newOffsetY });
  };

  // Handle mouse down for panning and selection
  const handleMouseDown = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Check if clicked on a node
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    if (nodeUnderMouse) {
      // Select the node
      if (e.shiftKey) {
        // Add to selection if holding shift
        setSelectedNodeIds(prev => 
          prev.includes(nodeUnderMouse.id) 
            ? prev.filter(id => id !== nodeUnderMouse.id) 
            : [...prev, nodeUnderMouse.id]
        );
      } else if (!selectedNodeIds.includes(nodeUnderMouse.id)) {
        // Replace selection
        setSelectedNodeIds([nodeUnderMouse.id]);
      }
      
      // Prepare for dragging
      setIsDragging(true);
      setDraggedNodeIds(selectedNodeIds.includes(nodeUnderMouse.id) 
        ? selectedNodeIds 
        : [nodeUnderMouse.id]
      );
    } else {
      // Start panning
      setIsPanning(true);
      setPanStart({ x: mouseX, y: mouseY });
      
      // Clear selection unless shift is held
      if (!e.shiftKey) {
        setSelectedNodeIds([]);
      }
    }
  };

  // Handle mouse move for panning and dragging
  const handleMouseMove = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Handle panning
    if (isPanning) {
      const deltaX = mouseX - panStart.x;
      const deltaY = mouseY - panStart.y;
      
      setOffset(prev => ({
        x: prev.x + deltaX,
        y: prev.y + deltaY
      }));
      
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Handle dragging
    if (isDragging && draggedNodeIds.length > 0 && !readOnly) {
      // Calculate the delta from last mouse position
      const lastMousePos = {
        x: (panStart.x - offset.x) / scale,
        y: (panStart.y - offset.y) / scale
      };
      
      const deltaX = canvasX - lastMousePos.x;
      const deltaY = canvasY - lastMousePos.y;
      
      // Update node positions
      const updatedNodes = canvasData.nodes.map(node => {
        if (draggedNodeIds.includes(node.id)) {
          return {
            ...node,
            x: node.x + deltaX,
            y: node.y + deltaY
          };
        }
        return node;
      });
      
      // Update canvas data
      onChange({
        ...canvasData,
        nodes: updatedNodes
      });
      
      // Update pan start
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Check for node under mouse for hover effect
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    setHoveredNodeId(nodeUnderMouse?.id || null);
  };

  // Handle mouse up to stop panning and dragging
  const handleMouseUp = () => {
    setIsPanning(false);
    setIsDragging(false);
    setDraggedNodeIds([]);
  };

  // Handle node selection
  const handleNodeSelect = (nodeId) => {
    setSelectedNodeIds([nodeId]);
  };

  // Handle node text change
  const handleNodeTextChange = (nodeId, text) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          text
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node resize
  const handleNodeResize = (nodeId, width, height) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          width,
          height
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node move
  const handleNodeMove = (nodeId, x, y) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          x,
          y
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Add a new text node at a specific position
  const addTextNode = (x, y, text = 'New note') => {
    if (readOnly) return;
    
    // Convert screen coordinates to canvas coordinates
    const canvasX = (x - offset.x) / scale;
    const canvasY = (y - offset.y) / scale;
    
    // Create a new node
    const newNode = createTextNode(canvasX, canvasY, text);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      nodes: [...canvasData.nodes, newNode]
    });
    
    // Select the new node
    setSelectedNodeIds([newNode.id]);
    
    // Start editing the new node
    setEditingNodeId(newNode.id);
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const connectNodes = (sourceId, targetId) => {
    if (readOnly) return;
    
    // Find the nodes
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) return;
    
    // Calculate best connection sides
    const { fromSide, toSide } = calculateBestConnectionSides(sourceNode, targetNode);
    
    // Create a new edge
    const newEdge = createEdge(sourceId, targetId, fromSide, toSide);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      edges: [...canvasData.edges, newEdge]
    });
    
    return newEdge.id;
  };

  // Delete selected nodes and their connections
  const deleteSelected = () => {
    if (readOnly || selectedNodeIds.length === 0) return;
    
    // Filter out selected nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !selectedNodeIds.includes(node.id)
    );
    
    // Filter out edges connected to deleted nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !selectedNodeIds.includes(edge.fromNode) && 
      !selectedNodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    onChange({
      ...canvasData,
      nodes: updatedNodes,
      edges: updatedEdges
    });
    
    // Clear selection
    setSelectedNodeIds([]);
  };

  // Start editing a node
  const startNodeEditing = (nodeId) => {
    setEditingNodeId(nodeId);
  };

  // Stop editing a node
  const stopNodeEditing = () => {
    setEditingNodeId(null);
  };

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-full overflow-hidden bg-stone-900"
      tabIndex={0} // Make container focusable for keyboard shortcuts
      onKeyDown={(e) => {
        // Delete key to remove selected nodes
        if (e.key === 'Delete' && !readOnly) {
          deleteSelected();
        }
      }}
    >
      {/* Canvas for rendering edges */}
      <canvas 
        ref={canvasRef}
        className="absolute top-0 left-0 w-full h-full"
      />
      
      {/* Interaction layer */}
      <canvas 
        ref={interactionLayerRef}
        className="absolute top-0 left-0 w-full h-full"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onDoubleClick={(e) => {
          if (readOnly) return;
          
          // Get mouse position
          const rect = canvasRef.current.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          // Add a new node at this position
          addTextNode(mouseX, mouseY);
        }}
      />
      
      {/* Node elements */}
      <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
        {canvasData.nodes.map(node => (
          node.type === 'text' && (
            <TextNode
              key={node.id}
              node={node}
              selected={selectedNodeIds.includes(node.id)}
              onSelect={handleNodeSelect}
              onChange={handleNodeTextChange}
              onResize={handleNodeResize}
              onMove={handleNodeMove}
              scale={scale}
              isEditing={editingNodeId === node.id}
              onStartEditing={startNodeEditing}
              onStopEditing={stopNodeEditing}
            />
          )
        ))}
      </div>
      
      {/* Controls */}
      <div className="absolute bottom-4 right-4 flex flex-col gap-2 bg-stone-800 p-2 rounded shadow">
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(scale + 0.1)}
        >
          +
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(Math.max(0.1, scale - 0.1))}
        >
          -
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => {
            // Reset view
            setScale(1);
            setOffset({ x: 0, y: 0 });
          }}
        >
          Reset
        </button>
      </div>
    </div>
  );
};

export default CanvasContainer;

================
File: windows/explorer/components/canvas/CanvasEditor.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { 
  createEmptyCanvas, 
  createTextNode, 
  createEdge, 
  generateId 
} from '../../utils/canvasUtils';
import CanvasContainer from './CanvasContainer';
import { 
  Plus, 
  Save, 
  Trash2, 
  Type,
  Link as LinkIcon,
  ArrowRight
} from 'lucide-react';

/**
 * Canvas Editor component that implements the JSONCanvas format
 * This is the main component for editing .canvas files
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasData, setCanvasData] = useState(createEmptyCanvas());
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeText, setNewNodeText] = useState('');
  const [showConnectionCreator, setShowConnectionCreator] = useState(false);
  const [connectionNodes, setConnectionNodes] = useState({ source: '', target: '' });

  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const parsed = JSON.parse(fileContent);
        
        // Check if it has the basic JSONCanvas structure
        if (parsed.nodes || parsed.edges) {
          setCanvasData({
            nodes: parsed.nodes || [],
            edges: parsed.edges || []
          });
          
          // Extract canvas name from file path
          if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          setCanvasData(createEmptyCanvas());
          console.warn('Invalid canvas format, creating new canvas');
        }
        
        setError(null);
      } else {
        // Create a new canvas if no content
        setCanvasData(createEmptyCanvas());
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      setCanvasData(createEmptyCanvas());
    } finally {
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);

  // Save canvas to file
  const handleSaveCanvas = useCallback(() => {
    if (!selectedFile) return;
    
    try {
      // Set status to saving
      setSaveStatus('saving');
      
      // Convert canvasData to proper format for saving
      // Make sure to remove any runtime-only properties
      const saveData = {
        nodes: canvasData.nodes.map(node => ({
          id: node.id,
          type: node.type,
          x: node.x,
          y: node.y,
          width: node.width,
          height: node.height,
          text: node.text,
          color: node.color
        })),
        edges: canvasData.edges.map(edge => ({
          id: edge.id,
          fromNode: edge.fromNode,
          toNode: edge.toNode,
          fromSide: edge.fromSide,
          toSide: edge.toSide,
          fromEnd: edge.fromEnd,
          toEnd: edge.toEnd,
          color: edge.color
        }))
      };
      
      // Serialize to JSON
      const jsonData = JSON.stringify(saveData, null, 2);
      
      // Call parent onSave function
      onSave(jsonData);
      
      // Update status
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  }, [canvasData, selectedFile, onSave]);

  // Auto-save when canvas data changes
  useEffect(() => {
    if (canvasData.nodes.length > 0 || canvasData.edges.length > 0) {
      // Only trigger auto-save if we have content
      const timer = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
      
      return () => clearTimeout(timer);
    }
  }, [canvasData, handleSaveCanvas]);

  // Add a new node to the canvas
  const addNode = (type, text) => {
    // Create a node positioned in the center of the visible area
    const centerX = 100;
    const centerY = 100;
    
    let newNode;
    if (type === 'text') {
      newNode = createTextNode(centerX, centerY, text || 'New note');
    } else {
      // Default to text node
      newNode = createTextNode(centerX, centerY, text || 'New note');
    }
    
    // Add node to canvas data
    setCanvasData(prev => ({
      ...prev,
      nodes: [...prev.nodes, newNode]
    }));
    
    // Reset UI state
    setShowNodeCreator(false);
    setNewNodeText('');
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const createConnection = (sourceId, targetId) => {
    // Find nodes to connect
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) {
      setError('Could not find one or both nodes to connect.');
      return;
    }
    
    // Create the edge and add it to canvas data
    const newEdge = createEdge(sourceId, targetId);
    
    setCanvasData(prev => ({
      ...prev,
      edges: [...prev.edges, newEdge]
    }));
    
    // Reset UI state
    setShowConnectionCreator(false);
    setConnectionNodes({ source: '', target: '' });
    
    return newEdge.id;
  };

  // Delete selected nodes
  const handleDeleteSelected = (nodeIds) => {
    if (!nodeIds || nodeIds.length === 0) return;
    
    // Remove nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !nodeIds.includes(node.id)
    );
    
    // Remove edges connected to those nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !nodeIds.includes(edge.fromNode) && 
      !nodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    setCanvasData({
      nodes: updatedNodes,
      edges: updatedEdges
    });
  };

  // Handle canvas data changes from CanvasContainer
  const handleCanvasChange = (newData) => {
    setCanvasData(newData);
    setSaveStatus('saving');
  };

  // If the canvas is still loading, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => setShowNodeCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Note
          </button>
          
          <button 
            onClick={() => setShowConnectionCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Create connection"
          >
            <ArrowRight size={14} />
            Connect
          </button>
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => addNode('text', newNodeText)}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Connection creator dialog */}
      {showConnectionCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              Create Connection
            </span>
            <button
              onClick={() => setShowConnectionCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">From Node:</label>
              <select
                value={connectionNodes.source}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, source: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select source node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">To Node:</label>
              <select
                value={connectionNodes.target}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, target: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select target node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex justify-end">
              <button
                onClick={() => createConnection(connectionNodes.source, connectionNodes.target)}
                disabled={!connectionNodes.source || !connectionNodes.target}
                className={`px-2 py-1 rounded text-xs ${
                  connectionNodes.source && connectionNodes.target
                    ? 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                    : 'bg-stone-600 text-stone-400 cursor-not-allowed'
                }`}
              >
                Connect
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas container */}
      <div className="flex-1 overflow-hidden">
        <CanvasContainer 
          canvasData={canvasData}
          onChange={handleCanvasChange}
          onDeleteSelected={handleDeleteSelected}
        />
      </div>
      
      {/* Status indicator */}
      <div className="px-2 py-1 border-t border-stone-700 bg-stone-800 text-xs flex justify-between">
        <span>
          {canvasData.nodes.length} nodes, {canvasData.edges.length} connections
        </span>
        <span>
          {saveStatus === 'saving' && <span className="text-yellow-400">Saving...</span>}
          {saveStatus === 'saved' && <span className="text-green-400">Saved</span>}
          {saveStatus === 'error' && <span className="text-red-400">Error saving!</span>}
        </span>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: windows/explorer/components/canvas/TextNode.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { getCanvasColor } from '../../utils/canvasUtils';

/**
 * TextNode component renders an individual text node in the canvas
 */
const TextNode = ({
  node,
  selected,
  onSelect,
  onChange,
  onResize,
  onMove,
  scale,
  isEditing,
  onStartEditing,
  onStopEditing
}) => {
  const [localText, setLocalText] = useState(node.text || '');
  const textareaRef = useRef(null);
  const nodeRef = useRef(null);
  const resizeHandleRef = useRef(null);
  const [isResizing, setIsResizing] = useState(false);
  const [initialSize, setInitialSize] = useState({ width: 0, height: 0 });
  const [initialPosition, setInitialPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });

  // Update local text when node text changes
  useEffect(() => {
    setLocalText(node.text || '');
  }, [node.text]);

  // Focus the textarea when editing starts
  useEffect(() => {
    if (isEditing && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [isEditing]);

  // Handle mouse down for node selection and drag start
  const handleMouseDown = (e) => {
    e.stopPropagation();
    
    // Select this node
    onSelect(node.id);
    
    // If not already editing, prepare for dragging
    if (!isEditing) {
      setIsDragging(true);
      setInitialPosition({ x: node.x, y: node.y });
      setDragOffset({
        x: e.clientX / scale - node.x,
        y: e.clientY / scale - node.y
      });
    }
  };

  // Handle mouse down on resize handle
  const handleResizeMouseDown = (e) => {
    e.stopPropagation();
    
    // Start resizing
    setIsResizing(true);
    setInitialSize({ width: node.width, height: node.height });
    setInitialPosition({ x: e.clientX, y: e.clientY });
  };

  // Handle text change
  const handleTextChange = (e) => {
    const newText = e.target.value;
    setLocalText(newText);
    onChange(node.id, newText);
  };

  // Handle double click to start editing
  const handleDoubleClick = (e) => {
    e.stopPropagation();
    
    // Start editing
    if (!isEditing) {
      onStartEditing(node.id);
    }
  };

  // Handle blur to stop editing
  const handleBlur = () => {
    if (isEditing) {
      onStopEditing();
    }
  };

  // Get the background color
  const bgColor = getCanvasColor(node.color) || '#1e293b';
  const borderColor = selected ? '#14b8a6' : '#334155';

  return (
    <div
      ref={nodeRef}
      className="absolute select-none"
      style={{
        left: node.x,
        top: node.y,
        width: node.width,
        height: node.height,
        transform: `scale(${scale})`,
        transformOrigin: 'top left',
        zIndex: selected ? 10 : 1
      }}
      onMouseDown={handleMouseDown}
      onDoubleClick={handleDoubleClick}
    >
      <div
        className="w-full h-full rounded-md overflow-hidden flex flex-col"
        style={{
          backgroundColor: bgColor,
          border: `2px solid ${borderColor}`,
          boxShadow: selected ? '0 0 0 2px rgba(20, 184, 166, 0.5)' : 'none'
        }}
      >
        {isEditing ? (
          <textarea
            ref={textareaRef}
            className="w-full h-full p-2 bg-transparent text-white resize-none focus:outline-none"
            value={localText}
            onChange={handleTextChange}
            onBlur={handleBlur}
          />
        ) : (
          <div className="w-full h-full p-2 text-white overflow-auto whitespace-pre-wrap">
            {localText}
          </div>
        )}
        
        {/* Resize handle - only show when selected */}
        {selected && (
          <div
            ref={resizeHandleRef}
            className="absolute bottom-0 right-0 w-4 h-4 bg-teal-500 rounded-tl-md cursor-nwse-resize"
            onMouseDown={handleResizeMouseDown}
          />
        )}
      </div>
    </div>
  );
};

export default TextNode;

================
File: windows/explorer/components/CanvasEditor.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel
} from 'reactflow';
import 'reactflow/dist/style.css';
import { 
  Plus, 
  Save, 
  FileText, 
  Trash2, 
  Type,
  Square,
  Link as LinkIcon,
  Edit,
} from 'lucide-react';

// Import node types from the node registry
import nodeTypes from './nodes';

/**
 * Canvas Editor component for use within the FileContent area
 * This component handles the editing of .canvas files in the file explorer
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // ReactFlow states
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  // UI states
  const [selectedElements, setSelectedElements] = useState([]);
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeType, setNewNodeType] = useState('text');
  const [newNodeText, setNewNodeText] = useState('');
  const [editingNode, setEditingNode] = useState(null);
  
  // For auto-save functionality
  const saveTimeoutRef = useRef(null);
  
  // Setup custom node types with required props
  const customNodeTypes = {};
  
  // Add the TextNode and pass required props
  customNodeTypes.text = (props) => {
    // Create a handler for text updates
    const handleNodeTextChange = (nodeId, newText) => {
      setNodes((nds) => 
        nds.map((node) => {
          if (node.id === nodeId) {
            return {
              ...node,
              data: {
                ...node.data,
                text: newText
              }
            };
          }
          return node;
        })
      );
    };
    
    // Add the onChange handler to node data
    const nodeWithHandlers = {
      ...props,
      data: {
        ...props.data,
        onChange: handleNodeTextChange
      },
      editingNode: editingNode,
      setEditingNode: setEditingNode
    };
    
    // Use the TextNode component from the registry
    return React.createElement(nodeTypes.text, nodeWithHandlers);
  };
  
  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const canvasData = JSON.parse(fileContent);
        
        if (canvasData.nodes && canvasData.edges) {
          // Transform nodes from JSONCanvas format to ReactFlow format
          const transformedNodes = canvasData.nodes.map(node => {
            // Check if node has position as an object or direct x/y properties
            const nodeX = node.position?.x !== undefined ? node.position.x : (node.x || 0);
            const nodeY = node.position?.y !== undefined ? node.position.y : (node.y || 0);
            
            return {
              id: node.id,
              type: node.type,
              // For ReactFlow, use position property
              position: {
                x: nodeX,
                y: nodeY
              },
              // Preserve data, or create default data object with text if not present
              data: node.data || { text: node.text || "Text node" }
            };
          });
          
          console.log('[DEBUG] Transformed nodes:', transformedNodes.length);
          setNodes(transformedNodes);
          setEdges(canvasData.edges);
          
          // Extract canvas name from file path or use from canvas data
          if (canvasData.name) {
            setCanvasName(canvasData.name);
          } else if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          createNewCanvas();
        }
        
        setIsLoading(false);
        setError(null);
      } else {
        // Create a new canvas if no content
        createNewCanvas();
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      createNewCanvas();
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);
  
  // Auto-save when node/edge data changes
  useEffect(() => {
    if (nodes.length > 0 || edges.length > 0) {
      // Only start auto-save if we have actual content
      
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [nodes, edges]);
  
  // Create a new canvas
  const createNewCanvas = () => {
    setNodes([]);
    setEdges([]);
    
    // Set canvas name from file if available
    if (selectedFile) {
      const pathParts = selectedFile.path.split('/');
      const fileName = pathParts[pathParts.length - 1];
      setCanvasName(fileName.replace('.canvas', ''));
    } else {
      setCanvasName('Untitled Canvas');
    }
    
    setSaveStatus('saved');
  };
  
  // Save canvas to file
  const handleSaveCanvas = () => {
    if (!selectedFile) return;
    
    try {
      // Transform nodes from ReactFlow format back to JSONCanvas format
      const transformedNodes = nodes.map(node => {
        // Extract position from ReactFlow format
        const nodePosition = node.position || { x: 0, y: 0 };
        
        return {
          id: node.id,
          type: node.type,
          // Store position in a position object for compatibility with JSONCanvas format
          position: {
            x: nodePosition.x,
            y: nodePosition.y
          },
          // Preserve the data object
          data: node.data
        };
      });
      
      // Create canvas data structure
      const canvasData = {
        name: canvasName,
        nodes: transformedNodes,
        edges,
        version: "1.0",
        metadata: {
          created: new Date().toISOString(),
          modified: new Date().toISOString()
        }
      };
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Canvas Editor - Saving canvas data:', {
        nodesLength: transformedNodes.length,
        edgesLength: edges.length,
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Serialize to JSON string
      const canvasContent = JSON.stringify(canvasData, null, 2);
      
      // Call the parent onSave function
      onSave(canvasContent);
      
      // Update state
      setSaveStatus('saved');
      setError(null);
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  };
  
  // Handle connection (edge) creation
  const onConnect = useCallback((params) => {
    // Create a custom edge with styling and ID
    setEdges((eds) => addEdge({
      ...params,
      id: `edge-${Date.now()}`,
      type: 'default',
      animated: false,
      style: { stroke: '#14b8a6' }
    }, eds));
  }, [setEdges]);
  
  // Handle node selection
  const onSelectionChange = useCallback(({ nodes, edges }) => {
    setSelectedElements([...nodes, ...edges]);
  }, []);
  
  // Handle drag over for node creation
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);
  
  // Handle drop for node creation
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      
      const type = event.dataTransfer.getData('application/reactflow/type');
      if (!type || !reactFlowInstance) return;
      
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });
      
      const newNode = {
        id: `node-${Date.now()}`,
        type,
        position,
        data: { text: 'New text node' },
      };
      
      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance, setNodes]
  );
  
  // Create a new node
  const createNode = (type) => {
    if (!reactFlowInstance) return;
    
    // If we have a viewport, center the node in the visible area
    const position = reactFlowInstance.project({
      x: window.innerWidth / 2,
      y: window.innerHeight / 2
    });
    
    const newNode = {
      id: `node-${Date.now()}`,
      type,
      position,
      data: { text: newNodeText || 'New text node' }
    };
    
    // Add the node and immediately set it to edit mode
    setNodes((nds) => {
      const updatedNodes = nds.concat(newNode);
      setTimeout(() => {
        setEditingNode(newNode.id);
      }, 100);
      return updatedNodes;
    });
    
    setShowNodeCreator(false);
    setNewNodeText('');
  };
  
  // Delete selected elements
  const deleteSelected = () => {
    const selectedNodeIds = selectedElements
      .filter(el => el.type !== 'default')
      .map(el => el.id);
    
    const selectedEdgeIds = selectedElements
      .filter(el => el.type === 'default')
      .map(el => el.id);
    
    setNodes(nodes.filter(node => !selectedNodeIds.includes(node.id)));
    setEdges(edges.filter(edge => !selectedEdgeIds.includes(edge.id)));
    setSelectedElements([]);
  };
  
  // If canvas data isn't loaded yet, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('text');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Node
          </button>
          
          {/* Edit button - appears when a node is selected */}
          {selectedElements.length === 1 && selectedElements[0].type === 'text' && (
            <button 
              onClick={() => setEditingNode(selectedElements[0].id)}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Edit selected node"
            >
              <Edit size={14} />
              Edit
            </button>
          )}
          
          {selectedElements.length > 0 && (
            <button 
              onClick={deleteSelected}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Delete selected"
            >
              <Trash2 size={14} />
              Delete
            </button>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => createNode('text')}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas area */}
      <div className="flex-1 overflow-hidden">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          connectionMode="loose"
          onConnect={onConnect}
          onInit={setReactFlowInstance}
          onDrop={onDrop}
          onDragOver={onDragOver}
          onSelectionChange={onSelectionChange}
          nodeTypes={customNodeTypes}
          fitView
          snapToGrid
          snapGrid={[15, 15]}
          defaultViewport={{ x: 0, y: 0, zoom: 1 }}
          minZoom={0.1}
          maxZoom={4}
          deleteKeyCode="Delete"
          multiSelectionKeyCode="Control"
          selectionKeyCode="Shift"
        >
          {/* Empty canvas help message */}
          {nodes.length === 0 && (
            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
              <div className="bg-stone-800 bg-opacity-80 p-6 rounded-lg shadow-lg text-center max-w-md">
                <Type size={40} className="mx-auto mb-4 text-teal-500" />
                <h3 className="text-xl text-teal-400 mb-2 font-semibold">Canvas Editor</h3>
                <p className="text-stone-300 mb-4">
                  This is your canvas workspace. Create notes and connect them with arrows.
                </p>
                <ul className="text-left text-stone-300 space-y-2 mb-4">
                  <li>• Click "Add Node" to create a new text node</li>
                  <li>• Hover over a node and click the edit button to edit content</li>
                  <li>• Drag from a node's connection handle (teal dot) to another node to create a connection</li>
                  <li>• Select nodes and press Delete or use the Delete button</li>
                </ul>
                <p className="text-stone-400 text-sm">
                  See canvas-editor-documentation.md for more details
                </p>
              </div>
            </div>
          )}
          <Background color="#44403c" gap={16} />
          <Controls showInteractive={false} />
          <MiniMap
            nodeColor={(node) => '#14b8a6'}
            maskColor="rgba(0, 0, 0, 0.5)"
            style={{ backgroundColor: '#292524' }}
          />
          
          <Panel position="top-left" className="bg-stone-800 p-2 rounded shadow-md">
            <div className="flex flex-col gap-1">
              <div className="text-xs text-stone-400">Drag to create:</div>
              <div 
                className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                draggable
                onDragStart={(event) => {
                  event.dataTransfer.setData('application/reactflow/type', 'text');
                  event.dataTransfer.effectAllowed = 'move';
                }}
              >
                <Type size={14} />
                <span className="text-xs">Text Node</span>
              </div>
            </div>
          </Panel>
        </ReactFlow>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: windows/explorer/components/CommandInput.jsx
================
import React from 'react';

const CommandInput = ({ focusRef, isAdmin, handleCommand }) => {
  // Handle command input
  const onKeyDown = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      handleCommand(cmd);
      e.target.value = '';
    }
  };

  return (
    <div className="p-2 flex items-center gap-2 border-t border-stone-700">
      <span className="text-teal-400">$</span>
      <input
        ref={focusRef}
        type="text"
        onKeyDown={onKeyDown}
        className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
      />
    </div>
  );
};

export default CommandInput;

================
File: windows/explorer/components/dialogs/FileDialogs.jsx
================
import React, { useRef, useEffect, useState } from 'react';
import { AVAILABLE_FILE_TYPES } from '../../utils/fileUtils';
import { 
  X, FileText, Code, Coffee, BookOpen, Globe, File, 
  Music, Image, Figma, Map 
} from 'lucide-react';

// Dialog for creating a new file or folder
export const CreateFileDialog = ({
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  errorMessage,
  closeCreateDialog,
  createNewItem
}) => {
  const createInputRef = useRef(null);
  const [showAutocomplete, setShowAutocomplete] = useState(false);
  const [filteredTypes, setFilteredTypes] = useState([]);
  const [selectedTypeIndex, setSelectedTypeIndex] = useState(0);
  
  // Get file type icon for autocomplete menu
  const getFileTypeIcon = (fileType) => {
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (fileType) {
      case 'md': return <FileText {...iconProps} />;
      case 'canvas': return <Figma {...iconProps} />;
      case 'map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showCreateDialog && createInputRef.current) {
      createInputRef.current.focus();
    }
  }, [showCreateDialog]);
  
  // Handle input change to detect periods and filter file types
  const handleInputChange = (e) => {
    const value = e.target.value;
    setNewItemName(value);
    
    // Only show autocomplete for files, not folders
    if (createType === 'file') {
      // Check if we should show autocomplete
      const lastPeriodIndex = value.lastIndexOf('.');
      if (lastPeriodIndex !== -1 && lastPeriodIndex < value.length) {
        const suffix = value.substring(lastPeriodIndex + 1);
        
        // Filter available types based on what user has typed after the period
        const filtered = AVAILABLE_FILE_TYPES.filter(type => 
          type.startsWith(suffix.toLowerCase())
        );
        
        setFilteredTypes(filtered);
        setShowAutocomplete(filtered.length > 0);
        setSelectedTypeIndex(0);
      } else {
        setShowAutocomplete(false);
      }
    }
  };
  
  // Function to select and apply a file type
  const selectFileType = (type) => {
    const lastPeriodIndex = newItemName.lastIndexOf('.');
    if (lastPeriodIndex !== -1) {
      // Replace everything after the period with the selected file type
      setNewItemName(newItemName.substring(0, lastPeriodIndex + 1) + type);
    }
    setShowAutocomplete(false);
  };
  
  // Handle key press in the create dialog
  const handleCreateKeyPress = (e) => {
    if (showAutocomplete) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev + 1) % filteredTypes.length
        );
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev - 1 + filteredTypes.length) % filteredTypes.length
        );
      } else if (e.key === 'Tab' || e.key === 'Enter') {
        e.preventDefault();
        selectFileType(filteredTypes[selectedTypeIndex]);
        if (e.key === 'Enter') {
          // If Enter was pressed and a type was selected, also create the item
          setTimeout(() => createNewItem(), 10);
        }
      } else if (e.key === 'Escape') {
        e.preventDefault();
        setShowAutocomplete(false);
      }
    } else if (e.key === 'Enter') {
      e.preventDefault();
      createNewItem();
    } else if (e.key === 'Escape') {
      closeCreateDialog();
    }
  };
  
  if (!showCreateDialog) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          {createType === 'file' ? 'New File' : 'New Folder'}
        </span>
        <button
          onClick={closeCreateDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2 relative">
        <div className="flex-1 relative">
          <input
            ref={createInputRef}
            type="text"
            value={newItemName}
            onChange={handleInputChange}
            onKeyDown={handleCreateKeyPress}
            placeholder={createType === 'file' ? 'filename.ext' : 'folder name'}
            className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            disabled={isCreating}
          />
          {showAutocomplete && (
            <div className="absolute bottom-full mb-1 w-full bg-stone-800 border border-stone-600 rounded shadow-lg z-50 max-h-32 overflow-y-auto">
              {filteredTypes.map((type, index) => (
                <div 
                  key={type}
                  onClick={() => selectFileType(type)}
                  className={`px-2 py-1 cursor-pointer text-sm flex items-center ${
                    index === selectedTypeIndex 
                      ? 'bg-stone-600 text-white' 
                      : 'hover:bg-stone-700 text-teal-400'
                  }`}
                >
                  {getFileTypeIcon(type)}
                  {type}
                </div>
              ))}
            </div>
          )}
        </div>
        <button
          onClick={createNewItem}
          disabled={isCreating || !newItemName.trim()}
          className={`px-2 py-1 rounded text-xs ${
            isCreating || !newItemName.trim()
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isCreating ? 'Creating...' : 'Create'}
        </button>
      </div>
    </div>
  );
};

// Dialog for renaming a file or folder
export const RenameDialog = ({
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  errorMessage,
  closeRenameDialog,
  renameItem
}) => {
  const renameInputRef = useRef(null);
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showRenameDialog && renameInputRef.current) {
      renameInputRef.current.focus();
    }
  }, [showRenameDialog]);
  
  // Handle key press in the rename dialog
  const handleRenameKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      renameItem();
    } else if (e.key === 'Escape') {
      closeRenameDialog();
    }
  };
  
  if (!showRenameDialog || !itemToRename) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Rename {itemToRename.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeRenameDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2">
        <input
          ref={renameInputRef}
          type="text"
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          onKeyDown={handleRenameKeyPress}
          placeholder="New name"
          className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          disabled={isRenaming}
        />
        <button
          onClick={renameItem}
          disabled={isRenaming || !newName.trim() || newName === itemToRename.name}
          className={`px-2 py-1 rounded text-xs ${
            isRenaming || !newName.trim() || newName === itemToRename.name
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isRenaming ? 'Renaming...' : 'Rename'}
        </button>
      </div>
    </div>
  );
};

// Dialog for deleting a file or folder
export const DeleteDialog = ({
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  errorMessage,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  if (!showDeleteDialog || !itemToDelete) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Delete {itemToDelete.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeDeleteDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="mb-2 text-sm">
        <p>Are you sure you want to delete <span className="text-red-400 font-bold">{itemToDelete.name}</span>?</p>
        {itemToDelete.type === 'directory' && (
          <p className="text-red-400 text-xs mt-1">This will delete all files and folders inside it!</p>
        )}
      </div>
      <div className="flex gap-2 justify-end">
        <button
          onClick={closeDeleteDialog}
          className="px-2 py-1 rounded text-xs bg-stone-700 hover:bg-stone-600"
        >
          Cancel
        </button>
        <button
          onClick={handleDeleteItem}
          disabled={isDeleting}
          className={`px-2 py-1 rounded text-xs ${
            isDeleting
              ? 'bg-red-900 text-red-300 cursor-not-allowed'
              : 'bg-red-700 text-red-100 hover:bg-red-600'
          }`}
        >
          {isDeleting ? 'Deleting...' : 'Delete'}
        </button>
      </div>
    </div>
  );
};

================
File: windows/explorer/components/FileContent.jsx
================
import React, { useRef, useEffect } from 'react';
import { FileText, Edit, Eye, Bold, Italic, Code as CodeIcon, Link, Heading, List, ListOrdered, CheckSquare, Download, Map } from 'lucide-react';
import { handleEditorKeyDown, convertMarkdownToHtml } from '../utils/markdownUtils';
import MapEditor from './MapEditor';
import CanvasEditor from './CanvasEditor';

const FileContent = ({
  selectedFile,
  isContentLoading,
  fileContent,
  errorMessage,
  showPreview,
  editMode,
  saveStatus,
  converter,
  isAdmin,
  user,
  activeTab,
  setFileContent,
  toggleEditMode,
  handleMarkdownChange,
  handleSaveFileContent,
  handleExportFile
}) => {
  // Debug logging

  // Add an effect to log when file content changes
  useEffect(() => {
  }, [fileContent]);

  // Add an effect to log when selected file changes
  useEffect(() => {
  }, [selectedFile]);
  
  // Add debugging for save file content function
  const wrappedHandleSaveFileContent = (content) => {

    
    // Call the original function
    handleSaveFileContent(content);
  };

  const textareaRef = useRef(null);

  // Insert markdown syntax at cursor position
  const insertMarkdown = (prefix, suffix = '') => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, wrap it with prefix and suffix
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start + prefix.length;
        textarea.selectionEnd = end + prefix.length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor between prefix and suffix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
        textarea.focus();
      }, 0);
    }
  };

  // Insert list items
  const insertList = (listPrefix) => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, apply list formatting to each line
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const lines = selectedText.split('\n');
      
      // Format each line as a list item
      const formattedLines = lines.map(line => {
        // Skip empty lines
        if (line.trim() === '') return line;
        
        // For numbered lists, increment the number for each line
        if (listPrefix === '1. ') {
          const index = lines.indexOf(line) + 1;
          return `${index}. ${line}`;
        }
        
        return `${listPrefix}${line}`;
      });
      
      const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start;
        textarea.selectionEnd = start + formattedLines.join('\n').length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + listPrefix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor after the inserted prefix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
        textarea.focus();
      }, 0);
    }
  };

  // Handle editor keyboard events
  const onEditorKeyDown = (e) => {
    handleEditorKeyDown(e, textareaRef, fileContent, setFileContent);
  };

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {selectedFile ? (
        <>
          {/* Header with file name, status, and controls */}
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
            <div className="flex items-center">
              <span className="mr-2">{selectedFile.name}</span>
              {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
              {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
              {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
            </div>
            
            <div className="flex gap-2">
              {/* Export button - available for all file types */}
              <button 
                onClick={handleExportFile}
                className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
                title="Export file"
              >
                <Download size={14} />
                Export
              </button>
              
              {/* Show edit/preview toggle for markdown files to admins or users with file access (for private files) */}
              {selectedFile.name.endsWith('.md') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <>
                  {editMode && (
                    <button 
                      onClick={handleSaveFileContent}
                      className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs"
                      title="Save file"
                    >
                      Save
                    </button>
                  )}
                  <button 
                    onClick={toggleEditMode}
                    className={`px-2 py-1 rounded text-xs flex items-center gap-1 ${editMode ? 'bg-teal-700 text-teal-100' : 'bg-stone-800 hover:bg-stone-700'}`}
                    title={editMode ? "Switch to preview mode" : "Switch to edit mode"}
                  >
                    {editMode ? <Eye size={14} /> : <Edit size={14} />}
                    {editMode ? 'Preview' : 'Edit'}
                  </button>
                </>
              )}
            </div>
          </div>
          
          {/* Error message */}
          {errorMessage && (
            <div className="p-2 bg-red-900 text-red-200 text-sm">
              {errorMessage}
            </div>
          )}
          
          {/* Content area - editor or preview based on file type */}
          {isContentLoading ? (
            <div className="flex-1 flex items-center justify-center">
              <span className="text-teal-300">Loading content...</span>
            </div>
          ) : selectedFile.name.endsWith('.canvas') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Canvas Editor for .canvas files - only for admin users and users with file access
            <CanvasEditor
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : selectedFile.name.endsWith('.map') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Map Editor for .map files - only for admin users and users with file access
            <MapEditor 
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : editMode && selectedFile.name.endsWith('.md') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Markdown Editor mode - only for markdown files and admin users
            <div className="flex-1 flex flex-col">
              {/* Markdown toolbar */}
              <div className="p-2 border-b border-stone-700 bg-stone-800 flex flex-wrap gap-2">
                <button 
                  onClick={() => insertMarkdown('### ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Heading"
                >
                  <Heading size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('**', '**')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Bold"
                >
                  <Bold size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('*', '*')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Italic"
                >
                  <Italic size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('`', '`')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Inline Code"
                >
                  <CodeIcon size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('[', '](url)')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Link"
                >
                  <Link size={16} />
                </button>
                <span className="border-r border-stone-700 h-6"></span>
                <button 
                  onClick={() => insertList('- ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Bullet List"
                >
                  <List size={16} />
                </button>
                <button 
                  onClick={() => insertList('1. ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Numbered List"
                >
                  <ListOrdered size={16} />
                </button>
                <button 
                  onClick={() => insertList('- [ ] ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Checklist"
                >
                  <CheckSquare size={16} />
                </button>
              </div>
              
              <div className="flex-1 p-2">
                <textarea
                  ref={textareaRef}
                  className="w-full h-full bg-stone-800 text-teal-50 p-4 resize-none focus:outline-none font-mono"
                  value={fileContent}
                  onChange={handleMarkdownChange}
                  onKeyDown={onEditorKeyDown}
                  placeholder="# Start typing your markdown here..."
                />
              </div>
            </div>
          ) : (
            // Preview mode
            <div className="flex-1 overflow-auto p-4">
              <div className="markdown-preview text-teal-50">
                {selectedFile.name.endsWith('.md') ? (
                  <div 
                    dangerouslySetInnerHTML={{ 
                      __html: convertMarkdownToHtml(converter, fileContent) 
                    }} 
                    className="markdown-content"
                  />
                ) : (
                  <pre className="font-mono text-sm whitespace-pre-wrap">
                    {fileContent}
                  </pre>
                )}
              </div>
            </div>
          )}
        </>
      ) : (
        // No file selected
        <div className="flex items-center justify-center h-full text-stone-600">
          <div className="text-center">
            <FileText size={48} className="mx-auto mb-4" />
            <p>Select a file to view</p>
            <p className="text-xs mt-2">All file types are supported for viewing</p>
            {isAdmin && (
              <p className="text-xs mt-1">
                Admin users can edit markdown (.md), map (.map), and canvas (.canvas) files
              </p>
            )}
            {!isAdmin && user && user.has_file_access && (
              <p className="text-xs mt-1">
                Users with file access can edit markdown (.md), map (.map), and canvas (.canvas) files in the Private section
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default FileContent;

================
File: windows/explorer/components/FileTree.jsx
================
import React from 'react';
import { 
  FolderOpen, ChevronRight, ChevronDown, File, Coffee, Code, 
  BookOpen, FileText, Globe, Lock, FileEdit, Trash2, Music, Image, Figma,
  FolderPlus, Plus, Map
} from 'lucide-react';
import { getFileIconName } from '../utils/fileUtils';
import StorageStats from './StorageStats';
import { CreateFileDialog, RenameDialog, DeleteDialog } from './dialogs/FileDialogs';

const FileTree = ({ 
  files, 
  publicFiles, 
  activeTab,
  expandedFolders,
  currentPath,
  selectedFile,
  isTreeLoading,
  errorMessage,
  isAdmin,
  user,
  toggleFolder,
  handleFileSelect,
  openRenameDialog,
  openDeleteDialog,
  openCreateDialog,
  handleDragStart,
  handleDragOver,
  handleDragLeave,
  handleDrop,
  handleContainerDragOver,
  handleContainerDragLeave,
  handleContainerDrop,
  dropTarget,
  storageStats,
  // Dialog-related props
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  closeCreateDialog,
  createNewItem,
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  closeRenameDialog,
  renameItem,
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  
  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    const iconName = getFileIconName(fileName);
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (iconName) {
      case 'FileText': return <FileText {...iconProps} />;
      case 'Code': return <Code {...iconProps} />;
      case 'Coffee': return <Coffee {...iconProps} />;
      case 'BookOpen': return <BookOpen {...iconProps} />;
      case 'Globe': return <Globe {...iconProps} />;
      case 'Music': return <Music {...iconProps} />;
      case 'Image': return <Image {...iconProps} />;
      case 'Figma': return <Figma {...iconProps} />;
      case 'Map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    // Keep track of the path to the currently selected file to highlight its parent folder
    const selectedFilePath = selectedFile?.path || '';
    const selectedFileParentPath = selectedFile && selectedFile.type !== 'directory' ? 
      selectedFilePath.substring(0, selectedFilePath.lastIndexOf('/')) || '/' : '';
    
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        // A folder is considered active if it's the current path OR if it's the parent of the selected file
        const isActive = currentPath === item.path || (selectedFileParentPath === item.path);
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center justify-between py-1 px-1 rounded hover:bg-stone-700 cursor-pointer group ${
                isActive ? 'bg-stone-800 text-teal-300 font-bold' : 
                isExpanded ? 'text-teal-300' : 'text-teal-400'
              } ${dropTarget && dropTarget.path === item.path ? 'bg-teal-900 border border-teal-500' : ''}`}
              onClick={() => toggleFolder(item.path, item)}
              draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
              onDragStart={(e) => handleDragStart(e, item)}
              onDragOver={(e) => handleDragOver(e, item)}
              onDragLeave={(e) => handleDragLeave(e)}
              onDrop={(e) => handleDrop(e, item)}
            >
              <div className="flex items-center">
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                <FolderOpen size={16} className="ml-1 mr-2" />
                <span className="text-sm">{item.name}</span>
              </div>
              
              {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <div className="flex">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openRenameDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                    title="Rename folder"
                  >
                    <FileEdit size={14} />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openDeleteDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                    title="Delete folder"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              )}
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center justify-between py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 group ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
            draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
            onDragStart={(e) => handleDragStart(e, item)}
          >
            <div className="flex items-center">
              {getFileIcon(item.name)}
              <span className="text-sm">{item.name}</span>
            </div>
            
            {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
              <div className="flex">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openRenameDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                  title="Rename file"
                >
                  <FileEdit size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openDeleteDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                  title="Delete file"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            )}
          </div>
        );
      }
    });
  };

  return (
    <div className="w-1/4 border-r border-stone-700 flex flex-col overflow-hidden">
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <span>FILES</span>
          
          {/* Tabs for switching between public and private files */}
          <div className="flex ml-4">
            <button
              onClick={() => {
                if (activeTab !== 'public') {
                  // First set the active tab, then select the root folder
                  handleFileSelect({ 
                    path: '/', 
                    type: 'directory', 
                    name: 'Root', 
                    isPublic: true,
                    setTab: 'public' // Add flag to explicitly set the tab
                  });
                }
              }}
              className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ${
                activeTab === 'public' 
                  ? 'bg-stone-700 text-teal-300' 
                  : 'bg-stone-800 hover:bg-stone-700'
              }`}
              title="Public files (readable by all users)"
            >
              <Globe size={14} />
              <span>Public</span>
            </button>
            
            {(isAdmin || (user && user.has_file_access)) && (
              <button
                onClick={() => {
                  if (activeTab !== 'private') {
                    // First set the active tab, then select the root folder
                    handleFileSelect({ 
                      path: '/', 
                      type: 'directory', 
                      name: 'Root',
                      setTab: 'private' // Add flag to explicitly set the tab
                    });
                  }
                }}
                className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ml-1 ${
                  activeTab === 'private' 
                    ? 'bg-stone-700 text-teal-300' 
                    : 'bg-stone-800 hover:bg-stone-700'
                }`}
                title="Private files (admin only)"
              >
                <Lock size={14} />
                <span>Private</span>
              </button>
            )}
          </div>
        </div>
        
        {/* File creation buttons (admins for both tabs, users with file access only for private tab) */}
        {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
          <div className="flex gap-2">
            <button
              onClick={() => openCreateDialog('file')}
              className="p-1 rounded hover:bg-stone-700 text-teal-400"
              title="Create new file"
            >
              <Plus size={16} />
            </button>
            <button
              onClick={() => openCreateDialog('directory')}
              className="p-1 rounded hover:bg-stone-700 text-teal-400"
              title="Create new folder"
            >
              <FolderPlus size={16} />
            </button>
          </div>
        )}
      </div>
      
      <div 
        className="flex-1 overflow-auto"
        onDragOver={handleContainerDragOver}
        onDragLeave={handleContainerDragLeave}
        onDrop={handleContainerDrop}
      >
        {isTreeLoading ? (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading files...</span>
          </div>
        ) : errorMessage ? (
          <div className="p-2 text-red-400">{errorMessage}</div>
        ) : (
          <div className="p-2 font-mono">
            {activeTab === 'public' ? (
              // Show public files to all users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Globe size={16} className="mr-2" />
                  <span className="text-sm font-bold">Public Files</span>
                </div>
                {publicFiles.length > 0 ? (
                  renderFileTree(publicFiles)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No public files available</div>
                )}
              </>
            ) : (
              // Show private files to admin users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Lock size={16} className="mr-2" />
                  <span className="text-sm font-bold">Private Files</span>
                </div>
                {files.length > 0 ? (
                  renderFileTree(files)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No private files available</div>
                )}
              </>
            )}
          </div>
        )}
      </div>
      
      <div className="p-2 border-t border-stone-700 text-xs">
        {selectedFile ? selectedFile.path : currentPath}
      </div>
      
      {/* Storage statistics display */}
      {(isAdmin || (user && user.has_file_access)) && (
        <StorageStats stats={storageStats} />
      )}
      
      {/* File operation dialogs */}
      <CreateFileDialog
        showCreateDialog={showCreateDialog}
        createType={createType}
        newItemName={newItemName}
        setNewItemName={setNewItemName}
        isCreating={isCreating}
        errorMessage={errorMessage}
        closeCreateDialog={closeCreateDialog}
        createNewItem={createNewItem}
      />
        
      <RenameDialog
        showRenameDialog={showRenameDialog}
        itemToRename={itemToRename}
        newName={newName}
        setNewName={setNewName}
        isRenaming={isRenaming}
        errorMessage={errorMessage}
        closeRenameDialog={closeRenameDialog}
        renameItem={renameItem}
      />
        
      <DeleteDialog
        showDeleteDialog={showDeleteDialog}
        itemToDelete={itemToDelete}
        isDeleting={isDeleting}
        errorMessage={errorMessage}
        closeDeleteDialog={closeDeleteDialog}
        handleDeleteItem={handleDeleteItem}
      />
    </div>
  );
};

export default FileTree;

================
File: windows/explorer/components/MapEditor.jsx
================
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Map, Save, FileDown } from 'lucide-react';
import { 
  createEmptyMap, 
  serializeMap, 
  parseMapFile, 
  convertMapToAscii, 
  convertAsciiToMap 
} from '../../mapeditor/utils/mapUtils';

// Import sub-components
import MapToolbar from '../../mapeditor/MapToolbar';
import MapCanvas from '../../mapeditor/MapCanvas';
import LayerPanel from '../../mapeditor/LayerPanel';
import TilePalette from '../../mapeditor/TilePalette';

/**
 * Map Editor component for use within the FileContent area
 * This component handles the editing of .map files in the file explorer
 */
const MapEditor = ({ fileContent, selectedFile, onSave }) => {
  // State for map data
  const [mapData, setMapData] = useState(null);
  const [currentLayer, setCurrentLayer] = useState(0);
  const [currentTool, setCurrentTool] = useState('floor'); // Default to floor instead of select
  const [isDirty, setIsDirty] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showAsciiModal, setShowAsciiModal] = useState(false);
  const [asciiContent, setAsciiContent] = useState('');
  const [asciiImportText, setAsciiImportText] = useState('');
  const [asciiModalMode, setAsciiModalMode] = useState('export'); // 'export' or 'import'
  const [selectedTileId, setSelectedTileId] = useState(0);
  const [selectedRotation, setSelectedRotation] = useState(0); // Add state for rotation
  const [showGrid, setShowGrid] = useState(true); // State for grid visibility
  const [brushSize, setBrushSize] = useState(1); // State for brush size
  
  // Use ref instead of state for the reset view function to avoid render-phase updates
  const resetViewFnRef = useRef(null);
  
  // References
  const autoSaveTimeoutRef = useRef(null);
  const isInitialLoadRef = useRef(true); // Track initial load to prevent layer reset during auto-save

  // Load map data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        const parsedMap = parseMapFile(fileContent);
        setMapData(parsedMap);
        
        // Only reset currentLayer on initial load, not on auto-saves
        if (isInitialLoadRef.current) {
          setCurrentLayer(0);
          isInitialLoadRef.current = false;
        }
        
        setIsDirty(false);
        setError(null);
      } else {
        // Create a new map if no content
        setMapData(createEmptyMap());
        setIsDirty(true);
      }
    } catch (err) {
      console.error('Error parsing map file:', err);
      setError('Failed to parse map file. Creating a new map.');
      setMapData(createEmptyMap());
      setIsDirty(true);
    }
  }, [fileContent]);
  
  // Auto-save when map data changes
  useEffect(() => {
    // If the map is dirty (has unsaved changes), auto-save after a delay
    if (isDirty && mapData) {
      // Clear any existing timeout
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      autoSaveTimeoutRef.current = setTimeout(() => {
        handleSaveMap();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [isDirty, mapData]);

  // Handler for saving the map
  const handleSaveMap = () => {
    if (!mapData) return;
    
    try {
      // Serialize the map data to JSON string
      const mapContent = serializeMap(mapData);
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Map Editor - Saving map data:', {
        mapDataExists: !!mapData,
        serializedLength: mapContent?.length,
        serializedPreview: mapContent?.substring(0, 100) + '...',
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Call the parent onSave function
      onSave(mapContent);
      
      // Update state
      setIsDirty(false);
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving map:', err);
      setError('Failed to save map file.');
      setSaveStatus('error');
    }
  };

  // Handler for map edits
  // Add 'rotation' parameter to accept the rotation value from MapCanvas
  const handleEdit = (x, y, tool, rotation) => {
    if (!mapData || !mapData.layers || !mapData.layers[currentLayer]) return;
    
    // Clone the current map data to avoid direct state mutation
    const newMapData = { ...mapData };
    const layerData = { ...newMapData.layers[currentLayer] };
    
    // Find if the cell already exists in this layer
    const existingCellIndex = layerData.cells.findIndex(cell => cell.x === x && cell.y === y);
    
    if (tool === 'erase') {
      // If erasing and the cell exists, remove it
      if (existingCellIndex !== -1) {
        layerData.cells = layerData.cells.filter((_, index) => index !== existingCellIndex);
      }
    } else {
      // Create the cell data based on the tool type
      // Include the received rotation value
      let cellData = { x, y, type: tool, rotation: rotation || 0 }; // Default to 0 if rotation is undefined/falsy
      
      // CRITICAL FIX: Include the selected tile ID for shadow tiles as well!
      if (tool === 'floor' || tool === 'wall' || tool === 'shadow') {
        cellData.tileId = selectedTileId;
        
        // For shadow tiles, add extra debug logging
        if (tool === 'shadow') {
          console.log(`MapEditor CRITICAL: Creating shadow tile at (${x}, ${y}) with tileId=${selectedTileId}`);
        }
      }
      
      // If a cell already exists at this position, update it immutably
      if (existingCellIndex !== -1) {
        // Create a new array with the updated cell
        layerData.cells = layerData.cells.map((cell, index) => 
          index === existingCellIndex ? cellData : cell
        );
      } else {
        // Otherwise, add a new cell (already immutable via push to a cloned array)
        layerData.cells.push(cellData);
      }
    }
    
    // Update the layer in the map data
    newMapData.layers[currentLayer] = layerData;
    
    // Update state
    setMapData(newMapData);
    setIsDirty(true);
  };

  // Handler for rotation changes from TilePalette
  const handleRotateTile = (newRotation) => {
    setSelectedRotation(newRotation);
    // Note: We don't mark as dirty here, as rotation is a tool setting, not map data change
  };

  // Layer management functions
  const handleToggleLayerVisibility = (layerIndex) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      visible: !newMapData.layers[layerIndex].visible
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  const handleAddLayer = () => {
    if (!mapData) return;
    
    const newLayerName = `Layer ${mapData.layers.length + 1}`;
    const newLayer = {
      name: newLayerName,
      visible: true,
      cells: []
    };
    
    const newMapData = { 
      ...mapData,
      layers: [...mapData.layers, newLayer]
    };
    
    setMapData(newMapData);
    setCurrentLayer(newMapData.layers.length - 1);
    setIsDirty(true);
  };

  const handleRemoveLayer = (layerIndex) => {
    if (!mapData || !mapData.layers || mapData.layers.length <= 1) return;
    
    const newMapData = { ...mapData };
    newMapData.layers = newMapData.layers.filter((_, index) => index !== layerIndex);
    
    setMapData(newMapData);
    
    // Adjust current layer if necessary
    if (currentLayer >= newMapData.layers.length) {
      setCurrentLayer(newMapData.layers.length - 1);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerUp = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex >= mapData.layers.length - 1) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex + 1]] = [layers[layerIndex + 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex + 1);
    } else if (currentLayer === layerIndex + 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerDown = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex <= 0) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex - 1]] = [layers[layerIndex - 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex - 1);
    } else if (currentLayer === layerIndex - 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleRenameLayer = (layerIndex, newName) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex] || !newName) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      name: newName
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // Handler for exporting to ASCII
  const handleExportAscii = () => {
    if (!mapData) return;
    
    try {
      // Convert the map data to ASCII
      const ascii = convertMapToAscii(mapData);
      setAsciiContent(ascii);
      setAsciiModalMode('export');
      setShowAsciiModal(true);
    } catch (err) {
      console.error('Error exporting to ASCII:', err);
      setError('Failed to export map to ASCII format.');
    }
  };

  // Handler for importing from ASCII
  const handleImportAscii = () => {
    setAsciiImportText('');
    setAsciiModalMode('import');
    setShowAsciiModal(true);
  };

  // Handler for confirming ASCII import
  const handleConfirmAsciiImport = () => {
    if (!asciiImportText.trim()) {
      setError('No ASCII content to import.');
      return;
    }
    
    try {
      // Convert ASCII to map data
      const newMapData = convertAsciiToMap(asciiImportText, mapData.name);
      
      // Preserve metadata from existing map if possible
      if (mapData.metadata) {
        newMapData.metadata = {
          ...newMapData.metadata,
          author: mapData.metadata.author || 'user',
          modified: new Date().toISOString()
        };
      }
      
      // Update the map data
      setMapData(newMapData);
      setIsDirty(true);
      setShowAsciiModal(false);
    } catch (err) {
      console.error('Error importing from ASCII:', err);
      setError('Failed to import ASCII map. The format may be invalid.');
    }
  };

  // Handler for downloading the ASCII map
  const handleDownloadAscii = () => {
    if (!asciiContent) return;
    
    try {
      // Create a blob with the ASCII content
      const blob = new Blob([asciiContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Create a temporary anchor element to trigger the download
      const a = document.createElement('a');
      a.href = url;
      a.download = `${mapData.name || 'map'}.txt`;
      
      // Append the anchor to the document, click it, and remove it
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      // Clean up by revoking the object URL
      URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Error downloading ASCII map:', err);
      setError('Failed to download ASCII map.');
    }
  };


  // Handler for applying map property changes
  const handleApplyProperties = (properties) => {
    if (!mapData) return;

    const newMapData = { 
      ...mapData,
      name: properties.name,
      width: properties.width,
      height: properties.height,
      gridSize: properties.gridSize
    };

    // Update map data
    setMapData(newMapData);
    setIsDirty(true);
  };
  
  // Handler for updating layer opacity
  const handleUpdateLayerOpacity = (layerIndex, opacity) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      opacity: opacity
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // If map data isn't loaded yet, show a loading state
  if (!mapData) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading map editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <MapToolbar 
        onSave={handleSaveMap}
        onUndo={() => console.log('Undo not implemented')}
        onRedo={() => console.log('Redo not implemented')}
        onClear={() => {
          // Create a new empty map but preserve properties like name, width, height, gridSize
          const newMap = createEmptyMap();
          newMap.name = mapData.name;
          newMap.width = mapData.width;
          newMap.height = mapData.height;
          newMap.gridSize = mapData.gridSize;
          // Preserve metadata if it exists
          if (mapData.metadata) {
            newMap.metadata = { ...mapData.metadata };
          }
          setMapData(newMap);
          setIsDirty(true);
        }}
        onExportAscii={handleExportAscii}
        onImportAscii={handleImportAscii}
        onToggleGrid={() => setShowGrid(!showGrid)}
        onResetView={() => {
          // Call the reset view function if it exists
          if (resetViewFnRef.current) {
            resetViewFnRef.current();
          }
        }}
        showGrid={showGrid}
        saveStatus={saveStatus}
        mapData={mapData}
        onApplyProperties={handleApplyProperties}
      />
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Main content area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Canvas for map editing */}
        <MapCanvas 
          mapData={mapData}
          currentLayer={currentLayer}
          currentTool={currentTool}
          selectedTileId={selectedTileId}
          selectedRotation={selectedRotation} // Pass rotation state to canvas
          onEdit={handleEdit}
          showGrid={showGrid}
          resetViewRef={resetViewFnRef} // Pass ref instead of setter function
          brushSize={brushSize}
        />
        
        {/* Layer panel with integrated tile palette */}
        <LayerPanel 
          layers={mapData.layers}
          currentLayer={currentLayer}
          setCurrentLayer={setCurrentLayer}
          onToggleLayerVisibility={handleToggleLayerVisibility}
          onAddLayer={handleAddLayer}
          onRemoveLayer={handleRemoveLayer}
          onMoveLayerUp={handleMoveLayerUp}
          onMoveLayerDown={handleMoveLayerDown}
          onRenameLayer={handleRenameLayer}
          onUpdateLayerOpacity={handleUpdateLayerOpacity}
          selectedTileId={selectedTileId}
          onSelectTile={setSelectedTileId}
          selectedRotation={selectedRotation} // Pass rotation state to LayerPanel
          onRotateTile={handleRotateTile} // Pass rotation handler to LayerPanel
          currentTool={currentTool}
          setCurrentTool={setCurrentTool}
          brushSize={brushSize}
          setBrushSize={setBrushSize}
        />
      </div>
      
      
      {/* ASCII Modal */}
      {showAsciiModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
          <div className="bg-stone-800 border border-stone-700 rounded-lg shadow-lg w-full max-w-3xl max-h-[80vh] flex flex-col">
            <div className="flex justify-between items-center p-4 border-b border-stone-700">
              <h2 className="text-lg font-semibold text-teal-300">
                {asciiModalMode === 'export' ? 'ASCII Map Export' : 'Import ASCII Map'}
              </h2>
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="p-1 hover:bg-stone-700 rounded text-teal-400"
              >
                &times;
              </button>
            </div>
            
            <div className="p-4 flex-1 overflow-auto">
              {asciiModalMode === 'export' ? (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    This is the ASCII representation of your map. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <pre className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 whitespace-pre">
                    {asciiContent}
                  </pre>
                </div>
              ) : (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    Paste ASCII map content below. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <textarea 
                    className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 resize-none focus:outline-none focus:ring-1 focus:ring-teal-500"
                    value={asciiImportText}
                    onChange={e => setAsciiImportText(e.target.value)}
                    placeholder="Paste ASCII map here..."
                  />
                </div>
              )}
            </div>
            
            <div className="p-4 border-t border-stone-700 flex justify-end space-x-2">
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="px-4 py-2 bg-stone-700 hover:bg-stone-600 rounded text-teal-100"
              >
                Cancel
              </button>
              
              {asciiModalMode === 'export' ? (
                <button 
                  onClick={handleDownloadAscii}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100 flex items-center"
                >
                  <FileDown size={16} className="mr-2" />
                  Download ASCII
                </button>
              ) : (
                <button 
                  onClick={handleConfirmAsciiImport}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100"
                >
                  Import
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MapEditor;

================
File: windows/explorer/components/nodes/index.js
================
import TextNode from './TextNode';

/**
 * Node type registry
 * Export all node types from this file to easily import them elsewhere
 */

const nodeTypes = {
  // Add all node types here
  text: TextNode,
  // Additional node types can be added here in the future
};

export default nodeTypes;

================
File: windows/explorer/components/nodes/TextNode.jsx
================
import React, { useState } from 'react';
import { Edit } from 'lucide-react';
import { Handle, Position } from 'reactflow';

/**
 * TextNode component for displaying and editing text nodes in the canvas
 * This component is used in the Canvas Editor
 */
const TextNode = ({ id, data, isConnectable, setEditingNode, editingNode }) => {
  const isEditing = editingNode === id;
  const [isHovered, setIsHovered] = useState(false);
  
  const handleEditClick = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setEditingNode(id);
  };
  
  const handleEdit = (e) => {
    const updatedText = e.target.value;
    
    // Update the node data is handled by the parent component
    // through the setNodes function passed via data
    if (data.onChange) {
      data.onChange(id, updatedText);
    }
  };
  
  const handleBlur = () => {
    setEditingNode(null);
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      setEditingNode(null);
    } else if (e.key === 'Enter' && e.ctrlKey) {
      setEditingNode(null);
    }
  };
  
  return (
    <div 
      className="p-2 bg-stone-800 border border-stone-700 rounded shadow-md relative"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Handle 
        type="source" 
        position={Position.Top} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Bottom handle */}
      <Handle 
        type="source" 
        position={Position.Bottom} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Right handle */}
      <Handle 
        type="source" 
        position={Position.Right} 
        id="right"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Left handle */}
      <Handle 
        type="source" 
        position={Position.Left} 
        id="left"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />
      {isEditing ? (
        <textarea
          className="w-full h-full bg-stone-700 text-teal-400 p-2 rounded font-mono text-sm focus:outline-none resize-none min-h-[80px]"
          value={data.text}
          onChange={handleEdit}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          autoFocus
        />
      ) : (
        <>
          <div className="text-teal-400 text-sm whitespace-pre-wrap pr-6">{data.text}</div>
          {isHovered && (
            <button
              className="absolute top-1 right-1 bg-stone-700 p-1 rounded-sm hover:bg-stone-600 transition-colors"
              onClick={handleEditClick}
              title="Edit node"
            >
              <Edit size={14} className="text-teal-400" />
            </button>
          )}
        </>
      )}
    </div>
  );
};

export default TextNode;

================
File: windows/explorer/components/StorageStats.jsx
================
import React from 'react';

const StorageStats = ({ stats, isAdmin }) => {
  // If stats aren't available yet or the user doesn't have file access, don't show anything
  if (!stats || stats.isLoading) {
    return null;
  }

  // Format bytes to human-readable format
  const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    if (bytes === null || bytes === undefined) return 'Unlimited';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  };

  // Calculate percentage used
  const percentUsed = stats.unlimited ? 0 : Math.min(100, Math.round((stats.used / stats.quota) * 100)) || 0;
  
  return (
    <div className="px-2 py-1 bg-stone-800 text-xs border-t border-stone-700">
      <div className="flex justify-between items-center ${isAdmin ? 'mb-0' : 'mb-1'}">
        <span className="text-gray-400">Storage:</span>
        <span className="text-teal-400">
          {stats.unlimited 
            ? 'Unlimited (Admin)'
            : `${formatBytes(stats.used)} of ${formatBytes(stats.quota)}`
          }
        </span>
      </div>
      
      {!stats.unlimited && (
        <div className="w-full bg-stone-700 rounded-full h-1.5 mb-1">
          <div 
            className="bg-teal-600 h-1.5 rounded-full" 
            style={{ width: `${percentUsed}%` }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default StorageStats;

================
File: windows/explorer/ExplorerWindow.jsx
================
import React from 'react';
import useExplorerState from './state/useExplorerState';
import { useAuth } from '../../../context/AuthContext';
import FileTree from './components/FileTree';
import FileContent from './components/FileContent';
import CommandInput from './components/CommandInput';
import StorageStats from './components/StorageStats';
import '../ExplorerWindow.css';

const ExplorerWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check user permissions
  const { user } = useAuth();
  // Use the custom hook to manage state and operations
  const explorerState = useExplorerState(nodeId, windowState, updateWindowState);
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden relative">
        {/* File tree panel */}
        <FileTree 
          files={explorerState.files}
          publicFiles={explorerState.publicFiles}
          activeTab={explorerState.activeTab}
          expandedFolders={explorerState.expandedFolders}
          currentPath={explorerState.currentPath}
          selectedFile={explorerState.selectedFile}
          isTreeLoading={explorerState.isTreeLoading}
          errorMessage={explorerState.errorMessage}
          isAdmin={explorerState.isAdmin}
          user={user}
          toggleFolder={explorerState.toggleFolder}
          handleFileSelect={explorerState.handleFileSelect}
          openRenameDialog={explorerState.openRenameDialog}
          openDeleteDialog={explorerState.openDeleteDialog}
          openCreateDialog={explorerState.openCreateDialog}
          handleDragStart={explorerState.handleDragStart}
          handleDragOver={explorerState.handleDragOver}
          handleDragLeave={explorerState.handleDragLeave}
          handleDrop={explorerState.handleDrop}
          handleContainerDragOver={explorerState.handleContainerDragOver}
          handleContainerDragLeave={explorerState.handleContainerDragLeave}
          handleContainerDrop={explorerState.handleContainerDrop}
          dropTarget={explorerState.dropTarget}
          storageStats={explorerState.storageStats}
          // Dialog-related props
          showCreateDialog={explorerState.showCreateDialog}
          createType={explorerState.createType}
          newItemName={explorerState.newItemName}
          setNewItemName={explorerState.setNewItemName}
          isCreating={explorerState.isCreating}
          closeCreateDialog={explorerState.closeCreateDialog}
          createNewItem={explorerState.createNewItem}
          showRenameDialog={explorerState.showRenameDialog}
          itemToRename={explorerState.itemToRename}
          newName={explorerState.newName}
          setNewName={explorerState.setNewName}
          isRenaming={explorerState.isRenaming}
          closeRenameDialog={explorerState.closeRenameDialog}
          renameItem={explorerState.renameItem}
          showDeleteDialog={explorerState.showDeleteDialog}
          itemToDelete={explorerState.itemToDelete}
          isDeleting={explorerState.isDeleting}
          closeDeleteDialog={explorerState.closeDeleteDialog}
          handleDeleteItem={explorerState.handleDeleteItem}
        />
        
        
        {/* File content panel */}
        <FileContent
          selectedFile={explorerState.selectedFile}
          isContentLoading={explorerState.isContentLoading}
          fileContent={explorerState.fileContent}
          errorMessage={explorerState.errorMessage}
          showPreview={explorerState.showPreview}
          editMode={explorerState.editMode}
          saveStatus={explorerState.saveStatus}
          converter={explorerState.converter}
          isAdmin={explorerState.isAdmin}
          user={user}
          activeTab={explorerState.activeTab}
          setFileContent={explorerState.setFileContent}
          toggleEditMode={explorerState.toggleEditMode}
          handleMarkdownChange={explorerState.handleMarkdownChange}
          handleSaveFileContent={explorerState.handleSaveFileContent}
          handleExportFile={explorerState.handleExportFile}
        />
      </div>
      
      {/* Command input */}
      <CommandInput
        focusRef={focusRef}
        isAdmin={explorerState.isAdmin}
        handleCommand={explorerState.handleCommand}
      />
    </div>
  );
};

export default ExplorerWindow;

================
File: windows/explorer/README.md
================
# Explorer Window Component

This directory contains a modular implementation of the ExplorerWindow component. The code has been refactored to improve maintainability and make it easier to extend functionality.

## Architecture Overview

The ExplorerWindow has been split into several components and modules following a clean separation of concerns:

```
explorer/
├── ExplorerWindow.jsx              # Main component (orchestrator)
├── state/
│   └── useExplorerState.js         # Custom hook for state management
├── components/
│   ├── FileTree.jsx                # Tree view UI and navigation
│   ├── FileContent.jsx             # Content viewing/editing panel
│   ├── CommandInput.jsx            # Command input field
│   └── dialogs/
│       └── FileDialogs.jsx         # Dialog components for file operations
├── api/
│   └── fileOperations.js           # API calls and file operations
├── utils/
│   ├── fileUtils.js                # File-related utility functions
│   └── markdownUtils.js            # Markdown-specific utilities
└── README.md                       # This documentation file
```

## Component Responsibilities

### ExplorerWindow.jsx
- Acts as the main component that orchestrates all other components
- Retrieves state and operations from useExplorerState
- Passes down props to child components

### useExplorerState.js
- Centralizes all state management
- Handles state persistence and retrieval
- Implements business logic for all user interactions
- Provides functions for file operations

### FileTree.jsx
- Displays the directory structure
- Handles file/folder selection
- Manages UI for drag and drop operations

### FileContent.jsx
- Displays file content based on file type
- Provides editing interface for markdown files
- Renders markdown preview

### CommandInput.jsx
- Provides command input interface
- Handles command execution

### FileDialogs.jsx
- Contains dialog components for creating, renaming, and deleting files/folders

### fileOperations.js
- Encapsulates API calls to the server
- Handles error states and response parsing

### fileUtils.js and markdownUtils.js
- Provide utility functions for file and markdown operations

## Data Flow

1. User interactions in UI components trigger functions received from useExplorerState
2. useExplorerState processes these actions, updates state, and interacts with the API as needed
3. State changes flow back to UI components through props

## Adding Support for New File Types

To add support for new file types (e.g., canvas files, audio files, images):

1. Update `fileUtils.js` to recognize and provide appropriate icons for the new file types
2. Extend `FileContent.jsx` to render the new file types appropriately
3. If needed, add specific utility files (similar to markdownUtils.js) for the new file types
4. Update state in `useExplorerState.js` to handle any special behaviors for the new file types

## State Management

The component uses a custom hook approach for state management, which offers several advantages:

- Centralizes state logic in one place
- Makes the main component simpler and more declarative
- Allows for easier testing of business logic
- Simplifies adding new features or file type support

This approach is more maintainable than using a context provider for this specific use case, as the component tree is not deeply nested. If the component structure becomes more complex in the future, the code could be adapted to use a context provider instead.

================
File: windows/explorer/state/useExplorerState.js
================
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../../../context/AuthContext';
import { useWindowState } from '../../../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../../../utils/windowTypes';
import { saveExplorerState, getExplorerState } from '../../../../services/indexedDBService';
import { createMarkdownConverter } from '../utils/markdownUtils';
import { 
  fetchPublicDirectoryContents, 
  fetchDirectoryContents, 
  fetchPublicFileContent, 
  fetchFileContent,
  saveFileContent as apiSaveFileContent,
  createNewItem as apiCreateNewItem,
  renameItem as apiRenameItem,
  deleteItem as apiDeleteItem,
  moveItem as apiMoveItem,
  getStorageStats as apiGetStorageStats
} from '../api/fileOperations';
import { 
  getParentDirectoryPath, 
  expandParentFolders, 
  getActiveFolderPath 
} from '../utils/fileUtils';

const useExplorerState = (nodeId, windowState, updateWindowState) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Refs to track state loading and saving
  const stateLoadedRef = useRef(false);
  const explorerSaveTimeoutRef = useRef(null); // New ref for debounced explorer state saving
  
  // Reference to store the saved state that needs to be restored after files are loaded
  const pendingStateRestoreRef = useRef(null);
  const fileLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [publicFiles, setPublicFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isTreeLoading, setIsTreeLoading] = useState(true);
  const [isContentLoading, setIsContentLoading] = useState(false);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  const [activeTab, setActiveTab] = useState(windowState?.activeTab || 'public'); // 'public' or 'private'
  
  // Additional state for markdown editing
  const [editMode, setEditMode] = useState(windowState?.editMode || false);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // State for file/folder creation
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [createType, setCreateType] = useState('file'); // 'file' or 'directory'
  const [newItemName, setNewItemName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  
  // State for file/folder renaming
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [itemToRename, setItemToRename] = useState(null);
  const [newName, setNewName] = useState('');
  const [isRenaming, setIsRenaming] = useState(false);
  
  // State for file/folder deletion
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // State for drag and drop
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [isMoving, setIsMoving] = useState(false);
  
  // For auto-save functionality and editor references
  const saveTimeoutRef = useRef(null);
  
  // Create markdown converter
  const converter = createMarkdownConverter();

  // Track previous node ID to detect window swaps
  const prevNodeIdRef = useRef(nodeId);

  // Load explorer state from IndexedDB on mount or when nodeId changes
  useEffect(() => {
    const loadExplorerState = async () => {
      console.log(`[DEBUG] Starting to load explorer state for window ${nodeId}`);
      
      // If nodeId changed but it's not the first load, it likely means a window swap occurred
      const isSwapDetected = prevNodeIdRef.current !== nodeId && prevNodeIdRef.current !== null;
      if (isSwapDetected) {
        console.log(`[DEBUG] Node ID changed from ${prevNodeIdRef.current} to ${nodeId}, possible window swap detected`);
        // Reset the state loaded flag to force a reload after a swap
        stateLoadedRef.current = false;
        // Clear any pending state
        pendingStateRestoreRef.current = null;
      }
      
      // Update prevNodeIdRef for future comparisons
      prevNodeIdRef.current = nodeId;
      
      try {
        // Try to load explorer state from IndexedDB
        const savedState = await getExplorerState(nodeId);
        console.log(`[DEBUG] Retrieved state from IndexedDB:`, savedState);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`[DEBUG] Valid saved state found for window ${nodeId}:`, savedState.content);
          
          // Store the saved state in the ref for later restoration after files are loaded
          pendingStateRestoreRef.current = savedState.content;
          
          // Restore expanded folders and active tab immediately
          if (savedState.content.expandedFolders) {
            console.log(`[DEBUG] Restoring expanded folders`);
            setExpandedFolders(savedState.content.expandedFolders);
          }
          
          if (savedState.content.activeTab) {
            console.log(`[DEBUG] Restoring active tab: ${savedState.content.activeTab}`);
            setActiveTab(savedState.content.activeTab);
          }
          
          if (savedState.content.editMode !== undefined && isAdmin) {
            console.log(`[DEBUG] Restoring edit mode: ${savedState.content.editMode}`);
            setEditMode(savedState.content.editMode);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        } else {
          console.log(`[DEBUG] No valid saved state found or state already loaded`);
          // Even if no state is loaded, mark as loaded to allow future saves
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`[DEBUG] Failed to load explorer state:`, error);
        // Ensure we still mark state as loaded even if there's an error
        stateLoadedRef.current = true;
      }
    };
    
    loadExplorerState();
  }, [nodeId, isAdmin]);
  
  // Handle window activation
  useEffect(() => {
    if (windowState?.isActive) {
      // Save this as the active explorer window
      setActiveWindow(nodeId, WINDOW_TYPES.EXPLORER);
    }
  }, [windowState?.isActive, nodeId, setActiveWindow]);
  
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    // Early return if state hasn't been loaded yet (prevents overwriting with default values)
    if (!stateLoadedRef.current) return;
    
    // Clear any existing timeout
    if (explorerSaveTimeoutRef.current) {
      clearTimeout(explorerSaveTimeoutRef.current);
    }
    
    // Save the explorer state to IndexedDB with debounce
    explorerSaveTimeoutRef.current = setTimeout(() => {
      console.log(`[DEBUG] Saving explorer state for window ${nodeId}:`, {
        selectedFile,
        expandedFolders,
        activeTab,
        editMode
      });
      
      saveExplorerState({
        id: nodeId,
        content: {
          selectedFile,
          expandedFolders,
          activeTab,
          editMode
        }
      }).catch(error => {
        console.error(`[DEBUG] Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
      });
    }, 300); // 300ms debounce
    
    // Clear timeout on cleanup
    return () => {
      if (explorerSaveTimeoutRef.current) {
        clearTimeout(explorerSaveTimeoutRef.current);
      }
    };
  }, [selectedFile, expandedFolders, activeTab, editMode, nodeId]);

  // Load initial directory contents and restore selected file afterward
  useEffect(() => {
    console.log('[DEBUG] Starting to load directory contents');
    
    // First, load the files
    const loadFilesAndRestoreSelection = async () => {
      try {
        // Load public files for all users
        await handleFetchPublicDirectoryContents('/', true);
        
      // Load private files for admin users or users with file access (if applicable)
      if (isAdmin || user?.has_file_access) {
        try {
          await handleFetchDirectoryContents('/', true);
        } catch (error) {
          console.error('Failed to load private files:', error);
          setFiles([]);
          if (activeTab === 'private') {
            setErrorMessage('Failed to load private files. Please ensure your directory exists.');
          }
        }
      }
        
        // Mark files as loaded
        fileLoadedRef.current = true;
        
        // Now that files are loaded, restore the selected file if we have one pending
        if (pendingStateRestoreRef.current && pendingStateRestoreRef.current.selectedFile) {
          const restoredFile = pendingStateRestoreRef.current.selectedFile;
          console.log(`[DEBUG] Now restoring selected file after files are loaded:`, restoredFile);
          
          // Set the selected file
          setSelectedFile(restoredFile);
          
          // Update the current path to ensure parent directories are visible
          if (restoredFile.type === 'file') {
            // For files, set the current path to the parent directory
            const parentPath = getParentDirectoryPath(restoredFile.path);
            setCurrentPath(parentPath);
          } else {
            // For directories, set the current path to the directory itself
            setCurrentPath(restoredFile.path);
          }
          
          // Ensure parent folders are expanded
          setExpandedFolders(prev => expandParentFolders(restoredFile.path, prev));
          
          // If it's a file, load its content
          if (restoredFile.type === 'file') {
            console.log(`[DEBUG] Loading content for restored file: ${restoredFile.path}`);
            
            // Set the preview mode for markdown files
            if (restoredFile.name.endsWith('.md')) {
              console.log(`[DEBUG] Setting preview mode for markdown file`);
              setShowPreview(true);
              
              // Also restore edit mode if it was saved
              if (pendingStateRestoreRef.current.editMode && isAdmin) {
                console.log(`[DEBUG] Restoring edit mode: ${pendingStateRestoreRef.current.editMode}`);
                setEditMode(pendingStateRestoreRef.current.editMode);
              }
            }
            
            // Use handleFileSelect to load the file content
            // Use setTimeout to ensure this happens after state updates
            setTimeout(() => {
              console.log(`[DEBUG] Executing delayed file selection for: ${restoredFile.path}`);
              handleFileSelect(restoredFile, true);
            }, 100);
          }
          
          // Clear the pending restore
          pendingStateRestoreRef.current = null;
        } else {
          console.log('[DEBUG] No file to restore or files not loaded yet');
        }
      } catch (error) {
        console.error('[DEBUG] Error in loadFilesAndRestoreSelection:', error);
      }
    };
    
    loadFilesAndRestoreSelection();
  }, [isAdmin, activeTab]);

  // State for storage statistics
  const [storageStats, setStorageStats] = useState({
    quota: 0,
    used: 0,
    available: 0,
    unlimited: false,
    isLoading: false
  });

  // Fetch storage statistics
  const fetchStorageStats = async () => {
    if (!user?.has_file_access && !isAdmin) return;
    
    setStorageStats(prev => ({ ...prev, isLoading: true }));
    
    try {
      const stats = await apiGetStorageStats();
      if (stats.error) {
        setErrorMessage(stats.error);
        setStorageStats(prev => ({
          ...prev,
          isLoading: false
        }));
      } else {
        setStorageStats({
          quota: stats.quota,
          used: stats.used,
          available: stats.available,
          unlimited: stats.unlimited,
          isLoading: false
        });
      }
    } catch (error) {
      console.error('Error fetching storage stats:', error);
      setStorageStats(prev => ({
        ...prev,
        isLoading: false
      }));
    }
  };

  // Fetch storage stats on mount and after file operations
  useEffect(() => {
    if (user?.has_file_access || isAdmin) {
      fetchStorageStats();
    }
  }, [user, isAdmin]);

  // Reset content states when switching tabs
  useEffect(() => {
    // Clear file content and reset view states when changing tabs
    setSelectedFile(null);
    setFileContent('');
    setShowPreview(false);
    setEditMode(false);
    setSaveStatus('saved');
    setErrorMessage('');
    
    // Reset current path to root for the selected tab
    setCurrentPath('/');
  }, [activeTab]);

  // Auto-save functionality with debounce
  useEffect(() => {
    // Auto-save if in edit mode, user has permission, and we have a markdown file selected
    // Allow for admins and users with file_access (for private files)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (editMode && hasEditPermission && selectedFile && selectedFile.name.endsWith('.md') && fileContent) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveFileContent();
      }, 1000); // 1 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [fileContent, editMode, isAdmin, selectedFile]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview,
        editMode,
        saveStatus,
        activeTab
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, editMode, saveStatus, activeTab, updateWindowState]);
  
  // Fetch public directory contents
  const handleFetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicDirectoryContents(publicPath, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setPublicFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(publicPath);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch public file content
  const handleFetchPublicFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Fetch private directory contents
  const handleFetchDirectoryContents = async (path = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchDirectoryContents(path, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(path);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch private file content
  const handleFetchFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Save file content
  const handleSaveFileContent = async (content) => {
    console.log('[DEBUG] useExplorerState - handleSaveFileContent called:', {
      selectedFilePath: selectedFile?.path,
      selectedFileName: selectedFile?.name,
      contentProvided: content !== undefined,
      // If content is provided, use it, otherwise use the state's fileContent
      contentToSaveType: typeof (content !== undefined ? content : fileContent),
      contentToSaveLength: (content !== undefined ? content : fileContent)?.length || 0,
      contentToSavePreview: typeof (content !== undefined ? content : fileContent) === 'string' 
        ? (content !== undefined ? content : fileContent).substring(0, 100) + '...' 
        : 'not a string'
    });
    
    // Check if filePath is valid
    if (!selectedFile || !selectedFile.path || selectedFile.path.trim() === '') {
      console.error('[DEBUG] handleSaveFileContent - No file selected');
      setErrorMessage('No file selected. Please select a file first.');
      setSaveStatus('error');
      return;
    }
    
    setSaveStatus('saving');
    
    // Use content parameter if provided, otherwise use state's fileContent
    const contentToSave = content !== undefined ? content : fileContent;
    
    console.log('[DEBUG] Sending to API:', {
      path: selectedFile.path,
      contentType: typeof contentToSave,
      contentLength: contentToSave?.length || 0
    });
    
    const result = await apiSaveFileContent(selectedFile.path, contentToSave);
    
    if (result.error) {
      console.error('[DEBUG] API Save Error:', result.error);
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      console.log('[DEBUG] API Save Success:', result);
      setErrorMessage('');
      setSaveStatus('saved');
      
      // If content parameter was provided, update the state's fileContent
      if (content !== undefined) {
        setFileContent(content);
      }
    }
  };
  
  // Toggle folder expansion
  const toggleFolder = (folderPath, folder) => {
    const isExpanding = !expandedFolders[folderPath];
    
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: isExpanding
    }));
    
    // If we're expanding the folder, also set it as the current path
    if (isExpanding) {
      setCurrentPath(folderPath);
      setSelectedFile(folder);
    }
  };
  
  // Create a new file or folder
  const createNewItem = async () => {
    if (!newItemName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    setIsCreating(true);
    setErrorMessage('');
    
    // Get the active folder path where the new item should be created
    const activeFolderPath = getActiveFolderPath(selectedFile, currentPath);
    
    const result = await apiCreateNewItem(activeTab, activeFolderPath, newItemName, createType);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowCreateDialog(false);
      setNewItemName('');
      
      // Refresh the entire file tree from the root
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
      
      // If it's a directory, expand it
      if (createType === 'directory' && result.path) {
        setExpandedFolders(prev => ({
          ...prev,
          [result.path]: true
        }));
      }
    }
    
    setIsCreating(false);
  };
  
  // Open the create dialog
  const openCreateDialog = (type) => {
    setCreateType(type);
    setNewItemName('');
    setErrorMessage('');
    setShowCreateDialog(true);
  };
  
  // Close the create dialog
  const closeCreateDialog = () => {
    setShowCreateDialog(false);
    setNewItemName('');
    setErrorMessage('');
  };
  
  // Open the rename dialog
  const openRenameDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to rename files or file access permission for private files.');
      return;
    }
    
    setItemToRename(item);
    setNewName(item.name);
    setErrorMessage('');
    setShowRenameDialog(true);
  };
  
  // Close the rename dialog
  const closeRenameDialog = () => {
    setShowRenameDialog(false);
    setItemToRename(null);
    setNewName('');
    setErrorMessage('');
  };
  
  // Rename a file or folder
  const renameItem = async () => {
    if (!newName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    if (!itemToRename) {
      setErrorMessage('No item selected for renaming');
      return;
    }
    
    setIsRenaming(true);
    setErrorMessage('');
    
    const result = await apiRenameItem(itemToRename.path, newName);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowRenameDialog(false);
      setItemToRename(null);
      setNewName('');
      
      // If the renamed item was selected, update the selected file
      if (selectedFile && selectedFile.path === itemToRename.path) {
        setSelectedFile(null);
      }
      
      // Refresh the appropriate file list
      if (itemToRename.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsRenaming(false);
  };
  
  // Open the delete dialog
  const openDeleteDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to delete files or file access permission for private files.');
      return;
    }
    
    setItemToDelete(item);
    setErrorMessage('');
    setShowDeleteDialog(true);
  };
  
  // Close the delete dialog
  const closeDeleteDialog = () => {
    setShowDeleteDialog(false);
    setItemToDelete(null);
    setErrorMessage('');
  };
  
  // Delete a file or folder
  const handleDeleteItem = async () => {
    if (!itemToDelete) {
      setErrorMessage('No item selected for deletion');
      return;
    }
    
    setIsDeleting(true);
    setErrorMessage('');
    
    const result = await apiDeleteItem(itemToDelete.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog
      setShowDeleteDialog(false);
      setItemToDelete(null);
      
      // If the deleted item was selected, clear the selection
      if (selectedFile && selectedFile.path === itemToDelete.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (itemToDelete.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsDeleting(false);
  };
  
  // Handle drag start event
  const handleDragStart = (e, item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    setDraggedItem(item);
    e.dataTransfer.setData('text/plain', item.path);
    e.dataTransfer.effectAllowed = 'move';
    
    // Add dragging class to the element
    e.currentTarget.classList.add('dragging');
    
    // Remove the class after a short delay to ensure it's applied
    setTimeout(() => {
      if (e.currentTarget) {
        e.currentTarget.classList.remove('dragging');
      }
    }, 100);
  };
  
  // Handle drag over event
  const handleDragOver = (e, folder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Only allow dropping into directories
    if (folder.type === 'directory') {
      setDropTarget(folder);
      e.dataTransfer.dropEffect = 'move';
      
      // Add drop-target class to the element
      e.currentTarget.classList.add('drop-target');
    }
  };
  
  // Handle drag over for the file tree container (to allow dropping to root)
  const handleContainerDragOver = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Set root as the drop target
    const rootFolder = {
      type: 'directory',
      path: draggedItem.isPublic ? '/public' : '/',
      name: 'Root'
    };
    setDropTarget(rootFolder);
    e.dataTransfer.dropEffect = 'move';
  };
  
  // Handle drag leave event
  const handleDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
  };
  
  // Handle drag leave for the container
  const handleContainerDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
  };
  
  // Handle drop event
  const handleDrop = async (e, targetFolder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !targetFolder) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Reset drop target
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
    
    // Only allow dropping into directories
    if (targetFolder.type !== 'directory') {
      return;
    }
    
    // Check if dropping on itself
    if (draggedItem.path === targetFolder.path) {
      return;
    }
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle drop event for the container (moving to root)
  const handleContainerDrop = async (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !dropTarget) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Process the drop using the dropTarget which was set in handleContainerDragOver
    const targetFolder = dropTarget;
    
    // Reset drop target
    setDropTarget(null);
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle folder selection
  const handleFolderSelect = (folder) => {
    // Update the current path to the selected folder's path
    setCurrentPath(folder.path);
    
    // Set the selected folder
    setSelectedFile(folder);
    
    // Expand the folder
    setExpandedFolders(prev => ({
      ...prev,
      [folder.path]: true
    }));
    
    // Reset content and preview
    setFileContent('');
    setShowPreview(false);
    
    // Reset edit mode
    if (editMode) {
      setEditMode(false);
    }
  };
  
  // Handle file selection
  const handleFileSelect = (file, skipTabSwitch = false) => {
    // Check if this selection should change the active tab, but skip when restoring files
    if (!skipTabSwitch) {
      if (file.setTab) {
        setActiveTab(file.setTab);
      } else if (file.isPublic !== undefined) {
        // Update active tab based on file's isPublic property
        setActiveTab(file.isPublic ? 'public' : 'private');
      }
    }

    // If it's a directory, handle it differently
    if (file.type === 'directory') {
      handleFolderSelect(file);
      return;
    }
    
    setSelectedFile(file);
    
    // Make sure parent folders are expanded so the file is visible on reload
    setExpandedFolders(prev => expandParentFolders(file.path, prev));
    
    // Set current path to the parent directory for better context
    const parentPath = getParentDirectoryPath(file.path);
    setCurrentPath(parentPath);
    
    // Reset edit mode when selecting a new file
    if (editMode) {
      setEditMode(false);
    }
    
    // Fetch content for all file types
    if (file.isPublic) {
      // Fetch public file content
      handleFetchPublicFileContent(file.path);
    } else {
      // Fetch private file content (admin only)
      handleFetchFileContent(file.path);
    }
    
    // Only set preview mode for markdown files
    if (file.name.endsWith('.md')) {
      setShowPreview(true);
    } else {
      setShowPreview(false);
    }
  };
  
  // Toggle edit mode
  const toggleEditMode = () => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to edit files or file access permission for private files.');
      return;
    }
    
    if (!selectedFile || !selectedFile.name.endsWith('.md')) {
      setErrorMessage('Only markdown files can be edited.');
      return;
    }
    
    setEditMode(!editMode);
    // When switching to preview mode, ensure preview is shown
    if (editMode) {
      setShowPreview(true);
    }
  };
  
  // Handle markdown content change
  const handleMarkdownChange = (e) => {
    setFileContent(e.target.value);
  };
  
  // Handle commands (for the command input)
  const handleCommand = (cmd) => {
    // Commands:
    // - refresh: refresh file list
    // - preview: toggle markdown preview
    // - edit: toggle edit mode (users with permission)
    // - save: manually save the current file
    // - new-file: create a new file (users with permission)
    // - new-folder: create a new folder (users with permission)
    // - rename: rename selected file or folder (users with permission)
    // - delete: delete selected file or folder (users with permission)
    // - public: switch to public files tab
    // - private: switch to private files tab (users with permission)
    
    // Check permission for file operations
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    const canAccessPrivate = isAdmin || user?.has_file_access;
    
    if (cmd === 'refresh') {
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
      setShowPreview(!showPreview);
      if (editMode) {
        setEditMode(false);
      }
    } else if (cmd === 'edit' && selectedFile?.name.endsWith('.md')) {
      toggleEditMode();
    } else if (cmd === 'save' && editMode && selectedFile?.name.endsWith('.md')) {
      handleSaveFileContent();
    } else if (cmd === 'new-file' && hasEditPermission) {
      openCreateDialog('file');
    } else if (cmd === 'new-folder' && hasEditPermission) {
      openCreateDialog('directory');
    } else if (cmd === 'rename' && selectedFile && hasEditPermission) {
      openRenameDialog(selectedFile);
    } else if (cmd === 'delete' && selectedFile && hasEditPermission) {
      openDeleteDialog(selectedFile);
    } else if (cmd === 'public') {
      setActiveTab('public');
    } else if (cmd === 'private' && canAccessPrivate) {
      setActiveTab('private');
    } else {
      setErrorMessage(`Unknown command: ${cmd}`);
    }
  };

  // Handle file or folder export/download
  const handleExportFile = async () => {
    if (!selectedFile) {
      setErrorMessage('No file or folder selected');
      return;
    }
    
    try {
      // If it's a directory, create a zip file
      if (selectedFile.type === 'directory') {
        // Import JSZip dynamically 
        const JSZip = (await import('jszip')).default;
        const zip = new JSZip();
        
        setErrorMessage('Creating zip file...');
        
        // Function to recursively gather files from a folder
        const addFolderToZip = async (folderPath, zipFolder) => {
          // Determine which API to use based on whether the folder is public or private
          const fetchApi = selectedFile.isPublic ? fetchPublicDirectoryContents : fetchDirectoryContents;
          
          // Fetch directory contents
          const result = await fetchApi(folderPath, false);
          
          if (result.error) {
            throw new Error(`Failed to access folder: ${result.error}`);
          }
          
          // Process each item in the folder
          for (const item of result.files) {
            if (item.type === 'directory') {
              // Create a subfolder in the zip and process recursively
              const newFolder = zipFolder.folder(item.name);
              await addFolderToZip(item.path, newFolder);
            } else {
              // Fetch file content
              const contentApi = selectedFile.isPublic ? fetchPublicFileContent : fetchFileContent;
              const contentResult = await contentApi(item.path);
              
              if (contentResult.error) {
                console.error(`Error loading file content for ${item.path}: ${contentResult.error}`);
                continue;
              }
              
              // Add file to zip
              zipFolder.file(item.name, contentResult.content);
            }
          }
        };
        
        // Start the recursive process from the selected folder
        await addFolderToZip(selectedFile.path, zip);
        
        // Generate the zip file
        const content = await zip.generateAsync({type: 'blob'});
        
        // Create a filename for the zip file (folder name + .zip)
        const zipFileName = `${selectedFile.name}.zip`;
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(content);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = zipFileName;
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
        
        // Clear the export message
        setErrorMessage('');
      } else {
        // For single file export, keep existing behavior
        if (!fileContent) {
          setErrorMessage('File has no content');
          return;
        }
        
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: 'text/plain' });
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(blob);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = selectedFile.name;
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      console.error('Error exporting:', error);
      setErrorMessage(`Failed to export: ${error.message}`);
    }
  };
  
  return {
    files,
    publicFiles,
    currentPath,
    selectedFile,
    expandedFolders,
    isTreeLoading,
    isContentLoading,
    fileContent,
    errorMessage,
    showPreview,
    activeTab,
    editMode,
    saveStatus,
    showCreateDialog,
    createType, 
    newItemName,
    isCreating,
    showRenameDialog,
    itemToRename,
    newName,
    isRenaming,
    showDeleteDialog,
    itemToDelete,
    isDeleting,
    draggedItem,
    dropTarget,
    isMoving,
    converter,
    isAdmin,
    storageStats,
    fetchStorageStats,
    handleFetchPublicDirectoryContents,
    handleFetchDirectoryContents,
    handleSaveFileContent,
    handleExportFile,
    toggleFolder,
    createNewItem,
    openCreateDialog,
    closeCreateDialog,
    openRenameDialog,
    closeRenameDialog,
    renameItem,
    openDeleteDialog,
    closeDeleteDialog,
    handleDeleteItem,
    handleDragStart,
    handleDragOver,
    handleContainerDragOver,
    handleDragLeave,
    handleContainerDragLeave,
    handleDrop,
    handleContainerDrop,
    handleFileSelect,
    toggleEditMode,
    handleMarkdownChange,
    handleCommand,
    setNewItemName,
    setNewName,
    setErrorMessage,
    setFileContent,
    setSelectedFile
  };
};

export default useExplorerState;

================
File: windows/explorer/utils/canvasUtils.js
================
/**
 * Utility functions for the canvas editor
 */

/**
 * Generate a unique ID for a node or edge
 * @param {string} prefix - Prefix for the ID (e.g., 'node' or 'edge')
 * @returns {string} Unique ID
 */
export const generateId = (prefix = 'node') => {
  return `${prefix}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
};

/**
 * Calculate the distance between two points
 * @param {Object} point1 - First point {x, y}
 * @param {Object} point2 - Second point {x, y}
 * @returns {number} Distance
 */
export const distance = (point1, point2) => {
  return Math.sqrt(
    Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2)
  );
};

/**
 * Check if a point is inside a node
 * @param {Object} point - Point to check {x, y}
 * @param {Object} node - Node {x, y, width, height}
 * @returns {boolean} True if point is inside node
 */
export const isPointInNode = (point, node) => {
  return (
    point.x >= node.x &&
    point.x <= node.x + node.width &&
    point.y >= node.y &&
    point.y <= node.y + node.height
  );
};

/**
 * Get connection points for edges based on the fromSide and toSide
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @param {string} fromSide - Side of source node to connect from ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node to connect to ('top', 'right', 'bottom', 'left')
 * @returns {Object} Connection points {source: {x, y}, target: {x, y}}
 */
export const getConnectionPoints = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  const source = { x: 0, y: 0 };
  const target = { x: 0, y: 0 };

  // Source node connection point
  switch (fromSide) {
    case 'top':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y;
      break;
    case 'right':
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    case 'bottom':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y + fromNode.height;
      break;
    case 'left':
      source.x = fromNode.x;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    default:
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
  }

  // Target node connection point
  switch (toSide) {
    case 'top':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y;
      break;
    case 'right':
      target.x = toNode.x + toNode.width;
      target.y = toNode.y + toNode.height / 2;
      break;
    case 'bottom':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y + toNode.height;
      break;
    case 'left':
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
      break;
    default:
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
  }

  return { source, target };
};

/**
 * Calculate the best connection sides for two nodes
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @returns {Object} Best sides {fromSide, toSide}
 */
export const calculateBestConnectionSides = (fromNode, toNode) => {
  // Calculate center points
  const fromCenter = {
    x: fromNode.x + fromNode.width / 2,
    y: fromNode.y + fromNode.height / 2
  };
  const toCenter = {
    x: toNode.x + toNode.width / 2,
    y: toNode.y + toNode.height / 2
  };

  // Calculate angle between centers
  const angle = Math.atan2(toCenter.y - fromCenter.y, toCenter.x - fromCenter.x);
  
  // Convert angle to degrees
  const degrees = (angle * 180) / Math.PI;
  
  // Determine from side based on angle
  let fromSide;
  if (degrees >= -45 && degrees < 45) {
    fromSide = 'right';
  } else if (degrees >= 45 && degrees < 135) {
    fromSide = 'bottom';
  } else if (degrees >= 135 || degrees < -135) {
    fromSide = 'left';
  } else {
    fromSide = 'top';
  }
  
  // Calculate opposite side for target
  let toSide;
  switch (fromSide) {
    case 'right': toSide = 'left'; break;
    case 'bottom': toSide = 'top'; break;
    case 'left': toSide = 'right'; break;
    case 'top': toSide = 'bottom'; break;
    default: toSide = 'left';
  }
  
  return { fromSide, toSide };
};

/**
 * Draw an arrow at the end of a line
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {number} x - X coordinate of arrow tip
 * @param {number} y - Y coordinate of arrow tip
 * @param {number} angle - Angle of the line in radians
 * @param {number} size - Size of the arrow
 */
export const drawArrow = (ctx, x, y, angle, size = 10) => {
  ctx.save();
  ctx.translate(x, y);
  ctx.rotate(angle);
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(-size, -size / 2);
  ctx.lineTo(-size, size / 2);
  ctx.closePath();
  ctx.fill();
  ctx.restore();
};

/**
 * Draw a connection line between two points with optional arrow
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {Object} source - Source point {x, y}
 * @param {Object} target - Target point {x, y}
 * @param {string} color - Line color
 * @param {boolean} showSourceArrow - Whether to show an arrow at the source
 * @param {boolean} showTargetArrow - Whether to show an arrow at the target
 */
export const drawConnection = (ctx, source, target, color = '#14b8a6', showSourceArrow = false, showTargetArrow = true) => {
  const angle = Math.atan2(target.y - source.y, target.x - source.x);
  
  // Draw line
  ctx.strokeStyle = color;
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(source.x, source.y);
  ctx.lineTo(target.x, target.y);
  ctx.stroke();
  
  // Draw arrows
  ctx.fillStyle = color;
  if (showSourceArrow) {
    drawArrow(ctx, source.x, source.y, angle + Math.PI);
  }
  if (showTargetArrow) {
    drawArrow(ctx, target.x, target.y, angle);
  }
};

/**
 * Convert a canvas color code to an actual color
 * @param {string} colorCode - Color code (e.g., '1', '2', '#FF0000')
 * @returns {string} CSS color value
 */
export const getCanvasColor = (colorCode) => {
  // Map of preset colors
  const colorMap = {
    '1': '#ef4444', // red
    '2': '#f97316', // orange
    '3': '#eab308', // yellow
    '4': '#22c55e', // green
    '5': '#06b6d4', // cyan
    '6': '#a855f7'  // purple
  };
  
  // If colorCode is a preset, return the mapped color
  if (colorMap[colorCode]) {
    return colorMap[colorCode];
  }
  
  // Otherwise, return the color code as is (assuming it's a valid CSS color)
  return colorCode || '#14b8a6'; // Default to teal if no color provided
};

/**
 * Create a new empty canvas with the JSONCanvas format
 * @returns {Object} Empty canvas data
 */
export const createEmptyCanvas = () => {
  return {
    nodes: [],
    edges: []
  };
};

/**
 * Create a new text node with default properties
 * @param {number} x - X position
 * @param {number} y - Y position
 * @param {string} text - Node text content
 * @returns {Object} New text node
 */
export const createTextNode = (x, y, text = 'New note') => {
  return {
    id: generateId('node'),
    type: 'text',
    x,
    y,
    width: 200,
    height: 100,
    text
  };
};

/**
 * Create a new edge connecting two nodes
 * @param {string} fromNode - ID of source node
 * @param {string} toNode - ID of target node
 * @param {string} fromSide - Side of source node ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node ('top', 'right', 'bottom', 'left')
 * @returns {Object} New edge
 */
export const createEdge = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  return {
    id: generateId('edge'),
    fromNode,
    toNode,
    fromSide,
    toSide,
    fromEnd: 'none',
    toEnd: 'arrow'
  };
};

================
File: windows/explorer/utils/fileUtils.js
================
// List of available file types for autocomplete
export const AVAILABLE_FILE_TYPES = [
  'md',
  'canvas',
  'map'
];

// Helper function to get parent directory path from a file path
export const getParentDirectoryPath = (filePath) => {
  // Remove trailing slash if present
  const normalizedPath = filePath.endsWith('/') ? filePath.slice(0, -1) : filePath;
  // Find the last slash in the path
  const lastSlashIndex = normalizedPath.lastIndexOf('/');
  
  if (lastSlashIndex === -1) {
    // No slash found, return root
    return '/';
  }
  
  // Return everything up to the last slash
  return normalizedPath.substring(0, lastSlashIndex) || '/';
};

// Helper function to expand all parent folders of a path
export const expandParentFolders = (filePath, currentExpandedFolders) => {
  const parts = filePath.split('/').filter(Boolean);
  let currentPath = '';
  
  // Create a new expanded folders object
  const newExpandedFolders = { ...currentExpandedFolders };
  
  // Expand each parent folder
  for (let i = 0; i < parts.length; i++) {
    currentPath += '/' + parts[i];
    newExpandedFolders[currentPath] = true;
  }
  
  return newExpandedFolders;
};

// Get file icon based on file extension
export const getFileIconName = (fileName) => {
  if (fileName.endsWith('.md')) return 'FileText';
  if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return 'Code';
  if (fileName.endsWith('.json')) return 'Coffee';
  if (fileName.endsWith('.css')) return 'BookOpen';
  if (fileName.endsWith('.html')) return 'Globe';
  if (fileName.endsWith('.svg') || fileName.endsWith('.png') || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg') || fileName.endsWith('.gif')) return 'Image';
  if (fileName.endsWith('.mp3') || fileName.endsWith('.wav') || fileName.endsWith('.ogg')) return 'Music';
  if (fileName.endsWith('.canvas')) return 'Figma';
  if (fileName.endsWith('.map')) return 'Map';
  return 'File';
};

// Helper function to get the active folder path based on selected item and current path
export const getActiveFolderPath = (selectedFile, currentPath) => {
  if (selectedFile) {
    // If selected item is a directory, use its path
    if (selectedFile.type === 'directory') {
      return selectedFile.path;
    }
    // If selected item is a file, use its parent directory
    return getParentDirectoryPath(selectedFile.path);
  }
  // Fall back to current path if no file is selected
  return currentPath;
};

================
File: windows/explorer/utils/markdownUtils.js
================
import showdown from 'showdown';

// Initialize Showdown converter for Markdown with enhanced options
export const createMarkdownConverter = () => {
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true,
    breaks: true,  // Enable line breaks to be rendered as <br> tags
    simpleLineBreaks: true,
    openLinksInNewWindow: true,
    backslashEscapesHTMLTags: true,
    ghCodeBlocks: true,
    ghCompatibleHeaderId: true,
    ghMentions: true,
    smoothLivePreview: true
  });
  
  // Enable additional extensions
  converter.setFlavor('github');
  
  return converter;
};

// Insert markdown syntax at cursor position
export const insertMarkdown = (textareaRef, fileContent, setFileContent, prefix, suffix = '') => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, wrap it with prefix and suffix
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start + prefix.length;
      textarea.selectionEnd = end + prefix.length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor between prefix and suffix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
      textarea.focus();
    }, 0);
  }
};

// Insert list items
export const insertList = (textareaRef, fileContent, setFileContent, listPrefix) => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, apply list formatting to each line
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const lines = selectedText.split('\n');
    
    // Format each line as a list item
    const formattedLines = lines.map(line => {
      // Skip empty lines
      if (line.trim() === '') return line;
      
      // For numbered lists, increment the number for each line
      if (listPrefix === '1. ') {
        const index = lines.indexOf(line) + 1;
        return `${index}. ${line}`;
      }
      
      return `${listPrefix}${line}`;
    });
    
    const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start;
      textarea.selectionEnd = start + formattedLines.join('\n').length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + listPrefix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor after the inserted prefix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
      textarea.focus();
    }, 0);
  }
};

// Get the current line of text at cursor position
export const getCurrentLine = (text, cursorPos) => {
  const textBeforeCursor = text.substring(0, cursorPos);
  const lineStartPos = textBeforeCursor.lastIndexOf('\n') + 1;
  const lineEndPos = text.indexOf('\n', cursorPos);
  const actualLineEndPos = lineEndPos !== -1 ? lineEndPos : text.length;
  return text.substring(lineStartPos, actualLineEndPos);
};

// Handle keyboard events in the editor
export const handleEditorKeyDown = (e, textareaRef, fileContent, setFileContent) => {
  // Handle keyboard shortcuts
  if (e.ctrlKey || e.metaKey) {
    // Ctrl+B or Cmd+B for bold
    if (e.key === 'b') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '**', '**');
      return;
    }
    
    // Ctrl+I or Cmd+I for italic
    if (e.key === 'i') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '*', '*');
      return;
    }
    
    // Ctrl+Shift+L for unordered list
    if (e.shiftKey && e.key === 'L') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- ');
      return;
    }
    
    // Ctrl+Shift+O for ordered list
    if (e.shiftKey && e.key === 'O') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '1. ');
      return;
    }
    
    // Ctrl+Shift+C for checklist
    if (e.shiftKey && e.key === 'C') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- [ ] ');
      return;
    }
  }
  
  // Auto-continue lists on Enter
  if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check for list patterns
    const bulletListMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+(.*)/);
    const numberedListMatch = currentLine.match(/^(\s*)(\d+)\.?\s+(.*)/);
    const checklistMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+\[([ xX])\]\s+(.*)/);
    
    if (bulletListMatch || numberedListMatch || checklistMatch) {
      // Get the indentation and list marker
      let indentation, marker, content;
      
      if (checklistMatch) {
        indentation = checklistMatch[1];
        marker = checklistMatch[2];
        const checkState = checklistMatch[3];
        content = checklistMatch[4];
        
        // If the checklist item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the checklist with an unchecked box
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} [ ] `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (bulletListMatch) {
        indentation = bulletListMatch[1];
        marker = bulletListMatch[2];
        content = bulletListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the bullet list
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (numberedListMatch) {
        indentation = numberedListMatch[1];
        const number = parseInt(numberedListMatch[2], 10);
        content = numberedListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the numbered list with incremented number
        e.preventDefault();
        const newListItem = `\n${indentation}${number + 1}. `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      }
    }
  }
  
  // Handle tab for indentation in lists
  if (e.key === 'Tab') {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check if we're in a list item
    const listMatch = currentLine.match(/^(\s*)(-|\*|\+|\d+\.|\[[ xX]\])\s+/);
    if (listMatch) {
      e.preventDefault();
      
      // Add or remove indentation based on shift key
      if (e.shiftKey) {
        // Outdent: remove 2 spaces from the beginning if they exist
        if (currentLine.startsWith('  ')) {
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const lineEnd = text.indexOf('\n', cursorPos);
          const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
          
          const newContent = text.substring(0, lineStart) + currentLine.substring(2) + text.substring(actualLineEnd);
          setFileContent(newContent);
          
          // Adjust cursor position
          const newCursorPos = cursorPos - 2;
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = newCursorPos > lineStart ? newCursorPos : lineStart;
            textarea.focus();
          }, 0);
        }
      } else {
        // Indent: add 2 spaces at the beginning
        const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
        const lineEnd = text.indexOf('\n', cursorPos);
        const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
        
        const newContent = text.substring(0, lineStart) + '  ' + currentLine + text.substring(actualLineEnd);
        setFileContent(newContent);
        
        // Adjust cursor position
        const newCursorPos = cursorPos + 2;
        setTimeout(() => {
          textarea.selectionStart = textarea.selectionEnd = newCursorPos;
          textarea.focus();
        }, 0);
      }
    }
  }
};

// Convert markdown to HTML
export const convertMarkdownToHtml = (converter, markdown) => {
  return converter.makeHtml(markdown);
};

================
File: windows/ExplorerWindow-fix.jsx
================
// This is a patch file that contains only important modifications to fix the file persistence issue
// You should compare this with your existing ExplorerWindow.jsx and integrate these changes

// KEY CHANGES:

// 1. In handleFileSelect function, add this line AFTER setting the selected file:
/*
    // Make sure parent folders are expanded so the file is visible on reload
    expandParentFolders(file.path);
*/

// 2. In loadExplorerState function, when restoring a file, add this code to ensure proper path setting:
/*
    // Important: Update the currentPath to ensure parent directories are visible
    if (restoredFile.type === 'file') {
      // For files, set the current path to the parent directory
      const parentPath = getParentDirectoryPath(restoredFile.path);
      setCurrentPath(parentPath);
    } else {
      // For directories, set the current path to the directory itself
      setCurrentPath(restoredFile.path);
    }
*/

// 3. Add a debounce for explorer state saving by adding a new ref:
/*
    const explorerSaveTimeoutRef = useRef(null); // New ref for debounced explorer state saving
*/

// 4. Modify the useEffect that saves explorer state to add debounce:
/*
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    // Early return if state hasn't been loaded yet (prevents overwriting with default values)
    if (!stateLoadedRef.current) return;
    
    // Clear any existing timeout
    if (explorerSaveTimeoutRef.current) {
      clearTimeout(explorerSaveTimeoutRef.current);
    }
    
    // Save the explorer state to IndexedDB with debounce
    explorerSaveTimeoutRef.current = setTimeout(() => {
      console.log(`Saving explorer state for window ${nodeId}:`, {
        selectedFile,
        expandedFolders,
        activeTab
      });
      
      saveExplorerState({
        id: nodeId,
        content: {
          selectedFile,
          expandedFolders,
          activeTab
        }
      }).catch(error => {
        console.error(`Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
      });
    }, 300); // 300ms debounce
    
    // Clear timeout on cleanup
    return () => {
      if (explorerSaveTimeoutRef.current) {
        clearTimeout(explorerSaveTimeoutRef.current);
      }
    };
  }, [selectedFile, expandedFolders, activeTab, nodeId]);
*/

// 5. Modify the initial directory loading code to ensure selected files have their parent folders expanded:
/*
  // Load initial directory contents
  useEffect(() => {
    // Load public files for all users
    fetchPublicDirectoryContents('/', true).then(() => {
      // After files are loaded, try to restore expanded state for the selected file
      if (selectedFile) {
        console.log('Ensuring parent folders for selected file are expanded:', selectedFile.path);
        expandParentFolders(selectedFile.path);
      }
    });
    
    // Load private files for admin users
    if (isAdmin) {
      fetchDirectoryContents('/', true).catch(error => {
        console.error('Failed to load private files:', error);
        // Set a specific error message for private files without affecting public files
        setFiles([]);
        if (activeTab === 'private') {
          setErrorMessage('Failed to load private files. Please ensure your admin directory exists.');
        }
      });
    }
  }, [isAdmin, activeTab]);
*/

// 6. Always set stateLoaded to true in loadExplorerState even if no state is found:
/*
  if (savedState && savedState.content) {
    // ... existing code ...
  } else {
    // Even if no state is loaded, mark as loaded to allow future saves
    stateLoadedRef.current = true;
  }
*/

================
File: windows/ExplorerWindow.css
================
/* Markdown content styling */
.markdown-content {
    color: #f0f9ff; /* Light blue-white for readability */
    line-height: 1;
    font-family: 'Oxygen Mono', monospace;
    padding: 1rem;
    white-space: pre-wrap; /* Preserve line breaks */
  }

  /* Bold text styling */
  .markdown-content strong {
    font-weight: 700;
    color: #2dd4bf; /* Teal accent color to make bold text stand out */
  }
  
  /* Italic text styling */
  .markdown-content em {
    font-style: italic;
    color: #a5f3fc; /* Light cyan for emphasis */
  }
  
  /* Header styles with clear size differences */
  .markdown-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    color: #2dd4bf; /* Teal accent color */
    border-bottom: 1px solid #44403c;
    padding-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h3 {
    font-size: 1.75rem;
    font-weight: 600;
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h4 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Paragraph styling */
  .markdown-content p {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Make sure the code blocks stand out */
  .markdown-content pre {
    background-color: #1c1917; /* Darker background for code */
    border-radius: 0.25rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
    font-family: 'Oxygen Mono', monospace;
    font-size: 0.875rem;
    line-height: 1;
  }
  
  .markdown-content code {
    font-family: 'Oxygen Mono', monospace;
    background-color: #1c1917;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  /* Add some spacing between sections */
  .markdown-content br + h1,
  .markdown-content br + h2,
  .markdown-content br + h3,
  .markdown-content br + h4,
  .markdown-content br + h5,
  .markdown-content br + h6 {
    margin-top: 0.5rem;
  }
  
/* Lists */
.markdown-content ul, .markdown-content ol {
  margin-top: 0.5rem;
  margin-bottom: 1rem;
  padding-left: 2rem;
  font-family: 'Oxygen Mono', monospace;
  list-style-position: outside;
}

/* Bullet points */
.markdown-content ul {
  list-style-type: disc;
}

/* Numbered lists */
.markdown-content ol {
  list-style-type: decimal;
}

.markdown-content li {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
  padding-left: 0.5rem;
  display: list-item;
}

/* Make sure list items are clearly visible */
.markdown-content ul > li::marker {
  color: #2dd4bf; /* Teal color for bullet points */
}

.markdown-content ol > li::marker {
  color: #2dd4bf; /* Teal color for numbers */
  font-weight: bold;
}

/* Task lists (checkboxes) */
.markdown-content .task-list {
  list-style-type: none;
  padding-left: 0.5rem;
}

.markdown-content .task-list-item {
  display: flex;
  align-items: flex-start;
  margin-bottom: 0.5rem;
}

.markdown-content .task-list-item-checkbox {
  margin-right: 0.5rem;
  margin-top: 0.25rem;
  appearance: none;
  -webkit-appearance: none;
  width: 1rem;
  height: 1rem;
  border: 1px solid #2dd4bf;
  border-radius: 0.25rem;
  background-color: #1c1917;
  cursor: pointer;
  position: relative;
}

.markdown-content .task-list-item-checkbox:checked {
  background-color: #2dd4bf;
}

.markdown-content .task-list-item-checkbox:checked::after {
  content: '✓';
  position: absolute;
  color: #1c1917;
  font-size: 0.75rem;
  top: -0.125rem;
  left: 0.125rem;
}

/* Alternative styling for checklists as rendered by Showdown */
.markdown-content ul li input[type="checkbox"] {
  margin-right: 0.5rem;
  margin-top: 0.25rem;
  appearance: none;
  -webkit-appearance: none;
  width: 1rem;
  height: 1rem;
  border: 1px solid #2dd4bf;
  border-radius: 0.25rem;
  background-color: #1c1917;
  cursor: pointer;
  position: relative;
  vertical-align: middle;
}

.markdown-content ul li input[type="checkbox"]:checked {
  background-color: #2dd4bf;
}

.markdown-content ul li input[type="checkbox"]:checked::after {
  content: '✓';
  position: absolute;
  color: #1c1917;
  font-size: 0.75rem;
  top: -0.125rem;
  left: 0.125rem;
}

/* Remove default bullets for checklist items */
.markdown-content ul li:has(input[type="checkbox"]) {
  list-style-type: none;
  margin-left: -1.5rem;
}

/* Specific styling for Showdown's task list output */
.markdown-content ul.contains-task-list {
  list-style-type: none;
  padding-left: 1rem;
}

.markdown-content ul.contains-task-list li.task-list-item {
  list-style-type: none;
  padding-left: 0;
  display: flex;
  align-items: center;
}

/* Nested lists */
.markdown-content ul ul,
.markdown-content ol ol,
.markdown-content ul ol,
.markdown-content ol ul {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}
  
  /* Links */
  .markdown-content a {
    color: #14b8a6;
    text-decoration: underline;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content a:hover {
    color: #2dd4bf;
  }

/* Drag and drop styles */
[draggable] {
  cursor: grab;
}

[draggable]:active {
  cursor: grabbing;
}

/* Style for the drop target when dragging over */
.drop-target {
  background-color: rgba(20, 184, 166, 0.2) !important;
  border: 2px dashed rgb(20, 184, 166) !important;
  border-radius: 0.25rem;
}

/* Style for the item being dragged */
.dragging {
  opacity: 0.5;
  background-color: rgba(20, 184, 166, 0.1);
}

================
File: windows/ExplorerWindow.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  FolderOpen, FileText, ChevronRight, ChevronDown, File, Coffee, Code, 
  BookOpen, Edit, Eye, Plus, FolderPlus, X, Globe, Lock, FileEdit, Trash2,
  List, ListOrdered, CheckSquare, Bold, Italic, Code as CodeIcon, Link, Heading
} from 'lucide-react';
import showdown from 'showdown';
import path from 'path-browserify';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveExplorerState, getExplorerState } from '../../services/indexedDBService';
import './ExplorerWindow.css';

const ExplorerWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [publicFiles, setPublicFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isTreeLoading, setIsTreeLoading] = useState(true);
  const [isContentLoading, setIsContentLoading] = useState(false);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  const [activeTab, setActiveTab] = useState(windowState?.activeTab || 'public'); // 'public' or 'private'
  
  // Additional state for markdown editing
  const [editMode, setEditMode] = useState(windowState?.editMode || false);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // State for file/folder creation
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [createType, setCreateType] = useState('file'); // 'file' or 'directory'
  const [newItemName, setNewItemName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  
  // State for file/folder renaming
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [itemToRename, setItemToRename] = useState(null);
  const [newName, setNewName] = useState('');
  const [isRenaming, setIsRenaming] = useState(false);
  
  // State for file/folder deletion
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // State for drag and drop
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [isMoving, setIsMoving] = useState(false);
  
  // For auto-save functionality and editor references
  const saveTimeoutRef = useRef(null);
  const createInputRef = useRef(null);
  const renameInputRef = useRef(null);
  const textareaRef = useRef(null);
  
  // Initialize Showdown converter for Markdown with enhanced options
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true,
    breaks: true,  // Enable line breaks to be rendered as <br> tags
    simpleLineBreaks: true,
    openLinksInNewWindow: true,
    backslashEscapesHTMLTags: true,
    ghCodeBlocks: true,
    ghCompatibleHeaderId: true,
    ghMentions: true,
    smoothLivePreview: true
  });
  
  // Enable additional extensions
  converter.setFlavor('github');

  // Helper function to expand all parent folders of a path
  const expandParentFolders = (filePath) => {
    const parts = filePath.split('/').filter(Boolean);
    let currentPath = '';
    
    // Create a new expanded folders object
    const newExpandedFolders = { ...expandedFolders };
    
    // Expand each parent folder
    for (let i = 0; i < parts.length; i++) {
      currentPath += '/' + parts[i];
      newExpandedFolders[currentPath] = true;
    }
    
    setExpandedFolders(newExpandedFolders);
  };

  // Function to fetch public directory contents
  const fetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
    try {
      setIsTreeLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsTreeLoading(false);
        return;
      }
      
      // If refreshAll is true, start from the root
      const pathToFetch = refreshAll ? '/' : publicPath;
      
      // Fetch public directory contents from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        setErrorMessage(`Failed to load public files: ${response.statusText}`);
        setIsTreeLoading(false);
        return;
      }
      
      const data = await response.json();
      
      // Transform the data to match our expected format
      const transformedFiles = data.items.map(item => ({
        name: item.name,
        type: item.type,
        path: item.path,
        children: item.children || [],
        isPublic: true
      }));
      
      setPublicFiles(transformedFiles);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(publicPath);
      }
      
      setIsTreeLoading(false);
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        expandParentFolders(currentPath);
      }
    } catch (error) {
      console.error('Error fetching public directory contents:', error);
      setErrorMessage('Failed to load public files. Please try again.');
      setIsTreeLoading(false);
    }
  };

  // Function to fetch public file content
  const fetchPublicFileContent = async (filePath) => {
    try {
      setIsContentLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsContentLoading(false);
        return;
      }
      
      // Fetch public file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        setErrorMessage(`Failed to load file content: ${response.statusText}`);
        setIsContentLoading(false);
        return;
      }
      
      const data = await response.json();
      setFileContent(data.content);
      setIsContentLoading(false);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Error fetching public file content:', error);
      setErrorMessage(`Error loading file: ${error.message}`);
      setSaveStatus('error');
      setIsContentLoading(false);
    }
  };

  // Function to fetch private directory contents from the server (admin only)
  const fetchDirectoryContents = async (path = '/', refreshAll = false) => {
    try {
      setIsTreeLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsTreeLoading(false);
        return;
      }
      
      // If refreshAll is true, start from the root
      const pathToFetch = refreshAll ? '/' : path;
      
      // Fetch directory contents from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view files.');
        } else {
          setErrorMessage(`Failed to load files: ${response.statusText}`);
        }
        setIsTreeLoading(false);
        return;
      }
      
      const data = await response.json();
      
      // Transform the data to match our expected format
      const transformedFiles = data.items.map(item => ({
        name: item.name,
        type: item.type,
        path: item.path,
        children: item.children || []
      }));
      
      setFiles(transformedFiles);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(path);
      }
      
      setIsTreeLoading(false);
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        expandParentFolders(currentPath);
      }
    } catch (error) {
      console.error('Error fetching directory contents:', error);
      setErrorMessage('Failed to load files. Please try again.');
      setIsTreeLoading(false);
    }
  };

  // Function to fetch file content
  const fetchFileContent = async (filePath) => {
    try {
      setIsContentLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsContentLoading(false);
        return;
      }
      
      // Fetch file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view file content.');
        } else {
          setErrorMessage(`Failed to load file content: ${response.statusText}`);
        }
        setIsContentLoading(false);
        return;
      }
      
      const data = await response.json();
      setFileContent(data.content);
      setIsContentLoading(false);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Error fetching file content:', error);
      setErrorMessage(`Error loading file: ${error.message}`);
      setSaveStatus('error');
      setIsContentLoading(false);
    }
  };
  
  // Function to save file content
  const saveFileContent = async () => {
    try {
      // Check if filePath is valid
      if (!selectedFile || !selectedFile.path || selectedFile.path.trim() === '') {
        setErrorMessage('No file selected. Please select a file first.');
        setSaveStatus('error');
        return;
      }
      
      setSaveStatus('saving');
      
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          path: selectedFile.path,
          content: fileContent
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to save file: ${response.statusText}`);
      }
      
      setSaveStatus('saved');
      setErrorMessage('');
    } catch (error) {
      console.error('Error saving file:', error);
      setErrorMessage(`Error saving file: ${error.message}`);
      setSaveStatus('error');
    }
  };
  
  // Insert markdown syntax at cursor position
  const insertMarkdown = (prefix, suffix = '') => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, wrap it with prefix and suffix
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start + prefix.length;
        textarea.selectionEnd = end + prefix.length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor between prefix and suffix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
        textarea.focus();
      }, 0);
    }
  };
  
  // Insert list items
  const insertList = (listPrefix) => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, apply list formatting to each line
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const lines = selectedText.split('\n');
      
      // Format each line as a list item
      const formattedLines = lines.map(line => {
        // Skip empty lines
        if (line.trim() === '') return line;
        
        // For numbered lists, increment the number for each line
        if (listPrefix === '1. ') {
          const index = lines.indexOf(line) + 1;
          return `${index}. ${line}`;
        }
        
        return `${listPrefix}${line}`;
      });
      
      const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start;
        textarea.selectionEnd = start + formattedLines.join('\n').length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + listPrefix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor after the inserted prefix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
        textarea.focus();
      }, 0);
    }
  };
  
  // Get the current line of text at cursor position
  const getCurrentLine = (text, cursorPos) => {
    const textBeforeCursor = text.substring(0, cursorPos);
    const lineStartPos = textBeforeCursor.lastIndexOf('\n') + 1;
    const lineEndPos = text.indexOf('\n', cursorPos);
    const actualLineEndPos = lineEndPos !== -1 ? lineEndPos : text.length;
    return text.substring(lineStartPos, actualLineEndPos);
  };
  
  // Handle keyboard events in the editor
  const handleEditorKeyDown = (e) => {
    // Handle keyboard shortcuts
    if (e.ctrlKey || e.metaKey) {
      // Ctrl+B or Cmd+B for bold
      if (e.key === 'b') {
        e.preventDefault();
        insertMarkdown('**', '**');
        return;
      }
      
      // Ctrl+I or Cmd+I for italic
      if (e.key === 'i') {
        e.preventDefault();
        insertMarkdown('*', '*');
        return;
      }
      
      // Ctrl+Shift+L for unordered list
      if (e.shiftKey && e.key === 'L') {
        e.preventDefault();
        insertList('- ');
        return;
      }
      
      // Ctrl+Shift+O for ordered list
      if (e.shiftKey && e.key === 'O') {
        e.preventDefault();
        insertList('1. ');
        return;
      }
      
      // Ctrl+Shift+C for checklist
      if (e.shiftKey && e.key === 'C') {
        e.preventDefault();
        insertList('- [ ] ');
        return;
      }
    }
    
    // Auto-continue lists on Enter
    if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
      const textarea = textareaRef.current;
      if (!textarea) return;
      
      const cursorPos = textarea.selectionStart;
      const text = fileContent;
      const currentLine = getCurrentLine(text, cursorPos);
      
      // Check for list patterns
      const bulletListMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+(.*)/);
      const numberedListMatch = currentLine.match(/^(\s*)(\d+)\.?\s+(.*)/);
      const checklistMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+\[([ xX])\]\s+(.*)/);
      
      if (bulletListMatch || numberedListMatch || checklistMatch) {
        // Get the indentation and list marker
        let indentation, marker, content;
        
        if (checklistMatch) {
          indentation = checklistMatch[1];
          marker = checklistMatch[2];
          const checkState = checklistMatch[3];
          content = checklistMatch[4];
          
          // If the checklist item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the checklist with an unchecked box
          e.preventDefault();
          const newListItem = `\n${indentation}${marker} [ ] `;
          insertMarkdown(newListItem);
          return;
        } else if (bulletListMatch) {
          indentation = bulletListMatch[1];
          marker = bulletListMatch[2];
          content = bulletListMatch[3];
          
          // If the list item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the bullet list
          e.preventDefault();
          const newListItem = `\n${indentation}${marker} `;
          insertMarkdown(newListItem);
          return;
        } else if (numberedListMatch) {
          indentation = numberedListMatch[1];
          const number = parseInt(numberedListMatch[2], 10);
          content = numberedListMatch[3];
          
          // If the list item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the numbered list with incremented number
          e.preventDefault();
          const newListItem = `\n${indentation}${number + 1}. `;
          insertMarkdown(newListItem);
          return;
        }
      }
    }
    
    // Handle tab for indentation in lists
    if (e.key === 'Tab') {
      const textarea = textareaRef.current;
      if (!textarea) return;
      
      const cursorPos = textarea.selectionStart;
      const text = fileContent;
      const currentLine = getCurrentLine(text, cursorPos);
      
      // Check if we're in a list item
      const listMatch = currentLine.match(/^(\s*)(-|\*|\+|\d+\.|\[[ xX]\])\s+/);
      if (listMatch) {
        e.preventDefault();
        
        // Add or remove indentation based on shift key
        if (e.shiftKey) {
          // Outdent: remove 2 spaces from the beginning if they exist
          if (currentLine.startsWith('  ')) {
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const lineEnd = text.indexOf('\n', cursorPos);
            const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
            
            const newContent = text.substring(0, lineStart) + currentLine.substring(2) + text.substring(actualLineEnd);
            setFileContent(newContent);
            
            // Adjust cursor position
            const newCursorPos = cursorPos - 2;
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = newCursorPos > lineStart ? newCursorPos : lineStart;
              textarea.focus();
            }, 0);
          }
        } else {
          // Indent: add 2 spaces at the beginning
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const lineEnd = text.indexOf('\n', cursorPos);
          const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
          
          const newContent = text.substring(0, lineStart) + '  ' + currentLine + text.substring(actualLineEnd);
          setFileContent(newContent);
          
          // Adjust cursor position
          const newCursorPos = cursorPos + 2;
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = newCursorPos;
            textarea.focus();
          }, 0);
        }
      }
    }
  };
  
  // Handle markdown content change
  const handleMarkdownChange = (e) => {
    setFileContent(e.target.value);
  };

  // Load explorer state from IndexedDB on mount
  useEffect(() => {
    const loadExplorerState = async () => {
      try {
        // Try to load explorer state from IndexedDB
        const savedState = await getExplorerState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded explorer state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          let restoredFile = null;
          
          // Update state with saved values
          if (savedState.content.selectedFile) {
            restoredFile = savedState.content.selectedFile;
            setSelectedFile(restoredFile);
          }
          
          if (savedState.content.expandedFolders) {
            setExpandedFolders(savedState.content.expandedFolders);
          }
          
          if (savedState.content.activeTab) {
            setActiveTab(savedState.content.activeTab);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
          
          // If a file was restored and it's a markdown file, load its content
          if (restoredFile && restoredFile.type === 'file' && restoredFile.name.endsWith('.md')) {
            // Set the preview mode for markdown files
            setShowPreview(true);
            
            // Load the file content based on whether it's a public or private file
            if (restoredFile.isPublic) {
              // Fetch public file content
              fetchPublicFileContent(restoredFile.path);
            } else if (isAdmin) {
              // Fetch private file content (admin only)
              fetchFileContent(restoredFile.path);
            }
          }
        }
      } catch (error) {
        console.error(`Failed to load explorer state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadExplorerState();
  }, [nodeId, isAdmin]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active explorer window
      setActiveWindow(nodeId, WINDOW_TYPES.EXPLORER);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    if (!stateLoadedRef.current) return;
    
    // Save the explorer state to IndexedDB
    saveExplorerState({
      id: nodeId,
      content: {
        selectedFile,
        expandedFolders,
        activeTab
      }
    }).catch(error => {
      console.error(`Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
    });
    
  }, [selectedFile, expandedFolders, activeTab, nodeId]);

  // Load initial directory contents
  useEffect(() => {
    // Load public files for all users
    fetchPublicDirectoryContents();
    
    // Load private files for admin users
    if (isAdmin) {
      fetchDirectoryContents().catch(error => {
        console.error('Failed to load private files:', error);
        // Set a specific error message for private files without affecting public files
        setFiles([]);
        if (activeTab === 'private') {
          setErrorMessage('Failed to load private files. Please ensure your admin directory exists.');
        }
      });
    }
  }, [isAdmin]);

  // Reset content states when switching tabs
  useEffect(() => {
    // Clear file content and reset view states when changing tabs
    setSelectedFile(null);
    setFileContent('');
    setShowPreview(false);
    setEditMode(false);
    setSaveStatus('saved');
    setErrorMessage('');
    
    // Reset current path to root for the selected tab
    setCurrentPath('/');
  }, [activeTab]);

  // Auto-save functionality with debounce
  useEffect(() => {
    // Only auto-save if in edit mode, user is admin, and we have a markdown file selected
    if (editMode && isAdmin && selectedFile && selectedFile.name.endsWith('.md') && fileContent) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        saveFileContent();
      }, 1000); // 1 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [fileContent, editMode, isAdmin, selectedFile]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview,
        editMode,
        saveStatus,
        activeTab
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, editMode, saveStatus, activeTab, updateWindowState]);
  
  // Focus the input field when the create or rename dialog is shown
  useEffect(() => {
    if (showCreateDialog && createInputRef.current) {
      createInputRef.current.focus();
    }
    if (showRenameDialog && renameInputRef.current) {
      renameInputRef.current.focus();
    }
  }, [showCreateDialog, showRenameDialog]);

  // Toggle folder expansion
  const toggleFolder = (folderPath, folder) => {
    const isExpanding = !expandedFolders[folderPath];
    
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: isExpanding
    }));
    
    // If we're expanding the folder, also set it as the current path
    if (isExpanding) {
      setCurrentPath(folderPath);
      setSelectedFile(folder);
    }
  };
  
  // Helper function to get the active folder path based on selected item and current path
  const getActiveFolderPath = () => {
    if (selectedFile) {
      // If selected item is a directory, use its path
      if (selectedFile.type === 'directory') {
        return selectedFile.path;
      }
      // If selected item is a file, use its parent directory
      return getParentDirectoryPath(selectedFile.path);
    }
    // Fall back to current path if no file is selected
    return currentPath;
  };
  
  // Create a new file or folder
  const createNewItem = async () => {
    if (!newItemName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    try {
      setIsCreating(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsCreating(false);
        return;
      }
      
      // Determine if we're creating in the public folder or private folder
      const isPublicFolder = activeTab === 'public';
      
      // Get the active folder path where the new item should be created
      const activeFolderPath = getActiveFolderPath();
      
      // Construct the full path for the new item
      let newItemPath;
      if (isPublicFolder) {
        // For public folder, prefix with /public if not already included
        const publicPrefix = activeFolderPath.startsWith('/public') ? '' : '/public';
        newItemPath = path.join(publicPrefix, activeFolderPath, newItemName.trim()).replace(/\\/g, '/');
      } else {
        // For private folder (admin only)
        newItemPath = path.join(activeFolderPath, newItemName.trim()).replace(/\\/g, '/');
      }
      
      // Create the new file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CREATE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          path: newItemPath,
          type: createType,
          content: createType === 'file' ? '' : undefined
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to create ${createType}: ${response.statusText}`);
      }
      
      // Close the dialog and reset the form
      setShowCreateDialog(false);
      setNewItemName('');
      
      // Refresh the entire file tree from the root
      if (isPublicFolder) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // If it's a directory, expand it
      if (createType === 'directory') {
        setExpandedFolders(prev => ({
          ...prev,
          [newItemPath]: true
        }));
      }
      
      setIsCreating(false);
    } catch (error) {
      console.error(`Error creating ${createType}:`, error);
      setErrorMessage(`Failed to create ${createType}: ${error.message}`);
      setIsCreating(false);
    }
  };
  
  // Open the create dialog
  const openCreateDialog = (type) => {
    setCreateType(type);
    setNewItemName('');
    setErrorMessage('');
    setShowCreateDialog(true);
  };
  
  // Close the create dialog
  const closeCreateDialog = () => {
    setShowCreateDialog(false);
    setNewItemName('');
    setErrorMessage('');
  };
  
  // Handle key press in the create dialog
  const handleCreateKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      createNewItem();
    } else if (e.key === 'Escape') {
      closeCreateDialog();
    }
  };

  // Open the rename dialog for a file or folder
  const openRenameDialog = (item) => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to rename files.');
      return;
    }
    
    setItemToRename(item);
    setNewName(item.name);
    setErrorMessage('');
    setShowRenameDialog(true);
  };
  
  // Close the rename dialog
  const closeRenameDialog = () => {
    setShowRenameDialog(false);
    setItemToRename(null);
    setNewName('');
    setErrorMessage('');
  };
  
  // Open the delete dialog for a file or folder
  const openDeleteDialog = (item) => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to delete files.');
      return;
    }
    
    setItemToDelete(item);
    setErrorMessage('');
    setShowDeleteDialog(true);
  };
  
  // Close the delete dialog
  const closeDeleteDialog = () => {
    setShowDeleteDialog(false);
    setItemToDelete(null);
    setErrorMessage('');
  };
  
  // Handle drag start event
  const handleDragStart = (e, item) => {
    if (!isAdmin) return;
    
    setDraggedItem(item);
    e.dataTransfer.setData('text/plain', item.path);
    e.dataTransfer.effectAllowed = 'move';
    
    // Add dragging class to the element
    e.currentTarget.classList.add('dragging');
    
    // Remove the class after a short delay to ensure it's applied
    setTimeout(() => {
      if (e.currentTarget) {
        e.currentTarget.classList.remove('dragging');
      }
    }, 100);
  };
  
  // Handle drag over event
  const handleDragOver = (e, folder) => {
    if (!isAdmin || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Only allow dropping into directories
    if (folder.type === 'directory') {
      setDropTarget(folder);
      e.dataTransfer.dropEffect = 'move';
      
      // Add drop-target class to the element
      e.currentTarget.classList.add('drop-target');
    }
  };
  
  // Handle drag over for the file tree container (to allow dropping to root)
  const handleContainerDragOver = (e) => {
    if (!isAdmin || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Set root as the drop target
    const rootFolder = {
      type: 'directory',
      path: draggedItem.isPublic ? '/public' : '/',
      name: 'Root'
    };
    setDropTarget(rootFolder);
    e.dataTransfer.dropEffect = 'move';
  };
  
  // Handle drag leave event
  const handleDragLeave = (e) => {
    if (!isAdmin) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
  };
  
  // Handle drag leave for the container
  const handleContainerDragLeave = (e) => {
    if (!isAdmin) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
  };
  
  // Handle drop event
  const handleDrop = async (e, targetFolder) => {
    if (!isAdmin || !draggedItem || !targetFolder) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Reset drop target
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
    
    // Only allow dropping into directories
    if (targetFolder.type !== 'directory') {
      return;
    }
    
    // Check if dropping on itself
    if (draggedItem.path === targetFolder.path) {
      return;
    }
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    try {
      setIsMoving(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsMoving(false);
        return;
      }
      
      // Call the API to move the file
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          sourcePath: draggedItem.path,
          destinationPath: targetFolder.path
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to move ${draggedItem.type}: ${response.statusText}`);
      }
      
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // Clear drag state
      setDraggedItem(null);
      setIsMoving(false);
    } catch (error) {
      console.error(`Error moving ${draggedItem.type}:`, error);
      setErrorMessage(`Failed to move ${draggedItem.type}: ${error.message}`);
      setDraggedItem(null);
      setIsMoving(false);
    }
  };
  
  // Handle drop event for the container (moving to root)
  const handleContainerDrop = async (e) => {
    if (!isAdmin || !draggedItem || !dropTarget) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Process the drop using the dropTarget which was set in handleContainerDragOver
    const targetFolder = dropTarget;
    
    // Reset drop target
    setDropTarget(null);
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    try {
      setIsMoving(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsMoving(false);
        return;
      }
      
      // Call the API to move the file
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          sourcePath: draggedItem.path,
          destinationPath: targetFolder.path
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to move ${draggedItem.type}: ${response.statusText}`);
      }
      
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // Clear drag state
      setDraggedItem(null);
      setIsMoving(false);
    } catch (error) {
      console.error(`Error moving ${draggedItem.type} to root:`, error);
      setErrorMessage(`Failed to move ${draggedItem.type} to root: ${error.message}`);
      setDraggedItem(null);
      setIsMoving(false);
    }
  };
  
  // Delete a file or folder
  const deleteItem = async () => {
    if (!itemToDelete) {
      setErrorMessage('No item selected for deletion');
      return;
    }
    
    try {
      setIsDeleting(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsDeleting(false);
        return;
      }
      
      // Delete the file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_DELETE}?path=${encodeURIComponent(itemToDelete.path)}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to delete ${itemToDelete.type}: ${response.statusText}`);
      }
      
      // Close the dialog
      setShowDeleteDialog(false);
      setItemToDelete(null);
      
      // If the deleted item was selected, clear the selection
      if (selectedFile && selectedFile.path === itemToDelete.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (itemToDelete.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      setIsDeleting(false);
    } catch (error) {
      console.error(`Error deleting ${itemToDelete.type}:`, error);
      setErrorMessage(`Failed to delete ${itemToDelete.type}: ${error.message}`);
      setIsDeleting(false);
    }
  };
  
  // Handle key press in the rename dialog
  const handleRenameKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      renameItem();
    } else if (e.key === 'Escape') {
      closeRenameDialog();
    }
  };
  
  // Rename a file or folder
  const renameItem = async () => {
    if (!newName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    if (!itemToRename) {
      setErrorMessage('No item selected for renaming');
      return;
    }
    
    try {
      setIsRenaming(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsRenaming(false);
        return;
      }
      
      // Rename the file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_RENAME}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          oldPath: itemToRename.path,
          newName: newName.trim()
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to rename ${itemToRename.type}: ${response.statusText}`);
      }
      
      // Close the dialog and reset the form
      setShowRenameDialog(false);
      setItemToRename(null);
      setNewName('');
      
      // If the renamed item was selected, update the selected file
      if (selectedFile && selectedFile.path === itemToRename.path) {
        setSelectedFile(null);
      }
      
      // Refresh the appropriate file list
      if (itemToRename.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      setIsRenaming(false);
    } catch (error) {
      console.error(`Error renaming ${itemToRename.type}:`, error);
      setErrorMessage(`Failed to rename ${itemToRename.type}: ${error.message}`);
      setIsRenaming(false);
    }
  };
  
  // Handle folder selection
  const handleFolderSelect = (folder) => {
    // Update the current path to the selected folder's path
    setCurrentPath(folder.path);
    
    // Set the selected folder
    setSelectedFile(folder);
    
    // Expand the folder
    setExpandedFolders(prev => ({
      ...prev,
      [folder.path]: true
    }));
    
    // Reset content and preview
    setFileContent('');
    setShowPreview(false);
    
    // Reset edit mode
    if (editMode) {
      setEditMode(false);
    }
  };
  
  // Helper function to get parent directory path
  const getParentDirectoryPath = (filePath) => {
    // Remove trailing slash if present
    const normalizedPath = filePath.endsWith('/') ? filePath.slice(0, -1) : filePath;
    // Find the last slash in the path
    const lastSlashIndex = normalizedPath.lastIndexOf('/');
    
    if (lastSlashIndex === -1) {
      // No slash found, return root
      return '/';
    }
    
    // Return everything up to the last slash
    return normalizedPath.substring(0, lastSlashIndex) || '/';
  };
  
  // Handle file selection
  const handleFileSelect = (file) => {
    // If it's a directory, handle it differently
    if (file.type === 'directory') {
      handleFolderSelect(file);
      return;
    }
    
    setSelectedFile(file);
    
    // We don't change the current path when selecting a file
    // This prevents the file tree from reloading unnecessarily
    
    // Reset edit mode when selecting a new file
    if (editMode) {
      setEditMode(false);
    }
    
    // If it's a markdown file, fetch its content and show preview
    if (file.name.endsWith('.md')) {
      if (file.isPublic) {
        // Fetch public file content
        fetchPublicFileContent(file.path);
      } else {
        // Fetch private file content (admin only)
        fetchFileContent(file.path);
      }
      setShowPreview(true);
    } else {
      setFileContent('');
      setShowPreview(false);
    }
  };

  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    if (fileName.endsWith('.md')) return <FileText size={16} className="mr-2" />;
    if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return <Code size={16} className="mr-2" />;
    if (fileName.endsWith('.json')) return <Coffee size={16} className="mr-2" />;
    if (fileName.endsWith('.css')) return <BookOpen size={16} className="mr-2" />;
    return <File size={16} className="mr-2" />;
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    // Keep track of the path to the currently selected file to highlight its parent folder
    const selectedFilePath = selectedFile?.path || '';
    const selectedFileParentPath = selectedFile && selectedFile.type !== 'directory' ? 
      getParentDirectoryPath(selectedFilePath) : '';
    
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        // A folder is considered active if it's the current path OR if it's the parent of the selected file
        const isActive = currentPath === item.path || (selectedFileParentPath === item.path);
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center justify-between py-1 px-1 rounded hover:bg-stone-700 cursor-pointer group ${
                isActive ? 'bg-stone-800 text-teal-300 font-bold' : 
                isExpanded ? 'text-teal-300' : 'text-teal-400'
              } ${dropTarget && dropTarget.path === item.path ? 'bg-teal-900 border border-teal-500' : ''}`}
              onClick={() => toggleFolder(item.path, item)}
              draggable={isAdmin}
              onDragStart={(e) => handleDragStart(e, item)}
              onDragOver={(e) => handleDragOver(e, item)}
              onDragLeave={(e) => handleDragLeave(e)}
              onDrop={(e) => handleDrop(e, item)}
            >
              <div className="flex items-center">
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                <FolderOpen size={16} className="ml-1 mr-2" />
                <span className="text-sm">{item.name}</span>
              </div>
              
              {/* Admin-only buttons */}
              {isAdmin && (
                <div className="flex">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openRenameDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                    title="Rename folder"
                  >
                    <FileEdit size={14} />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openDeleteDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                    title="Delete folder"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              )}
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center justify-between py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 group ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
            draggable={isAdmin}
            onDragStart={(e) => handleDragStart(e, item)}
          >
            <div className="flex items-center">
              {getFileIcon(item.name)}
              <span className="text-sm">{item.name}</span>
            </div>
            
            {/* Admin-only buttons */}
            {isAdmin && (
              <div className="flex">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openRenameDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                  title="Rename file"
                >
                  <FileEdit size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openDeleteDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                  title="Delete file"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            )}
          </div>
        );
      }
    });
  };

  // Toggle edit mode
  const toggleEditMode = () => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to edit files.');
      return;
    }
    
    if (!selectedFile || !selectedFile.name.endsWith('.md')) {
      setErrorMessage('Only markdown files can be edited.');
      return;
    }
    
    setEditMode(!editMode);
    // When switching to preview mode, ensure preview is shown
    if (editMode) {
      setShowPreview(true);
    }
  };

  // Handle command input
  const handleCommand = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      onCommand(cmd);
      e.target.value = '';
      
      // Commands:
      // - refresh: refresh file list
      // - preview: toggle markdown preview
      // - edit: toggle edit mode (admin only)
      // - save: manually save the current file
      // - new-file: create a new file (admin only)
      // - new-folder: create a new folder (admin only)
      // - rename: rename selected file or folder (admin only)
      // - delete: delete selected file or folder (admin only)
      // - public: switch to public files tab
      // - private: switch to private files tab (admin only)
      if (cmd === 'refresh') {
        // Refresh the appropriate file list based on the active tab
        if (activeTab === 'public') {
          fetchPublicDirectoryContents('/', true);
        } else {
          fetchDirectoryContents('/', true);
        }
      } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
        setShowPreview(!showPreview);
        if (editMode) {
          setEditMode(false); // Exit edit mode when switching to preview
        }
      } else if (cmd === 'edit' && selectedFile?.name.endsWith('.md')) {
        toggleEditMode();
      } else if (cmd === 'save' && editMode && selectedFile?.name.endsWith('.md')) {
        saveFileContent();
      } else if (cmd === 'new-file' && isAdmin) {
        openCreateDialog('file');
      } else if (cmd === 'new-folder' && isAdmin) {
        openCreateDialog('directory');
      } else if (cmd === 'rename' && isAdmin && selectedFile) {
        openRenameDialog(selectedFile);
      } else if (cmd === 'delete' && isAdmin && selectedFile) {
        openDeleteDialog(selectedFile);
      } else if (cmd === 'public') {
        setActiveTab('public');
      } else if (cmd === 'private' && isAdmin) {
        setActiveTab('private');
      }
    }
  };

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden">
        {/* File tree panel */}
        <div className="w-1/3 border-r border-stone-700 flex flex-col overflow-hidden">
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
            <div className="flex items-center">
              <span>FILES</span>
              
              {/* Tabs for switching between public and private files */}
              <div className="flex ml-4">
                <button
                  onClick={() => setActiveTab('public')}
                  className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ${
                    activeTab === 'public' 
                      ? 'bg-stone-700 text-teal-300' 
                      : 'bg-stone-800 hover:bg-stone-700'
                  }`}
                  title="Public files (readable by all users)"
                >
                  <Globe size={14} />
                  <span>Public</span>
                </button>
                
                {isAdmin && (
                  <button
                    onClick={() => setActiveTab('private')}
                    className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ml-1 ${
                      activeTab === 'private' 
                        ? 'bg-stone-700 text-teal-300' 
                        : 'bg-stone-800 hover:bg-stone-700'
                    }`}
                    title="Private files (admin only)"
                  >
                    <Lock size={14} />
                    <span>Private</span>
                  </button>
                )}
              </div>
            </div>
            
            {/* Admin-only file creation buttons */}
            {isAdmin && (
              <div className="flex gap-2">
                <button
                  onClick={() => openCreateDialog('file')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Create new file"
                >
                  <Plus size={16} />
                </button>
                <button
                  onClick={() => openCreateDialog('directory')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Create new folder"
                >
                  <FolderPlus size={16} />
                </button>
              </div>
            )}
          </div>
          
          <div 
            className="flex-1 overflow-auto"
            onDragOver={handleContainerDragOver}
            onDragLeave={handleContainerDragLeave}
            onDrop={handleContainerDrop}
          >
            {isTreeLoading ? (
              <div className="flex items-center justify-center h-full">
                <span className="text-teal-300">Loading files...</span>
              </div>
            ) : errorMessage ? (
              <div className="p-2 text-red-400">{errorMessage}</div>
            ) : (
              <div className="p-2 font-mono">
                {activeTab === 'public' ? (
                  // Show public files to all users
                  <>
                    <div className="flex items-center py-1 px-1 text-teal-300">
                      <Globe size={16} className="mr-2" />
                      <span className="text-sm font-bold">Public Files</span>
                    </div>
                    {publicFiles.length > 0 ? (
                      renderFileTree(publicFiles)
                    ) : (
                      <div className="ml-4 text-stone-500 text-sm">No public files available</div>
                    )}
                  </>
                ) : (
                  // Show private files to admin users
                  <>
                    <div className="flex items-center py-1 px-1 text-teal-300">
                      <Lock size={16} className="mr-2" />
                      <span className="text-sm font-bold">Private Files (Admin Only)</span>
                    </div>
                    {files.length > 0 ? (
                      renderFileTree(files)
                    ) : (
                      <div className="ml-4 text-stone-500 text-sm">No private files available</div>
                    )}
                  </>
                )}
              </div>
            )}
          </div>
          
          {/* Create file/folder dialog */}
          {showCreateDialog && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  {createType === 'file' ? 'New File' : 'New Folder'}
                </span>
                <button
                  onClick={closeCreateDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="flex gap-2">
                <input
                  ref={createInputRef}
                  type="text"
                  value={newItemName}
                  onChange={(e) => setNewItemName(e.target.value)}
                  onKeyDown={handleCreateKeyPress}
                  placeholder={createType === 'file' ? 'filename.ext' : 'folder name'}
                  className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                  disabled={isCreating}
                />
                <button
                  onClick={createNewItem}
                  disabled={isCreating || !newItemName.trim()}
                  className={`px-2 py-1 rounded text-xs ${
                    isCreating || !newItemName.trim()
                      ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
                      : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                  }`}
                >
                  {isCreating ? 'Creating...' : 'Create'}
                </button>
              </div>
            </div>
          )}
          
          {/* Rename file/folder dialog */}
          {showRenameDialog && itemToRename && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  Rename {itemToRename.type === 'directory' ? 'Folder' : 'File'}
                </span>
                <button
                  onClick={closeRenameDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="flex gap-2">
                <input
                  ref={renameInputRef}
                  type="text"
                  value={newName}
                  onChange={(e) => setNewName(e.target.value)}
                  onKeyDown={handleRenameKeyPress}
                  placeholder="New name"
                  className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                  disabled={isRenaming}
                />
                <button
                  onClick={renameItem}
                  disabled={isRenaming || !newName.trim() || newName === itemToRename.name}
                  className={`px-2 py-1 rounded text-xs ${
                    isRenaming || !newName.trim() || newName === itemToRename.name
                      ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
                      : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                  }`}
                >
                  {isRenaming ? 'Renaming...' : 'Rename'}
                </button>
              </div>
            </div>
          )}
          
          {/* Delete file/folder confirmation dialog */}
          {showDeleteDialog && itemToDelete && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  Delete {itemToDelete.type === 'directory' ? 'Folder' : 'File'}
                </span>
                <button
                  onClick={closeDeleteDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="mb-2 text-sm">
                <p>Are you sure you want to delete <span className="text-red-400 font-bold">{itemToDelete.name}</span>?</p>
                {itemToDelete.type === 'directory' && (
                  <p className="text-red-400 text-xs mt-1">This will delete all files and folders inside it!</p>
                )}
              </div>
              <div className="flex gap-2 justify-end">
                <button
                  onClick={closeDeleteDialog}
                  className="px-2 py-1 rounded text-xs bg-stone-700 hover:bg-stone-600"
                >
                  Cancel
                </button>
                <button
                  onClick={deleteItem}
                  disabled={isDeleting}
                  className={`px-2 py-1 rounded text-xs ${
                    isDeleting
                      ? 'bg-red-900 text-red-300 cursor-not-allowed'
                      : 'bg-red-700 text-red-100 hover:bg-red-600'
                  }`}
                >
                  {isDeleting ? 'Deleting...' : 'Delete'}
                </button>
              </div>
            </div>
          )}
          
          <div className="p-2 border-t border-stone-700 text-xs">
            {selectedFile ? selectedFile.path : currentPath}
          </div>
        </div>
        
        {/* File content panel (preview or edit) */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {selectedFile ? (
            <>
              {/* Header with file name, status, and controls */}
              <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
                <div className="flex items-center">
                  <span className="mr-2">{selectedFile.name}</span>
                  {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
                  {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
                  {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
                </div>
                
                {/* Only show edit/preview toggle for markdown files and admin users */}
                {selectedFile.name.endsWith('.md') && isAdmin && (
                  <div className="flex gap-2">
                    <button 
                      onClick={toggleEditMode}
                      className={`px-2 py-1 rounded text-xs flex items-center gap-1 ${editMode ? 'bg-teal-700 text-teal-100' : 'bg-stone-800 hover:bg-stone-700'}`}
                      title={editMode ? "Switch to preview mode" : "Switch to edit mode"}
                    >
                      {editMode ? <Eye size={14} /> : <Edit size={14} />}
                      {editMode ? 'Preview' : 'Edit'}
                    </button>
                    
                    {editMode && (
                      <button 
                        onClick={saveFileContent}
                        className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs"
                        title="Save file"
                      >
                        Save
                      </button>
                    )}
                  </div>
                )}
              </div>
              
              {/* Error message */}
              {errorMessage && (
                <div className="p-2 bg-red-900 text-red-200 text-sm">
                  {errorMessage}
                </div>
              )}
              
              {/* Content area - either editor or preview */}
              {isContentLoading ? (
                <div className="flex-1 flex items-center justify-center">
                  <span className="text-teal-300">Loading content...</span>
                </div>
              ) : editMode && selectedFile.name.endsWith('.md') && isAdmin ? (
                // Editor mode - only for markdown files and admin users
                <div className="flex-1 flex flex-col">
                  {/* Markdown toolbar */}
                  <div className="p-2 border-b border-stone-700 bg-stone-800 flex flex-wrap gap-2">
                    <button 
                      onClick={() => insertMarkdown('### ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Heading"
                    >
                      <Heading size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('**', '**')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Bold"
                    >
                      <Bold size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('*', '*')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Italic"
                    >
                      <Italic size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('`', '`')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Inline Code"
                    >
                      <CodeIcon size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('[', '](url)')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Link"
                    >
                      <Link size={16} />
                    </button>
                    <span className="border-r border-stone-700 h-6"></span>
                    <button 
                      onClick={() => insertList('- ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Bullet List"
                    >
                      <List size={16} />
                    </button>
                    <button 
                      onClick={() => insertList('1. ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Numbered List"
                    >
                      <ListOrdered size={16} />
                    </button>
                    <button 
                      onClick={() => insertList('- [ ] ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Checklist"
                    >
                      <CheckSquare size={16} />
                    </button>
                  </div>
                  
                  <div className="flex-1 p-2">
                    <textarea
                      ref={textareaRef}
                      className="w-full h-full bg-stone-800 text-teal-50 p-4 resize-none focus:outline-none font-mono"
                      value={fileContent}
                      onChange={handleMarkdownChange}
                      onKeyDown={handleEditorKeyDown}
                      placeholder="# Start typing your markdown here..."
                    />
                  </div>
                </div>
              ) : showPreview ? (
                // Preview mode
                <div className="flex-1 overflow-auto p-4">
                  <div className="markdown-preview text-teal-50">
                    {selectedFile.name.endsWith('.md') ? (
                      <div 
                        dangerouslySetInnerHTML={{ 
                          __html: converter.makeHtml(fileContent) 
                        }} 
                        className="markdown-content"
                      />
                    ) : (
                      <pre className="font-mono text-sm whitespace-pre-wrap">
                        {fileContent}
                      </pre>
                    )}
                  </div>
                </div>
              ) : null}
            </>
          ) : (
            // No file selected
            <div className="flex items-center justify-center h-full text-stone-600">
              <div className="text-center">
                <FileText size={48} className="mx-auto mb-4" />
                <p>Select a markdown file to preview</p>
                <p className="text-xs mt-2">Use the 'preview' command to toggle preview mode</p>
                {isAdmin && <p className="text-xs mt-1">Admin users can use the 'edit' command to edit markdown files</p>}
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Command input */}
      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="text-teal-400">$</span>
        <input
          ref={focusRef}
          type="text"
          onKeyDown={handleCommand}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
        />
      </div>
    </div>
  );
};

export default ExplorerWindow;

================
File: windows/index.js
================
import TerminalWindow from './TerminalWindow';
import ExplorerWindow from './explorer/ExplorerWindow';
import withCommandHandling from '../../hocs/withCommandHandling';
import withWindowState from '../../hocs/withWindowState';
import withCommandInput from '../../hocs/withCommandInput';
import AudioWindow from './AudioWindow';
import ChatWindow from './ChatWindow';
import AdminWindow from './AdminWindow';
import CanvasWindow from './CanvasWindow';
import MarketplaceWindow from './MarketplaceWindow';
import { WINDOW_TYPES } from '../../utils/constants';

// Create enhanced versions of each window component by wrapping them with HOCs
// Terminal and Explorer already have command inputs, so we don't need to add them
export const EnhancedTerminalWindow = withWindowState(withCommandHandling(TerminalWindow), WINDOW_TYPES.TERMINAL);
export const EnhancedExplorerWindow = withWindowState(withCommandHandling(ExplorerWindow), WINDOW_TYPES.EXPLORER);

// For other windows, add the command input
export const EnhancedAudioWindow = withWindowState(withCommandHandling(withCommandInput(AudioWindow)), WINDOW_TYPES.AUDIO);
export const EnhancedChatWindow = withWindowState(withCommandHandling(withCommandInput(ChatWindow)), WINDOW_TYPES.CHAT);
export const EnhancedAdminWindow = withWindowState(withCommandHandling(withCommandInput(AdminWindow)), WINDOW_TYPES.ADMIN);
export const EnhancedCanvasWindow = withWindowState(withCommandHandling(CanvasWindow), WINDOW_TYPES.CANVAS);
export const EnhancedMarketplaceWindow = withWindowState(withCommandHandling(withCommandInput(MarketplaceWindow)), WINDOW_TYPES.MARKETPLACE);

// Also export the base components in case they're needed
export { TerminalWindow, ExplorerWindow, ChatWindow, AdminWindow, CanvasWindow, MarketplaceWindow };

================
File: windows/mapeditor/components/OpacitySlider.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import '../styles/RangeSlider.css';

/**
 * Custom OpacitySlider component that provides better interaction handling
 * than the standard HTML range input in complex UI scenarios.
 */
const OpacitySlider = ({ value, onChange, className = '' }) => {
  // Refs for DOM elements
  const trackRef = useRef(null);
  const thumbRef = useRef(null);
  const containerRef = useRef(null);
  
  // State to track dragging status
  const [isDragging, setIsDragging] = useState(false);
  const [displayValue, setDisplayValue] = useState(value || 1.0);
  
  // Update display value when prop changes
  useEffect(() => {
    setDisplayValue(value || 1.0);
  }, [value]);
  
  // Calculate position based on value (0-1)
  const getThumbPosition = (val) => {
    return `${val * 100}%`;
  };
  
  // Calculate value from mouse/touch position
  const calculateValueFromPosition = (clientX) => {
    if (!trackRef.current) return 0;
    
    const rect = trackRef.current.getBoundingClientRect();
    const trackWidth = rect.width;
    const offset = clientX - rect.left;
    
    // Calculate value (0-1) based on position
    let newValue = offset / trackWidth;
    
    // Clamp value between 0 and 1
    newValue = Math.max(0, Math.min(1, newValue));
    
    // Round to nearest 0.05
    return Math.round(newValue * 20) / 20;
  };
  
  // Handle mouse/touch down
  const handleStart = (clientX) => {
    setIsDragging(true);
    const newValue = calculateValueFromPosition(clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
    
    // Add document-level event listeners
    document.addEventListener('mousemove', handleMove);
    document.addEventListener('mouseup', handleEnd);
    document.addEventListener('touchmove', handleTouchMove);
    document.addEventListener('touchend', handleEnd);
  };
  
  // Handle mouse/touch move
  const handleMove = (e) => {
    if (!isDragging) return;
    const newValue = calculateValueFromPosition(e.clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
  };
  
  // Handle touch move with proper event handling
  const handleTouchMove = (e) => {
    if (!isDragging || !e.touches[0]) return;
    const newValue = calculateValueFromPosition(e.touches[0].clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
  };
  
  // Handle mouse/touch up - end dragging
  const handleEnd = () => {
    setIsDragging(false);
    
    // Remove document-level event listeners
    document.removeEventListener('mousemove', handleMove);
    document.removeEventListener('mouseup', handleEnd);
    document.removeEventListener('touchmove', handleTouchMove);
    document.removeEventListener('touchend', handleEnd);
  };
  
  // Handle mouse down on track/thumb
  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    handleStart(e.clientX);
  };
  
  // Handle touch start on track/thumb
  const handleTouchStart = (e) => {
    e.stopPropagation();
    if (e.touches[0]) {
      handleStart(e.touches[0].clientX);
    }
  };

  return (
    <div 
      className={`custom-slider-container ${className}`}
      ref={containerRef}
      onClick={e => e.stopPropagation()}
    >
      {/* Display percentage value */}
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs text-stone-400" title="Adjust layer transparency">
          Opacity:
        </span>
        <span className="text-xs font-medium text-teal-300">
          {Math.round(displayValue * 100)}%
        </span>
      </div>
      
      {/* Slider track and thumb */}
      <div 
        className="custom-slider-track"
        ref={trackRef}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
        onClick={e => e.stopPropagation()}
        style={{
          background: `linear-gradient(to right, #14b8a6 0%, #14b8a6 ${displayValue * 100}%, #44403c ${displayValue * 100}%, #44403c 100%)`
        }}
      >
        {/* Draggable thumb */}
        <div
          className="custom-slider-thumb"
          ref={thumbRef}
          style={{ left: getThumbPosition(displayValue) }}
          onMouseDown={handleMouseDown}
          onTouchStart={handleTouchStart}
        />
      </div>
    </div>
  );
};

export default OpacitySlider;

================
File: windows/mapeditor/LayerPanel.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Eye, EyeOff, Layers, Plus, Trash2, ArrowUp, ArrowDown, Edit2, ChevronDown, ChevronUp } from 'lucide-react';
import TilePalette from './TilePalette';
import OpacitySlider from './components/OpacitySlider';

/**
 * Layer panel component for the Map Editor
 * Allows for managing layers (visibility, order, etc) and selecting tiles
 */
const LayerPanel = ({ 
  layers, 
  currentLayer, 
  setCurrentLayer, 
  onToggleLayerVisibility, 
  onAddLayer, 
  onRemoveLayer, 
  onMoveLayerUp, 
  onMoveLayerDown, 
  onRenameLayer,
  onUpdateLayerOpacity,
  selectedTileId = 0,
  onSelectTile,
  selectedRotation, // Add prop for receiving rotation state
  onRotateTile,     // Add prop for passing rotation handler
  currentTool,
  setCurrentTool,
  brushSize = 1,
  setBrushSize
}) => {
  // State for tracking which layer is being edited and the current edited name
  const [editingLayerIndex, setEditingLayerIndex] = useState(null);
  const [editedLayerName, setEditedLayerName] = useState('');
  const [expandedOpacityLayers, setExpandedOpacityLayers] = useState({});
  const layerNameInputRef = useRef(null);
  
  // Toggle opacity controls for a layer
  const toggleOpacityControls = (layerIndex, e) => {
    e.stopPropagation();
    setExpandedOpacityLayers(prev => ({
      ...prev,
      [layerIndex]: !prev[layerIndex]
    }));
  };
  
  // Focus input when editing starts
  useEffect(() => {
    if (editingLayerIndex !== null && layerNameInputRef.current) {
      layerNameInputRef.current.focus();
    }
  }, [editingLayerIndex]);
  
  // Handle starting the edit process
  const handleStartEditing = (e, layerIndex) => {
    e.stopPropagation();
    setEditingLayerIndex(layerIndex);
    setEditedLayerName(layers[layerIndex].name);
  };
  
  // Handle saving the edited name
  const handleSaveLayerName = (layerIndex) => {
    if (editedLayerName.trim()) {
      onRenameLayer(layerIndex, editedLayerName);
    }
    setEditingLayerIndex(null);
  };
  
  // Handle keydown events in the input field
  const handleInputKeyDown = (e, layerIndex) => {
    if (e.key === 'Enter') {
      handleSaveLayerName(layerIndex);
    } else if (e.key === 'Escape') {
      setEditingLayerIndex(null);
    }
  };

  return (
    <div className="w-64 bg-stone-800 border-l border-stone-700 flex flex-col overflow-hidden">
      {/* Brush Size Control */}
      <div className="p-2 border-b border-stone-700">
        <div className="flex items-center justify-between">
          <span className="text-sm text-teal-400">BRUSH SIZE:</span>
          <div className="flex items-center">
            <button
              onClick={() => setBrushSize(Math.max(1, brushSize - 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-l text-teal-300 text-xs focus:outline-none"
            >
              -
            </button>
            <input
                type="number"
                value={brushSize}
                onChange={(e) => {
                  const value = parseInt(e.target.value, 10);
                  if (!isNaN(value) && value > 0) setBrushSize(value);
                }}
                className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 border-x-0 focus:outline-none text-center
                          [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                min="1"
                max="10"
              />
            <button
              onClick={() => setBrushSize(Math.min(10, brushSize + 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-r text-teal-300 text-xs focus:outline-none"
            >
              +
            </button>
          </div>
        </div>
        <div className="text-xs text-stone-400 mt-1">
          {brushSize}×{brushSize}
        </div>
      </div>
      
      {/* Tile Type and Palette Section */}
      <div className="border-b border-stone-700">
        <TilePalette 
          selectedTileId={selectedTileId}
          onSelectTile={onSelectTile}
          selectedRotation={selectedRotation} // Pass rotation state down
          onRotateTile={onRotateTile}         // Pass rotation handler down
          tileType={currentTool}
          onChangeTileType={setCurrentTool}
        />
      </div>
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <Layers size={14} className="mr-2" />
          <span>LAYERS</span>
        </div>
        <button
          onClick={onAddLayer}
          className="p-1 rounded hover:bg-stone-700 text-teal-400"
          title="Add new layer"
        >
          <Plus size={16} />
        </button>
      </div>
      
      <div className="flex-1 overflow-auto">
        {layers && layers.length > 0 ? (
          <div className="p-2">
            {/* Show layers in reverse order so top layer is shown first */}
            {[...layers].reverse().map((layer, idx) => {
              // Calculate the actual index
              const actualIndex = layers.length - 1 - idx;
              const isActive = currentLayer === actualIndex;
              
              return (
                <div 
                  key={`layer-${actualIndex}`}
                  className={`mb-2 p-2 rounded border ${
                    isActive 
                      ? 'bg-stone-700 border-teal-500 text-teal-300' 
                      : 'bg-stone-800 border-stone-700 text-teal-50 hover:bg-stone-700'
                  }`}
                  onClick={() => setCurrentLayer(actualIndex)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      {/* Layer visibility toggle */}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onToggleLayerVisibility(actualIndex);
                        }}
                        className="mr-2 hover:bg-stone-600 p-1 rounded"
                        title={layer.visible ? "Hide layer" : "Show layer"}
                      >
                        {layer.visible ? <Eye size={14} /> : <EyeOff size={14} />}
                      </button>
                      
                      {/* Layer name - either editable or static */}
                      {editingLayerIndex === actualIndex ? (
                        <input
                          ref={layerNameInputRef}
                          className="bg-stone-600 text-sm text-teal-100 px-1 py-0.5 rounded border border-teal-500 focus:outline-none"
                          value={editedLayerName}
                          onChange={(e) => setEditedLayerName(e.target.value)}
                          onKeyDown={(e) => handleInputKeyDown(e, actualIndex)}
                          onBlur={() => handleSaveLayerName(actualIndex)}
                          onClick={(e) => e.stopPropagation()}
                          size={15}
                        />
                      ) : (
                        <span className="text-sm">{layer.name}</span>
                      )}
                    </div>
                    
                    {/* Layer operations */}
                    <div className="flex">
                      {/* Toggle opacity controls button */}
                      <button
                        onClick={(e) => toggleOpacityControls(actualIndex, e)}
                        className={`p-1 hover:bg-stone-600 rounded ${expandedOpacityLayers[actualIndex] ? 'bg-stone-600' : ''}`}
                        title="Toggle opacity controls"
                      >
                        {expandedOpacityLayers[actualIndex] ? 
                          <ChevronUp size={14} /> : 
                          <ChevronDown size={14} />
                        }
                      </button>
                      <button
                        onClick={(e) => handleStartEditing(e, actualIndex)}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Rename layer"
                      >
                        <Edit2 size={14} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerUp(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer up"
                        disabled={actualIndex === layers.length - 1}
                      >
                        <ArrowUp size={14} className={actualIndex === layers.length - 1 ? "opacity-30" : ""} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerDown(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer down"
                        disabled={actualIndex === 0}
                      >
                        <ArrowDown size={14} className={actualIndex === 0 ? "opacity-30" : ""} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveLayer(actualIndex);
                        }}
                        className="p-1 hover:bg-red-900 rounded text-red-400 hover:text-red-300"
                        title="Delete layer"
                        disabled={layers.length <= 1}
                      >
                        <Trash2 size={14} className={layers.length <= 1 ? "opacity-30" : ""} />
                      </button>
                    </div>
                  </div>
                  
                  {/* Opacity controls - only shown when expanded */}
                  {expandedOpacityLayers[actualIndex] && (
                    <div 
                      className="mt-2 px-1 pt-2 border-t border-stone-600" 
                      onClick={e => e.stopPropagation()}
                    >
                      <div className="flex items-center">
                        <div className="text-xs text-stone-400 mr-2 w-14">Opacity:</div>
                        
                        {/* Numeric input */}
                        <div className="flex items-center">
                          <input
                            type="text"
                            value={Math.round((layer.opacity || 1.0) * 100)}
                            onChange={(e) => {
                              // Get the value as a number
                              let value = parseInt(e.target.value, 10);
                              
                              // Validate: ensure it's a number between 0-100
                              if (isNaN(value)) value = 100;
                              value = Math.max(0, Math.min(100, value));
                              
                              // Convert percentage to decimal (0-1 range) and update
                              const opacityValue = value / 100;
                              if (onUpdateLayerOpacity) {
                                onUpdateLayerOpacity(actualIndex, opacityValue);
                              }
                            }}
                            className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 rounded border border-stone-600 focus:border-teal-500 focus:outline-none text-center"
                            title="Layer opacity (0-100%)"
                          />
                          <span className="text-xs text-stone-400 ml-1">%</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        ) : (
          <div className="flex items-center justify-center h-full">
            <span className="text-stone-500">No layers defined</span>
          </div>
        )}
      </div>
      
      {/* Layer information */}
      <div className="p-2 border-t border-stone-700 text-xs">
        {layers && currentLayer !== undefined && layers[currentLayer] ? (
          <div>
            <div className="text-stone-400">Selected: {layers[currentLayer].name}</div>
            <div className="text-stone-400">Total cells: {layers[currentLayer].cells?.length || 0}</div>
          </div>
        ) : (
          <div className="text-stone-500">No layer selected</div>
        )}
      </div>
    </div>
  );
};

export default LayerPanel;

================
File: windows/mapeditor/MapCanvas.jsx
================
import React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';
import { Grid } from 'lucide-react';
import { screenToGridCoordinates, gridToScreenCoordinates } from './utils/mapUtils';
import { getTileCoordinates, FLOOR_TILESET_PATH, WALL_TILESET_PATH, SHADOW_TILESET_PATH, TILE_SIZE, TILESET_COLS } from './utils/tileRegistry';

/**
 * The main canvas component for the Grid Map Editor
 * Handles rendering and interaction with the grid map
 */
const MapCanvas = ({ 
  mapData, 
  currentLayer, 
  currentTool, 
  selectedTileId = 0,
  selectedRotation = 0,
  onEdit, 
  showGrid = true, 
  resetViewRef,
  brushSize = 1,
  // Add the onViewportChange prop to save viewport changes
  onViewportChange = null
}) => {
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  // Initialize with default values, will be overridden if mapData contains viewport info
  const [gridSize, setGridSize] = useState(32);
  const [viewportOffset, setViewportOffset] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [activeMouseButton, setActiveMouseButton] = useState(null);
  const [hoverCell, setHoverCell] = useState(null);
  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
  const [isSpacePressed, setIsSpacePressed] = useState(false);
  const [floorTilesetImage, setFloorTilesetImage] = useState(null);
  const [wallTilesetImage, setWallTilesetImage] = useState(null);
  const [shadowTilesetImage, setShadowTilesetImage] = useState(null);
  const [actualColumns, setActualColumns] = useState(TILESET_COLS);

  const [initialViewportLoaded, setInitialViewportLoaded] = useState(false);

    // Function to save viewport changes
    const saveViewport = useCallback(() => {
      if (onViewportChange) {
        onViewportChange({
          x: viewportOffset.x,
          y: viewportOffset.y,
          scale: gridSize / 32 // Store scale as a ratio of the default grid size
        });
      }
    }, [viewportOffset, gridSize, onViewportChange]);
  
  // Reset view to origin (0,0) function
  const resetViewToOrigin = useCallback(() => {
    setViewportOffset({ x: 0, y: 0 });
  }, []);

  // Store the reset function in the provided ref
  useEffect(() => {
    if (resetViewRef) {
      resetViewRef.current = resetViewToOrigin;
    }
  }, [resetViewToOrigin, resetViewRef]);
  
  // Load the tileset images on component mount
  useEffect(() => {
    // Load floor tileset
    const floorImg = new Image();
    floorImg.onload = () => {
      // Calculate columns based on the image width
      const cols = Math.floor(floorImg.width / TILE_SIZE);
      console.log(`MapCanvas: Detected ${cols} columns in the floor sprite sheet`);
      
      // Batch state updates to avoid multiple re-renders
      setActualColumns(cols);
      setFloorTilesetImage(floorImg);
    };
    floorImg.onerror = () => console.error('Failed to load floor tileset');
    floorImg.src = FLOOR_TILESET_PATH;
    
    // Load wall tileset
    const wallImg = new Image();
    wallImg.onload = () => {
      setWallTilesetImage(wallImg);
      console.log('MapCanvas: Wall tileset loaded successfully');
    };
    wallImg.onerror = () => console.error('Failed to load wall tileset');
    wallImg.src = WALL_TILESET_PATH;

    const shadowImg = new Image();
    shadowImg.onload = () => {
      setShadowTilesetImage(shadowImg);
      console.log('MapCanvas: Shadow tileset loaded successfully');
    };
    shadowImg.onerror = () => console.error('Failed to load shadow tileset');
    shadowImg.src = SHADOW_TILESET_PATH;
  }, []);

  /**
   * Draw a tile on the canvas based on its type and tile ID
   * @param {CanvasRenderingContext2D} ctx - Canvas context
   * @param {number} x - X position on canvas
   * @param {number} y - Y position on canvas
   * @param {number} size - Size of the tile
   * @param {Object} cell - The cell data including type and tileId
   */
  // Pass showGrid to the drawTile function
  const drawTile = (ctx, x, y, size, cell) => {
    const { type, tileId, rotation = 0 } = cell;
    
    // Add debugging for rotation values
    if (rotation !== 0) {
      console.log(`Drawing cell at (${cell.x}, ${cell.y}) with rotation: ${rotation}°`);
    }
    
    // Handle floor tiles with tileset
    if (type === 'floor' && tileId !== undefined && floorTilesetImage) {
      // Calculate coordinates based on actual columns in the sheet
      // instead of using getTileCoordinates which might use the wrong column count
      const col = tileId % actualColumns;
      const row = Math.floor(tileId / actualColumns);
      const sourceX = col * TILE_SIZE;
      const sourceY = row * TILE_SIZE;
      
      // Handle rotation
      if (rotation !== 0) {
        // Save the current context state
        ctx.save();
        
        // Move to the center of the tile position
        ctx.translate(x + size/2, y + size/2);
        
        // Rotate the context by the specified angle (convert degrees to radians)
        const angleInRadians = (rotation * Math.PI) / 180;
        ctx.rotate(angleInRadians);
        
        // Draw the tile, but with coordinates adjusted to draw centered around origin
        ctx.drawImage(
          floorTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          -size/2, -size/2, size, size
        );
        
        // Restore the context to its original state
        ctx.restore();
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      } else {
        // No rotation, draw normally
        ctx.drawImage(
          floorTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          x, y, size, size
        );
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      }
      return;
    }
    
    // Handle wall tiles with tileset
    if (type === 'wall' && tileId !== undefined && wallTilesetImage) {
      // Calculate coordinates based on actual columns in the sheet
      const col = tileId % actualColumns;
      const row = Math.floor(tileId / actualColumns);
      const sourceX = col * TILE_SIZE;
      const sourceY = row * TILE_SIZE;
      
      // Handle rotation
      if (rotation !== 0) {
        // Save the current context state
        ctx.save();
        
        // Move to the center of the tile position
        ctx.translate(x + size/2, y + size/2);
        
        // Rotate the context by the specified angle (convert degrees to radians)
        const angleInRadians = (rotation * Math.PI) / 180;
        ctx.rotate(angleInRadians);
        
        // Draw the tile, but with coordinates adjusted to draw centered around origin
        ctx.drawImage(
          wallTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          -size/2, -size/2, size, size
        );
        
        // Restore the context to its original state
        ctx.restore();
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      } else {
        // No rotation, draw normally
        ctx.drawImage(
          wallTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          x, y, size, size
        );
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      }
      return;
    }

    // Handle shadow tiles with tileset
    if (type === 'shadow' && shadowTilesetImage) {
      // Calculate coordinates based on actual columns in the sheet
      const effectiveTileId = tileId !== undefined ? tileId : 0;
      const col = effectiveTileId  % actualColumns;
      const row = Math.floor(effectiveTileId  / actualColumns);
      const sourceX = col * TILE_SIZE;
      const sourceY = row * TILE_SIZE;
      
      // Handle rotation
      if (rotation !== 0) {
        // Save the current context state
        ctx.save();
        
        // Move to the center of the tile position
        ctx.translate(x + size/2, y + size/2);
        
        // Rotate the context by the specified angle (convert degrees to radians)
        const angleInRadians = (rotation * Math.PI) / 180;
        ctx.rotate(angleInRadians);
        
        // Draw the tile, but with coordinates adjusted to draw centered around origin
        ctx.drawImage(
          shadowTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          -size/2, -size/2, size, size
        );
        
        // Restore the context to its original state
        ctx.restore();
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      } else {
        // No rotation, draw normally
        ctx.drawImage(
          shadowTilesetImage,
          sourceX, sourceY, TILE_SIZE, TILE_SIZE,
          x, y, size, size
        );
        
        // Draw grid lines on top only if showGrid is true
        if (showGrid) {
          ctx.strokeStyle = '#44403c'; // Stone-700
          ctx.strokeRect(x, y, size, size);
        }
      }
      return;
    }
    
    // Fall back to original color-based rendering for other types
    switch(type) {
      case 'wall':
        // Fallback if wall tileset image failed to load or tileId is undefined
        ctx.fillStyle = '#6b7280'; // Gray
        ctx.fillRect(x, y, size, size);
        break;
      case 'floor':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#1e293b'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'shadow':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#BF40BF'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'door':
        // For doors, apply rotation to the whole door element
        if (rotation !== 0) {
          // Save the current context state
          ctx.save();
          
          // Move to the center of the tile position
          ctx.translate(x + size/2, y + size/2);
          
          // Rotate the context by the specified angle (convert degrees to radians)
          const angleInRadians = (rotation * Math.PI) / 180;
          ctx.rotate(angleInRadians);
          
          // Draw floor background
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(-size/2, -size/2, size, size);
          
          // Draw door centered
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(-size/4, -size/4, size/2, size/2);
          
          // Restore the context to its original state
          ctx.restore();
        } else {
          // Draw floor first (no rotation)
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(x, y, size, size);
          // Then draw door
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(x + size/4, y + size/4, size/2, size/2);
        }
        break;
      // Add more tile types as needed
      default:
        // Unknown tile type, draw placeholder
        ctx.fillStyle = '#ef4444'; // Red-500
        ctx.fillRect(x, y, size, size);
    }
    
    // Draw grid lines on top only if showGrid is true
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700
      ctx.strokeRect(x, y, size, size);
    }
  };

  /**
   * Handle cell editing with a specific tool or the current selected tool
   */
  const handleCellEdit = (e, overrideTool) => {
    if (!canvasRef.current || !mapData || !onEdit) return;
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to grid coordinates
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
        
    // Basic validation if the center point is outside map boundaries
    if (gridCoords.x < 0 || gridCoords.x >= mapData.width || 
        gridCoords.y < 0 || gridCoords.y >= mapData.height) {
      // Coordinates outside map boundary - do nothing
      return;
    }
    
    // Use the override tool if provided, otherwise use the current tool
    const toolToUse = overrideTool || currentTool;
    
    // Only edit if using a tool other than select
    if (toolToUse === 'select') return;
    
    // For brush size of 1, just edit the single cell
    if (brushSize === 1) {
  
      // Use the selectedRotation prop directly
      const rotation = parseInt(selectedRotation, 10) || 0;
      
      // CRITICAL DEBUG: Log the exact tileId being sent from MapCanvas
      console.log(`MapCanvas EDIT: At (${gridCoords.x}, ${gridCoords.y}) using tool=${toolToUse}, passing tileId=${selectedTileId}, rotation=${rotation}`);
      
      // This is especially important for shadow tiles
      if (toolToUse === 'shadow') {
        console.log(`SHADOW TILE EDIT: At (${gridCoords.x}, ${gridCoords.y}) tileId=${selectedTileId} - IMPORTANT! Verify this ID is preserved!`);
      }
      
      // Pass rotation and selectedTileId
      onEdit(gridCoords.x, gridCoords.y, toolToUse, rotation, selectedTileId);
  
      return;
    }
    
    // For larger brushes, always center around the hover cell
    // This matches the hover indicator logic for consistent behavior
    const halfBrush = Math.floor(brushSize / 2);
    
    // Calculate how to position the brush so the cursor is in the center
    // For even sizes, there's no true center cell, so we offset by half a cell
    const offset = brushSize % 2 === 0 ? 0.5 : 0;
    
    // Apply to all cells in the brush area
    for (let dy = -halfBrush + offset; dy < brushSize - halfBrush + offset; dy++) {
      for (let dx = -halfBrush + offset; dx < brushSize - halfBrush + offset; dx++) {
        const cellX = Math.floor(gridCoords.x + dx);
        const cellY = Math.floor(gridCoords.y + dy);
        
        // Skip if outside map boundaries
        if (cellX < 0 || cellX >= mapData.width || 
            cellY < 0 || cellY >= mapData.height) {
          continue;
        }
        
        // Edit this cell with the current rotation value from props
        const rotation = parseInt(selectedRotation, 10) || 0;
        
        // CRITICAL: For brush operations, also add logging for shadow tiles
        if (toolToUse === 'shadow') {
          console.log(`BRUSH: Shadow tile at (${cellX}, ${cellY}) with tileId=${selectedTileId}`);
        }
        
        onEdit(cellX, cellY, toolToUse, rotation, selectedTileId);
      }
    }
  };

  // Set up ResizeObserver to update canvas dimensions
  useLayoutEffect(() => {
    if (!containerRef.current) return;
    
    const updateCanvasSize = () => {
      if (containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        setCanvasSize({ width, height });
      }
    };
    
    // Initial size update
    updateCanvasSize();
    
    // Set up ResizeObserver
    const resizeObserver = new ResizeObserver(entries => {
      if (entries.length > 0) {
        updateCanvasSize();
      }
    });
    
    resizeObserver.observe(containerRef.current);
    
    // Clean up
    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  
  // Update hover cell when mouse moves
  const updateHoverCell = (e) => {
    if (!canvasRef.current || !mapData) return;
    
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Only set hover cell if it's within map boundaries
    if (gridCoords.x >= 0 && gridCoords.x < mapData.width && 
        gridCoords.y >= 0 && gridCoords.y < mapData.height) {
      setHoverCell(gridCoords);
    } else {
      // Clear hover cell when outside map boundaries
      setHoverCell(null);
    }
  };

  // Handle keyboard events for spacebar
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(true);
      }
    };

    const handleKeyUp = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(false);
        setIsDragging(false);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Reference to the canvas context
  const ctxRef = useRef(null);
  
  // Function to draw the canvas contents
  const drawCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !mapData) return;
    
    const ctx = canvas.getContext('2d');
    ctxRef.current = ctx;
    
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Background color
    ctx.fillStyle = '#1c1917'; // Stone-900 from Tailwind
    ctx.fillRect(0, 0, width, height);
    
    // Adjust for viewport offset
    const offsetX = viewportOffset.x;
    const offsetY = viewportOffset.y;
    
    // Draw default grid background - useful for visualizing empty spaces
    for (let x = 0; x < mapData.width; x++) {
      for (let y = 0; y < mapData.height; y++) {
        const screenX = Math.floor(x * gridSize + offsetX);
        const screenY = Math.floor(y * gridSize + offsetY);
        
        // Only draw if visible on screen
        if (screenX > -gridSize && screenX < width && 
            screenY > -gridSize && screenY < height) {
          // Draw a subtle background for all cells
          // ctx.fillStyle = '#0f172a'; // Very dark slate blue
          ctx.fillStyle = '#042f2e'; // Very dark slate blue
          ctx.fillRect(screenX, screenY, gridSize, gridSize);
        }
      }
    }
    
    // Draw a clear boundary around the map area
    const mapWidthPx = mapData.width * gridSize;
    const mapHeightPx = mapData.height * gridSize;
    const mapStartX = offsetX;
    const mapStartY = offsetY;
    
    // Draw boundary with more visible color
    ctx.strokeStyle = '#5eead4'; // Orange-500
    ctx.lineWidth = 2;
    ctx.strokeRect(mapStartX, mapStartY, mapWidthPx, mapHeightPx);
    
    // Add small corner markers for extra visibility
    const cornerSize = 8;
    ctx.fillStyle = '#5eead4'; // Orange-500
    
    // Top-left corner
    ctx.fillRect(mapStartX - 1, mapStartY - 1, cornerSize, cornerSize);
    
    // Top-right corner
    ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY - 1, cornerSize, cornerSize);
    
    // Bottom-left corner
    ctx.fillRect(mapStartX - 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
    
    // Bottom-right corner
    ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
    
    // Draw map data (cells from each layer)
    if (mapData && mapData.layers && mapData.layers.length > 0) {
      // Render each visible layer from bottom to top
      mapData.layers.forEach((layer, layerIndex) => {
        if (!layer.visible) return;
        
        // Set layer opacity if defined, default to 1.0 (fully opaque)
        const layerOpacity = layer.opacity !== undefined ? layer.opacity : 1.0;
        ctx.globalAlpha = layerOpacity;
        
        // Draw cells
        layer.cells.forEach(cell => {
          // Calculate screen position for this cell
          const screenX = Math.floor(cell.x * gridSize + offsetX);
          const screenY = Math.floor(cell.y * gridSize + offsetY);
          
          // Draw the tile if it's visible on screen
          if (screenX > -gridSize && screenX < width && 
              screenY > -gridSize && screenY < height) {
            drawTile(ctx, screenX, screenY, gridSize, cell);
          }
        });
        
        // Highlight current layer with a subtle border if it matches the currentLayer (only if showGrid is true)
        if (layerIndex === currentLayer && showGrid) {
          // Make sure we use full opacity for the highlight, regardless of layer opacity
          ctx.globalAlpha = 1.0;
          ctx.strokeStyle = 'rgba(20, 184, 166, 0.5)'; // Teal with opacity
          ctx.lineWidth = 2;
          
          layer.cells.forEach(cell => {
            const screenX = Math.floor(cell.x * gridSize + offsetX);
            const screenY = Math.floor(cell.y * gridSize + offsetY);
            
            if (screenX > -gridSize && screenX < width && 
                screenY > -gridSize && screenY < height) {
              ctx.strokeRect(screenX, screenY, gridSize, gridSize);
            }
          });
        }
        
        // Reset global alpha to default (1.0) after drawing this layer
        ctx.globalAlpha = 1.0;
      });
    }
    
    // Draw grid on top (only if showGrid is true)
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700 from Tailwind
      ctx.lineWidth = 1;
      
      // Calculate grid line positioning
      const gridOffsetX = offsetX % gridSize;
      const gridOffsetY = offsetY % gridSize;
      
      // Draw vertical lines
      for (let x = gridOffsetX; x < width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
      }
      
      // Draw horizontal lines
      for (let y = gridOffsetY; y < height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
      }
    }
    
    // Draw hover highlight
    if (hoverCell) {
      // For brush size of 1, just highlight the single cell
      if (brushSize === 1) {
        const screenX = Math.floor(hoverCell.x * gridSize + offsetX);
        const screenY = Math.floor(hoverCell.y * gridSize + offsetY);
        
        ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
        ctx.fillRect(screenX, screenY, gridSize, gridSize);
        
        // Show tool indicator
        ctx.fillStyle = '#14b8a6';
        ctx.font = '12px monospace';
        
        // If right mouse button is pressed, show "erase" as the tool
        const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
        ctx.fillText(displayTool, screenX + 5, screenY + 15);
      } else {
        // For larger brushes, always center around the hoverCell
        const halfBrush = Math.floor(brushSize / 2);
        
        // Calculate how to position the brush so the cursor is in the center
        // For even sizes, there's no true center cell, so we need to offset by half a cell
        const offset = brushSize % 2 === 0 ? 0.5 : 0;
        
        // Generate all cell positions that should be part of the brush
        for (let dy = -halfBrush + offset; dy < brushSize - halfBrush + offset; dy++) {
          for (let dx = -halfBrush + offset; dx < brushSize - halfBrush + offset; dx++) {
            const cellX = Math.floor(hoverCell.x + dx);
            const cellY = Math.floor(hoverCell.y + dy);
            
            // Skip if outside map boundaries
            if (cellX < 0 || cellX >= mapData.width || 
                cellY < 0 || cellY >= mapData.height) {
              continue;
            }
            
            // Calculate screen position (fixed to separate gridSize multiplication from offset)
            const screenX = Math.floor(cellX * gridSize) + offsetX;
            const screenY = Math.floor(cellY * gridSize) + offsetY;
            
            ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
            ctx.fillRect(screenX, screenY, gridSize, gridSize);
          }
        }
        
        // Show tool indicator centered on the cursor position
        const indicatorX = Math.floor(hoverCell.x * gridSize) + offsetX;
        const indicatorY = Math.floor(hoverCell.y * gridSize) + offsetY;
        
        ctx.fillStyle = '#14b8a6';
        ctx.font = '12px monospace';
        
        // If right mouse button is pressed, show "erase" as the tool
        const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
        ctx.fillText(`${displayTool} (${brushSize}×${brushSize})`, indicatorX + 5, indicatorY + 15);
      }
    }
  }, [
    gridSize, 
    viewportOffset, 
    mapData, 
    currentLayer, 
    hoverCell, 
    currentTool, 
    activeMouseButton, 
    showGrid, 
    floorTilesetImage,
    wallTilesetImage,
    shadowTilesetImage,
    actualColumns,
    // selectedRotation, // Removed: Toolbar rotation shouldn't trigger full canvas redraw
    brushSize  // Add brushSize as a dependency too for completeness
  ]);
  
  // Call drawCanvas whenever relevant dependencies change
  useEffect(() => {
    if (canvasRef.current && mapData) {
      drawCanvas();
    }
  }, [drawCanvas]);
  
  // Update canvas size when container size changes
  useEffect(() => {
    if (canvasRef.current && canvasSize.width > 0 && canvasSize.height > 0) {
      drawCanvas();
    }
  }, [canvasSize, drawCanvas]);

  // Manually trigger a redraw whenever tileset images are loaded
  // Breaking the circular dependency by removing drawCanvas from dependencies
  useEffect(() => {
    if ((floorTilesetImage || wallTilesetImage || shadowTilesetImage) && canvasRef.current && mapData) {
      // Call drawCanvas without adding it to dependency array
      drawCanvas();
    }
  }, [floorTilesetImage, wallTilesetImage, shadowTilesetImage, mapData]); // Removed drawCanvas dependency

  // Handle canvas mouse events
  const handleMouseDown = (e) => {
    // Prevent context menu on right click
    if (e.button === 2) {
      e.preventDefault();
    }
    
    setActiveMouseButton(e.button);
    
    // Middle mouse button (1) for panning
    if (e.button === 1) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
      e.preventDefault(); // Prevent default scrolling behavior for middle mouse button
    } 
    // Right mouse button (2) for erasing
    else if (e.button === 2 && !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
    // Left mouse button (0) for drawing with current tool
    else if (e.button === 0 && !isSpacePressed) {
      handleCellEdit(e);
    }
    // If space is pressed, start dragging regardless of which mouse button
    else if (isSpacePressed) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseMove = (e) => {
    // Always update hover cell
    updateHoverCell(e);
    
    // Handle dragging for pan with middle mouse button (1),
    // or spacebar + any mouse button
    if (isDragging && (activeMouseButton === 1 || isSpacePressed)) {
      const dx = e.clientX - dragStart.x;
      const dy = e.clientY - dragStart.y;
      
      setViewportOffset({
        x: viewportOffset.x + dx,
        y: viewportOffset.y + dy
      });
      
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle spacebar + mouse move (even without button press)
    else if (isSpacePressed && !isDragging) {
      // Start dragging when space is pressed and mouse moves
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle continuous drawing while left mouse button is down
    else if (activeMouseButton === 0 && !isSpacePressed) {
      handleCellEdit(e);
    }
    // Handle continuous erasing while right mouse button is down
    else if (activeMouseButton === 2 && !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
  };

  const handleMouseUp = () => {
    // Only stop dragging if we're not using spacebar navigation
    if (!isSpacePressed) {
      setIsDragging(false);
    }
    setActiveMouseButton(null);
  };

  const handleWheel = (e) => {
    // Get cursor position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Get grid coordinates under cursor before zoom
    const gridCoordsBefore = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Calculate new grid size
    let newGridSize;
    if (e.deltaY < 0) {
      // Zoom in - increase grid size
      newGridSize = Math.min(gridSize + 4, 64);
    } else {
      // Zoom out - decrease grid size
      newGridSize = Math.max(gridSize - 4, 16);
    }
    
    // Calculate screen coordinates after zoom with the current viewport offset
    const screenCoordsAfter = {
      x: gridCoordsBefore.x * newGridSize + viewportOffset.x,
      y: gridCoordsBefore.y * newGridSize + viewportOffset.y
    };
    
    // Calculate the difference to maintain cursor position
    const dx = mouseX - screenCoordsAfter.x;
    const dy = mouseY - screenCoordsAfter.y;
    
    // Update grid size and adjust viewport offset
    setGridSize(newGridSize);
    setViewportOffset(prev => ({
      x: prev.x + dx,
      y: prev.y + dy
    }));
  };

  return (
    <div 
      ref={containerRef}
      className="flex-1 relative flex overflow-hidden bg-stone-900"
    >
      <div className="absolute top-2 left-2 bg-stone-800 p-2 rounded text-xs text-teal-400 flex items-center z-10">
        <Grid size={14} className="mr-1" />
        <span>Grid Size: {gridSize}px</span>
        {!showGrid && <span className="ml-2">(Grid Hidden)</span>}
      </div>
      
      <canvas 
        ref={canvasRef}
        width={canvasSize.width}
        height={canvasSize.height}
        className="w-full h-full border border-stone-700"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onContextMenu={(e) => e.preventDefault()} // Prevent context menu on right click
      />
      <div className="absolute bottom-2 right-2 bg-stone-800 p-2 rounded text-xs text-teal-400 z-10">
        {currentTool && <span>Tool: {activeMouseButton === 2 ? 'erase' : currentTool}</span>}
        {hoverCell && <span className="ml-2">Position: ({hoverCell.x}, {hoverCell.y})</span>}
      </div>
    </div>
  );
};

export default MapCanvas;

================
File: windows/mapeditor/MapPropertiesPanel.jsx
================
import React, { useState } from 'react';
import { Grid, Save, Settings, X } from 'lucide-react';

/**
 * Panel for editing map properties
 */
const MapPropertiesPanel = ({ mapData, onApply, onCancel }) => {
  const [width, setWidth] = useState(mapData ? mapData.width : 20);
  const [height, setHeight] = useState(mapData ? mapData.height : 15);
  const [gridSize, setGridSize] = useState(mapData ? mapData.gridSize : 32);
  const [name, setName] = useState(mapData ? mapData.name : 'New Map');
  const [error, setError] = useState(null);

  // Validate input and apply changes
  const handleApply = () => {
    // Validate width and height
    if (width < 1 || width > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    
    if (height < 1 || height > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    
    if (gridSize < 16 || gridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }
    
    // Apply changes
    onApply({
      width: Number(width),
      height: Number(height),
      gridSize: Number(gridSize),
      name
    });
  };

  // Handle input changes
  const handleInputChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg p-4 w-64">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-teal-400 text-sm font-semibold flex items-center">
          <Settings size={16} className="mr-1" />
          Map Properties
        </h2>
        <button
          onClick={onCancel}
          className="text-stone-500 hover:text-stone-300"
        >
          <X size={16} />
        </button>
      </div>
      
      {error && (
        <div className="bg-red-900/30 text-red-400 p-2 rounded mb-3 text-xs">
          {error}
        </div>
      )}
      
      <div className="space-y-3">
        <div>
          <label className="block text-xs text-stone-400 mb-1">Map Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Width (cells)</label>
          <input
            type="text"
            value={width}
            onChange={handleInputChange(setWidth)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Height (cells)</label>
          <input
            type="text"
            value={height}
            onChange={handleInputChange(setHeight)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Grid Size (pixels)</label>
          <input
            type="text"
            value={gridSize}
            onChange={handleInputChange(setGridSize)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div className="pt-2 flex justify-end">
          <button
            onClick={handleApply}
            className="bg-teal-700 hover:bg-teal-600 text-teal-100 px-3 py-1 rounded text-xs flex items-center"
          >
            <Save size={14} className="mr-1" />
            Apply Changes
          </button>
        </div>
      </div>
    </div>
  );
};

export default MapPropertiesPanel;

================
File: windows/mapeditor/MapToolbar.jsx
================
import React, { useState, useEffect } from 'react';
import { 
  Save, Undo, Redo, Trash2, Copy, Square, Circle, 
  Grid, ZoomIn, ZoomOut, Download, Upload, Plus, Minus,
  Layers, MousePointer, Hammer, Wand2, FileText, Settings,
  Home
} from 'lucide-react';

/**
 * Toolbar component for the Map Editor
 */
const MapToolbar = ({ 
  onSave, 
  onUndo, 
  onRedo, 
  onClear, 
  onExportAscii, 
  onImportAscii,
  onToggleGrid,
  onResetView,
  showGrid = true,
  saveStatus = 'saved', // default to 'saved'
  mapData,
  onApplyProperties
}) => {
  const [showProperties, setShowProperties] = useState(false);
  const [mapName, setMapName] = useState(mapData?.name || 'New Map');
  const [mapWidth, setMapWidth] = useState(mapData?.width || 20);
  const [mapHeight, setMapHeight] = useState(mapData?.height || 15);
  const [mapGridSize, setMapGridSize] = useState(mapData?.gridSize || 32);
  const [error, setError] = useState(null);

  // Update state when mapData changes
  useEffect(() => {
    if (mapData) {
      setMapName(mapData.name || 'New Map');
      setMapWidth(mapData.width || 20);
      setMapHeight(mapData.height || 15);
      setMapGridSize(mapData.gridSize || 32);
    }
  }, [mapData]);

  // Handle applying property changes
  const handleApplyProperties = () => {
    // Validate inputs
    if (mapWidth < 1 || mapWidth > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    if (mapHeight < 1 || mapHeight > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    if (mapGridSize < 16 || mapGridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }

    // Clear any errors
    setError(null);

    // Apply changes
    onApplyProperties({
      name: mapName,
      width: Number(mapWidth),
      height: Number(mapHeight),
      gridSize: Number(mapGridSize)
    });
  };

  // Handle number input changes with validation
  const handleNumberChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  // Toggle properties panel
  const toggleProperties = () => {
    setShowProperties(!showProperties);
  };

  return (
    <>
      <div className="flex justify-between items-center p-2 bg-stone-800 border-b border-stone-700">
        {/* File operations */}
        <div className="flex space-x-1 items-center">
          <button 
            onClick={onSave}
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Save map"
          >
            <Save size={18} />
          </button>
          <button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Clear map"
            onClick={onClear}
          >
            <Trash2 size={18} />
          </button>
          <button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Export as PNG"
          >
            <Download size={18} />
          </button>
          <button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Import tileset"
          >
            <Upload size={18} />
          </button>
          <div className="h-6 border-r border-stone-700 mx-1"></div>
          <button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Export as ASCII"
            onClick={onExportAscii}
          >
            <FileText size={18} />
          </button>
          <button 
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Import from ASCII"
            onClick={onImportAscii}
          >
            <Upload size={18} />
          </button>
        </div>

        {/* Empty space in the middle to maintain layout */}
        <div className="flex-1"></div>

        {/* View options */}
        <div className="flex space-x-1">
          <button
            onClick={onToggleGrid}
            className={`p-2 hover:bg-stone-700 rounded ${
              showGrid ? 'text-teal-400' : 'text-stone-500'
            }`}
            title={showGrid ? "Hide grid" : "Show grid"}
          >
            <Grid size={18} />
          </button>
          <button
            onClick={onResetView}
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Return to origin (0,0)"
          >
            <Home size={18} />
          </button>
          <button 
            className={`p-2 hover:bg-stone-700 rounded ${showProperties ? 'bg-stone-700 text-teal-300' : 'text-teal-400'}`}
            title="Map Properties"
            onClick={toggleProperties}
          >
            <Settings size={18} />
          </button>
        </div>
      </div>
      
      {/* Properties Panel - Expandable */}
      {showProperties && (
        <div className="bg-stone-800 border-b border-stone-700 p-2 grid grid-cols-5 gap-2 items-center text-sm">
          {error && (
            <div className="col-span-5 bg-red-900/30 text-red-400 p-2 rounded mb-2 text-xs">
              {error}
            </div>
          )}
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Width:</label>
            <input
              type="text"
              value={mapWidth}
              onChange={handleNumberChange(setMapWidth)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Height:</label>
            <input
              type="text"
              value={mapHeight}
              onChange={handleNumberChange(setMapHeight)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Grid Size:</label>
            <input
              type="text"
              value={mapGridSize}
              onChange={handleNumberChange(setMapGridSize)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex justify-end">
            <button
              onClick={handleApplyProperties}
              className="bg-teal-700 hover:bg-teal-600 text-white px-3 py-1 rounded text-xs flex items-center"
            >
              <Save size={14} className="mr-1" />
              Apply
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default MapToolbar;

================
File: windows/mapeditor/README.md
================
# Gridmap Editor for SlumTerm

This directory contains the implementation of the Gridmap Editor for the SlumTerm virtual tabletop system. The editor allows users to create and edit grid-based maps for tabletop role-playing games.

## Components

- **MapEditorWindow.jsx**: Main window component that integrates all subcomponents
- **MapCanvas.jsx**: Canvas component for rendering and interacting with the grid map
- **MapToolbar.jsx**: Toolbar with editing tools and file operations
- **LayerPanel.jsx**: Panel for managing layers (create, toggle visibility, reorder)
- **utils/mapUtils.js**: Utility functions for map operations

## Integration with SlumTerm

The Gridmap Editor is integrated with the SlumTerm system in a similar way to the Markdown Editor:

1. When a user clicks on a file with the `.map` extension in the file explorer, the MapEditorWindow will open
2. The MapEditorWindow loads the map data from the file and displays it in the grid view
3. Users can edit the map using various tools and save the changes back to the file

## Map File Format (.map)

Map files use a JSON format to store the grid data:

```json
{
  "version": "1.0",
  "name": "Map Name",
  "gridSize": 32,
  "width": 20,
  "height": 15,
  "defaultTile": "floor",
  "layers": [
    {
      "name": "terrain",
      "visible": true,
      "cells": [
        { "x": 0, "y": 0, "type": "wall" },
        { "x": 1, "y": 0, "type": "wall" }
      ]
    },
    {
      "name": "objects",
      "visible": true,
      "cells": [
        { "x": 2, "y": 1, "type": "door" }
      ]
    }
  ],
  "tokenPositions": [],
  "metadata": {
    "author": "username",
    "created": "ISO date",
    "modified": "ISO date"
  }
}
```

## Features

- **Grid-based editing**: Place walls, floors, doors, and other map elements on a grid
- **Layer management**: Create, rename, reorder, and toggle visibility of layers
- **Zoom and pan**: Adjust the view to focus on different parts of the map
- **File operations**: Create new maps, open existing maps, save changes

## Future Plans

- **Multiplayer support**: Allow multiple players to view and interact with the map
- **Token placement**: Add player and monster tokens to the map
- **Line of sight**: Implement fog of war and dynamic lighting
- **Map scripting**: Add interactivity to map elements

## Usage

1. Create a new `.map` file in the file explorer
2. Click on the file to open it in the Gridmap Editor
3. Use the toolbar to select tools for editing the map
4. Save your changes

## Development Notes

- The grid map editor uses the HTML Canvas API for rendering
- Map data is stored in JSON format compatible with the server's file system
- Map editing operations use immutable data patterns to avoid direct state mutation

================
File: windows/mapeditor/styles/RangeSlider.css
================
/* Original Input Slider styling */
.opacity-slider {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 6px;
  background: #44403c;
  border-radius: 5px;
  outline: none;
  margin: 10px 0;
  cursor: pointer;
}

.opacity-slider::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  appearance: none;
  height: 6px;
  border-radius: 5px;
}

.opacity-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #14b8a6;
  cursor: pointer;
  border: 2px solid #f8fafc;
  margin-top: -6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.opacity-slider::-moz-range-thumb {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #14b8a6;
  cursor: pointer;
  border: 2px solid #f8fafc;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.opacity-slider::-moz-range-track {
  height: 6px;
  background: #44403c;
  border-radius: 5px;
}

.opacity-slider:focus {
  outline: none;
}

/* Custom Slider Component Styling */
.custom-slider-container {
  position: relative;
  width: 100%;
  padding: 6px 0;
  user-select: none;
  touch-action: none;
}

.custom-slider-track {
  position: relative;
  height: 6px;
  width: 100%;
  background: #44403c;
  border-radius: 4px;
  cursor: pointer;
  margin: 8px 0;
}

.custom-slider-thumb {
  position: absolute;
  top: 50%;
  width: 18px;
  height: 18px;
  background-color: #14b8a6;
  border-radius: 50%;
  border: 2px solid #f8fafc;
  transform: translate(-50%, -50%);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  cursor: grab;
  z-index: 2;
  transition: transform 0.1s, background-color 0.2s;
}

.custom-slider-thumb:hover {
  background-color: #0d9488;
  transform: translate(-50%, -50%) scale(1.1);
}

.custom-slider-thumb:active {
  background-color: #0f766e;
  cursor: grabbing;
  transform: translate(-50%, -50%) scale(1.15);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);
}

================
File: windows/mapeditor/TilePalette.jsx
================
import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';
import { 
  FLOOR_TILESET_PATH,
  WALL_TILESET_PATH,
  SHADOW_TILESET_PATH, // Import the shadow path
  TILE_SIZE,
  TILESET_COLS,
  getTileCoordinates, 
  getTileName, 
  TILE_SECTIONS,
  WALL_TILE_SECTIONS,
  SHADOW_TILE_SECTIONS
} from './utils/tileRegistry';
import { Heart, RotateCw, CheckCircle, XCircle } from 'lucide-react';
import axios from 'axios';
import API_CONFIG from '../../../config/api';

// Debug helper to log API requests and responses
const logApiCall = (method, url, status, data) => {
  console.log(`API ${method} ${url} - Status: ${status}`);
  console.log('Data:', data);
};

/**
 * Component for displaying and selecting tiles from a tileset
 */
const TilePalette = ({ 
  onSelectTile, 
  selectedTileId = 0, 
  tileType = 'floor',
  onChangeTileType,
  selectedRotation = 0,
  onRotateTile
}) => {
  // Local state to track rotation, will sync back to parent
  const [localRotation, setLocalRotation] = useState(selectedRotation);
  
  // Sync with parent's rotation when it changes
  useEffect(() => {
    setLocalRotation(selectedRotation);
  }, [selectedRotation]);
  const [favoriteTiles, setFavoriteTiles] = useState([]);
  const [isAddingToFavorites, setIsAddingToFavorites] = useState(false);
  const [addFavoriteError, setAddFavoriteError] = useState(null);
  const [isFavorited, setIsFavorited] = useState(false);
  const [floorTilesetImage, setFloorTilesetImage] = useState(null);
  const [wallTilesetImage, setWallTilesetImage] = useState(null);
  const [shadowTilesetImage, setShadowTilesetImage] = useState(null);
  const [loading, setLoading] = useState(true);
  const [currentSection, setCurrentSection] = useState(null); // Filter by section for floor
  const [currentWallSection, setCurrentWallSection] = useState(null); // Filter by section for wall
  const [currentShadowSection, setCurrentShadowSection] = useState(null);
  const [totalFloorTiles, setTotalFloorTiles] = useState(0);
  const [totalWallTiles, setTotalWallTiles] = useState(0);
  const [totalShadowTiles, setTotalShadowTiles] = useState(0); // Add state for shadow tiles count
  const [isInitialized, setIsInitialized] = useState(false);
  const initialTileTypeRef = useRef(tileType);
  const [showFavoritesSection, setShowFavoritesSection] = useState(true);
  
  // Available tile types
  const tileTypes = [
    { id: 'floor', name: 'Floor' },
    { id: 'wall', name: 'Wall' },
    { id: 'shadow', name: 'Shadow' },
    { id: 'door', name: 'Door' }
  ];
  
  // Store the initial tile type to handle first render properly
  useEffect(() => {
    initialTileTypeRef.current = tileType;
  }, []);

  // Track the actual columns detected in the image
  const [actualColumns, setActualColumns] = useState(TILESET_COLS);

  // Load favorite tiles when component mounts
  useEffect(() => {
    loadFavoriteTiles();
  }, []);

  // Check if the currently selected tile is a favorite
  useEffect(() => {
    checkIsFavorite();
  }, [selectedTileId, tileType]);

// Function to load favorite tiles
const loadFavoriteTiles = async () => {
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) return;

    console.log('Fetching favorite tiles from:', `${API_CONFIG.BASE_URL}/favorite-tiles`);
    const response = await axios.get(
      `${API_CONFIG.BASE_URL}/favorite-tiles`,
      { headers: { Authorization: `Bearer ${token}` } }
    );

    logApiCall('GET', '/favorite-tiles', response.status, response.data);
    
    // Ensure we have an array, even if the response is unexpected
    if (Array.isArray(response.data)) {
      setFavoriteTiles(response.data);
    } else if (response.data && Array.isArray(response.data.favorites)) {
      setFavoriteTiles(response.data.favorites);
    } else {
      console.error('Unexpected response format for favorite tiles:', response.data);
      setFavoriteTiles([]);
    }
  } catch (error) {
    console.error('Error loading favorite tiles from server:', error);
    setFavoriteTiles([]);
  }
};

const debugTileIndexes = () => {
  if (!shadowTilesetImage) return;
  
  const cols = Math.floor(shadowTilesetImage.width / TILE_SIZE);
  const rows = Math.floor(shadowTilesetImage.height / TILE_SIZE);
  
  console.log('==== SHADOW TILE INDEX MAP ====');
  let output = '';
  for (let row = 0; row < rows; row++) {
    let rowOutput = '';
    for (let col = 0; col < cols; col++) {
      const index = row * cols + col;
      // Format to ensure alignment
      rowOutput += index.toString().padStart(3, ' ') + ' ';
    }
    output += rowOutput + '\n';
  }
  console.log(output);
  console.log('===============================');
};

// Call this in useEffect after loading
useEffect(() => {
  if (shadowTilesetImage) {
    debugTileIndexes();
  }
}, [shadowTilesetImage]);

// Function to check if selected tile is a favorite
const checkIsFavorite = async () => {
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) return;

    const response = await axios.get(
      `${API_CONFIG.BASE_URL}/favorite-tiles/check/${selectedTileId}/${tileType}`,
      { headers: { Authorization: `Bearer ${token}` } }
    );

    logApiCall('GET', `/favorite-tiles/check/${selectedTileId}/${tileType}`, response.status, response.data);
    setIsFavorited(response.data.isFavorite);
  } catch (error) {
    console.error('Error checking favorite status from server:', error);
    setIsFavorited(false);
  }
};

// Function to add a tile to favorites
const addToFavorites = async () => {
  setIsAddingToFavorites(true);
  setAddFavoriteError(null);
  
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      setAddFavoriteError('Authentication required');
      setIsAddingToFavorites(false);
      return;
    }

    const response = await axios.post(
      `${API_CONFIG.BASE_URL}/favorite-tiles`,
      { tileIndex: selectedTileId, tileType },
      { headers: { 
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}` 
        } 
      }
    );
    
    logApiCall('POST', '/favorite-tiles', response.status, response.data);
    
    // Reload favorite tiles
    await loadFavoriteTiles();
    setIsFavorited(true);
  } catch (error) {
    console.error('Error adding tile to favorites:', error);
    setAddFavoriteError(error.response?.data?.message || 'Failed to add to favorites');
  } finally {
    setIsAddingToFavorites(false);
  }
};

// Function to remove a tile from favorites
const removeFromFavorites = async () => {
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) return;

    const response = await axios.delete(
      `${API_CONFIG.BASE_URL}/favorite-tiles/${selectedTileId}/${tileType}`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    
    logApiCall('DELETE', `/favorite-tiles/${selectedTileId}/${tileType}`, response.status, response.data);
    
    // Reload favorite tiles
    await loadFavoriteTiles();
    setIsFavorited(false);
  } catch (error) {
    console.error('Error removing tile from favorites:', error);
  }
};

  // Render a tile canvas
  const renderTileCanvas = (tileIndex, tileType, size = 40, rotation = 0) => {
    const image = tileType === 'floor' ? floorTilesetImage : 
    tileType === 'wall' ? wallTilesetImage : 
    shadowTilesetImage;
    
    if (!image) return null;
    
    return (
      <canvas
        ref={canvas => {
          if (canvas && image) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, size, size);
            
            // Calculate coordinates based on actual columns in the sheet
            const col = tileIndex % actualColumns;
            const row = Math.floor(tileIndex / actualColumns);
            const sourceX = col * TILE_SIZE;
            const sourceY = row * TILE_SIZE;
            
            // Save the context state before transformations
            ctx.save();
            
            // Move to the center of the canvas for rotation
            ctx.translate(size/2, size/2);
            
            // Convert degrees to radians and rotate
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            
            // Draw the image centered and rotated
            ctx.drawImage(
              image,
              sourceX, // sourceX
              sourceY, // sourceY
              TILE_SIZE, // sourceWidth
              TILE_SIZE, // sourceHeight
              -size/2, // destX (negative half-size to center)
              -size/2, // destY (negative half-size to center)
              size, // destWidth
              size  // destHeight
            );
            
            // Restore the context to its original state
            ctx.restore();
          }
        }}
        width={size}
        height={size}
        className="mx-auto"
        style={{ display: 'block' }}
      />
    );
  };
  
  // Load the tileset images
  useEffect(() => {
    let floorLoaded = false;
    let wallLoaded = false;
    let shadowLoaded = false;

    const checkAllLoaded = () => {
      if (floorLoaded && wallLoaded && shadowLoaded) {
        setLoading(false);
        setIsInitialized(true);
      }
    };

    // Load floor tileset
    const floorImg = new Image();
    floorImg.onload = () => {
      setFloorTilesetImage(floorImg);
      
      // Calculate total available tiles based on image dimensions
      const cols = Math.floor(floorImg.width / TILE_SIZE);
      const rows = Math.floor(floorImg.height / TILE_SIZE);
      const total = cols * rows;
      
      console.log(`Detected ${total} floor tiles (${cols}x${rows}) in the sprite sheet`);
      setActualColumns(cols); // Store the actual number of columns
      setTotalFloorTiles(total);
      floorLoaded = true;
      checkAllLoaded();
    };
    floorImg.onerror = () => {
      console.error('Failed to load floor tileset image');
      floorLoaded = true; // Still mark as loaded to prevent blocking
      checkAllLoaded();
    };
    floorImg.src = FLOOR_TILESET_PATH;
    
    // Load wall tileset
    const wallImg = new Image();
    wallImg.onload = () => {
      setWallTilesetImage(wallImg);
      
      // Calculate total available tiles based on image dimensions
      const cols = Math.floor(wallImg.width / TILE_SIZE);
      const rows = Math.floor(wallImg.height / TILE_SIZE);
      const total = cols * rows;
      
      console.log(`Detected ${total} wall tiles (${cols}x${rows}) in the sprite sheet`);
      setTotalWallTiles(total);
      wallLoaded = true;
      checkAllLoaded();
    };
    wallImg.onerror = () => {
      console.error('Failed to load wall tileset image');
      wallLoaded = true; // Still mark as loaded
      checkAllLoaded();
    };
    wallImg.src = WALL_TILESET_PATH;

    // Load shadow tileset
    const shadowImg = new Image();
    shadowImg.onload = () => {
      setShadowTilesetImage(shadowImg);
    
      // Calculate total available tiles based on image dimensions
      const cols = Math.floor(shadowImg.width / TILE_SIZE);
      const rows = Math.floor(shadowImg.height / TILE_SIZE);
      const total = cols * rows;
    
      // Purple console logs for better visibility
      console.log("%c 🟣 SHADOW TILESET: Detected " + total + " shadow tiles (" + cols + "×" + rows + ")", 
        "color: #9c27b0; font-weight: bold; background-color: #f3e5f5; padding: 5px; border-radius: 3px;");
      console.log("%c 🟣 SHADOW Image dimensions: " + shadowImg.width + "×" + shadowImg.height + "px", 
        "color: #9c27b0; font-weight: bold; background-color: #f3e5f5; padding: 5px; border-radius: 3px;");
      
      setTotalShadowTiles(total);
      shadowLoaded = true;
      checkAllLoaded();
    };
    shadowImg.src = SHADOW_TILESET_PATH;

  }, []); // Empty dependency array ensures this runs only once on mount

  // Force a re-render when the component first mounts (removed, handled by checkAllLoaded)
  // useEffect(() => { ... });
  
  // Get floor tiles to display based on current section filter
  const displayFloorTiles = useMemo(() => {
    if (currentSection === null) {
      // Show all tiles from the tileset - all positions are valid
      if (totalFloorTiles > 0) {
        // Simply create an array of indices from 0 to totalFloorTiles-1
        return Array.from({ length: totalFloorTiles }, (_, i) => i);
      }
      return [];
    } else {
      // Show only tiles from the selected section
      const section = TILE_SECTIONS[currentSection];
      return Array.from({ length: section.count }, (_, i) => section.startIndex + i);
    }
  }, [currentSection, totalFloorTiles]);
  
  // Get wall tiles to display based on current section filter
  const displayWallTiles = useMemo(() => {
    if (currentWallSection === null) {
      // Show all tiles from the tileset - all positions are valid
      if (totalWallTiles > 0) {
        // Simply create an array of indices from 0 to totalWallTiles-1
        return Array.from({ length: totalWallTiles }, (_, i) => i);
      }
      return [];
    } else {
      // Show only tiles from the selected section
      const section = WALL_TILE_SECTIONS[currentWallSection];
      return Array.from({ length: section.count }, (_, i) => section.startIndex + i);
    }
  }, [currentWallSection, totalWallTiles]);

  // Get shadow tiles to display based on current section filter
  const displayShadowTiles = useMemo(() => {
    if (currentShadowSection === null) {
      // Show all tiles from the tileset
      if (totalShadowTiles > 0) {
        return Array.from({ length: totalShadowTiles }, (_, i) => i);
      }
      return [];
    } else {
      const section = SHADOW_TILE_SECTIONS[currentShadowSection];
      return Array.from({ length: section.count }, (_, i) => section.startIndex + i);
    }
  }, [currentShadowSection, totalShadowTiles]);


  return (
    <div className="bg-stone-800 border-t border-stone-700 p-2 max-h-64 overflow-y-auto">
      {/* Tile Type Selector */}
      <div className="flex flex-col space-y-2 mb-4">
        <div className="flex justify-between items-center">
          <h3 className="text-sm font-mono text-teal-400">TILE TYPE</h3>
          
          {/* Buttons for Selected Tile */}
          <div className="flex items-center">
            {/* Rotate Button */}
            <button 
              className="text-blue-400 hover:text-blue-300 flex items-center mr-2"
              onClick={() => {
                console.log("Rotate button clicked!");
                // Keep track of the previous value for debugging
                console.log("Previous rotation value (local):", localRotation);
                console.log("Previous rotation value (props):", selectedRotation);
                
                // Calculate the new rotation value
                const newRotation = (localRotation + 90) % 360;
                console.log("New rotation value:", newRotation);
                
                // Update local state immediately for visual feedback
                setLocalRotation(newRotation);
                
                // Force update of the DOM display (safely)
                const debugElement = document.getElementById('debug-rotation-value');
                if (debugElement) {
                  debugElement.textContent = `Rotation set to: ${newRotation}°`;
                }
                
                // Update the local rotation display
                const tileRotationDisplay = document.getElementById('tile-rotation-display');
                if (tileRotationDisplay) {
                  tileRotationDisplay.textContent = `${newRotation}°`;
                }
                
                // Then notify parent (if callback exists) 
                if (typeof onRotateTile === 'function') {
                  console.log("Calling parent onRotateTile with:", newRotation);
                  // Pass the value explicitly (not relying on state)
                  onRotateTile(newRotation);
                } else {
                  console.warn("onRotateTile is not a function");
                  // If no callback, the local state update handles the visual feedback
                }
              }}
              title="Rotate tile"
            >
              <RotateCw size={16} className="mr-1" />
              <span className="text-xs" id="tile-rotation-display">{localRotation}°</span>
            </button>
            
            {/* Favorite Button */}
            {isFavorited ? (
              <button 
                className="text-pink-500 hover:text-pink-400 flex items-center mr-2"
                onClick={removeFromFavorites}
                title="Remove from favorites"
              >
                <Heart size={16} fill="currentColor" className="mr-1" />
                <span className="text-xs">Unfavorite</span>
              </button>
            ) : (
              <button 
                className="text-gray-400 hover:text-pink-500 flex items-center mr-2"
                onClick={addToFavorites}
                title="Add to favorites"
                disabled={isAddingToFavorites}
              >
                <Heart size={16} className="mr-1" />
                <span className="text-xs">{isAddingToFavorites ? 'Adding...' : 'Favorite'}</span>
              </button>
            )}
          </div>
        </div>
        
        {addFavoriteError && (
          <div className="text-red-500 text-xs mb-2">{addFavoriteError}</div>
        )}
        
        <select
          className="bg-stone-700 text-teal-300 text-sm rounded p-2 w-full border-none"
          value={tileType}
          onChange={(e) => onChangeTileType(e.target.value)}
        >
          {tileTypes.map(type => (
            <option key={type.id} value={type.id}>{type.name}</option>
          ))}
        </select>
      </div>
      
      {/* Favorite Tiles Section */}
      {Array.isArray(favoriteTiles) && favoriteTiles.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-stone-400">FAVORITE TILES</h3>
            <button 
              className="text-xs text-stone-400 hover:text-stone-300"
              onClick={() => setShowFavoritesSection(!showFavoritesSection)}
            >
              {showFavoritesSection ? 'Hide' : 'Show'}
            </button>
          </div>
          
          {showFavoritesSection && (
            <div className="grid grid-cols-5 gap-1 justify-items-center mb-3">
              {Array.isArray(favoriteTiles) && favoriteTiles.map((tile) => (
                <div
                  key={`fav-${tile.tile_type}-${tile.tile_index}`}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tile.tile_index && tileType === tile.tile_type 
                      ? 'bg-teal-900 border-teal-500' 
                      : 'hover:bg-stone-700 border-transparent'
                  }`}
                  onClick={() => {
                    onSelectTile(tile.tile_index);
                    if (tile.tile_type !== tileType) {
                      onChangeTileType(tile.tile_type);
                    }
                  }}
                  title={getTileName(tile.tile_index, tile.tile_type)}
                >
                  <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                    {(tile.tile_type === 'floor' && floorTilesetImage) || 
                     (tile.tile_type === 'wall' && wallTilesetImage) ||
                     (tile.tile_type === 'shadow' && shadowTilesetImage)
                      ? renderTileCanvas(tile.tile_index, tile.tile_type, 40, selectedTileId === tile.tile_index && tileType === tile.tile_type ? selectedRotation : 0)
                      : <div className="w-full h-full flex items-center justify-center text-xs text-stone-500">Loading</div>
                    }
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
      
      {/* Always include the floor section headings when floor type is selected */}
      {tileType === 'floor' && (
        <>
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-teal-400">FLOORS</h3>
            
            {/* Section filter dropdown */}
            <select 
              className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
              value={currentSection || ""}
              onChange={(e) => setCurrentSection(e.target.value || null)}
            >
              <option value="">All Tiles</option>
              {Object.entries(TILE_SECTIONS).map(([key, section]) => (
                <option key={key} value={key}>{section.name}</option>
              ))}
            </select>
          </div>
        </>
      )}
      
      {/* Wall tile palette - shown when wall type is selected */}
      {tileType === 'wall' && (
        <>
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-teal-400">WALLS</h3>
            
            {/* Section filter dropdown */}
            <select 
              className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
              value={currentWallSection || ""}
              onChange={(e) => setCurrentWallSection(e.target.value || null)}
            >
              <option value="">All Wall Tiles</option>
              {Object.entries(WALL_TILE_SECTIONS).map(([key, section]) => (
                <option key={key} value={key}>{section.name}</option>
              ))}
            </select>
          </div>
          
          {loading ? (
            <div className="text-center p-4 text-stone-400">Loading wall tiles...</div>
          ) : !wallTilesetImage ? (
            <div className="text-center p-4 text-red-400">Failed to load wall tile set</div>
          ) : (
            <div key={`wall-grid-${isInitialized ? 'ready' : 'loading'}`} className="grid grid-cols-5 gap-1 justify-items-center">
              {displayWallTiles.map(tileIndex => (
                <div
                  key={tileIndex}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tileIndex ? 'bg-teal-900 border-teal-500' : 'hover:bg-stone-700 border-transparent'
                  }`}
                  onClick={() => onSelectTile(tileIndex)}
                  title={getTileName(tileIndex, 'wall')}
                >
                  <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                    {renderTileCanvas(tileIndex, 'wall', 40, selectedTileId === tileIndex ? selectedRotation : 0)}
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}

      {/* Shadow tile palette - shown when shadow type is selected */}
      {tileType === 'shadow' && (
        <>
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-teal-400">SHADOWS</h3>
            
            {/* Section filter dropdown */}
            <select 
              className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
              value={currentShadowSection || ""}
              onChange={(e) => setCurrentShadowSection(e.target.value || null)}
            >
              <option value="">All Shadow Tiles</option>
              {Object.entries(SHADOW_TILE_SECTIONS).map(([key, section]) => (
                <option key={key} value={key}>{section.name}</option>
              ))}
            </select>
          </div>
          
          {loading ? (
            <div className="text-center p-4 text-stone-400">Loading shadow tiles...</div>
          ) : !shadowTilesetImage ? (
            <div className="text-center p-4 text-red-400">Failed to load shadow tile set</div>
          ) : (
            <div key={`shadow-grid-${currentShadowSection}-${isInitialized ? 'ready' : 'loading'}`} className="grid grid-cols-5 gap-1 justify-items-center">
              {/* Use the defined displayShadowTiles */}
              {displayShadowTiles.map(tileIndex => (
                <div
                  key={`shadow-${tileIndex}`}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tileIndex ? 'bg-teal-900 border-teal-500' : 'hover:bg-stone-700 border-transparent'
                  }`}
                  onClick={() => {
                    console.log(`Shadow tile ${tileIndex} clicked`);
                    // Ensure both the tile ID and type are propagated
                    onSelectTile(tileIndex);
                    // This shouldn't be necessary if tileType is already 'shadow', but just to be sure
                    if (tileType !== 'shadow') {
                      onChangeTileType('shadow');
                    }
                }}
                title={getTileName(tileIndex, 'shadow')}
              >
                <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                  {renderTileCanvas(tileIndex, 'shadow', 40, selectedTileId === tileIndex ? selectedRotation : 0)}
                </div>
              </div>
              ))}
            </div>
          )}
        </>
      )}
      
      {/* Door tile simple selector - shown when door type is selected */}
      {tileType === 'door' && (
        <div className="mb-2">
          <h3 className="text-sm font-mono text-teal-400 mb-2">DOOR STYLE</h3>
          <div className="grid grid-cols-2 gap-2">
            <div 
              className="bg-stone-700 p-3 rounded cursor-pointer border-2 border-teal-500 text-center"
              onClick={() => onSelectTile(0)}
            >
              <div className="bg-slate-900 h-10 w-full flex items-center justify-center">
                <div className="bg-amber-700 h-5 w-8"></div>
              </div>
              <div className="mt-1 text-xs text-teal-300">Basic Door</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Floor tile palette - shown when floor type is selected 
          The key addition forces a re-render when initialized changes */}
      {tileType === 'floor' && (
        loading ? (
          <div className="text-center p-4 text-stone-400">Loading tile set...</div>
        ) : !floorTilesetImage ? (
          <div className="text-center p-4 text-red-400">Failed to load tile set</div>
        ) : (
          <div key={`floor-grid-${isInitialized ? 'ready' : 'loading'}`} className="grid grid-cols-5 gap-1 justify-items-center">
            {displayFloorTiles.map(tileIndex => (
              <div
                key={tileIndex}
                className={`rounded cursor-pointer border ${
                  selectedTileId === tileIndex ? 'bg-teal-900 border-teal-500' : 'hover:bg-stone-700 border-transparent'
                }`}
                onClick={() => onSelectTile(tileIndex)}
                title={getTileName(tileIndex)}
              >
                <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                  {renderTileCanvas(tileIndex, 'floor', 40, selectedTileId === tileIndex ? selectedRotation : 0)}
                </div>
              </div>
            ))}
          </div>
        )
      )}
    </div>
  );
};

export default TilePalette;

================
File: windows/mapeditor/TilePaletteWithMarketplace.jsx
================
import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';
import { Heart, RotateCw, CheckCircle, XCircle, Store } from 'lucide-react';
import axios from 'axios';
import API_CONFIG from '../../../config/api';
import { 
  TILE_SIZE,
  getTileName,
  getTileCoordinates
} from './utils/tileRegistry';

// Import the dynamic tile registry
import dynamicTileRegistry from './utils/dynamicTileRegistry';

// Debug helper to log API requests and responses
const logApiCall = (method, url, status, data) => {
  console.log(`API ${method} ${url} - Status: ${status}`);
  console.log('Data:', data);
};

/**
 * Enhanced TilePalette component with marketplace integration
 */
const TilePaletteWithMarketplace = ({ 
  onSelectTile, 
  selectedTileId = 0, 
  tileType = 'floor',
  onChangeTileType,
  selectedRotation = 0,
  onRotateTile,
  createWindow
}) => {
  // Local state to track rotation, will sync back to parent
  const [localRotation, setLocalRotation] = useState(selectedRotation);
  
  // Sync with parent's rotation when it changes
  useEffect(() => {
    setLocalRotation(selectedRotation);
  }, [selectedRotation]);
  
  const [favoriteTiles, setFavoriteTiles] = useState([]);
  const [isAddingToFavorites, setIsAddingToFavorites] = useState(false);
  const [addFavoriteError, setAddFavoriteError] = useState(null);
  const [isFavorited, setIsFavorited] = useState(false);
  const [tilesetImages, setTilesetImages] = useState({});
  const [loading, setLoading] = useState(true);
  const [currentSection, setCurrentSection] = useState(null); // Filter by section for floor
  const [currentWallSection, setCurrentWallSection] = useState(null); // Filter by section for wall
  const [currentShadowSection, setCurrentShadowSection] = useState(null);
  const [sections, setSections] = useState({});
  const [isInitialized, setIsInitialized] = useState(false);
  const initialTileTypeRef = useRef(tileType);
  const [showFavoritesSection, setShowFavoritesSection] = useState(true);
  const [marketplaceStatus, setMarketplaceStatus] = useState('idle'); // 'idle', 'loading', 'success', 'error'
  
  // Available tile types
  const tileTypes = [
    { id: 'floor', name: 'Floor' },
    { id: 'wall', name: 'Wall' },
    { id: 'shadow', name: 'Shadow' },
    { id: 'door', name: 'Door' }
  ];
  
  // Store the initial tile type to handle first render properly
  useEffect(() => {
    initialTileTypeRef.current = tileType;
  }, []);

  // Initialize dynamic tile registry
  useEffect(() => {
    const initRegistry = async () => {
      setLoading(true);
      try {
        await dynamicTileRegistry.initializeTileRegistry();
        
        // Get all sections
        const allSections = dynamicTileRegistry.getAllSections();
        setSections(allSections);
        
        // Get images for each category
        const images = {
          floor: dynamicTileRegistry.getTilesetImageForCategory('floor'),
          wall: dynamicTileRegistry.getTilesetImageForCategory('wall'),
          shadow: dynamicTileRegistry.getTilesetImageForCategory('shadow')
        };
        setTilesetImages(images);
        
        setIsInitialized(true);
      } catch (error) {
        console.error('Error initializing dynamic tile registry:', error);
      } finally {
        setLoading(false);
      }
    };
    
    initRegistry();
  }, []);

  // Load favorite tiles when component mounts
  useEffect(() => {
    loadFavoriteTiles();
  }, []);

  // Check if the currently selected tile is a favorite
  useEffect(() => {
    checkIsFavorite();
  }, [selectedTileId, tileType]);

  // Function to load favorite tiles
  const loadFavoriteTiles = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      console.log('Fetching favorite tiles from:', `${API_CONFIG.BASE_URL}/favorite-tiles`);
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', '/favorite-tiles', response.status, response.data);
      
      // Ensure we have an array, even if the response is unexpected
      if (Array.isArray(response.data)) {
        setFavoriteTiles(response.data);
      } else if (response.data && Array.isArray(response.data.favorites)) {
        setFavoriteTiles(response.data.favorites);
      } else {
        console.error('Unexpected response format for favorite tiles:', response.data);
        setFavoriteTiles([]);
      }
    } catch (error) {
      console.error('Error loading favorite tiles from server:', error);
      setFavoriteTiles([]);
    }
  };

  // Function to check if selected tile is a favorite
  const checkIsFavorite = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles/check/${selectedTileId}/${tileType}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', `/favorite-tiles/check/${selectedTileId}/${tileType}`, response.status, response.data);
      setIsFavorited(response.data.isFavorite);
    } catch (error) {
      console.error('Error checking favorite status from server:', error);
      setIsFavorited(false);
    }
  };

  // Function to add a tile to favorites
  const addToFavorites = async () => {
    setIsAddingToFavorites(true);
    setAddFavoriteError(null);
    
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setAddFavoriteError('Authentication required');
        setIsAddingToFavorites(false);
        return;
      }

      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { tileIndex: selectedTileId, tileType },
        { headers: { 
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}` 
          } 
        }
      );
      
      logApiCall('POST', '/favorite-tiles', response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(true);
    } catch (error) {
      console.error('Error adding tile to favorites:', error);
      setAddFavoriteError(error.response?.data?.message || 'Failed to add to favorites');
    } finally {
      setIsAddingToFavorites(false);
    }
  };

  // Function to remove a tile from favorites
  const removeFromFavorites = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      const response = await axios.delete(
        `${API_CONFIG.BASE_URL}/favorite-tiles/${selectedTileId}/${tileType}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      logApiCall('DELETE', `/favorite-tiles/${selectedTileId}/${tileType}`, response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(false);
    } catch (error) {
      console.error('Error removing tile from favorites:', error);
    }
  };

  // Function to open the marketplace window
  const openMarketplace = () => {
    if (createWindow) {
      setMarketplaceStatus('loading');
      
      try {
        // Create the marketplace window
        createWindow({
          type: 'marketplace',
          title: 'Tileset Marketplace',
          width: 900,
          height: 700
        });
        
        setMarketplaceStatus('success');
      } catch (error) {
        console.error('Error opening marketplace window:', error);
        setMarketplaceStatus('error');
      }
    } else {
      console.warn('createWindow function not provided');
      setMarketplaceStatus('error');
    }
  };

  // Function to refresh tilesets after marketplace changes
  const refreshTilesets = async () => {
    setLoading(true);
    try {
      await dynamicTileRegistry.refreshTileRegistry();
      
      // Get all sections
      const allSections = dynamicTileRegistry.getAllSections();
      setSections(allSections);
      
      // Get images for each category
      const images = {
        floor: dynamicTileRegistry.getTilesetImageForCategory('floor'),
        wall: dynamicTileRegistry.getTilesetImageForCategory('wall'),
        shadow: dynamicTileRegistry.getTilesetImageForCategory('shadow')
      };
      setTilesetImages(images);
      
      setMarketplaceStatus('success');
    } catch (error) {
      console.error('Error refreshing tilesets:', error);
      setMarketplaceStatus('error');
    } finally {
      setLoading(false);
    }
  };

  // Render a tile canvas
  const renderTileCanvas = (tileIndex, tileType, size = 40, rotation = 0) => {
    const image = tilesetImages[tileType];
    
    if (!image) return null;
    
    return (
      <canvas
        ref={canvas => {
          if (canvas && image) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, size, size);
            
            // Calculate coordinates
            const { sourceX, sourceY } = getTileCoordinates(tileIndex);
            
            // Save the context state before transformations
            ctx.save();
            
            // Move to the center of the canvas for rotation
            ctx.translate(size/2, size/2);
            
            // Convert degrees to radians and rotate
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            
            // Draw the image centered and rotated
            ctx.drawImage(
              image,
              sourceX, // sourceX
              sourceY, // sourceY
              TILE_SIZE, // sourceWidth
              TILE_SIZE, // sourceHeight
              -size/2, // destX (negative half-size to center)
              -size/2, // destY (negative half-size to center)
              size, // destWidth
              size  // destHeight
            );
            
            // Restore the context to its original state
            ctx.restore();
          }
        }}
        width={size}
        height={size}
        className="mx-auto"
        style={{ display: 'block' }}
      />
    );
  };

  // Get tiles to display based on current section filter and tile type
  const displayTiles = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    let sectionFilter = null;
    if (tileType === 'floor') sectionFilter = currentSection;
    else if (tileType === 'wall') sectionFilter = currentWallSection;
    else if (tileType === 'shadow') sectionFilter = currentShadowSection;
    
    let result = [];
    
    // If no section filter, show all tiles for this category
    if (!sectionFilter) {
      // Collect all tiles from all sections
      for (const section of Object.values(categorySections)) {
        const { startIndex, count } = section;
        for (let i = 0; i < count; i++) {
          result.push(startIndex + i);
        }
      }
    } else {
      // Show only tiles from the selected section
      const section = categorySections[sectionFilter];
      if (section) {
        const { startIndex, count } = section;
        result = Array.from({ length: count }, (_, i) => startIndex + i);
      }
    }
    
    return result;
  }, [isInitialized, sections, tileType, currentSection, currentWallSection, currentShadowSection]);

  // Get section options for the dropdown
  const sectionOptions = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    return Object.entries(categorySections).map(([key, section]) => ({
      value: key,
      label: `${section.name} (${section.tilesetName})`
    }));
  }, [isInitialized, sections, tileType]);

  return (
    <div className="bg-stone-800 border-t border-stone-700 p-2 max-h-64 overflow-y-auto">
      {/* Tile Type Selector with Marketplace Button */}
      <div className="flex flex-col space-y-2 mb-4">
        <div className="flex justify-between items-center">
          <h3 className="text-sm font-mono text-teal-400">TILE TYPE</h3>
          
          {/* Buttons for Selected Tile */}
          <div className="flex items-center">
            {/* Marketplace Button */}
            <button 
              className="text-blue-400 hover:text-blue-300 flex items-center mr-2"
              onClick={() => {
                if (marketplaceStatus !== 'loading') {
                  openMarketplace();
                }
              }}
              title="Open Tileset Marketplace"
            >
              <Store size={16} className="mr-1" />
              <span className="text-xs">Marketplace</span>
            </button>
            
            {/* Refresh Button */}
            <button 
              className="text-green-400 hover:text-green-300 flex items-center mr-2"
              onClick={refreshTilesets}
              disabled={loading}
              title="Refresh Tilesets"
            >
              <RotateCw size={16} className={`mr-1 ${loading ? 'animate-spin' : ''}`} />
              <span className="text-xs">{loading ? 'Loading...' : 'Refresh'}</span>
            </button>
            
            {/* Rotate Button */}
            <button 
              className="text-blue-400 hover:text-blue-300 flex items-center mr-2"
              onClick={() => {
                // Calculate the new rotation value
                const newRotation = (localRotation + 90) % 360;
                
                // Update local state immediately for visual feedback
                setLocalRotation(newRotation);
                
                // Then notify parent (if callback exists) 
                if (typeof onRotateTile === 'function') {
                  onRotateTile(newRotation);
                }
              }}
              title="Rotate tile"
            >
              <RotateCw size={16} className="mr-1" />
              <span className="text-xs" id="tile-rotation-display">{localRotation}°</span>
            </button>
            
            {/* Favorite Button */}
            {isFavorited ? (
              <button 
                className="text-pink-500 hover:text-pink-400 flex items-center mr-2"
                onClick={removeFromFavorites}
                title="Remove from favorites"
              >
                <Heart size={16} fill="currentColor" className="mr-1" />
                <span className="text-xs">Unfavorite</span>
              </button>
            ) : (
              <button 
                className="text-gray-400 hover:text-pink-500 flex items-center mr-2"
                onClick={addToFavorites}
                title="Add to favorites"
                disabled={isAddingToFavorites}
              >
                <Heart size={16} className="mr-1" />
                <span className="text-xs">{isAddingToFavorites ? 'Adding...' : 'Favorite'}</span>
              </button>
            )}
          </div>
        </div>
        
        {addFavoriteError && (
          <div className="text-red-500 text-xs mb-2">{addFavoriteError}</div>
        )}
        
        {/* Tile Type Select */}
        <select
          className="bg-stone-700 text-teal-300 text-sm rounded p-2 w-full border-none"
          value={tileType}
          onChange={(e) => onChangeTileType(e.target.value)}
        >
          {tileTypes.map(type => (
            <option key={type.id} value={type.id}>{type.name}</option>
          ))}
        </select>
      </div>
      
      {/* Favorite Tiles Section */}
      {Array.isArray(favoriteTiles) && favoriteTiles.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-stone-400">FAVORITE TILES</h3>
            <button 
              className="text-xs text-stone-400 hover:text-stone-300"
              onClick={() => setShowFavoritesSection(!showFavoritesSection)}
            >
              {showFavoritesSection ? 'Hide' : 'Show'}
            </button>
          </div>
          
          {showFavoritesSection && (
            <div className="grid grid-cols-5 gap-1 justify-items-center mb-3">
              {Array.isArray(favoriteTiles) && favoriteTiles.map((tile) => (
                <div
                  key={`fav-${tile.tile_type}-${tile.tile_index}`}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tile.tile_index && tileType === tile.tile_type 
                      ? 'bg-teal-900 border-teal-500' 
                      : 'hover:bg-stone-700 border-transparent'
                  }`}
                  onClick={() => {
                    onSelectTile(tile.tile_index);
                    if (tile.tile_type !== tileType) {
                      onChangeTileType(tile.tile_type);
                    }
                  }}
                  title={getTileName(tile.tile_index, tile.tile_type)}
                >
                  <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                    {tilesetImages[tile.tile_type] 
                      ? renderTileCanvas(tile.tile_index, tile.tile_type, 40, selectedTileId === tile.tile_index && tileType === tile.tile_type ? selectedRotation : 0)
                      : <div className="w-full h-full flex items-center justify-center text-xs text-stone-500">Loading</div>
                    }
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
      
      {/* Section filter dropdown */}
      <div className="flex justify-between items-center mb-2">
        <h3 className="text-sm font-mono text-teal-400">
          {tileType === 'floor' ? 'FLOORS' : 
          tileType === 'wall' ? 'WALLS' : 
          tileType === 'shadow' ? 'SHADOWS' : 
          tileType === 'door' ? 'DOORS' : 'TILES'}
        </h3>
        
        {/* Section filter dropdown */}
        {tileType !== 'door' && (
          <select 
            className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
            value={
              tileType === 'floor' ? currentSection || "" : 
              tileType === 'wall' ? currentWallSection || "" : 
              tileType === 'shadow' ? currentShadowSection || "" : ""
            }
            onChange={(e) => {
              const value = e.target.value || null;
              if (tileType === 'floor') setCurrentSection(value);
              else if (tileType === 'wall') setCurrentWallSection(value);
              else if (tileType === 'shadow') setCurrentShadowSection(value);
            }}
          >
            <option value="">All Tiles</option>
            {sectionOptions.map(option => (
              <option key={option.value} value={option.value}>{option.label}</option>
            ))}
          </select>
        )}
      </div>
      
      {/* Door tile simple selector */}
      {tileType === 'door' && (
        <div className="mb-2">
          <div className="grid grid-cols-2 gap-2">
            <div 
              className="bg-stone-700 p-3 rounded cursor-pointer border-2 border-teal-500 text-center"
              onClick={() => onSelectTile(0)}
            >
              <div className="bg-slate-900 h-10 w-full flex items-center justify-center">
                <div className="bg-amber-700 h-5 w-8"></div>
              </div>
              <div className="mt-1 text-xs text-teal-300">Basic Door</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Tiles grid - shown for all tile types except door */}
      {tileType !== 'door' && (
        loading ? (
          <div className="text-center p-4 text-stone-400">Loading tile set...</div>
        ) : !tilesetImages[tileType] ? (
          <div className="text-center p-4 text-red-400">Failed to load tile set</div>
        ) : (
          <div className="grid grid-cols-5 gap-1 justify-items-center">
            {displayTiles.map(tileIndex => (
              <div
                key={tileIndex}
                className={`rounded cursor-pointer border ${
                  selectedTileId === tileIndex ? 'bg-teal-900 border-teal-500' : 'hover:bg-stone-700 border-transparent'
                }`}
                onClick={() => onSelectTile(tileIndex)}
                title={dynamicTileRegistry.getTileName(tileIndex, tileType)}
              >
                <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                  {renderTileCanvas(tileIndex, tileType, 40, selectedTileId === tileIndex ? selectedRotation : 0)}
                </div>
              </div>
            ))}
          </div>
        )
      )}
    </div>
  );
};

export default TilePaletteWithMarketplace;

================
File: windows/mapeditor/TilesetSelector.jsx
================
import React, { useState, useEffect } from 'react';
import { Image, Check, X } from 'lucide-react';

/**
 * Component for selecting and previewing available tilesets
 */
const TilesetSelector = ({ 
  onSelectTileset, 
  onClose,
  currentTileset
}) => {
  const [tilesets, setTilesets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedTileset, setSelectedTileset] = useState(currentTileset || null);
  const [error, setError] = useState(null);

  // Predefined tilesets from the oryx_ultimate_fantasy_1.2 folder
  useEffect(() => {
    // In a real app, this would be fetched from the server or file system
    const availableTilesets = [
      {
        id: 'uf_terrain',
        name: 'Fantasy Terrain',
        path: '/oryx_ultimate_fantasy_1.2/uf_terrain.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_terrain.png',
        tileSize: 48,
        cols: 16
      },
      {
        id: 'uf_items',
        name: 'Fantasy Items',
        path: '/oryx_ultimate_fantasy_1.2/uf_items.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_items.png',
        tileSize: 48,
        cols: 16
      },
      {
        id: 'uf_heroes',
        name: 'Fantasy Heroes',
        path: '/oryx_ultimate_fantasy_1.2/uf_heroes.png',
        preview: '/oryx_ultimate_fantasy_1.2/uf_heroes.png',
        tileSize: 48,
        cols: 16
      }
    ];

    setTilesets(availableTilesets);
    setLoading(false);
  }, []);

  const handleSelectTileset = (tileset) => {
    setSelectedTileset(tileset);
  };

  const handleConfirm = () => {
    if (!selectedTileset) {
      setError('Please select a tileset first');
      return;
    }
    onSelectTileset(selectedTileset);
    onClose();
  };

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg p-4 w-full max-w-3xl">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-teal-400 text-lg font-semibold flex items-center">
          <Image size={20} className="mr-2" />
          Select Tileset
        </h2>
        <button
          onClick={onClose}
          className="text-stone-500 hover:text-stone-300"
        >
          <X size={20} />
        </button>
      </div>
      
      {error && (
        <div className="bg-red-900/30 text-red-400 p-2 rounded mb-3 text-sm">
          {error}
        </div>
      )}
      
      {loading ? (
        <div className="p-4 text-center text-stone-400">Loading available tilesets...</div>
      ) : (
        <div className="grid grid-cols-2 gap-4 mb-4">
          {tilesets.map(tileset => (
            <div 
              key={tileset.id}
              className={`p-3 rounded-lg cursor-pointer border ${
                selectedTileset?.id === tileset.id 
                  ? 'border-teal-500 bg-stone-700' 
                  : 'border-stone-700 hover:bg-stone-700/50'
              }`}
              onClick={() => handleSelectTileset(tileset)}
            >
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-teal-300 font-medium">{tileset.name}</h3>
                {selectedTileset?.id === tileset.id && (
                  <Check size={16} className="text-teal-400" />
                )}
              </div>
              
              <div className="bg-stone-900 rounded h-32 flex items-center justify-center overflow-hidden">
                <img 
                  src={tileset.preview} 
                  alt={tileset.name}
                  className="max-w-full max-h-full object-contain"
                />
              </div>
              
              <div className="mt-2 text-xs text-stone-400">
                <div>Tile Size: {tileset.tileSize}px</div>
                <div>Columns: {tileset.cols}</div>
              </div>
            </div>
          ))}
        </div>
      )}
      
      <div className="flex justify-end space-x-2 mt-4 pt-3 border-t border-stone-700">
        <button
          onClick={onClose}
          className="px-4 py-2 bg-stone-700 hover:bg-stone-600 text-stone-300 rounded text-sm"
        >
          Cancel
        </button>
        <button
          onClick={handleConfirm}
          className="px-4 py-2 bg-teal-700 hover:bg-teal-600 text-white rounded text-sm flex items-center"
          disabled={!selectedTileset}
        >
          <Check size={16} className="mr-1" />
          Select Tileset
        </button>
      </div>
    </div>
  );
};

export default TilesetSelector;

================
File: windows/mapeditor/utils/dynamicTileRegistry.js
================
/**
 * Dynamic tile registry and helper functions for managing tileset images
 * This version supports loading tilesets from the server
 */
import axios from 'axios';
import API_CONFIG from '../../../../config/api';

// Tile dimensions and sprite sheet configuration
export const TILE_SIZE = 48; // Size of each tile in pixels
export const DEFAULT_TILESET_COLS = 16; // Default number of columns in the sprite sheet

// Import default tilesets for fallback
import defaultFloorTilesetImage from '../../../../assets/sheets/floors/uf_terrain_sheet.png';
import defaultWallTilesetImage from '/sheets/walls/uf_terrain_sheet_walls.png';
import defaultShadowTilesetImage from '/sheets/shadows/uf_terrain_shadows.png';

// Dynamic tileset registry
let tilesets = [];
let sections = {
  floor: {},
  wall: {},
  shadow: {},
  door: {},
  object: {}
};
let tilesetImages = {};
let selectedTilesets = [];
let initialized = false;

// Default sections (same as original tileRegistry)
export const DEFAULT_FLOOR_SECTIONS = {
  BLUE_FLOORS: { startIndex: 0, count: 5, name: "Blue Stone Floors" },
  GRAY_FLOORS: { startIndex: 16, count: 5, name: "Gray Stone Floors" },
  DARK_FLOORS: { startIndex: 32, count: 5, name: "Dark Stone Floors" },
  DIRT: { startIndex: 48, count: 2, name: "Dirt" },
  GRASS: { startIndex: 64, count: 2, name: "Grass" },
  SAND: { startIndex: 80, count: 2, name: "Sand" },
  STONE_PATTERN: { startIndex: 96, count: 3, name: "Stone Pattern" },
  CHECKERED: { startIndex: 112, count: 3, name: "Checkered" },
};

export const DEFAULT_WALL_SECTIONS = {
  STONE_WALLS: { startIndex: 0, count: 8, name: "Stone Walls" },
  BRICK_WALLS: { startIndex: 16, count: 8, name: "Brick Walls" },
  WOOD_WALLS: { startIndex: 32, count: 4, name: "Wooden Walls" },
};

export const DEFAULT_SHADOW_SECTIONS = {
  SHADOWS: { startIndex: 0, count: 4, name: "Shadows" }
};

/**
 * Initialize the tile registry with user-selected tilesets
 * @returns {Promise<boolean>} True if initialization succeeded
 */
export const initializeTileRegistry = async () => {
  if (initialized) return true;
  
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      console.log('No auth token found, using default tilesets');
      initializeWithDefaults();
      return true;
    }
    
    // Fetch user-selected tilesets
    console.log('Fetching user-selected tilesets from server...');
    const response = await axios.get(
      `${API_CONFIG.BASE_URL}/tilesets/user/selected`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    
    if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {
      console.log('No selected tilesets found, using defaults');
      initializeWithDefaults();
      return true;
    }
    
    selectedTilesets = response.data;
    tilesets = response.data;
    
    // Process and organize sections by category
    for (const tileset of tilesets) {
      if (!tileset.sections || !Array.isArray(tileset.sections)) {
        console.warn(`Tileset ${tileset.id} has no sections`);
        continue;
      }
      
      // Preload tileset image
      const tilesetImage = new Image();
      tilesetImage.src = `${API_CONFIG.BASE_URL}${tileset.image_path}`;
      
      // Wait for image to load
      await new Promise((resolve) => {
        tilesetImage.onload = resolve;
        tilesetImage.onerror = () => {
          console.error(`Failed to load tileset image for ${tileset.name}`);
          resolve();
        };
      });
      
      // Store the image reference
      tilesetImages[tileset.id] = tilesetImage;
      
      // Organize sections by category
      for (const section of tileset.sections) {
        if (!sections[section.category]) {
          sections[section.category] = {};
        }
        
        const sectionKey = `${tileset.id}_${section.id}`;
        sections[section.category][sectionKey] = {
          tilesetId: tileset.id,
          sectionId: section.id,
          startIndex: section.start_index,
          count: section.count,
          name: section.section_name,
          tilesetName: tileset.name
        };
      }
    }
    
    console.log('Tile registry initialized with user tilesets');
    initialized = true;
    
    // If no tilesets were loaded successfully, fall back to defaults
    if (Object.keys(tilesetImages).length === 0) {
      console.warn('No tileset images were loaded, using defaults');
      initializeWithDefaults();
    }
    
    return true;
  } catch (error) {
    console.error('Failed to initialize tile registry:', error);
    // Fall back to default tilesets
    initializeWithDefaults();
    return false;
  }
};

/**
 * Initialize with default tilesets
 */
const initializeWithDefaults = () => {
  // Create default floor sections
  Object.entries(DEFAULT_FLOOR_SECTIONS).forEach(([key, section]) => {
    sections.floor[key] = {
      tilesetId: 'default_floor',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Floor Tileset'
    };
  });
  
  // Create default wall sections
  Object.entries(DEFAULT_WALL_SECTIONS).forEach(([key, section]) => {
    sections.wall[key] = {
      tilesetId: 'default_wall',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Wall Tileset'
    };
  });
  
  // Create default shadow sections
  Object.entries(DEFAULT_SHADOW_SECTIONS).forEach(([key, section]) => {
    sections.shadow[key] = {
      tilesetId: 'default_shadow',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Shadow Tileset'
    };
  });
  
  // Add default images
  tilesetImages['default_floor'] = defaultFloorTilesetImage;
  tilesetImages['default_wall'] = defaultWallTilesetImage;
  tilesetImages['default_shadow'] = defaultShadowTilesetImage;
  
  initialized = true;
};

/**
 * Get a tileset image for a specific category
 * @param {string} category - The tile category (floor, wall, shadow, etc.)
 * @param {string|null} tilesetId - Optional specific tileset ID
 * @returns {HTMLImageElement|null} - The tileset image or null if not found
 */
export const getTilesetImageForCategory = (category, tilesetId = null) => {
  // If a specific tileset ID is provided and exists, return that
  if (tilesetId && tilesetImages[tilesetId]) {
    return tilesetImages[tilesetId];
  }
  
  // Otherwise, find the first tileset that has sections for this category
  for (const tileset of tilesets) {
    if (tileset.sections && tileset.sections.some(s => s.category === category)) {
      if (tilesetImages[tileset.id]) {
        return tilesetImages[tileset.id];
      }
    }
  }
  
  // Fall back to default images
  if (category === 'floor') return tilesetImages['default_floor'] || defaultFloorTilesetImage;
  if (category === 'wall') return tilesetImages['default_wall'] || defaultWallTilesetImage;
  if (category === 'shadow') return tilesetImages['default_shadow'] || defaultShadowTilesetImage;
  
  // If no appropriate tileset found, return the default floor tileset as a last resort
  return tilesetImages['default_floor'] || defaultFloorTilesetImage;
};

/**
 * Get sections for a specific category
 * @param {string} category - The tile category (floor, wall, shadow, etc.)
 * @returns {Object} - Object of sections for the category
 */
export const getSectionsForCategory = (category) => {
  return sections[category] || {};
};

/**
 * Get all sections from all tilesets
 * @returns {Object} - Sections organized by category and tileset
 */
export const getAllSections = () => {
  return sections;
};

/**
 * Get all available categories
 * @returns {string[]} - Array of category names
 */
export const getCategories = () => {
  return Object.keys(sections).filter(category => 
    Object.keys(sections[category]).length > 0
  );
};

/**
 * Get tile coordinates in the sprite sheet
 * @param {number} tileIndex - The index of the tile
 * @param {number} cols - Number of columns in the sprite sheet
 * @returns {Object} - Object with source coordinates for the tile
 */
export const getTileCoordinates = (tileIndex, cols = DEFAULT_TILESET_COLS) => {
  const col = tileIndex % cols;
  const row = Math.floor(tileIndex / cols);
  
  return {
    sourceX: col * TILE_SIZE,
    sourceY: row * TILE_SIZE,
    sourceWidth: TILE_SIZE,
    sourceHeight: TILE_SIZE,
    col, 
    row
  };
};

/**
 * Gets a descriptive name for a tile based on its index
 * @param {number} tileIndex - The index of the tile
 * @param {string} tileType - The type of tile ('floor', 'wall', etc.)
 * @param {string|null} tilesetId - Optional specific tileset ID
 * @returns {string} A human-readable name for the tile
 */
export const getTileName = (tileIndex, tileType = 'floor', tilesetId = null) => {
  // Find which section this tile belongs to
  const categorySections = sections[tileType] || {};
  
  for (const [sectionKey, section] of Object.entries(categorySections)) {
    // Skip sections from other tilesets if a specific tileset ID is provided
    if (tilesetId && section.tilesetId !== tilesetId) continue;
    
    if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
      const tileNumber = tileIndex - section.startIndex + 1;
      return `${section.name} ${tileNumber} (${section.tilesetName})`;
    }
  }
  
  // Fallback if no section matches
  return `${tileType.charAt(0).toUpperCase() + tileType.slice(1)} Tile ${tileIndex}`;
};

/**
 * Get tilesets that have been selected by the user
 * @returns {Array} - Array of selected tilesets
 */
export const getSelectedTilesets = () => {
  return selectedTilesets;
};

/**
 * Check if the registry has been initialized
 * @returns {boolean} - True if initialized
 */
export const isInitialized = () => {
  return initialized;
};

/**
 * Force re-initialization of the tile registry
 * Useful when user selects new tilesets in the marketplace
 */
export const refreshTileRegistry = async () => {
  initialized = false;
  tilesets = [];
  sections = {
    floor: {},
    wall: {},
    shadow: {},
    door: {},
    object: {}
  };
  tilesetImages = {};
  selectedTilesets = [];
  
  // Re-initialize
  return await initializeTileRegistry();
};

export default {
  initializeTileRegistry,
  getTilesetImageForCategory,
  getSectionsForCategory,
  getAllSections,
  getCategories,
  getTileCoordinates,
  getTileName,
  getSelectedTilesets,
  isInitialized,
  refreshTileRegistry,
  TILE_SIZE,
  DEFAULT_TILESET_COLS
};

================
File: windows/mapeditor/utils/mapUtils.js
================
/**
 * Map editor utility functions
 */

/**
 * Creates a new empty map with default settings
 * @param {string} name - Name of the map
 * @param {number} width - Width of the map in cells
 * @param {number} height - Height of the map in cells
 * @param {number} gridSize - Size of each grid cell in pixels
 * @returns {Object} A new map object
 */
export const createEmptyMap = (name = 'New Map', width = 20, height = 15, gridSize = 32) => {
  return {
    version: '1.0',
    name,
    gridSize,
    width,
    height,
    defaultTile: 'floor',
    layers: [
      {
        name: 'terrain',
        visible: true,
        cells: []
      }
    ],
    tokenPositions: [],
    // Add viewport property with default values
    viewport: {
      x: 0,
      y: 0,
      scale: 1 // For zoom level
    },
    metadata: {
      author: 'user',
      created: new Date().toISOString(),
      modified: new Date().toISOString()
    }
  };
};

/**
 * Updates the viewport data in the map
 * @param {Object} mapData - The map data
 * @param {number} x - The viewport x position
 * @param {number} y - The viewport y position
 * @param {number} scale - The viewport scale/zoom level
 * @returns {Object} The updated map data
 */
export const updateViewport = (mapData, x, y, scale) => {
  if (!mapData) return mapData;
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  
  // Create or update viewport property
  newMapData.viewport = {
    x: x !== undefined ? x : (mapData.viewport?.x || 0),
    y: y !== undefined ? y : (mapData.viewport?.y || 0),
    scale: scale !== undefined ? scale : (mapData.viewport?.scale || 1)
  };
  
  return newMapData;
};

/**
 * Parses a map file string into a map object
 * @param {string} mapContent - The string content of the map file
 * @returns {Object} The parsed map object
 * @throws {Error} If the map file is invalid
 */
export const parseMapFile = (mapContent) => {
  try {
    const mapData = JSON.parse(mapContent);
    
    // Validate the map structure
    if (!mapData.version || !mapData.layers || !Array.isArray(mapData.layers)) {
      throw new Error('Invalid map file format');
    }
    
    // Ensure viewport property exists
    if (!mapData.viewport) {
      console.log("Adding missing viewport data during loading");
      mapData.viewport = { x: 0, y: 0, scale: 1 };
    }
    
    // Ensure all cells have a rotation property and shadow cells have tileId
    mapData.layers.forEach(layer => {
      if (layer.cells && Array.isArray(layer.cells)) {
        layer.cells.forEach(cell => {
          // If rotation doesn't exist, add it with default value of 0
          if (cell.rotation === undefined) {
            cell.rotation = 0;
          } else {
            // Ensure rotation is a number
            cell.rotation = Number(cell.rotation);
          }
          
          // If it's a shadow type but missing tileId, add default tileId
          if (cell.type === 'shadow' && cell.tileId === undefined) {
            cell.tileId = 0;
            console.log("Added missing tileId to shadow cell during loading:", cell);
          }
        });
      }
    });
    
    console.log("Parsed map data with proper rotation values:", mapData);
    return mapData;
  } catch (err) {
    console.error('Error parsing map file:', err);
    throw new Error('Failed to parse map file. It may be corrupted or in an invalid format.');
  }
};

/**
 * Serializes a map object to a string
 * @param {Object} mapData - The map object to serialize
 * @returns {string} The serialized map as a JSON string
 */
export const serializeMap = (mapData) => {
  try {
    // Update the modified timestamp
    const updatedMapData = {
      ...mapData,
      metadata: {
        ...mapData.metadata,
        modified: new Date().toISOString()
      }
    };
    
      // CRITICAL FIX: Process all cells to ensure they have rotation property and shadow cells have tileId
      if (updatedMapData.layers && Array.isArray(updatedMapData.layers)) {
        updatedMapData.layers = updatedMapData.layers.map(layer => {
          if (layer.cells && Array.isArray(layer.cells)) {
            layer.cells = layer.cells.map(cell => {
              let updatedCell = { ...cell };
              
              // Get the most current rotation value - prioritize global state
              const globalRotation = window.currentMapRotation;
              
              // If rotation doesn't exist, add it with current global value or default to 0
              if (updatedCell.rotation === undefined) {
                updatedCell.rotation = globalRotation !== undefined ? Number(globalRotation) : 0;
              }
              // If global rotation is set, use it to update existing cells
              else if (globalRotation !== undefined) {
                updatedCell.rotation = Number(globalRotation);
              }
              // Otherwise ensure rotation is a number (not string)
              else if (typeof updatedCell.rotation !== 'number') {
                updatedCell.rotation = Number(updatedCell.rotation);
              }
              
              // Debug shadow tile tileId values before serialization
              if (updatedCell.type === 'shadow') {
                console.log(`SERIALIZE: Shadow cell at (${updatedCell.x}, ${updatedCell.y}) has tileId: ${updatedCell.tileId}`);
                
                // Ensure shadow tiles always have a tileId property
                if (updatedCell.tileId === undefined) {
                  updatedCell.tileId = 0;
                  console.log(`WARNING: Missing tileId for shadow tile at (${updatedCell.x}, ${updatedCell.y}), defaulting to 0`);
                }
              }
              
              return updatedCell;
            });
          }
          return layer;
        });
      }
    
    // Ensure all shadow tiles have a valid tileId before serialization
    console.log("=== ENSURING SHADOW TILES HAVE TILEID BEFORE SERIALIZATION ===");
    let shadowTileCount = 0;
    updatedMapData.layers.forEach(layer => {
      if (layer.cells && Array.isArray(layer.cells)) {
        layer.cells.forEach(cell => {
          if (cell.type === 'shadow') {
            shadowTileCount++;
            // Make sure tileId is present and is a number
            if (cell.tileId === undefined || cell.tileId === null) {
              console.log(`FIXING: Shadow Cell (${cell.x}, ${cell.y}) missing tileId, setting to 0`);
              cell.tileId = 0;
            } else if (typeof cell.tileId !== 'number') {
              console.log(`FIXING: Shadow Cell (${cell.x}, ${cell.y}) has non-number tileId: ${cell.tileId}, converting to number`);
              cell.tileId = Number(cell.tileId);
            } else {
              console.log(`OK: Shadow Cell (${cell.x}, ${cell.y}) has tileId=${cell.tileId}`);
            }
          }
        });
      }
    });
    console.log(`Total shadow tiles processed: ${shadowTileCount}`);
    
    // Use a replacer function to ensure values are properly serialized
    const serialized = JSON.stringify(updatedMapData, (key, value) => {
      // Handle rotation to ensure it's always saved as a number
      if (key === 'rotation') {
        return value === undefined ? 0 : Number(value);
      }
      
      // No need for special tileId handling here since we've already 
      // ensured all shadow cells have a proper tileId value above
      return value;
    }, 2);
    
    // Debug the serialized output for shadow cells
    try {
      const parsed = JSON.parse(serialized);
      console.log("=== SHADOW CELLS AFTER SERIALIZATION (parsed back) ===");
      parsed.layers.forEach(layer => {
        layer.cells.forEach(cell => {
          if (cell.type === 'shadow') {
            console.log(`Serialized Shadow Cell (${cell.x}, ${cell.y}): tileId=${cell.tileId}, type=${typeof cell.tileId}`);
          }
        });
      });
    } catch (err) {
      console.error("Failed to parse serialized map for debug:", err);
    }
    
    return serialized;
  } catch (err) {
    console.error('Error serializing map:', err);
    throw new Error('Failed to serialize map data.');
  }
};

/**
 * Applies the saved viewport position to the canvas
 * @param {Object} mapData - The map data containing viewport information
 * @param {Object} canvas - The canvas element or rendering context
 * @param {Function} setViewportState - Optional callback to update viewport state in React/Vue
 * @returns {void}
 */
export const applyViewport = (mapData, canvas, setViewportState = null) => {
  if (!mapData || !mapData.viewport) return;
  
  const { x, y, scale } = mapData.viewport;
  
  // If you're using a canvas directly
  if (canvas && canvas.getContext) {
    const ctx = canvas.getContext('2d');
    // Reset any existing transformations
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    // Apply the saved viewport transformation
    ctx.setTransform(scale, 0, 0, scale, x, y);
  }
  
  // If you're using a state-based approach (React/Vue)
  if (setViewportState) {
    setViewportState({ x, y, scale });
  }
  
  console.log(`Applied viewport from map: x=${x}, y=${y}, scale=${scale}`);
};

/**
 * Finds a cell in a specific layer at the given coordinates
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to search in
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Object|null} The cell object if found, null otherwise
 */
export const findCellInLayer = (mapData, layerIndex, x, y) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return null;
  
  const layer = mapData.layers[layerIndex];
  return layer.cells.find(cell => cell.x === x && cell.y === y) || null;
};

/**
 * Adds or updates a cell in a layer
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to update
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @param {string} type - The type of the cell
 * @param {number} tileId - The ID of the tile (optional)
 * @param {number} rotation - The rotation angle in degrees (0, 90, 180, 270) (optional)
 * @returns {Object} The updated map data
 */
export const setCellInLayer = (mapData, layerIndex, x, y, type, tileId, rotation = 0) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return mapData;
  
  // Use global rotation state as fallback if available
  const rotationValue = rotation !== undefined ? rotation : (window.currentMapRotation || 0);
  
  // Ensure rotation is a number with explicit conversion
  const numRotation = parseInt(rotationValue, 10) || 0;
  
  console.log(`setCellInLayer called with: x=${x}, y=${y}, type=${type}, tileId=${tileId}`);
  console.log(`Using rotation: ${numRotation} (converted from ${rotation}, global=${window.currentMapRotation})`);
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  const layerData = { ...newMapData.layers[layerIndex] };
  
  // Clone the cells array
  layerData.cells = [...layerData.cells];
  
  // Find if the cell already exists in this layer
  const existingCellIndex = layerData.cells.findIndex(cell => cell.x === x && cell.y === y);
  
  // Create cell data with required properties
  const cellData = { x, y, type };
  
  // For shadow tiles, always include tileId (using the provided tileId or defaulting to 0)
  // For other types, include tileId only if explicitly provided
  if (type === 'shadow') {
    // DEBUG: Log the incoming tileId value to track exactly what's being passed
    console.log(`EDIT: Shadow tile at (${x}, ${y}) - Incoming tileId: ${tileId}, type: ${typeof tileId}`);
    
    // CRITICAL FIX: Always explicitly set tileId for shadow tiles
    // Never default to 0 if tileId is provided
    cellData.tileId = tileId;
    
    // Debug the actual tileId value that was set
    console.log(`EDIT: Shadow tile tileId set to: ${cellData.tileId}`);
  } else if (tileId !== undefined) {
    // For non-shadow tiles, only include tileId if explicitly provided
    cellData.tileId = tileId;
  }
  
  // Always include rotation in the cell data, even if it's 0
  // This ensures rotation is explicitly stored in the map file
  cellData.rotation = numRotation;
  
  if (existingCellIndex !== -1) {
    console.log(`Updating existing cell at (${x}, ${y}) with rotation=${rotation}`);
    // Update existing cell, preserving any properties not explicitly changed
    let updatedCell = { 
      ...layerData.cells[existingCellIndex], 
      ...cellData 
    };
    
    // CRITICAL FIX: Double-check if this is a shadow cell and ensure tileId is defined
    if (updatedCell.type === 'shadow' && updatedCell.tileId === undefined) {
      updatedCell.tileId = tileId;
      console.log(`FIX: Shadow cell at (${x}, ${y}) missing tileId in update operation, explicitly setting to ${tileId}`);
    }
    
    // Update the cell in the array
    layerData.cells[existingCellIndex] = updatedCell;
    
    // Log the updated cell to verify all properties are properly set
    console.log("Updated cell:", layerData.cells[existingCellIndex]);
  } else {
    console.log(`Adding new cell at (${x}, ${y}) with rotation=${rotation}`);
    // Add new cell
    layerData.cells.push(cellData);
    
    // Log the added cell to verify rotation was properly set
    console.log("Added cell:", cellData);
  }
  
  // Update the layer in the map data
  newMapData.layers[layerIndex] = layerData;
  
  return newMapData;
};

/**
 * Removes a cell from a layer
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to update
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Object} The updated map data
 */
export const removeCellFromLayer = (mapData, layerIndex, x, y) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return mapData;
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  const layerData = { ...newMapData.layers[layerIndex] };
  
  // Remove the cell if it exists
  layerData.cells = layerData.cells.filter(cell => !(cell.x === x && cell.y === y));
  
  // Update the layer in the map data
  newMapData.layers[layerIndex] = layerData;
  
  return newMapData;
};

/**
 * Gets all visible cells at a specific coordinate across all layers
 * @param {Object} mapData - The map data
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Array} Array of cells at the coordinate, from bottom to top layer
 */
export const getCellsAtCoordinate = (mapData, x, y) => {
  if (!mapData || !mapData.layers) return [];
  
  const cells = [];
  
  mapData.layers.forEach((layer, index) => {
    if (layer.visible) {
      const cell = findCellInLayer(mapData, index, x, y);
      if (cell) {
        cells.push({ ...cell, layerIndex: index });
      }
    }
  });
  
  return cells;
};

/**
 * Converts screen coordinates to grid coordinates
 * @param {number} screenX - The x screen coordinate
 * @param {number} screenY - The y screen coordinate
 * @param {number} gridSize - The size of each grid cell
 * @param {Object} viewportOffset - The viewport offset { x, y }
 * @returns {Object} The grid coordinates { x, y }
 */
export const screenToGridCoordinates = (screenX, screenY, gridSize, viewportOffset) => {
  const gridX = Math.floor((screenX - viewportOffset.x) / gridSize);
  const gridY = Math.floor((screenY - viewportOffset.y) / gridSize);
  return { x: gridX, y: gridY };
};

/**
 * Converts grid coordinates to screen coordinates
 * @param {number} gridX - The x grid coordinate
 * @param {number} gridY - The y grid coordinate
 * @param {number} gridSize - The size of each grid cell
 * @param {Object} viewportOffset - The viewport offset { x, y }
 * @returns {Object} The screen coordinates { x, y }
 */
export const gridToScreenCoordinates = (gridX, gridY, gridSize, viewportOffset) => {
  const screenX = gridX * gridSize + viewportOffset.x;
  const screenY = gridY * gridSize + viewportOffset.y;
  return { x: screenX, y: screenY };
};

/**
 * Converts JSON map data to ASCII format for the roguelike game engine
 * @param {Object} mapData - The map data in JSON format
 * @returns {string} The map data in ASCII format
 */
export const convertMapToAscii = (mapData) => {
  // Create a 2D array filled with void spaces
  const width = mapData.width;
  const height = mapData.height;
  const asciiMap = Array(height).fill().map(() => Array(width).fill(' ')); // ' ' for void
  
  // Process each layer from bottom to top
  mapData.layers.forEach(layer => {
    if (!layer.visible) return;
    
    // Process each cell in the layer
    layer.cells.forEach(cell => {
      // Skip cells outside the map bounds
      if (cell.x < 0 || cell.x >= width || cell.y < 0 || cell.y >= height) return;
      
      // Map cell types to ASCII characters
      let asciiChar;
      switch(cell.type) {
        case 'wall':
          asciiChar = '#';
          break;
        case 'floor':
          asciiChar = '.';
          break;
        case 'door':
          asciiChar = '+';
          break;
        case 'grass':
          asciiChar = '"';
          break;
        case 'ashes':
          asciiChar = "'";
          break;
        case 'stairs':
          asciiChar = '>';
          break;
        case 'spawn':
          asciiChar = '@';
          break;
        default:
          // For unknown types, use a default character
          asciiChar = '?';
      }
      
      // Place the character in the grid
      asciiMap[cell.y][cell.x] = asciiChar;
    });
  });
  
  // Convert 2D array to string with newlines
  return asciiMap.map(row => row.join('')).join('\n');
};

/**
 * Converts ASCII map to JSON format
 * @param {string} asciiMap - The map data in ASCII format
 * @param {string} name - Optional name for the map
 * @returns {Object} The map data in JSON format
 */
export const convertAsciiToMap = (asciiMap, name = 'Imported Map') => {
  const lines = asciiMap.trim().split('\n');
  const height = lines.length;
  const width = lines.reduce((max, line) => Math.max(max, line.length), 0);
  
  // Create a basic map structure
  const mapData = createEmptyMap(name, width, height);
  
  // Create a terrain layer
  const terrainCells = [];
  
  // Process each character in the ASCII map
  for (let y = 0; y < lines.length; y++) {
    const line = lines[y];
    for (let x = 0; x < line.length; x++) {
      const char = line[x];
      let cellType;
      
      // Map ASCII characters to cell types
      switch(char) {
        case '#':
          cellType = 'wall';
          break;
        case '.':
          cellType = 'floor';
          break;
        case '+':
          cellType = 'door';
          break;
        case '"':
          cellType = 'grass';
          break;
        case "'":
          cellType = 'ashes';
          break;
        case '>':
          cellType = 'stairs';
          break;
        case '@':
          cellType = 'spawn';
          // Could also mark this as a player spawn point
          break;
        case ' ':
          // Void/empty space, skip
          continue;
        default:
          // Unknown character, interpret as custom type
          cellType = `custom-${char}`;
      }
      
      // Add the cell to the terrain layer
      terrainCells.push({ x, y, type: cellType });
    }
  }
  
  // Update the terrain layer with the cells
  mapData.layers[0].cells = terrainCells;
  
  return mapData;
};

================
File: windows/mapeditor/utils/tileRegistry.js
================
/**
 * Tile registry and helper functions for managing sprite sheet tiles
 */

// Import the tilesets directly
import terrainTilesetImage from '../../../../assets/sheets/floors/uf_terrain_sheet.png';
import wallTilesetImage from '/sheets/walls/uf_terrain_sheet_walls.png'; // Using absolute path from public folder
import shadowTilesetImage from '/sheets/shadows/uf_terrain_shadows.png'

// Tile dimensions and sprite sheet configuration
export const TILE_SIZE = 48; // Size of each tile in pixels
export const TILESET_COLS = 16; // Number of columns in the sprite sheet (adjust based on actual width)

// Path to the tilesets (using imported images)
export const FLOOR_TILESET_PATH = terrainTilesetImage;
export const WALL_TILESET_PATH = wallTilesetImage;
export const SHADOW_TILESET_PATH = shadowTilesetImage;

// Named sections for better organization
export const TILE_SECTIONS = {
  BLUE_FLOORS: { startIndex: 0, count: 5, name: "Blue Stone Floors" },
  GRAY_FLOORS: { startIndex: 16, count: 5, name: "Gray Stone Floors" },
  DARK_FLOORS: { startIndex: 32, count: 5, name: "Dark Stone Floors" },
  DIRT: { startIndex: 48, count: 2, name: "Dirt" },
  GRASS: { startIndex: 64, count: 2, name: "Grass" },
  SAND: { startIndex: 80, count: 2, name: "Sand" },
  STONE_PATTERN: { startIndex: 96, count: 3, name: "Stone Pattern" },
  CHECKERED: { startIndex: 112, count: 3, name: "Checkered" },
  // Add more sections as needed
};

// Wall tile sections
export const WALL_TILE_SECTIONS = {
  STONE_WALLS: { startIndex: 0, count: 8, name: "Stone Walls" },
  BRICK_WALLS: { startIndex: 16, count: 8, name: "Brick Walls" },
  WOOD_WALLS: { startIndex: 32, count: 4, name: "Wooden Walls" },
  // Add more wall sections as needed
};

export const SHADOW_TILE_SECTIONS = {
  SHADOWS: { startIndex: 0, count: 4, name: "Shadows" }
};

/**
 * Calculates pixel coordinates in the sprite sheet for a given tile index
 * @param {number} tileIndex - The index of the tile
 * @returns {Object} Object with source coordinates for the tile
 */
export const getTileCoordinates = (tileIndex) => {
  const col = tileIndex % TILESET_COLS;
  const row = Math.floor(tileIndex / TILESET_COLS);
  
  return {
    sourceX: col * TILE_SIZE,
    sourceY: row * TILE_SIZE,
    sourceWidth: TILE_SIZE,
    sourceHeight: TILE_SIZE,
    // Include calculated positions for easier debugging
    col, row
  };
};

/**
 * Gets a descriptive name for a tile based on its index
 * @param {number} tileIndex - The index of the tile
 * @param {string} tileType - The type of tile ('floor', 'wall', etc.)
 * @returns {string} A human-readable name for the tile
 */
export const getTileName = (tileIndex, tileType = 'floor') => {
  // Find which section this tile belongs to
  if (tileType === 'floor') {
    for (const [sectionKey, section] of Object.entries(TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Floor Tile ${tileIndex}`;
  } else if (tileType === 'wall') {
    for (const [sectionKey, section] of Object.entries(WALL_TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Wall Tile ${tileIndex}`;
  } else if (tileType === 'shadow') {
    for (const [sectionKey, section] of Object.entries(SHADOW_TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Shadow Tile ${tileIndex}`;
  } else if (tileType === 'door') {
    return `Door`;
  }
  
  // Fallback if not in a named section or unknown type
  return `Tile ${tileIndex}`;
};

================
File: windows/MapEditorWindow.jsx
================
import React, { useState, useEffect } from 'react';
import { Map } from 'lucide-react';
import MapCanvas from './mapeditor/MapCanvas';
import MapToolbar from './mapeditor/MapToolbar';
import LayerPanel from './mapeditor/LayerPanel';
import TilePaletteWithMarketplace from './mapeditor/TilePaletteWithMarketplace';
import { setCellInLayer, removeCellFromLayer } from './mapeditor/utils/mapUtils';

/**
 * Map Editor Window Component
 * This window allows users to create and edit grid-based maps
 */
const MapEditorWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // State for map data
  const [mapData, setMapData] = useState(null);
  const [currentLayer, setCurrentLayer] = useState(0);
  const [currentTool, setCurrentTool] = useState('select');
  const [isDirty, setIsDirty] = useState(false);
  const [error, setError] = useState(null);
  const [selectedTileId, setSelectedTileId] = useState(0);
  const [selectedTileType, setSelectedTileType] = useState('floor');
  const [selectedRotation, setSelectedRotation] = useState(0); // 0, 90, 180, 270 degrees

  // Load map data from file when selected
  useEffect(() => {
    if (windowState?.selectedFile?.path && windowState.selectedFile.name.endsWith('.map')) {
      loadMapFromFile(windowState.selectedFile.path);
    }
  }, [windowState?.selectedFile]);

  // Handler for loading a map file
  const loadMapFromFile = async (filePath) => {
    try {
      // Reset state for new file
      setError(null);
      
      // If there's no file path, create a new empty map
      if (!filePath) {
        createNewMap();
        return;
      }
      
      // This is a placeholder - in a real implementation, we would fetch the content
      // from the server using a similar approach to how the file explorer works
      
      // For now, create a simple map structure
      // In the future, this would parse the JSON from the file
      setMapData({
        version: "1.0",
        name: "Sample Map",
        gridSize: 32,
        width: 20,
        height: 15,
        defaultTile: "floor",
        layers: [
          {
            name: "terrain",
            visible: true,
            cells: []
          },
          {
            name: "objects",
            visible: true,
            cells: []
          }
        ],
        tokenPositions: [],
        metadata: {
          author: "user",
          created: new Date().toISOString(),
          modified: new Date().toISOString()
        }
      });
      
      setCurrentLayer(0);
      setIsDirty(false);
    } catch (err) {
      console.error('Error loading map:', err);
      setError('Failed to load map file. It may be corrupted or in an unsupported format.');
    }
  };

  // Create a new empty map
  const createNewMap = () => {
    setMapData({
      version: "1.0",
      name: "New Map",
      gridSize: 32,
      width: 20,
      height: 15,
      defaultTile: "floor",
      layers: [
        {
          name: "terrain",
          visible: true,
          cells: []
        }
      ],
      tokenPositions: [],
      metadata: {
        author: "user",
        created: new Date().toISOString(),
        modified: new Date().toISOString()
      }
    });
    setCurrentLayer(0);
    setIsDirty(true);
  };

  // Handler for saving the map
  const handleSaveMap = async () => {
    if (!mapData) return;
    if (!windowState?.selectedFile?.path) {
      // Would normally prompt for save location
      setError('No file path specified for saving.');
      return;
    }
    
    try {
      console.log("========== SAVING MAP ==========");
      console.log("Current window.currentMapRotation value:", window.currentMapRotation);
      console.log("Current selectedRotation state value:", selectedRotation);
      
      // Update modified timestamp
      const updatedMapData = {
        ...mapData,
        metadata: {
          ...mapData.metadata,
          modified: new Date().toISOString()
        }
      };
      
  // CRITICAL FIX: Ensure every cell has rotation property and shadow cells have tileId BEFORE serialization
  // This guarantees these properties are always in the JSON output
  updatedMapData.layers.forEach(layer => {
    if (layer.cells && Array.isArray(layer.cells)) {
      layer.cells = layer.cells.map(cell => {
        let updatedCell = { ...cell };
        
        // If rotation doesn't exist, add it with default value of 0
        if (updatedCell.rotation === undefined) {
          updatedCell.rotation = 0;
        }
        // Ensure rotation is a number (not string)
        else if (typeof updatedCell.rotation !== 'number') {
          updatedCell.rotation = Number(updatedCell.rotation);
        }
        
        // Special case for shadow tiles - debug the current tileId
        if (updatedCell.type === 'shadow') {
          console.log(`SAVE: Shadow cell at (${updatedCell.x}, ${updatedCell.y}) has tileId: ${updatedCell.tileId}`);
        }
        
        return updatedCell;
      });
    }
  });
      
      // Debug: Check shadow tile values before we pass to the serializer
      let shadowCount = 0;
      let rotationCount = 0;
      console.log("=== SHADOW TILES BEFORE SERIALIZATION (MapEditorWindow) ===");
      updatedMapData.layers.forEach(layer => {
        layer.cells.forEach(cell => {
          // Log all cell rotation values
          console.log(`Cell at (${cell.x}, ${cell.y}) has rotation: ${cell.rotation}`);
          rotationCount++;
          
          // Specifically log shadow tile values
          if (cell.type === 'shadow') {
            shadowCount++;
            console.log(`SAVE CHECK: Shadow Cell (${cell.x}, ${cell.y}): tileId=${cell.tileId}, type=${typeof cell.tileId}`);
          }
        });
      });
      
      console.log(`Total cells: ${rotationCount}, Shadow tiles: ${shadowCount}`);
      
      // Use a custom replacer function for critical special case properties
      const serializedMap = JSON.stringify(updatedMapData, (key, value) => {
        // Handle rotation values (all cell types)
        if (key === 'rotation') {
          return value === undefined ? 0 : Number(value);
        }
        
        // Special handling for tileId in shadow cells
        if (key === 'tileId' && value === undefined && this && this.type === 'shadow') {
          console.log(`JSON.stringify: Missing tileId for shadow tile, adding default`);
          return 0;
        }
        
        return value;
      }, 2);
      
      // Check the localStorage copy to ensure shadow tiles have tileId
      try {
        // First check the map data BEFORE serialization
        console.log("==== SHADOW TILES IN PRE-SERIALIZED MAPDATA ====");
        updatedMapData.layers.forEach(layer => {
          layer.cells.forEach(cell => {
            if (cell.type === 'shadow') {
              console.log(`PRE-SAVE: Shadow Cell at (${cell.x}, ${cell.y}): tileId=${cell.tileId}, type=${typeof cell.tileId}`);
            }
          });
        });
        
        // Then check the final serialized version
        const parsed = JSON.parse(serializedMap);
        const shadowTiles = [];
        parsed.layers.forEach(layer => {
          layer.cells.forEach(cell => {
            if (cell.type === 'shadow') {
              shadowTiles.push(`(${cell.x},${cell.y}): tileId=${cell.tileId}`);
            }
          });
        });
        console.log("==== SHADOW TILES IN FINAL SERIALIZED MAP ====");
        console.log(shadowTiles.join(', '));
      } catch (err) {
        console.error("Error checking serialized map:", err);
      }
      
      console.log('Saving map with explicit rotation values included');
      
      // Actually save the map data to localStorage for demo purposes
      localStorage.setItem('last_saved_map', serializedMap);
      localStorage.setItem('last_saved_map_pretty', JSON.stringify(JSON.parse(serializedMap), null, 2));
      console.log('Map saved to localStorage - check with: localStorage.getItem("last_saved_map_pretty")');
      
      // Update state
      setMapData(updatedMapData);
      setIsDirty(false);
    } catch (err) {
      console.error('Error saving map:', err);
      setError('Failed to save map file.');
    }
  };

  // Handler for map edits
  const handleEdit = (x, y, tool, rotation = 0, tileId = selectedTileId) => {
    if (!mapData || !mapData.layers || !mapData.layers[currentLayer]) return;
    
    // Log that we're receiving the rotation value
    console.log("============== EDIT CELL ==============");
    console.log("MapEditorWindow received edit with rotation:", rotation);
    console.log(`Cell coordinates: (${x}, ${y}), Tool: ${tool}, tileId: ${tileId}`);
    
    // CRITICAL: Make sure the tileId is set explicitly for shadow tiles
    let effectiveTileId = tileId;
    if (tool === 'shadow') {
      // Force shadow tiles to use the selected tileId
      if (effectiveTileId === undefined) {
        effectiveTileId = selectedTileId;
        console.log(`Shadow tile tileId was undefined, using selectedTileId: ${selectedTileId}`);
      }
      console.log(`Using tileId: ${effectiveTileId} for shadow tile at (${x}, ${y})`);
    }
    
    // Ensure rotation is a number
    const numRotation = Number(rotation);
    console.log("Rotation converted to number:", numRotation);
    
    let newMapData;
    
    if (tool === 'erase') {
      // If erasing, remove the cell from the layer
      newMapData = removeCellFromLayer(mapData, currentLayer, x, y);
      console.log("Cell erased successfully");
    } else {
      // For tile placement tools (floor, wall, etc.), use the selected tile and rotation
      console.log(`Setting cell in layer ${currentLayer} with tileId: ${effectiveTileId}, rotation: ${numRotation}`);
      
      newMapData = setCellInLayer(
        mapData, 
        currentLayer, 
        x, 
        y, 
        tool,
        effectiveTileId, // Use our locally validated tileId value
        numRotation // Use the numeric rotation value
      );
      
      // Check if the rotation was stored correctly
      const updatedCell = newMapData.layers[currentLayer].cells.find(
        cell => cell.x === x && cell.y === y
      );
      
      if (updatedCell) {
        console.log("Cell updated:", updatedCell);
        if (updatedCell.rotation !== undefined) {
          console.log(`Rotation set successfully: ${updatedCell.rotation}°`);
        } else {
          console.warn("Rotation was not stored in the cell data!");
        }
      } else {
        console.warn("Could not find the updated cell in the map data!");
      }
    }
    
    // Update state
    setMapData(newMapData);
    setIsDirty(true);
    
    // Store to localStorage for debugging
    localStorage.setItem('debug_mapData', JSON.stringify(newMapData));
    console.log("Map data stored to localStorage for debugging");
    console.log("=========================================");
  };
  
  // Handle tile selection
  const handleSelectTile = (tileId) => {
    console.log(`handleSelectTile called with: ${tileId} (previous: ${selectedTileId}), tileType: ${selectedTileType}`);
    
    // Update state
    setSelectedTileId(tileId);
    
    // When selecting a tile, switch to the corresponding tool
    if (currentTool === 'select' || currentTool === 'erase') {
      console.log(`Switching tool from ${currentTool} to ${selectedTileType}`);
      setCurrentTool(selectedTileType);
    }
    
    // Debug - check state immediately after update
    setTimeout(() => {
      console.log(`After update: selectedTileId: ${selectedTileId}, tileType: ${selectedTileType}`);
    }, 0);
  };
  
  // Handle tile type change
  const handleChangeTileType = (tileType) => {
    setSelectedTileType(tileType);

    // When changing to shadow type, we no longer force tileId=0
    // This allows users to select any shadow tile and have it properly saved
    console.log(`Changed tile type to: ${tileType}, keeping current selectedTileId: ${selectedTileId}`);
    
    // When changing tile type, also change the current tool
    if (currentTool !== 'select' && currentTool !== 'erase') {
      setCurrentTool(tileType);
    }
  };
  
  // Handle tile rotation - fixes React async state update issue
  const handleRotateTile = (rotation) => {
    console.log("---------------------------------------");
    console.log("handleRotateTile called with rotation:", rotation);
    
    // Convert to number to ensure consistent handling
    const numRotation = Number(rotation);
    
    // Update the DOM immediately for visual feedback (safely)
    const debugElement = document.getElementById('debug-rotation-value');
    if (debugElement) {
      debugElement.textContent = `Rotation set to: ${numRotation}°`;
    }
    
    // Set window-level variable to ensure it's globally accessible
    window.currentMapRotation = numRotation;
    
    // Update the state
    setSelectedRotation(numRotation);
    
    // Force update any tile displays
    if (document.getElementById('tile-rotation-display')) {
      document.getElementById('tile-rotation-display').textContent = `${numRotation}°`;
    }
    
    // When rotating a tile, make sure we're in a tile placement mode
    if (currentTool === 'select' || currentTool === 'erase') {
      setCurrentTool(selectedTileType);
    }
    
    console.log("Rotation has been set to:", numRotation);
    console.log("Global rotation tracker:", window.currentMapRotation);
    console.log("---------------------------------------");
  };

  // Layer management functions
  const handleToggleLayerVisibility = (layerIndex) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      visible: !newMapData.layers[layerIndex].visible
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  const handleAddLayer = () => {
    if (!mapData) return;
    
    const newLayerName = `Layer ${mapData.layers.length + 1}`;
    const newLayer = {
      name: newLayerName,
      visible: true,
      cells: []
    };
    
    const newMapData = { 
      ...mapData,
      layers: [...mapData.layers, newLayer]
    };
    
    setMapData(newMapData);
    setCurrentLayer(newMapData.layers.length - 1);
    setIsDirty(true);
  };

  const handleRemoveLayer = (layerIndex) => {
    if (!mapData || !mapData.layers || mapData.layers.length <= 1) return;
    
    const newMapData = { ...mapData };
    newMapData.layers = newMapData.layers.filter((_, index) => index !== layerIndex);
    
    setMapData(newMapData);
    
    // Adjust current layer if necessary
    if (currentLayer >= newMapData.layers.length) {
      setCurrentLayer(newMapData.layers.length - 1);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerUp = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex >= mapData.layers.length - 1) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex + 1]] = [layers[layerIndex + 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex + 1);
    } else if (currentLayer === layerIndex + 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerDown = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex <= 0) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex - 1]] = [layers[layerIndex - 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex - 1);
    } else if (currentLayer === layerIndex - 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleRenameLayer = (layerIndex, newName) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    // Use the provided name instead of prompting
    if (!newName || newName.trim() === '') return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      name: newName
    };
    
    setMapData(newMapData);
    setIsDirty(true);
    
    // Save the changes to the file
    handleSaveMap();
  };

  // Show placeholder if no file is loaded
  if (!mapData) {
    return (
      <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
        <div className="p-2 border-b border-stone-700">
          <h2 className="text-lg font-semibold flex items-center">
            <Map className="mr-2" size={18} />
            Map Editor
          </h2>
        </div>
        <div className="flex-1 overflow-auto p-4 flex items-center justify-center">
          <div className="text-center">
            <Map size={48} className="mx-auto mb-4 text-teal-500" />
            <h3 className="text-xl mb-2">Grid Map Editor</h3>
            <p className="text-stone-400">
              {error ? (
                <span className="text-red-400">{error}</span>
              ) : (
                <>
                  Select a .map file to edit, or create a new one.
                  <br />
                  <button 
                    className="mt-4 px-4 py-2 bg-teal-800 hover:bg-teal-700 rounded text-white"
                    onClick={createNewMap}
                  >
                    Create New Map
                  </button>
                </>
              )}
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Render the map editor with all components
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="p-2 border-b border-stone-700 flex justify-between items-center">
        <h2 className="text-lg font-semibold flex items-center">
          <Map className="mr-2" size={18} />
          {mapData.name} {isDirty && '*'}
        </h2>
        {error && <div className="text-red-400 text-sm">{error}</div>}
      </div>
      
      {/* Toolbar */}
      <MapToolbar 
        currentTool={currentTool}
        setCurrentTool={setCurrentTool}
        onSave={handleSaveMap}
        onUndo={() => console.log('Undo not implemented')}
        onRedo={() => console.log('Redo not implemented')}
        onClear={() => createNewMap()}
      />
      
      {/* For debugging - hidden in production */}
      <div id="debug-rotation-value" className="p-1 bg-red-800 text-white text-xs">
        Rotation set to: {selectedRotation}°
      </div>
      
      {/* Main content area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <div className="flex-1 flex overflow-hidden">
          {/* Canvas for map editing */}
          <MapCanvas 
            mapData={mapData}
            currentLayer={currentLayer}
            currentTool={currentTool}
            onEdit={handleEdit}
            selectedTileId={selectedTileId}
            selectedRotation={selectedRotation}
          />
          
          {/* Layer panel */}
          <LayerPanel 
            layers={mapData.layers}
            currentLayer={currentLayer}
            setCurrentLayer={setCurrentLayer}
            onToggleLayerVisibility={handleToggleLayerVisibility}
            onAddLayer={handleAddLayer}
            onRemoveLayer={handleRemoveLayer}
            onMoveLayerUp={handleMoveLayerUp}
            onMoveLayerDown={handleMoveLayerDown}
            onRenameLayer={handleRenameLayer}
          />
        </div>
        
        {/* Tile Palette with Marketplace Integration */}
        <TilePaletteWithMarketplace 
          onSelectTile={handleSelectTile}
          selectedTileId={selectedTileId}
          tileType={selectedTileType}
          onChangeTileType={handleChangeTileType}
          selectedRotation={selectedRotation}
          onRotateTile={handleRotateTile}
          createWindow={transformWindow}
        />
      </div>
    </div>
  );
};

export default MapEditorWindow;

================
File: windows/MarketplaceWindow.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { X, Check, Upload, Info, AlertTriangle, RotateCw } from 'lucide-react';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';

/**
 * Marketplace window component for browsing and selecting tilesets
 */
const MarketplaceWindow = ({ windowId }) => {
  const [tilesets, setTilesets] = useState([]);
  const [selectedTilesets, setSelectedTilesets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth();
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [debugInfo, setDebugInfo] = useState(null);

  // Fetch all tilesets and user-selected tilesets with enhanced debugging
  const fetchTilesets = useCallback(async () => {
    setLoading(true);
    setError(null);
    setDebugInfo(null);
    
    // Debug: Log API configuration
    const authToken = localStorage.getItem('auth_token');
    const debugData = {
      baseUrl: API_CONFIG.BASE_URL,
      tilesetsEndpoint: `${API_CONFIG.BASE_URL}/tilesets`,
      auth: authToken ? 'Token exists' : 'No token',
      tokenLength: authToken ? authToken.length : 0,
      userInfo: user ? `User: ${user.username}, Admin: ${user.isAdmin}` : 'No user'
    };
    
    console.log('Marketplace API Config:', debugData);
    setDebugInfo(debugData);
    
    try {
      console.log('Attempting to fetch tilesets from:', `${API_CONFIG.BASE_URL}/tilesets`);
      
      // First try the main endpoint, then fall back to the simple endpoint if it fails
      try {
        console.log('Trying main tilesets endpoint');
        // Fetch all available tilesets
        const [tilesetsResponse, selectedResponse] = await Promise.all([
          axios.get(`${API_CONFIG.BASE_URL}/tilesets`),
          axios.get(`${API_CONFIG.BASE_URL}/tilesets/user/selected`, {
            headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
          })
        ]);

        console.log('Tilesets response:', tilesetsResponse);
        console.log('Selected tilesets response:', selectedResponse);

        setTilesets(tilesetsResponse.data || []);
        setSelectedTilesets(selectedResponse.data || []);
      } catch (mainError) {
        console.error('Main endpoint failed, trying fallback:', mainError);
        
        // Try the debug/simple endpoint as fallback
        console.log('Trying simple fallback endpoint');
        const fallbackResponse = await axios.get(`${API_CONFIG.BASE_URL}/tilesets/simple`);
        console.log('Fallback response:', fallbackResponse);
        
        if (fallbackResponse.data && Array.isArray(fallbackResponse.data)) {
          setTilesets(fallbackResponse.data);
          // We don't have selected tilesets in fallback mode
          setSelectedTilesets([]);
          
          // Still set a warning about using fallback mode
          setDebugInfo(prevDebug => ({ 
            ...prevDebug, 
            warning: 'Using fallback tileset data. Some features may be limited.',
            fallbackMode: true
          }));
        } else {
          // If even the fallback fails, re-throw the original error
          throw mainError;
        }
      }
    } catch (err) {
      console.error('Error fetching tilesets (all attempts failed):', err);
      
      // Enhanced error reporting
      const errorDetails = {
        message: err.message,
        status: err.response?.status,
        statusText: err.response?.statusText,
        responseData: err.response?.data,
        config: {
          url: err.config?.url,
          method: err.config?.method,
          headers: err.config?.headers ? 'Headers present' : 'No headers'
        }
      };
      
      console.error('Error details:', errorDetails);
      setDebugInfo(prevDebug => ({ ...prevDebug, error: errorDetails }));
      
      // Set a more informative error message
      setError(`Failed to load tilesets: ${err.message}. ${err.response ? `Server responded with ${err.response.status} ${err.response.statusText}` : 'Server unreachable'}`);
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Load tilesets on component mount
  useEffect(() => {
    fetchTilesets();
  }, [fetchTilesets]);

  // Toggle tileset selection
  const toggleTilesetSelection = async (tilesetId) => {
    try {
      const isSelected = selectedTilesets.some(t => t.id === tilesetId);
      
      if (isSelected) {
        // Deselect the tileset
        await axios.delete(`${API_CONFIG.BASE_URL}/tilesets/user/select/${tilesetId}`, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
        });
        setSelectedTilesets(prev => prev.filter(t => t.id !== tilesetId));
      } else {
        // Select the tileset
        await axios.post(`${API_CONFIG.BASE_URL}/tilesets/user/select/${tilesetId}`, {}, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
        });
        const tilesetToAdd = tilesets.find(t => t.id === tilesetId);
        if (tilesetToAdd) {
          setSelectedTilesets(prev => [...prev, tilesetToAdd]);
        }
      }
    } catch (err) {
      console.error('Error toggling tileset selection:', err);
      setError('Failed to update tileset selection. Please try again.');
    }
  };

  // Check if a tileset is selected
  const isTilesetSelected = (tilesetId) => {
    return selectedTilesets.some(t => t.id === tilesetId);
  };

  // Render the tileset preview image
  const renderTilesetPreview = (tileset) => {
    return (
      <div className="w-full h-32 bg-stone-900 overflow-hidden relative">
        <img 
          src={`${API_CONFIG.BASE_URL}${tileset.image_path}`} 
          alt={`Preview of ${tileset.name}`}
          className="object-cover w-full h-full"
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = '/images/tileset-placeholder.png';
          }}
        />
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full bg-stone-800 text-stone-200">
      {/* Header */}
      <div className="p-2 border-b bg-stone-900 border-stone-700 flex justify-between items-center">
        <div>
          <h2 className="mr-2 text-teal-400">Tileset Marketplace</h2>
        </div>
        
        <button 
          className="px-3 py-1 bg-blue-700 hover:bg-blue-600 text-white rounded text-sm flex items-center"
          onClick={fetchTilesets}
          disabled={loading}
        >
          <RotateCw size={16} className={`mr-1 ${loading ? 'animate-spin' : ''}`} />
          Refresh
        </button>
      </div>

      {/* Main content */}
      <div className="flex-1 overflow-auto p-4">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <div className="animate-pulse text-stone-400">Loading tilesets...</div>
          </div>
        ) : error ? (
          <div className="bg-red-900/30 text-red-300 p-4 rounded">
            <div className="flex items-center mb-2">
              <AlertTriangle size={20} className="mr-2" />
              <span className="font-semibold">API Connection Error</span>
            </div>
            <p className="mb-2">{error}</p>
            {debugInfo && (
              <div className="text-xs bg-red-900/50 p-2 rounded mt-2">
                <p className="font-semibold mb-1">Debugging Information:</p>
                <p>API URL: {debugInfo.tilesetsEndpoint}</p>
                <p>Auth Status: {debugInfo.auth}</p>
                <p>Token Length: {debugInfo.tokenLength} characters</p>
                <p>Admin Status: {user?.isAdmin ? 'Admin' : 'Not admin'}</p>
                {debugInfo.error && (
                  <>
                    <p className="mt-1 font-semibold">Error Details:</p>
                    <p>Status: {debugInfo.error.status || 'None'}</p>
                    <p>Status Text: {debugInfo.error.statusText || 'None'}</p>
                    <p>URL: {debugInfo.error.config?.url || 'Unknown'}</p>
                  </>
                )}
                <div className="mt-3 flex space-x-2">
                  <button 
                    className="px-2 py-1 bg-red-800 hover:bg-red-700 rounded text-xs"
                    onClick={fetchTilesets}
                  >
                    Retry Connection
                  </button>
                  
                  <a 
                    href={`${API_CONFIG.BASE_URL}/tilesets/debug/check-paths`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="px-2 py-1 bg-blue-800 hover:bg-blue-700 rounded text-xs"
                  >
                    Check Server Paths
                  </a>
                </div>
                
                <div className="mt-2 text-amber-300 bg-amber-900/30 p-2 rounded">
                  <p className="font-semibold">Administrator Tip:</p>
                  <p>This error often occurs when the tilesets directory doesn't exist on the server.</p>
                  <p>Make sure to create the directory at: <code>windowmanager-files/tilesets</code></p>
                </div>
              </div>
            )}
          </div>
      ) : debugInfo?.warning ? (
        <div className="bg-amber-900/30 text-amber-300 p-4 rounded mb-4">
          <div className="flex items-center mb-2">
            <Info size={20} className="mr-2" />
            <span className="font-semibold">Using Fallback Data</span>
          </div>
          <p>{debugInfo.warning}</p>
          <button 
            className="mt-2 px-2 py-1 bg-amber-800 hover:bg-amber-700 rounded text-xs"
            onClick={fetchTilesets}
          >
            Try Normal Mode Again
          </button>
        </div>
      ) : tilesets.length === 0 ? (
          <div className="text-center py-10">
            <Info size={48} className="mx-auto text-stone-500 mb-4" />
            <p className="text-stone-400">No tilesets available yet.</p>
            {user?.isAdmin && (
              <button
                className="mt-4 px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-sm"
                onClick={() => setShowUploadForm(true)}
              >
                Upload a New Tileset
              </button>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {tilesets.map(tileset => (
              <div 
                key={tileset.id} 
                className={`rounded-lg overflow-hidden border ${
                  isTilesetSelected(tileset.id)
                    ? 'border-teal-500'
                    : 'border-stone-700'
                }`}
              >
                {renderTilesetPreview(tileset)}
                <div className="p-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-bold text-teal-400">{tileset.name}</h3>
                      <p className="text-xs text-stone-400">By {tileset.author}</p>
                    </div>
                    {isTilesetSelected(tileset.id) && (
                      <span className="bg-teal-800 text-teal-200 text-xs px-2 py-1 rounded-full flex items-center">
                        <Check size={12} className="mr-1" />
                        Selected
                      </span>
                    )}
                  </div>
                  
                  <p className="text-sm mt-2 text-stone-300">
                    {tileset.description || 'No description provided.'}
                  </p>
                  
                  {/* Display section summary */}
                  <div className="mt-3 flex flex-wrap gap-1">
                    {tileset.sections && tileset.sections.map(section => (
                      <span 
                        key={`${tileset.id}-${section.id}`}
                        className="text-xs px-2 py-1 rounded bg-stone-700 text-stone-300"
                      >
                        {section.section_name}
                      </span>
                    ))}
                  </div>
                  
                  <div className="mt-4">
                    <button
                      className={`px-3 py-1 rounded text-sm ${
                        isTilesetSelected(tileset.id)
                          ? 'bg-red-900 hover:bg-red-800 text-stone-200'
                          : 'bg-teal-700 hover:bg-teal-600 text-stone-200'
                      }`}
                      onClick={() => toggleTilesetSelection(tileset.id)}
                    >
                      {isTilesetSelected(tileset.id) ? 'Remove from Editor' : 'Add to Editor'}
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Admin upload section, conditionally shown */}
      {user?.isAdmin && (
        <div className="border-t border-stone-700 p-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg text-teal-400 font-bold">Admin: Tileset Manager</h3>
            <button
              className="px-3 py-1 bg-teal-700 hover:bg-teal-600 rounded text-sm flex items-center"
              onClick={() => setShowUploadForm(!showUploadForm)}
            >
              <Upload size={16} className="mr-1" />
              {showUploadForm ? 'Hide Form' : 'Upload New Tileset'}
            </button>
          </div>

          {showUploadForm && <TilesetUploadForm onUploadComplete={fetchTilesets} />}
        </div>
      )}
    </div>
  );
};

/**
 * Component for uploading a new tileset (admin only)
 */
const TilesetUploadForm = ({ onUploadComplete }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    author: '',
    columns: '16'
  });
  
  const [tilesetImage, setTilesetImage] = useState(null);
  const [imagePreview, setImagePreview] = useState('');
  const [sections, setSections] = useState([
    { category: 'floor', section_name: 'Floor Tiles', start_index: 0, count: 16 }
  ]);
  
  const [uploading, setUploading] = useState(false);
  const [uploadError, setUploadError] = useState(null);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [uploadDebugInfo, setUploadDebugInfo] = useState(null);
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  // Handle image file selection
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    console.log('Selected file:', file.name, file.type, `${file.size} bytes`);
    setTilesetImage(file);
    
    // Create preview
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
    };
    reader.readAsDataURL(file);
  };
  
  // Handle section changes
  const handleSectionChange = (index, field, value) => {
    const newSections = [...sections];
    
    // Convert numerical fields to integers
    if (field === 'start_index' || field === 'count') {
      value = parseInt(value, 10) || 0;
    }
    
    newSections[index] = { ...newSections[index], [field]: value };
    setSections(newSections);
  };
  
  // Add a new section
  const addSection = () => {
    setSections([...sections, { 
      category: 'floor', 
      section_name: 'New Section', 
      start_index: 0, 
      count: 8 
    }]);
  };
  
  // Remove a section
  const removeSection = (index) => {
    const newSections = [...sections];
    newSections.splice(index, 1);
    setSections(newSections);
  };
  
  // Submit the form
  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    setUploadError(null);
    setUploadSuccess(false);
    setUploadDebugInfo(null);
    
    if (!tilesetImage) {
      setUploadError('Please select a tileset image.');
      setUploading(false);
      return;
    }
    
    if (!formData.name) {
      setUploadError('Please provide a name for the tileset.');
      setUploading(false);
      return;
    }
    
    if (sections.length === 0) {
      setUploadError('Please define at least one section.');
      setUploading(false);
      return;
    }
    
    try {
      const formPayload = new FormData();
      formPayload.append('tilesetImage', tilesetImage);
      formPayload.append('name', formData.name);
      formPayload.append('description', formData.description);
      formPayload.append('author', formData.author);
      formPayload.append('columns', formData.columns);
      formPayload.append('sections', JSON.stringify(sections));
      
      // Log what we're uploading
      console.log('Uploading tileset:', {
        name: formData.name,
        description: formData.description,
        author: formData.author,
        columns: formData.columns,
        sections: sections,
        imageInfo: {
          name: tilesetImage.name,
          type: tilesetImage.type,
          size: tilesetImage.size
        }
      });
      
      const authToken = localStorage.getItem('auth_token');
      console.log('Using auth token:', authToken ? `${authToken.substring(0, 10)}...` : 'None');
      
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/tilesets`,
        formPayload,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
            Authorization: `Bearer ${authToken}`
          }
        }
      );
      
      console.log('Upload response:', response);
      
      setUploadSuccess(true);
      
      // Reset form
      setFormData({
        name: '',
        description: '',
        author: '',
        columns: '16'
      });
      setTilesetImage(null);
      setImagePreview('');
      setSections([{ category: 'floor', section_name: 'Floor Tiles', start_index: 0, count: 16 }]);
      
      // Notify parent to refresh
      if (onUploadComplete) {
        onUploadComplete();
      }
    } catch (err) {
      console.error('Error uploading tileset:', err);
      
      const errorDetails = {
        message: err.message,
        status: err.response?.status,
        statusText: err.response?.statusText,
        responseData: err.response?.data,
        config: {
          url: err.config?.url,
          method: err.config?.method,
          headers: err.config?.headers ? 'Headers present' : 'No headers'
        }
      };
      
      console.error('Upload error details:', errorDetails);
      setUploadDebugInfo(errorDetails);
      
      setUploadError(err.response?.data?.message || 'Failed to upload tileset. Please try again.');
    } finally {
      setUploading(false);
    }
  };
  
  return (
    <div className="mt-4 bg-stone-900 rounded-lg p-4">
      {uploadSuccess && (
        <div className="mb-4 bg-green-900/30 text-green-300 p-3 rounded flex items-center">
          <Check size={20} className="mr-2" />
          <span>Tileset uploaded successfully!</span>
        </div>
      )}
      
      {uploadError && (
        <div className="mb-4 bg-red-900/30 text-red-300 p-3 rounded">
          <div className="flex items-center mb-1">
            <AlertTriangle size={20} className="mr-2" />
            <span>{uploadError}</span>
          </div>
          
          {uploadDebugInfo && (
            <div className="mt-2 text-xs bg-red-900/50 p-2 rounded">
              <p>Error: {uploadDebugInfo.message}</p>
              <p>Status: {uploadDebugInfo.status || 'None'}</p>
              <p>Response: {uploadDebugInfo.responseData?.message || 'No message'}</p>
            </div>
          )}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Tileset metadata */}
          <div>
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Name*
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                required
              />
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Author
              </label>
              <input
                type="text"
                name="author"
                value={formData.author}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                placeholder="(Optional) Override author name"
              />
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Description
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200 min-h-[80px]"
                placeholder="Describe this tileset..."
              />
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Columns in Sprite Sheet
              </label>
              <input
                type="number"
                name="columns"
                value={formData.columns}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                min="1"
                max="32"
              />
              <p className="text-xs text-stone-500 mt-1">
                Number of columns in the sprite sheet (default: 16)
              </p>
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Image*
              </label>
              <input
                type="file"
                accept="image/png,image/jpeg"
                onChange={handleImageChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                required
              />
              <p className="text-xs text-stone-500 mt-1">
                Upload a PNG or JPG image (max 10MB)
              </p>
            </div>
          </div>
          
          {/* Image preview and sections */}
          <div>
            {imagePreview ? (
              <div className="mb-3">
                <label className="block text-sm font-medium text-stone-300 mb-1">
                  Preview
                </label>
                <div className="border border-stone-700 rounded overflow-hidden h-48">
                  <img
                    src={imagePreview}
                    alt="Tileset Preview"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
            ) : (
              <div className="mb-3 border border-stone-700 rounded h-48 flex items-center justify-center bg-stone-800 text-stone-500">
                No image selected
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Sections*
              </label>
              <p className="text-xs text-stone-500 mb-2">
                Define sections for different types of tiles (floors, walls, etc.)
              </p>
              
              {sections.map((section, index) => (
                <div key={index} className="mb-2 p-3 bg-stone-800 rounded border border-stone-700">
                  <div className="flex justify-between mb-2">
                    <span className="text-sm font-medium text-stone-300">Section {index + 1}</span>
                    {sections.length > 1 && (
                      <button
                        type="button"
                        onClick={() => removeSection(index)}
                        className="text-red-400 hover:text-red-300"
                      >
                        <X size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 mb-2">
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Category
                      </label>
                      <select
                        value={section.category}
                        onChange={(e) => handleSectionChange(index, 'category', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                      >
                        <option value="floor">Floor</option>
                        <option value="wall">Wall</option>
                        <option value="shadow">Shadow</option>
                        <option value="door">Door</option>
                        <option value="object">Object</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Section Name
                      </label>
                      <input
                        type="text"
                        value={section.section_name}
                        onChange={(e) => handleSectionChange(index, 'section_name', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Start Index
                      </label>
                      <input
                        type="number"
                        value={section.start_index}
                        onChange={(e) => handleSectionChange(index, 'start_index', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                        min="0"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Tile Count
                      </label>
                      <input
                        type="number"
                        value={section.count}
                        onChange={(e) => handleSectionChange(index, 'count', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                        min="1"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              <button
                type="button"
                onClick={addSection}
                className="mt-2 px-3 py-1 bg-stone-700 hover:bg-stone-600 rounded text-sm"
              >
                + Add Section
              </button>
            </div>
          </div>
        </div>
        
        <div className="mt-4 flex justify-end">
          <button
            type="submit"
            disabled={uploading}
            className={`px-4 py-2 rounded text-sm flex items-center ${
              uploading
                ? 'bg-stone-600 cursor-not-allowed'
                : 'bg-teal-700 hover:bg-teal-600'
            }`}
          >
            {uploading ? 'Uploading...' : 'Upload Tileset'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default MarketplaceWindow;

================
File: windows/TerminalWindow.jsx
================
import React, { useState, useEffect, useRef, useReducer } from 'react';
import d20Gif from '../../assets/GIF/d20.gif';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { useAuth } from '../../context/AuthContext';
import { useAnnouncement } from '../../context/AnnouncementContext';
import { useWindowState } from '../../context/WindowStateContext';
import { useParty } from '../../context/PartyContext';
import { saveTerminalState, getTerminalState } from '../../services/indexedDBService';
import { parseDiceExpression, rollDice, formatRollResult, isValidDiceType } from '../../utils/diceUtils';
import DebugLogger from '../../utils/debugLogger';
import { executeCommand } from '../../utils/terminal/executor';
import { registerCommands } from '../../utils/terminal/commandLoader';

// Initialize the command system
registerCommands();

const TerminalWindow = ({ onCommand, isActive, nodeId, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get user authentication info
  const { user } = useAuth();
  // Get announcement context
  const { updateAnnouncement } = useAnnouncement();
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  // Get party context
  const { 
    currentParty, 
    parties, 
    joinParty, 
    leaveParty, 
    createParty, 
    refreshParty,
    refreshParties,
    deleteParty
  } = useParty();
  
  // Ref for managing scrolling
  const terminalRef = useRef(null);
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  // Ref to store the dice roll animation timeout
  const diceTimeoutRef = useRef(null);

  // Terminal state - use windowState if available
  const [history, setHistory] = useState(
    windowState?.history || ['SLUMNET TERMINAL - Type "help" for available commands.']
  );
  const [commandHistory, setCommandHistory] = useState(windowState?.commandHistory || []);
  const [currentInput, setCurrentInput] = useState(windowState?.currentInput || '');
  const [historyIndex, setHistoryIndex] = useState(windowState?.historyIndex || -1);

  // Load terminal state from IndexedDB on mount if not already in windowState
  useEffect(() => {
    const loadTerminalState = async () => {
      // Skip if we already have state from the WindowStateContext
      if (windowState?.history && windowState?.commandHistory) {
        stateLoadedRef.current = true;
        return;
      }
      
      try {
        // Try to load terminal state from IndexedDB
        const savedState = await getTerminalState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded terminal state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // Update state with saved values
          if (savedState.content.history) {
            setHistory(savedState.content.history);
          }
          
          if (savedState.content.commandHistory) {
            setCommandHistory(savedState.content.commandHistory);
          }
          
          if (savedState.content.historyIndex !== undefined) {
            setHistoryIndex(savedState.content.historyIndex);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`Failed to load terminal state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadTerminalState();
  }, [nodeId, windowState]);

  // Auto-scroll to bottom when new output is added
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [history]);
  
  // Clear input when window becomes active or when transformed back to terminal
  useEffect(() => {
    // Always clear the input when the component mounts or is transformed back to terminal
    setCurrentInput('');
  }, []);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Clear input when window becomes active
      setCurrentInput('');
      
      // Save this as the active terminal window
      setActiveWindow(nodeId, WINDOW_TYPES.TERMINAL);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Cleanup dice animation timeout when component unmounts
  useEffect(() => {
    // Return cleanup function
    return () => {
      // Clear any pending dice roll timeouts when unmounting
      if (diceTimeoutRef.current) {
        clearTimeout(diceTimeoutRef.current);
        diceTimeoutRef.current = null;
      }
    };
  }, []);
  
  // Create a reducer for forced updates - useReducer guarantees a re-render
  const [updateCounter, forceUpdate] = useReducer(state => state + 1, 0);
  
  // Force re-render to check dice GIFs that need to be replaced with results
  // This ensures the transition happens even when the component was unmounted and remounted
  useEffect(() => {
    // This checks and processes all dice GIFs that have completed their display duration
    const processDiceGifs = () => {
      let needsUpdate = false;
      
      // Process the history array to find and update dice GIFs
      const updatedHistory = history.map(item => {
        // Only process dice-gif items that have completed their duration
        if (typeof item === 'object' && 
            item.type === 'dice-gif' && 
            Date.now() - item.timestamp >= item.displayDuration) {
          
          needsUpdate = true;
          // Return the result instead of the GIF
          return item.result;
        }
        return item;
      });
      
      // If we found and updated any completed dice GIFs, update the history
      if (needsUpdate) {
        setHistory(updatedHistory);
      }
      
      // Check if there are still any active dice GIFs
      return history.some(item => 
        typeof item === 'object' && 
        item.type === 'dice-gif' && 
        Date.now() - item.timestamp < item.displayDuration
      );
    };
    
    // Initial check and processing
    const hasActiveDiceGifs = processDiceGifs();
    
    // If we have active dice GIFs, set up an interval to keep checking
    let intervalId;
    if (hasActiveDiceGifs) {
      intervalId = setInterval(() => {
        const stillHasActiveDiceGifs = processDiceGifs();
        
        // Force a render update regardless of whether we processed any GIFs
        forceUpdate();
        
        // If no more active dice GIFs, clear the interval
        if (!stillHasActiveDiceGifs && intervalId) {
          clearInterval(intervalId);
        }
      }, 200); // Check more frequently (200ms) for smoother transitions
    }
    
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [history]);

  // Update window state when terminal state changes
  useEffect(() => {
    if (updateWindowState) {
      const newState = {
        history,
        commandHistory,
        currentInput,
        historyIndex
      };
      
      // Update window state in context
      updateWindowState(newState);
      
      // Also save directly to IndexedDB for redundancy
      if (stateLoadedRef.current) { // Only save after initial load to avoid overwriting with empty state
        saveTerminalState({
          id: nodeId,
          content: newState
        }).catch(error => {
          console.error(`Failed to save terminal state for window ${nodeId} to IndexedDB:`, error);
        });
      }
    }
  }, [history, commandHistory, currentInput, historyIndex, updateWindowState, nodeId]);

  const handleTerminalClick = () => {
    focusRef.current?.focus();
  };

  const processCommand = async (command) => {
    setHistory(prev => [...prev, `$ ${command}`]);
    setCommandHistory(prev => [...prev, command]);
    
    // Legacy window transformation handling (direct conversion)
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();
    
    if (Object.keys(WINDOW_TYPES).some(type => type.toLowerCase() === cmd)) {
      const requestedType = WINDOW_TYPES[cmd.toUpperCase()];
      transformWindow(nodeId, requestedType);
      return;
    }
    
    // Create recursive executeCommand function for legacy redirects
    const executeCommandFn = async (cmdStr) => {
      // Don't add the command to history since it's an internal redirect
      return await processCommand(cmdStr);
    };
    
    // Create the execution context with all necessary terminal state and functions
    const context = {
      // Original command text
      original: command,
      
      // User and authentication
      user,
      
      // Window management
      nodeId,
      transformWindow,
      
      // Announcement management
      updateAnnouncement,
      
      // Party system
      parties,
      currentParty,
      joinParty,
      leaveParty,
      createParty,
      refreshParty,
      refreshParties,
      deleteParty,
      
      // Dice utilities
      parseDiceExpression,
      rollDice,
      formatRollResult,
      isValidDiceType,
      
      // Debug utilities
      debugLogger: DebugLogger,
      
      // Terminal management
      clearTerminal: () => setHistory(['']),
      
      // Recursive command execution (for legacy redirects)
      executeCommand: executeCommandFn
    };
    
    try {
      // Execute the command using our new command system
      const response = await executeCommand(command, context);
      
      // Handle special return values
      if (response === '__CLEAR_TERMINAL__') {
        setHistory(['']);
        return;
      }
      
      // Handle response based on its type
      if (response) {
        if (typeof response === 'object' && response.type === 'dice-roll') {
          // Add the GIF to history with timestamp and result data
          setHistory(prev => [...prev, { 
            type: 'dice-gif', 
            src: d20Gif,
            timestamp: Date.now(), // Add current timestamp
            displayDuration: 2000, // Display for 2 seconds
            result: response.content // Store the result with the GIF
          }]);
        } else {
          // Handle regular text responses
          setHistory(prev => [...prev, response]);
        }
      }
    } catch (error) {
      console.error('Error executing command:', error);
      setHistory(prev => [...prev, `Error: ${error.message}`]);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && currentInput.trim()) {
      processCommand(currentInput.trim());
      setCurrentInput('');
      setHistoryIndex(-1);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        const newIndex = historyIndex + 1;
        setHistoryIndex(newIndex);
        setCurrentInput(commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex > -1) {
        const newIndex = historyIndex - 1;
        setHistoryIndex(newIndex);
        setCurrentInput(newIndex === -1 ? '' : commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    }
  };

  return (
    <div 
      className="bg-stone-900 text-white font-mono text-sm h-full flex flex-col"
      onClick={handleTerminalClick}
    >
<div ref={terminalRef} className="p-2 flex-1 overflow-auto whitespace-pre-wrap">
  {history.map((item, i) => {
    // If the item is an object with a type of 'dice-gif', handle it specially
    if (typeof item === 'object' && item.type === 'dice-gif') {
      // Check if enough time has passed since creation (2 seconds)
      const timeElapsed = Date.now() - item.timestamp;
      
      if (timeElapsed < item.displayDuration) {
        // If not enough time has passed, show the GIF
        return (
          <div key={i} className="mb-2">
            <img src={item.src} alt="Rolling dice" className="inline-block max-w-full h-32" />
          </div>
        );
      } else {
        // If enough time has passed, show the result instead
        return (
          <div key={i} className="mb-2">
            {item.result}
          </div>
        );
      }
    }
    // Keep backward compatibility with any 'gif' type items
    else if (typeof item === 'object' && item.type === 'gif') {
      return (
        <div key={i} className="mb-2">
          <img src={item.src} alt="Rolling dice" className="inline-block max-w-full h-32" />
        </div>
      );
    }
    // Otherwise, render as before
    return (
      <div key={i} className={`mb-2 ${typeof item === 'string' && item.startsWith('$ ') ? 'text-teal-400' : ''}`}>
        {item}
      </div>
    );
  })}
</div>

      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="mr-2">$</span>
        <input
          ref={focusRef}
          type="text"
          value={currentInput}
          onChange={(e) => setCurrentInput(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          autoFocus
        />
      </div>
    </div>
  );
};

export default TerminalWindow;



================================================================
End of Codebase
================================================================

================
File: src/components/WindowManager.jsx
================
import React, { useState, useCallback, useEffect } from 'react';
import { WINDOW_CONTENT, WINDOW_TYPES } from '../utils/windowTypes';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowManager } from '../hooks/useWindowManager';
import { useKeyboardShortcuts } from '../hooks/useKeyboardShortcuts';
import { CommandBar } from './CommandBar';
import EmptyState from './EmptyState';

export const WindowManager = ({ defaultLayout = null }) => {
  const [dragState, setDragState] = useState(null);
  const [notification, setNotification] = useState(null);
  const [flashingWindowIds, setFlashingWindowIds] = useState(new Set());
  
  // Function to flash a window's border red
  const flashWindowBorder = useCallback((windowId) => {
    setFlashingWindowIds(prev => {
      const newSet = new Set(prev);
      newSet.add(windowId);
      return newSet;
    });
    
    // Remove the window from flashing state after 500ms
    setTimeout(() => {
      setFlashingWindowIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(windowId);
        return newSet;
      });
    }, 200);
  }, []);

  const {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    splitWindow,
    createNewWindow,
    closeWindow,
    transformWindow,
    currentWorkspaceIndex,
    workspaceCount,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  } = useWindowManager({ 
    defaultLayout,
    onFlashBorder: flashWindowBorder
  });
  
  // Override window.alert to use our notification system
  useEffect(() => {
    const originalAlert = window.alert;
    window.alert = (message) => {
      console.log('Alert:', message);
      
      // If the message is about splitting or creating windows, flash the active window border
      if (message.includes('split') || message.includes('create')) {
        if (activeNodeId) {
          flashWindowBorder(activeNodeId);
        }
      } else {
        // For other alerts, show the notification
        setNotification(message);
        setTimeout(() => setNotification(null), 3000); // Hide after 3 seconds
      }
    };
    
    return () => {
      window.alert = originalAlert;
    };
  }, [activeNodeId, flashWindowBorder]);

  // Log when component mounts
  useEffect(() => {
    console.log('WindowManager component mounted');
    console.log('setIsMoveMode is a function:', typeof setIsMoveMode === 'function');
    console.log('Initial isMoveMode state:', isMoveMode);
  }, [isMoveMode]);
  
  // Log move mode state changes
  useEffect(() => {
    console.log('Move mode changed to:', isMoveMode);
  }, [isMoveMode]);

  // Add keyboard shortcuts
  useKeyboardShortcuts({
    onSplitVertical: () => splitWindow(activeNodeId, 'vertical'),
    onSplitHorizontal: () => splitWindow(activeNodeId, 'horizontal'),
    onClose: () => closeWindow(activeNodeId),
    createNewWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows,
    activeNodeId
  });

  // Command handling for terminal
  const handleCommand = useCallback((command) => {
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();

    switch (cmd) {
      case 'split':
        if (activeNodeId) {
          const direction = parts[1] === 'vertical' ? 'vertical' : 'horizontal';
          splitWindow(activeNodeId, direction);
        }
        break;
      case 'close':
        if (activeNodeId) {
          closeWindow(activeNodeId);
        }
        break;
    }
  }, [activeNodeId, splitWindow, closeWindow]);

  // Resize handling
  const handleResizeStart = useCallback((e, split) => {
    e.preventDefault();
    e.stopPropagation();
    const rect = e.currentTarget.getBoundingClientRect();
    setDragState({
      split,
      initialPos: {
        x: e.clientX,
        y: e.clientY
      },
      initialRatio: split.splitRatio
    });
  }, []);

  // Helper function to convert percentage-based bounds to pixel dimensions
  const calculatePixelDimensions = useCallback((bounds) => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    return {
      width: (bounds.width / 100) * windowWidth,
      height: (bounds.height / 100) * windowHeight
    };
  }, []);
  
  // Helper function to check if a window tree would have any windows smaller than the minimum size
  const hasWindowsBelowMinSize = useCallback((root) => {
    if (!root) return false;
    
    // Import constants directly here to avoid dependency issues
    const MIN_WINDOW_WIDTH_PX = 300;
    const MIN_WINDOW_HEIGHT_PX = 200;
    
    // Calculate the bounds of all windows
    const allWindows = getWindowBounds(root);
    
    // Check if any window would be smaller than the minimum size
    return allWindows.some(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      const isTooSmall = pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
                         pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
      
      if (isTooSmall) {
        console.log('Window too small:', window.id);
        console.log('Dimensions:', pixelDimensions);
      }
      
      return isTooSmall;
    });
  }, [calculatePixelDimensions]);

  const handleResizeMove = useCallback((e) => {
    if (!dragState) return;

    const { split, initialPos, initialRatio } = dragState;
    const delta = split.direction === 'horizontal' 
      ? (e.clientX - initialPos.x) / window.innerWidth 
      : (e.clientY - initialPos.y) / window.innerHeight;

    const newRatio = Math.max(0.1, Math.min(0.9, initialRatio + delta));
    
    // Store the original ratio
    const originalRatio = split.splitRatio;
    
    // Apply the new ratio
    split.splitRatio = newRatio;
    
    // Check if this would result in windows that are too small, but don't block the resize
    if (hasWindowsBelowMinSize(rootNode)) {
      console.log('Windows are below minimum size, but resize is allowed');
    }
    
    // If we get here, the resize is allowed
    // Force a re-render
    setDragState(prev => ({ ...prev }));
  }, [dragState, rootNode, hasWindowsBelowMinSize, activeNodeId, flashWindowBorder]);

  const handleResizeEnd = useCallback(() => {
    setDragState(null);
  }, []);

  useEffect(() => {
    if (dragState) {
      window.addEventListener('mousemove', handleResizeMove);
      window.addEventListener('mouseup', handleResizeEnd);
      return () => {
        window.removeEventListener('mousemove', handleResizeMove);
        window.removeEventListener('mouseup', handleResizeEnd);
      };
    }
  }, [dragState, handleResizeMove, handleResizeEnd]);

  // Window tree renderer
  const WindowTreeRenderer = ({ node, depth = 0, available = { x: 0, y: 0, width: 100, height: 100 } }) => {
    if (!node) return null;

    if (node.type === 'window') {
      const windowContent = WINDOW_CONTENT[node.windowType];
      if (!windowContent) {
        console.error('No window content found for type:', node.windowType);
        return null;
      }
      const Component = windowContent.component;
      const isActive = node.id === activeNodeId;
  
      // Check if this window is currently flashing
      const isFlashing = flashingWindowIds.has(node.id);
      
      // Check if this is the first selected window in move mode
      const isFirstSelectedWindow = isMoveMode && moveSourceWindowId === node.id;
      
      return (
        <div
          className={`absolute overflow-hidden border-1 ${
            isFlashing ? 'border-red-600' : 
            isFirstSelectedWindow ? 'border-blue-300' :
            isActive ? (
              isMoveMode ? 'border-green-500' : 
              isResizeMode ? 'border-yellow-500' : 
              'border-teal-500'
            ) : 'border-stone-600'
          } ${isFlashing ? 'animate-pulse' : ''}`}
          style={{
            left: `${available.x}%`,
            top: `${available.y}%`,
            width: `${available.width}%`,
            height: `${available.height}%`,
            transition: 'border-color 0.2s ease-in-out'
          }}
          onClick={() => setActiveNodeId(node.id)}
        >
          <Component 
            key={`window-${node.id}-${node.windowType}`}
            onCommand={handleCommand} 
            isActive={isActive}
            nodeState={node.state}
            nodeId={node.id}
            transformWindow={transformWindow}
            windowState={node.windowType === WINDOW_TYPES.TERMINAL ? terminalStates[node.id] : node.state}
            updateWindowState={(newState) => {
              updateTerminalState(node.id, newState);
            }}
          />
        </div>
      );
    }

    // Calculate split dimensions
    let firstDimensions, secondDimensions;
    if (node.direction === 'horizontal') {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width * node.splitRatio,
        height: available.height
      };
      secondDimensions = {
        x: available.x + (available.width * node.splitRatio),
        y: available.y,
        width: available.width * (1 - node.splitRatio),
        height: available.height
      };
    } else {
      firstDimensions = {
        x: available.x,
        y: available.y,
        width: available.width,
        height: available.height * node.splitRatio
      };
      secondDimensions = {
        x: available.x,
        y: available.y + (available.height * node.splitRatio),
        width: available.width,
        height: available.height * (1 - node.splitRatio)
      };
    }

    return (
      <div className="absolute inset-0" style={{ pointerEvents: 'none' }}>
        <WindowTreeRenderer 
          node={node.first} 
          depth={depth + 1} 
          available={firstDimensions} 
        />
        <div
          className="absolute bg-stone-700 hover:bg-stone-500 transition-colors"
          style={{
            left: node.direction === 'horizontal' ? `${firstDimensions.width}%` : 0,
            top: node.direction === 'vertical' ? `${firstDimensions.height}%` : 0,
            width: node.direction === 'horizontal' ? '4px' : '100%',
            height: node.direction === 'vertical' ? '4px' : '100%',
            cursor: node.direction === 'horizontal' ? 'col-resize' : 'row-resize',
            pointerEvents: 'auto',
            zIndex: 10
          }}
          onMouseDown={(e) => handleResizeStart(e, node)}
        />
        <WindowTreeRenderer 
          node={node.second} 
          depth={depth + 1} 
          available={secondDimensions}
        />
      </div>
    );
  };

  return (
    <div className="w-full h-screen flex flex-col">
      <CommandBar
        onCommand={handleCommand}
        currentWorkspaceIndex={currentWorkspaceIndex}
        switchWorkspace={switchWorkspace}
      />
      <div className="flex-1 relative bg-stone-900">
        {rootNode ? (
          <WindowTreeRenderer
            node={rootNode}
            terminalStates={terminalStates}
            updateTerminalState={updateTerminalState}
          />
        ) : (
          <EmptyState />
        )}
        
        {/* Notification system */}
        {notification && (
          <div 
            className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50"
            style={{ maxWidth: '80%' }}
          >
            {notification}
          </div>
        )}
      </div>
    </div>
  );
};

export default WindowManager;

================
File: src/components/windows/AdminWindow.jsx
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { Trash } from 'lucide-react'; // Import Trash icon

const AdminWindow = ({ isActive }) => {
  const { user } = useAuth();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingUser, setEditingUser] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    is_admin: false,
    has_file_access: false
  });
  const [createFormData, setCreateFormData] = useState({
    username: '',
    password: '',
    is_admin: false,
    has_file_access: false
  });
  
  // Chat channels state
  const [activeTab, setActiveTab] = useState('users'); // 'users' or 'channels'
  const [channels, setChannels] = useState([]);
  const [channelLoading, setChannelLoading] = useState(false);
  const [channelError, setChannelError] = useState(null);
  const [newChannelName, setNewChannelName] = useState('');
  const [showCreateChannelForm, setShowCreateChannelForm] = useState(false);

  // Fetch users when component mounts
  useEffect(() => {
    fetchUsers();
  }, []); // Empty dependency array means this runs once on mount
  
  // Load channels when tab changes to channels
  useEffect(() => {
    if (activeTab === 'channels') {
      fetchChannels();
    }
  }, [activeTab]);
  
  // Reset form visibility when switching tabs
  useEffect(() => {
    // Hide forms when switching tabs
    setShowCreateForm(false);
    setShowCreateChannelForm(false);
  }, [activeTab]);

  // Fetch all users from the API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setUsers(response.data);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch users:', err);
      setError('Failed to load users. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Start editing a user
  const handleEdit = (user) => {
    setEditingUser(user.id);
    setFormData({
      username: user.username,
      password: '', // Don't populate password for security
      is_admin: user.is_admin === 1 || user.is_admin === true,
      has_file_access: user.has_file_access === 1 || user.has_file_access === true,
      storage_quota: user.storage_quota || 52428800 // Default to 50MB (52428800 bytes)
    });
  };

  // Cancel editing
  const handleCancel = () => {
    setEditingUser(null);
    setFormData({
      username: '',
      password: '',
      is_admin: false,
      has_file_access: false
    });
  };

  // Handle form input changes for editing
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  // Handle form input changes for creating
  const handleCreateChange = (e) => {
    const { name, value, type, checked } = e.target;
    setCreateFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  // Save user changes
  const handleSave = async (userId) => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Build user data object
      const userData = {
        username: formData.username,
        is_admin: formData.is_admin,
        has_file_access: formData.has_file_access,
        storage_quota: formData.storage_quota
      };
      
      // Only include password in the request if it was changed
      if (formData.password) {
        userData.password = formData.password;
      }
      
      await axios.put(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
        userData,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the user list
      await fetchUsers();
      setEditingUser(null);
      setFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
    } catch (err) {
      console.error('Failed to update user:', err);
      setError('Failed to update user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Create a new user
  const handleCreateUser = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Validate form data - only username and password are required
      if (!createFormData.username || !createFormData.password) {
        setError('Username and password are required.');
        setLoading(false);
        return;
      }
      
      // Use the register endpoint instead of users endpoint
      await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.REGISTER}`,
        {
          username: createFormData.username,
          password: createFormData.password
        }
      );
      
      // If admin status or file access permissions need to be set, we need to do that in a separate request
      if (createFormData.is_admin || createFormData.has_file_access) {
        try {
          // Get the newly created user
          const usersResponse = await axios.get(
            `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          
          const newUser = usersResponse.data.find(u => u.username === createFormData.username);
          
          if (newUser) {
            // Update the user with admin status and file access permissions
            await axios.put(
              `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${newUser.id}`,
              { 
                is_admin: createFormData.is_admin,
                has_file_access: createFormData.has_file_access,
                storage_quota: createFormData.storage_quota || 52428800 // Default to 50MB
              },
              { headers: { Authorization: `Bearer ${token}` } }
            );
          }
        } catch (adminErr) {
          console.error('Failed to set admin status:', adminErr);
          // Don't fail the whole operation if just the admin part fails
        }
      }
      
      // Refresh the user list
      await fetchUsers();
      
      // Reset form and hide it
      setCreateFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
      setShowCreateForm(false);
      setError(null);
    } catch (err) {
      console.error('Failed to create user:', err);
      setError(err.response?.data?.message || 'Failed to create user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Toggle create form visibility
  const toggleCreateForm = () => {
    setShowCreateForm(!showCreateForm);
    if (!showCreateForm) {
      // Reset form data when opening
      setCreateFormData({
        username: '',
        password: '',
        is_admin: false,
        has_file_access: false
      });
    }
  };
  
  // Toggle create channel form visibility
  const toggleCreateChannelForm = () => {
    setShowCreateChannelForm(!showCreateChannelForm);
    if (!showCreateChannelForm) {
      // Reset channel name when opening the form
      setNewChannelName('');
    }
  };

  // Render loading state
  if (loading && users.length === 0) {
    return (
      <div className="bg-stone-900 text-white p-4 h-full flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-teal-500 mx-auto mb-4"></div>
          <p>Loading users...</p>
        </div>
      </div>
    );
  }

  // Render error state
  if (error && users.length === 0) {
    return (
      <div className="bg-stone-900 text-white p-4 h-full flex items-center justify-center">
        <div className="text-center text-red-500">
          <p>{error}</p>
          <button 
            onClick={fetchUsers}
            className="mt-4 px-4 py-2 bg-stone-700 hover:bg-stone-600 rounded"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  // Fetch chat channels
  const fetchChannels = async () => {
    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CHAT_ROOMS}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setChannels(response.data);
      setChannelError(null);
    } catch (err) {
      console.error('Failed to fetch channels:', err);
      setChannelError('Failed to load chat channels. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };

  // Create a new chat channel
  const handleCreateChannel = async (e) => {
    e.preventDefault();
    if (!newChannelName.trim()) return;

    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CHAT_ROOMS}`,
        { name: newChannelName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the channel list
      await fetchChannels();
      
      // Reset form and hide it
      setNewChannelName('');
      setShowCreateChannelForm(false);
      setChannelError(null);
    } catch (err) {
      console.error('Failed to create channel:', err);
      setChannelError('Failed to create channel. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };

  // Delete a chat channel
  const handleDeleteChannel = async (channelId) => {
    try {
      setChannelLoading(true);
      const token = localStorage.getItem('auth_token');
      const endpoint = API_CONFIG.ENDPOINTS.CHAT_DELETE_ROOM.replace(':id', channelId);
      await axios.delete(
        `${API_CONFIG.BASE_URL}${endpoint}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the channel list
      await fetchChannels();
      setChannelError(null);
    } catch (err) {
      console.error('Failed to delete channel:', err);
      setChannelError('Failed to delete channel. Please try again.');
    } finally {
      setChannelLoading(false);
    }
  };
  
  // Delete a user
  const handleDeleteUser = async (userId) => {
    // Confirm deletion
    if (!window.confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
      return;
    }
    
    try {
      setLoading(true);
      const token = localStorage.getItem('auth_token');
      
      // Use the DELETE endpoint
      await axios.delete(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Refresh the user list
      await fetchUsers();
      setError(null);
    } catch (err) {
      console.error('Failed to delete user:', err);
      setError(err.response?.data?.message || 'Failed to delete user. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-stone-900 text-white h-full overflow-auto flex flex-col">
      {/* Header Bar */}
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <h2 className="text-teal-400 font-medium">ADMIN PANEL</h2>
        
        {/* Tab Navigation */}
        <div className="flex">
          <button
            className={`px-3 py-1 rounded-t text-xs flex items-center ${
              activeTab === 'users'
                ? 'bg-stone-800 text-teal-300'
                : 'text-stone-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('users')}
          >
            Users
          </button>
          <button
            className={`px-3 py-1 rounded-t text-xs flex items-center ml-1 ${
              activeTab === 'channels'
                ? 'bg-stone-800 text-teal-300'
                : 'text-stone-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('channels')}
          >
            Chat Channels
          </button>
        </div>
      </div>
      
      {/* Create User/Channel Button - Only shown when respective tab is active */}
      {activeTab === 'users' && (
        <div className="p-2 flex justify-end">
          <button
            onClick={toggleCreateForm}
            className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
          >
            {showCreateForm ? 'Cancel' : 'Create User'}
          </button>
        </div>
      )}
      
      {activeTab === 'channels' && (
        <div className="p-2 border-b border-stone-700 flex justify-end">
          <button
            onClick={toggleCreateChannelForm}
            className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
          >
            {showCreateChannelForm ? 'Cancel' : 'Create Channel'}
          </button>
        </div>
      )}
      
      {/* Main Content Area */}
      <div className="p-4 flex-1 overflow-auto">
        {activeTab === 'users' && error && <p className="text-red-500 mb-4">{error}</p>}
        {activeTab === 'channels' && channelError && <p className="text-red-500 mb-4">{channelError}</p>}
        
        {/* Show users tab content */}
        {activeTab === 'users' && (
          <>
            {/* Create User Form */}
            {showCreateForm && (
              <div className="mb-6 p-4 bg-stone-800 rounded">
                <h3 className="text-lg mb-3 text-teal-400">Create New User</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Username: <span className="text-red-500">*</span></label>
                    <input
                      type="text"
                      name="username"
                      value={createFormData.username}
                      onChange={handleCreateChange}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter username"
                    />
                  </div>
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Password: <span className="text-red-500">*</span></label>
                    <input
                      type="password"
                      name="password"
                      value={createFormData.password}
                      onChange={handleCreateChange}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter password"
                    />
                  </div>
                  <div className="flex flex-col space-y-2">
                    <label className="flex items-center text-sm text-gray-400">
                      <input
                        type="checkbox"
                        name="is_admin"
                        checked={createFormData.is_admin}
                        onChange={handleCreateChange}
                        className="form-checkbox h-5 w-5 text-teal-500 mr-2"
                      />
                      Admin User
                    </label>
                    <label className="flex items-center text-sm text-gray-400">
                      <input
                        type="checkbox"
                        name="has_file_access"
                        checked={createFormData.has_file_access}
                        onChange={handleCreateChange}
                        className="form-checkbox h-5 w-5 text-teal-500 mr-2"
                      />
                      Private File Access
                    </label>
                  </div>
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Storage Quota:</label>
                    <div className="flex items-center">
                      <input
                        type="number"
                        name="storage_quota"
                        value={Math.round((createFormData.storage_quota || 52428800) / 1048576)}
                        onChange={(e) => {
                          const mbValue = parseInt(e.target.value) || 0;
                          handleCreateChange({
                            target: {
                              name: 'storage_quota',
                              value: mbValue * 1048576, // Convert MB to bytes
                              type: 'number'
                            }
                          });
                        }}
                        className="bg-stone-700 text-white px-2 py-1 rounded w-20 mr-2"
                        min="0"
                        step="1"
                        disabled={createFormData.is_admin}
                      />
                      <span className="text-sm text-gray-400">MB {createFormData.is_admin && "(Unlimited for admins)"}</span>
                    </div>
                  </div>
                </div>
                <div className="mt-4">
                  <button
                    onClick={handleCreateUser}
                    className="px-4 py-2 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                    disabled={loading}
                  >
                    {loading ? 'Creating...' : 'Create User'}
                  </button>
                </div>
              </div>
            )}
            
            {/* Users Table */}
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b border-stone-700">
                  <th className="text-left p-2">User ID</th>
                  <th className="text-left p-2">Username</th>
                  <th className="text-left p-2">Admin</th>
                  <th className="text-left p-2">File Access</th>
                  <th className="text-left p-2">Storage Quota</th>
                  <th className="text-left p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {users.map(userItem => (
                  <tr key={userItem.id} className="border-b border-stone-800 hover:bg-stone-800">
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <span className="text-white px-2 py-1 rounded w-full">
                          {userItem.id}
                        </span>
                      ) : (
                        userItem.id
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="text"
                          name="username"
                          value={formData.username}
                          onChange={handleChange}
                          className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                        />
                      ) : (
                        userItem.username
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="checkbox"
                          name="is_admin"
                          checked={formData.is_admin}
                          onChange={handleChange}
                          className="form-checkbox h-5 w-5 text-teal-500"
                        />
                      ) : (
                        userItem.is_admin === 1 || userItem.is_admin === true ? 'Yes' : 'No'
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <input
                          type="checkbox"
                          name="has_file_access"
                          checked={formData.has_file_access}
                          onChange={handleChange}
                          className="form-checkbox h-5 w-5 text-teal-500"
                        />
                      ) : (
                        userItem.has_file_access === 1 || userItem.has_file_access === true ? 'Yes' : 'No'
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <div className="flex items-center">
                          <input
                            type="number"
                            name="storage_quota"
                            value={Math.round((formData.storage_quota || 52428800) / 1048576)}
                            onChange={(e) => {
                              const mbValue = parseInt(e.target.value) || 0;
                              handleChange({
                                target: {
                                  name: 'storage_quota',
                                  value: mbValue * 1048576, // Convert MB to bytes
                                  type: 'number'
                                }
                              });
                            }}
                            className="bg-stone-700 text-white px-2 py-1 rounded w-20 mr-2"
                            min="0"
                            step="1"
                            disabled={formData.is_admin}
                          />
                          <span className="text-sm text-gray-400">MB {formData.is_admin && "(Unlimited for admins)"}</span>
                        </div>
                      ) : (
                        userItem.is_admin ? 'Unlimited' : 
                        `${Math.round((userItem.storage_quota || 52428800) / 1048576)} MB`
                      )}
                    </td>
                    <td className="p-2">
                      {editingUser === userItem.id ? (
                        <div className="flex flex-col space-y-2">
                          <div className="mb-2">
                            <label className="block text-sm text-gray-400">New Password:</label>
                            <input
                              type="password"
                              name="password"
                              value={formData.password}
                              onChange={handleChange}
                              placeholder="Leave blank to keep current"
                              className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                            />
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleSave(userItem.id)}
                              className="px-3 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                            >
                              Save
                            </button>
                            <button
                              onClick={handleCancel}
                              className="px-3 py-1 bg-stone-600 hover:bg-stone-500 rounded text-sm"
                            >
                              Cancel
                            </button>
                            <button
                              onClick={() => {
                                handleCancel();
                                handleDeleteUser(userItem.id);
                              }}
                              className="px-3 py-1 bg-stone-600 hover:bg-stone-500 rounded text-sm text-red-400 hover:text-red-300"
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEdit(userItem)}
                            className="px-3 py-1 bg-stone-700 hover:bg-stone-600 rounded text-sm"
                            disabled={loading}
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDeleteUser(userItem.id)}
                            className="px-3 py-1 focus:outline-none text-sm"
                            disabled={loading}
                            title="Delete user"
                          >
                            <Trash size={16} className="text-stone-400 hover:text-stone-300" />
                          </button>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {loading && users.length > 0 && (
              <div className="mt-4 text-center">
                <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-teal-500 mx-auto"></div>
              </div>
            )}
          </>
        )}
        
        {/* Show channels tab content */}
        {activeTab === 'channels' && (
          <>
            {/* Create Channel Form - Only shown when showCreateChannelForm is true */}
            {showCreateChannelForm && (
              <div className="mb-6 p-4 bg-stone-800 rounded">
                <h3 className="text-lg mb-3 text-teal-400">Create New Channel</h3>
                <form onSubmit={handleCreateChannel} className="flex items-end gap-4">
                  <div className="flex-1">
                    <label className="block text-sm text-gray-400 mb-1">Channel Name:</label>
                    <input
                      type="text"
                      value={newChannelName}
                      onChange={(e) => setNewChannelName(e.target.value)}
                      className="bg-stone-700 text-white px-2 py-1 rounded w-full"
                      placeholder="Enter channel name"
                    />
                  </div>
                  <button
                    type="submit"
                    className="px-4 py-1 bg-teal-600 hover:bg-teal-500 rounded text-sm"
                    disabled={channelLoading}
                  >
                    {channelLoading ? 'Creating...' : 'Create Channel'}
                  </button>
                </form>
              </div>
            )}
            
            {/* Channels Table */}
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b border-stone-700">
                  <th className="text-left p-2">Channel Name</th>
                  <th className="text-left p-2">Created By</th>
                  <th className="text-left p-2">Created At</th>
                  <th className="text-left p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {channels.map(channel => (
                  <tr key={channel.id} className="border-b border-stone-800 hover:bg-stone-800">
                    <td className="p-2">{channel.name}</td>
                    <td className="p-2">{channel.created_by || '-'}</td>
                    <td className="p-2">
                      {new Date(channel.created_at).toLocaleString()}
                    </td>
                    <td className="p-2">
                      <button
                        onClick={() => handleDeleteChannel(channel.id)}
                        className="focus:outline-none"
                        title="Delete channel"
                        disabled={channelLoading}
                      >
                        <Trash size={16} className="text-stone-400 hover:text-stone-300" />
                      </button>
                    </td>
                  </tr>
                ))}
                {channels.length === 0 && !channelLoading && (
                  <tr>
                    <td colSpan="4" className="p-4 text-center text-stone-500">
                      No channels found. Create one above.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
            
            {channelLoading && (
              <div className="mt-4 text-center">
                <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-teal-500 mx-auto"></div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default AdminWindow;

================
File: src/components/windows/AudioWindow.jsx
================
import React, { useRef, useState, useEffect, useCallback } from 'react';
import { Play, Pause, Volume2 } from 'lucide-react';

const AudioWindow = ({ nodeId, onCommand, windowState, updateWindowState }) => {
  const canvasRef = useRef(null);
  const audioRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const animationRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(windowState?.isPlaying || false);
  const [currentTime, setCurrentTime] = useState(windowState?.currentTime || 0);

  // Define draw function outside of other functions to avoid dependency issues
  const draw = useCallback(() => {
    if (!canvasRef.current || !analyserRef.current) {
      console.error('Cannot draw: canvas or analyser is null');
      return;
    }

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const analyser = analyserRef.current;
    
    // Make sure canvas dimensions are set correctly
    if (canvas.width === 0 || canvas.height === 0) {
      canvas.width = canvas.offsetWidth || 300;
      canvas.height = canvas.offsetHeight || 150;
    }
    
    // Use a smaller FFT size for better visualization
    analyser.fftSize = 512;
    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    const drawFrame = () => {
      // Cancel any existing animation frame
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      
      // Request next frame
      animationRef.current = requestAnimationFrame(drawFrame);
      
      // Get frequency data
      analyser.getByteFrequencyData(dataArray);

      // Clear canvas
      ctx.fillStyle = 'rgb(28, 25, 23)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Draw visualizer
      const barWidth = (canvas.width / bufferLength) * 2.5;
      let barHeight;
      let x = 0;

      for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i] * 1.5;
        
        // Make sure we have a minimum height for bars
        if (barHeight < 1) barHeight = 1;
        
        const gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);
        gradient.addColorStop(0, '#14b8a6');
        gradient.addColorStop(1, '#2dd4bf');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

        x += barWidth + 1;
      }
    };

    // Start the animation
    drawFrame();
    
    console.log('Visualization started');
    
    // Return a cleanup function
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
    };
  }, []);

  // Track if audio element has been connected to a source
  const sourceConnectedRef = useRef(false);

  // Setup audio with Web Audio API for visualization
  const setupAudio = useCallback(async () => {
    try {
      const audio = audioRef.current;
      if (!audio) {
        console.error('Audio element reference is null');
        return false;
      }
      
      // Force reset the sourceConnected flag if we're having issues
      if (audioContextRef.current?.state === 'closed') {
        sourceConnectedRef.current = false;
      }
      
      // Create new AudioContext if needed
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Creating new AudioContext');
        
        // Create new AudioContext
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Create and configure analyser
        const analyser = audioContext.createAnalyser();
        analyser.fftSize = 256; // Smaller FFT size for better visualization
        analyser.smoothingTimeConstant = 0.8; // Add smoothing
        
        // Resume audio context (needed due to browser autoplay policies)
        await audioContext.resume();
        
        // Create a new MediaElementSource and connect it
        try {
          console.log('Creating new MediaElementSource');
          const source = audioContext.createMediaElementSource(audio);
          source.connect(analyser);
          analyser.connect(audioContext.destination);
          sourceConnectedRef.current = true;
          
          // Store references
          audioContextRef.current = audioContext;
          analyserRef.current = analyser;
          
          console.log('Audio setup complete with new AudioContext');
        } catch (sourceError) {
          console.error('Error creating MediaElementSource:', sourceError);
          return false;
        }
      } else {
        // If AudioContext exists but is suspended, resume it
        if (audioContextRef.current.state === 'suspended') {
          console.log('Resuming suspended AudioContext');
          await audioContextRef.current.resume();
        }
        
        console.log('Using existing AudioContext');
      }
      
      // Restore playback position from window state
      if (windowState?.currentTime) {
        audio.currentTime = windowState.currentTime;
      }
      
      return true;
    } catch (error) {
      console.error('Error setting up audio:', error);
      return false;
    }
  }, [windowState]);

  // Initialize audio on mount or when windowState changes
  useEffect(() => {
    const initializeAudio = async () => {
      // Set up the audio context
      const success = await setupAudio();
      
      // If setup was successful and we should be playing, start playback
      if (success && windowState?.isPlaying) {
        try {
          await audioRef.current.play();
          draw();
        } catch (error) {
          console.error('Error auto-playing audio:', error);
          setIsPlaying(false);
        }
      }
    };

    if (audioRef.current && 
        (!audioContextRef.current || audioContextRef.current.state === 'closed')) {
      initializeAudio();
    }

    return () => {
      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
        try {
          audioContextRef.current.close();
        } catch (error) {
          console.error('Error closing AudioContext:', error);
        }
      }
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [windowState, setupAudio, draw]);

  // Toggle play/pause
  const togglePlay = useCallback(async () => {
    if (!audioRef.current) return;

    try {
      console.log('Toggle play clicked, current state:', isPlaying);
      
      // Make sure audio context is initialized and running
      if (!audioContextRef.current || audioContextRef.current.state === 'closed') {
        console.log('Setting up audio again');
        const success = await setupAudio();
        if (!success) {
          console.error('Failed to set up audio');
          return;
        }
      } else if (audioContextRef.current.state === 'suspended') {
        console.log('Resuming suspended AudioContext');
        await audioContextRef.current.resume();
      }

      if (isPlaying) {
        console.log('Pausing audio');
        audioRef.current.pause();
        if (animationRef.current) {
          cancelAnimationFrame(animationRef.current);
          animationRef.current = null;
        }
      } else {
        console.log('Starting audio playback');
        try {
          // Start visualization before playing to ensure it's ready
          if (analyserRef.current && !animationRef.current) {
            console.log('Starting visualization');
            draw();
          }
          
          // Play the audio
          const playPromise = audioRef.current.play();
          if (playPromise) {
            await playPromise;
            console.log('Audio playback started successfully');
            
            // Make sure visualization is running
            if (!animationRef.current && analyserRef.current) {
              console.log('Starting visualization after successful play');
              draw();
            }
          }
        } catch (playError) {
          console.error('Error playing audio:', playError);
        }
      }
      
      setIsPlaying(!isPlaying);
    } catch (error) {
      console.error('Error in togglePlay:', error);
    }
  }, [isPlaying, setupAudio, draw]);

  // Handle canvas resize
  useEffect(() => {
    const resizeCanvas = () => {
      const canvas = canvasRef.current;
      if (!canvas) return;
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    return () => window.removeEventListener('resize', resizeCanvas);
  }, []);

  // Update current time when playing
  useEffect(() => {
    if (!audioRef.current) return;
    
    const updateTime = () => {
      setCurrentTime(audioRef.current.currentTime);
    };
    
    audioRef.current.addEventListener('timeupdate', updateTime);
    return () => {
      audioRef.current?.removeEventListener('timeupdate', updateTime);
    };
  }, []);
  
  // Start visualization when audio is playing
  useEffect(() => {
    // If audio is playing but visualization is not running, start it
    if (isPlaying && audioRef.current && analyserRef.current && !animationRef.current) {
      console.log('Starting visualization due to isPlaying state change');
      draw();
    }
    
    // If audio is not playing but visualization is running, stop it
    if (!isPlaying && animationRef.current) {
      console.log('Stopping visualization due to isPlaying state change');
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }
  }, [isPlaying, draw]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        isPlaying,
        currentTime
      });
    }
  }, [isPlaying, currentTime, updateWindowState]);

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
      <div className="flex-1 relative">
        <canvas 
          ref={canvasRef}
          className="absolute inset-0 w-full h-full"
        />
      </div>

      <div className="border-t border-stone-700">
        <div className="flex items-center gap-4 mb-4">
          <button 
            onClick={togglePlay}
            className="p-2 hover:bg-stone-800 rounded-full transition-colors"
          >
            {isPlaying ? <Pause size={24} /> : <Play size={24} />}
          </button>
          <Volume2 size={24} />
        </div>

        <audio
          ref={audioRef}
          src="scamming-on-runescape.mp3"
          preload="auto"
          crossOrigin="anonymous"
          onPlay={() => setIsPlaying(true)}
          onPause={() => setIsPlaying(false)}
          onEnded={() => setIsPlaying(false)}
        />

        <div className="p-2 flex items-center gap-2 border-t border-stone-700">
          <span>$</span>
          <input
            type="text"
            className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && e.target.value.trim()) {
                onCommand(e.target.value.trim());
                e.target.value = '';
              }
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default AudioWindow;

================
File: src/components/windows/CanvasPreview.jsx
================
import React, { useMemo } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState
} from 'reactflow';
import 'reactflow/dist/style.css';
import nodeTypes from '../../utils/canvasNodeTypes';

const CanvasPreview = ({ fileContent, nodeTypes: propNodeTypes }) => {
  // Parse the canvas data
  let canvasData;
  try {
    canvasData = JSON.parse(fileContent);
  } catch (error) {
    return (
      <div className="text-red-400 p-4">
        <p>Error parsing canvas file: {error.message}</p>
        <p className="mt-2">Raw content:</p>
        <pre className="font-mono text-sm whitespace-pre-wrap mt-2 bg-stone-800 p-2 rounded">
          {fileContent}
        </pre>
      </div>
    );
  }

  // Memoize the nodeTypes to prevent recreation on each render
  const memoizedNodeTypes = useMemo(() => propNodeTypes || nodeTypes, [propNodeTypes]);
  
  // Use React Flow hooks at the top level of the component
  const [nodes, setNodes] = useNodesState(canvasData.nodes || []);
  const [edges, setEdges] = useEdgesState(canvasData.edges || []);
  
  return (
    <div style={{ width: '100%', height: '100%', minHeight: '300px' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        nodeTypes={memoizedNodeTypes}
        fitView
        attributionPosition="bottom-right"
        minZoom={0.1}
        maxZoom={4}
        defaultViewport={{ x: 0, y: 0, zoom: 1 }}
      >
      <Background color="#44403c" gap={16} />
      <Controls showInteractive={false} />
      <MiniMap
        nodeColor={(node) => {
          switch (node.type) {
            case 'group':
              return node.data.color ? `rgba(${node.data.color}, 0.6)` : 'rgba(20, 184, 166, 0.6)';
            default:
              return '#14b8a6';
          }
        }}
        maskColor="rgba(0, 0, 0, 0.5)"
        style={{ backgroundColor: '#292524' }}
      />
      </ReactFlow>
    </div>
  );
};

export default CanvasPreview;

================
File: src/components/windows/CanvasWindow.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel
} from 'reactflow';
import 'reactflow/dist/style.css';
import { 
  Plus, 
  Minus, 
  Save, 
  FileText, 
  Trash2, 
  Edit, 
  Link as LinkIcon,
  Square,
  Type
} from 'lucide-react';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveCanvasState, getCanvasState } from '../../services/indexedDBService';

// Custom node types
const TextNode = ({ data }) => {
  return (
    <div className="p-2 bg-stone-800 border border-stone-700 rounded shadow-md">
      <div className="text-teal-400 text-sm whitespace-pre-wrap">{data.text}</div>
    </div>
  );
};

const GroupNode = ({ data }) => {
  return (
    <div 
      className="p-2 bg-stone-900 border border-stone-700 rounded shadow-md"
      style={{ backgroundColor: data.color ? `rgba(${data.color}, 0.2)` : 'rgba(20, 20, 20, 0.7)' }}
    >
      <div className="text-teal-300 font-bold mb-1">{data.label || 'Group'}</div>
      <div className="text-teal-400 text-sm">{data.children?.length || 0} items</div>
    </div>
  );
};

// Node types configuration
const nodeTypes = {
  text: TextNode,
  group: GroupNode
};

const CanvasWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [canvasName, setCanvasName] = useState(windowState?.canvasName || 'Untitled Canvas');
  const [currentCanvasPath, setCurrentCanvasPath] = useState(windowState?.currentCanvasPath || null);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // ReactFlow states
  const [nodes, setNodes, onNodesChange] = useNodesState(windowState?.nodes || []);
  const [edges, setEdges, onEdgesChange] = useEdgesState(windowState?.edges || []);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  // UI states
  const [selectedElements, setSelectedElements] = useState([]);
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeType, setNewNodeType] = useState('text');
  const [newNodeText, setNewNodeText] = useState('');
  const [newNodeLabel, setNewNodeLabel] = useState('');
  const [newNodeColor, setNewNodeColor] = useState('');
  
  // For auto-save functionality
  const saveTimeoutRef = useRef(null);
  
  // Load canvas state from IndexedDB on mount
  useEffect(() => {
    const loadCanvasState = async () => {
      try {
        // Try to load canvas state from IndexedDB
        const savedState = await getCanvasState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded canvas state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // Update state with saved values
          if (savedState.content.nodes) {
            setNodes(savedState.content.nodes);
          }
          
          if (savedState.content.edges) {
            setEdges(savedState.content.edges);
          }
          
          if (savedState.content.canvasName) {
            setCanvasName(savedState.content.canvasName);
          }
          
          if (savedState.content.currentCanvasPath) {
            setCurrentCanvasPath(savedState.content.currentCanvasPath);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`Failed to load canvas state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadCanvasState();
  }, [nodeId, setNodes, setEdges]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active canvas window
      setActiveWindow(nodeId, WINDOW_TYPES.CANVAS);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Save canvas state to IndexedDB when it changes
  useEffect(() => {
    if (!stateLoadedRef.current) return;
    
    // Save the canvas state to IndexedDB
    saveCanvasState({
      id: nodeId,
      content: {
        nodes,
        edges,
        canvasName,
        currentCanvasPath
      }
    }).catch(error => {
      console.error(`Failed to save canvas state for window ${nodeId} to IndexedDB:`, error);
    });
    
  }, [nodes, edges, canvasName, currentCanvasPath, nodeId]);
  
  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        nodes,
        edges,
        canvasName,
        currentCanvasPath,
        saveStatus
      });
    }
  }, [nodes, edges, canvasName, currentCanvasPath, saveStatus, updateWindowState]);
  
  // Auto-save functionality with debounce
  useEffect(() => {
    // Only auto-save if we have a path and user is admin
    if (currentCanvasPath && isAdmin) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        saveCanvas();
      }, 2000); // 2 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [nodes, edges, currentCanvasPath, isAdmin]);
  
  // Handle connection (edge) creation
  const onConnect = useCallback((params) => {
    setEdges((eds) => addEdge({
      ...params,
      id: `edge-${Date.now()}`,
      type: 'default',
      animated: false,
      style: { stroke: '#14b8a6' }
    }, eds));
  }, [setEdges]);
  
  // Handle node selection
  const onSelectionChange = useCallback(({ nodes, edges }) => {
    setSelectedElements([...nodes, ...edges]);
  }, []);
  
  // Handle drag over for node creation
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);
  
  // Handle drop for node creation
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      
      const type = event.dataTransfer.getData('application/reactflow/type');
      if (!type) return;
      
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });
      
      const newNode = {
        id: `node-${Date.now()}`,
        type,
        position,
        data: type === 'text' 
          ? { text: 'New text node' } 
          : { label: 'New Group', color: '20, 184, 166' },
        style: type === 'group' 
          ? { width: 400, height: 400, backgroundColor: 'rgba(20, 184, 166, 0.1)' } 
          : undefined
      };
      
      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance, setNodes]
  );
  
  // Load canvas from file
  const loadCanvas = async (filePath) => {
    try {
      setIsLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsLoading(false);
        return;
      }
      
      // Fetch file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view file content.');
        } else {
          setErrorMessage(`Failed to load canvas: ${response.statusText}`);
        }
        setIsLoading(false);
        return;
      }
      
      const data = await response.json();
      
      try {
        const canvasData = JSON.parse(data.content);
        
        if (canvasData.nodes && canvasData.edges) {
          setNodes(canvasData.nodes);
          setEdges(canvasData.edges);
          setCurrentCanvasPath(filePath);
          
          // Extract canvas name from file path
          const pathParts = filePath.split('/');
          const fileName = pathParts[pathParts.length - 1];
          setCanvasName(fileName.replace('.canvas', ''));
          
          setSaveStatus('saved');
        } else {
          setErrorMessage('Invalid canvas file format.');
        }
      } catch (parseError) {
        console.error('Error parsing canvas file:', parseError);
        setErrorMessage('Failed to parse canvas file. Invalid format.');
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error('Error loading canvas:', error);
      setErrorMessage(`Error loading canvas: ${error.message}`);
      setSaveStatus('error');
      setIsLoading(false);
    }
  };
  
  // Save canvas to file
  const saveCanvas = async () => {
    try {
      // Check if we have a path
      if (!currentCanvasPath) {
        setErrorMessage('No file path specified. Please save as a new file first.');
        setSaveStatus('error');
        return;
      }
      
      setSaveStatus('saving');
      
      const canvasData = {
        nodes,
        edges
      };
      
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          path: currentCanvasPath,
          content: JSON.stringify(canvasData, null, 2)
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to save canvas: ${response.statusText}`);
      }
      
      setSaveStatus('saved');
      setErrorMessage('');
    } catch (error) {
      console.error('Error saving canvas:', error);
      setErrorMessage(`Error saving canvas: ${error.message}`);
      setSaveStatus('error');
    }
  };
  
  // Create a new node
  const createNode = (type) => {
    if (!reactFlowInstance) return;
    
    const position = {
      x: Math.random() * 400,
      y: Math.random() * 400
    };
    
    let newNode = {
      id: `node-${Date.now()}`,
      type,
      position,
      data: {}
    };
    
    if (type === 'text') {
      newNode.data = { text: newNodeText || 'New text node' };
    } else if (type === 'group') {
      newNode.data = { 
        label: newNodeLabel || 'New Group', 
        color: newNodeColor || '20, 184, 166' 
      };
      newNode.style = { 
        width: 400, 
        height: 400, 
        backgroundColor: `rgba(${newNodeColor || '20, 184, 166'}, 0.1)` 
      };
    }
    
    setNodes((nds) => nds.concat(newNode));
    setShowNodeCreator(false);
    setNewNodeText('');
    setNewNodeLabel('');
    setNewNodeColor('');
  };
  
  // Delete selected elements
  const deleteSelected = () => {
    const selectedNodeIds = selectedElements
      .filter(el => el.type !== 'default')
      .map(el => el.id);
    
    const selectedEdgeIds = selectedElements
      .filter(el => el.type === 'default')
      .map(el => el.id);
    
    setNodes(nodes.filter(node => !selectedNodeIds.includes(node.id)));
    setEdges(edges.filter(edge => !selectedEdgeIds.includes(edge.id)));
    setSelectedElements([]);
  };
  
  // Handle command input
  const handleCommand = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      onCommand(cmd);
      e.target.value = '';
      
      // Commands:
      // - save: save the canvas
      // - load [path]: load a canvas from a file
      // - new-text: create a new text node
      // - new-group: create a new group node
      // - delete: delete selected elements
      if (cmd === 'save') {
        saveCanvas();
      } else if (cmd.startsWith('load ')) {
        const path = cmd.substring(5).trim();
        loadCanvas(path);
      } else if (cmd === 'new-text') {
        setNewNodeType('text');
        setShowNodeCreator(true);
      } else if (cmd === 'new-group') {
        setNewNodeType('group');
        setShowNodeCreator(true);
      } else if (cmd === 'delete') {
        deleteSelected();
      }
    }
  };
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <span className="mr-2">{canvasName}</span>
          {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
          {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
          {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
        </div>
        
        <div className="flex gap-2">
          <button 
            onClick={() => saveCanvas()}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('text');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Text
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('group');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
            title="Add group node"
          >
            <Square size={14} />
            Group
          </button>
          
          {selectedElements.length > 0 && (
            <button 
              onClick={deleteSelected}
              className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
              title="Delete selected"
            >
              <Trash2 size={14} />
              Delete
            </button>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {errorMessage && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {errorMessage}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              {newNodeType === 'text' ? 'New Text Node' : 'New Group Node'}
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          {newNodeType === 'text' ? (
            <div className="flex flex-col gap-2">
              <textarea
                value={newNodeText}
                onChange={(e) => setNewNodeText(e.target.value)}
                placeholder="Enter text content"
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                rows={3}
              />
              <div className="flex justify-end">
                <button
                  onClick={() => createNode('text')}
                  className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
                >
                  Create
                </button>
              </div>
            </div>
          ) : (
            <div className="flex flex-col gap-2">
              <input
                type="text"
                value={newNodeLabel}
                onChange={(e) => setNewNodeLabel(e.target.value)}
                placeholder="Group label"
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              />
              <select
                value={newNodeColor}
                onChange={(e) => setNewNodeColor(e.target.value)}
                className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              >
                <option value="20, 184, 166">Teal</option>
                <option value="244, 63, 94">Red</option>
                <option value="234, 179, 8">Yellow</option>
                <option value="59, 130, 246">Blue</option>
                <option value="168, 85, 247">Purple</option>
                <option value="34, 197, 94">Green</option>
              </select>
              <div className="flex justify-end">
                <button
                  onClick={() => createNode('group')}
                  className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
                >
                  Create
                </button>
              </div>
            </div>
          )}
        </div>
      )}
      
      {/* Canvas area */}
      <div className="flex-1 overflow-hidden">
        {isLoading ? (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading canvas...</span>
          </div>
        ) : (
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            onSelectionChange={onSelectionChange}
            nodeTypes={nodeTypes}
            fitView
            snapToGrid
            snapGrid={[15, 15]}
            defaultViewport={{ x: 0, y: 0, zoom: 1 }}
            minZoom={0.1}
            maxZoom={4}
            deleteKeyCode="Delete"
            multiSelectionKeyCode="Control"
            selectionKeyCode="Shift"
          >
            <Background color="#44403c" gap={16} />
            <Controls showInteractive={false} />
            <MiniMap
              nodeColor={(node) => {
                switch (node.type) {
                  case 'group':
                    return node.data.color ? `rgba(${node.data.color}, 0.6)` : 'rgba(20, 184, 166, 0.6)';
                  default:
                    return '#14b8a6';
                }
              }}
              maskColor="rgba(0, 0, 0, 0.5)"
              style={{ backgroundColor: '#292524' }}
            />
            
            <Panel position="top-left" className="bg-stone-800 p-2 rounded shadow-md">
              <div className="flex flex-col gap-1">
                <div className="text-xs text-stone-400">Drag to create:</div>
                <div 
                  className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                  draggable
                  onDragStart={(event) => {
                    event.dataTransfer.setData('application/reactflow/type', 'text');
                    event.dataTransfer.effectAllowed = 'move';
                  }}
                >
                  <Type size={14} />
                  <span className="text-xs">Text Node</span>
                </div>
                <div 
                  className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                  draggable
                  onDragStart={(event) => {
                    event.dataTransfer.setData('application/reactflow/type', 'group');
                    event.dataTransfer.effectAllowed = 'move';
                  }}
                >
                  <Square size={14} />
                  <span className="text-xs">Group Node</span>
                </div>
              </div>
            </Panel>
          </ReactFlow>
        )}
      </div>
      
      {/* Command input */}
      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="text-teal-400">$</span>
        <input
          ref={focusRef}
          type="text"
          onKeyDown={handleCommand}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          placeholder="Commands: save, load [path], new-text, new-group, delete"
        />
      </div>
    </div>
  );
};

export default CanvasWindow;

================
File: src/components/windows/ChatWindow.jsx
================
import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { io } from 'socket.io-client';
import axios from 'axios';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveChatState, getChatState } from '../../services/indexedDBService';
import { MoreVertical, Trash, Mic, MicOff, Phone, PhoneOff, Plus } from 'lucide-react'; // Import additional icons
import SimplePeer from 'simple-peer';

// Helper function to safely destroy a peer connection
const safelyDestroyPeer = (peer, userId, destroyedPeersRef) => {
  if (!peer) return;
  
  try {
    // Stop any tracks in the peer's stream
    if (peer._localStream) {
      try {
        peer._localStream.getTracks().forEach(track => track.stop());
      } catch (err) {
        console.error('Error stopping local stream tracks:', err);
      }
    }
    
    // Destroy the peer
    if (peer.destroy) {
      peer.destroy();
      
      // Mark this peer as destroyed if we have a userId and ref
      if (userId && destroyedPeersRef?.current) {
        console.log(`Marking peer ${userId} as destroyed`);
        destroyedPeersRef.current.add(userId);
      }
    }
  } catch (err) {
    console.error('Error safely destroying peer:', err);
  }
};

// Parse a command input
const parseCommand = (input) => {
  // Check if this is a command (starts with /)
  if (!input.startsWith('/')) return null;
  
  // Split the input into command and arguments
  const parts = input.substring(1).trim().split(/\s+/);
  const command = parts[0].toLowerCase();
  const args = parts.slice(1);
  
  return { command, args };
};

const ChatWindow = ({ isActive, nodeId }) => {
  const { user } = useAuth();
  const { setActiveWindow } = useWindowState();
  const [rooms, setRooms] = useState([]);
  const [activeRoom, setActiveRoom] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [charCount, setCharCount] = useState(0);
  const [newRoomName, setNewRoomName] = useState('');
  const [socket, setSocket] = useState(null);
  const messagesEndRef = useRef(null);
  // Refs to track loading state
  const stateLoadedRef = useRef(false);
  const roomsLoadedRef = useRef(false);
  
  // Voice chat state
  const [voiceChannels, setVoiceChannels] = useState([]);
  const [activeVoiceChannel, setActiveVoiceChannel] = useState(null);
  const [voiceParticipants, setVoiceParticipants] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [peers, setPeers] = useState({});
  const [newVoiceChannelName, setNewVoiceChannelName] = useState('');
  const [speakingUsers, setSpeakingUsers] = useState(new Set());
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const speakingTimeoutRef = useRef(null);
  const joinSoundRef = useRef(null);
  const leaveSoundRef = useRef(null);
  
  // Track destroyed peers to prevent signaling to them
  const destroyedPeersRef = useRef(new Set());
  
  // Helper function to create audio elements for remote streams
  const createAudioElement = (userId, stream) => {
    console.log('Creating audio element for user:', userId);
    const existingAudio = document.getElementById(`remote-audio-${userId}`);
    if (existingAudio) {
      console.log('Audio element already exists, removing it first');
      existingAudio.remove();
    }
    
    const audio = document.createElement('audio');
    audio.id = `remote-audio-${userId}`;
    audio.srcObject = stream;
    audio.autoplay = true;
    audio.controls = false; // Hide controls
    audio.volume = 1.0; // Full volume
    document.body.appendChild(audio);
    
    // Verify the audio element was created and is working
    console.log('Audio element created:', audio);
    console.log('Audio element autoplay:', audio.autoplay);
    console.log('Audio element srcObject:', audio.srcObject);
    
    return audio;
  };
  
  const MAX_CHARS = 500; // Maximum character limit

  // New state for tracking which message's menu is open
  const [activeMenu, setActiveMenu] = useState(null);

  // Initialize sound effects
  useEffect(() => {
    // Create the audio element for the join sound
    const joinSound = new Audio('/audio/vine-boom.mp3');
    joinSound.volume = 0.5; // Set volume to 50%
    joinSoundRef.current = joinSound;
    
    // Create the audio element for the leave sound
    const leaveSound = new Audio('/audio/vine-boom-leave.mp3');
    leaveSound.volume = 0.5; // Set volume to 50%
    leaveSoundRef.current = leaveSound;
    
    return () => {
      // Clean up
      if (joinSoundRef.current) {
        joinSoundRef.current.pause();
        joinSoundRef.current.src = '';
      }
      if (leaveSoundRef.current) {
        leaveSoundRef.current.pause();
        leaveSoundRef.current.src = '';
      }
    };
  }, []);
  
  // Connect to WebSocket server
  useEffect(() => {
    const socketInstance = io(API_CONFIG.BASE_URL.replace('/api', ''));
    setSocket(socketInstance);

    // Authenticate the socket connection
    const token = localStorage.getItem('auth_token');
    if (token) {
      socketInstance.emit('authenticate', token);
    }

    return () => {
      // Clean up voice chat if active
      if (localStream) {
        try {
          localStream.getTracks().forEach(track => track.stop());
        } catch (err) {
          console.error('Error stopping local stream tracks on unmount:', err);
        }
      }
      
      // Clean up peer connections safely using our helper function
      try {
        Object.values(peers).forEach(peer => {
          safelyDestroyPeer(peer);
        });
      } catch (err) {
        console.error('Error cleaning up peer connections on unmount:', err);
      }
      
      socketInstance.disconnect();
    };
  }, []);
  
  // Add effects to listen for message_deleted and room_deleted events
  useEffect(() => {
    if (!socket) return;
    
    const handleMessageDeleted = (data) => {
      setMessages(prev => prev.filter(msg => msg.id !== data.id));
    };
    
    const handleRoomDeleted = (data) => {
      // If the active room was deleted, set activeRoom to null
      if (activeRoom && activeRoom.id === data.id) {
        setActiveRoom(null);
      }
      
      // Remove the deleted room from the rooms list
      setRooms(prev => prev.filter(room => room.id !== data.id));
    };
    
    const handleVoiceChannelDeleted = (data) => {
      // If the active voice channel was deleted, leave it
      if (activeVoiceChannel && activeVoiceChannel.id === data.id) {
        leaveVoiceChannel();
      }
      
      // Remove the deleted voice channel from the list
      setVoiceChannels(prev => prev.filter(channel => channel.id !== data.id));
    };

    const handleMessagesCleared = (data) => {
      if (activeRoom && activeRoom.id === data.roomId) {
        // If this is for our current room, clear the messages
        if (data.count === 'all') {
          setMessages([]);
        } else {
          // Remove the most recent N messages
          const messageCount = parseInt(data.count, 10);
          if (!isNaN(messageCount)) {
            setMessages(prev => prev.slice(0, Math.max(0, prev.length - messageCount)));
          }
        }
        
        // Add a system message
        setMessages(prev => [...prev, {
          id: 'system-' + Date.now(),
          username: 'System',
          message: `Messages have been cleared by an admin.`,
          created_at: new Date().toISOString(),
          isSystem: true
        }]);
      }
    };
    
    socket.on('message_deleted', handleMessageDeleted);
    socket.on('room_deleted', handleRoomDeleted);
    socket.on('voice_channel_deleted', handleVoiceChannelDeleted);
    socket.on('messages_cleared', handleMessagesCleared);
    
    return () => {
      socket.off('message_deleted', handleMessageDeleted);
      socket.off('room_deleted', handleRoomDeleted);
      socket.off('voice_channel_deleted', handleVoiceChannelDeleted);
      socket.off('messages_cleared', handleMessagesCleared);
    };
  }, [socket, activeRoom, activeVoiceChannel]);

  // Load chat state from IndexedDB on mount
  useEffect(() => {
    const loadChatState = async () => {
      try {
        // Try to load chat state from IndexedDB
        const savedState = await getChatState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded chat state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // If we have a saved active room ID, we'll use it after fetching rooms
          stateLoadedRef.current = true;
          
          // Store the active room ID to use after fetching rooms
          if (savedState.content.activeRoomId) {
            // We'll set this after fetching rooms
            window.setTimeout(() => {
              if (rooms.length > 0) {
                const savedRoom = rooms.find(room => room.id === savedState.content.activeRoomId);
                if (savedRoom) {
                  setActiveRoom(savedRoom);
                  console.log(`Restored active room: ${savedRoom.name}`);
                }
              }
            }, 100);
          }
        }
      } catch (error) {
        console.error(`Failed to load chat state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadChatState();
  }, [nodeId]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active chat window
      setActiveWindow(nodeId, WINDOW_TYPES.CHAT);
    }
  }, [isActive, nodeId, setActiveWindow]);

  // Fetch available rooms
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(`${API_CONFIG.BASE_URL}/chat/rooms`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setRooms(response.data);
        roomsLoadedRef.current = true;
        
        // Get saved active room ID from sessionStorage
        const savedRoomId = sessionStorage.getItem(`chat_active_room_${nodeId}`);
        
        if (savedRoomId && response.data.length > 0) {
          // Try to find the saved room
          const savedRoom = response.data.find(room => 
            room.id === parseInt(savedRoomId, 10) || room.id === savedRoomId
          );
          
          if (savedRoom) {
            console.log(`Restoring saved room: ${savedRoom.name}`);
            setActiveRoom(savedRoom);
            
            // Load any saved draft message for this room
            const savedDraft = localStorage.getItem(`chat_draft_${nodeId}_${savedRoom.id}`);
            if (savedDraft) {
              setNewMessage(savedDraft);
              setCharCount(savedDraft.length);
            }
            
            return;
          }
        }
        
        // If no saved room was found or restored, and there are rooms but no active room,
        // set the first one as active
        if (response.data.length > 0 && !activeRoom) {
          setActiveRoom(response.data[0]);
        }
      } catch (error) {
        console.error('Failed to fetch rooms:', error);
      }
    };

    fetchRooms();
  }, []); // Only run once on mount

  // Save active room to IndexedDB and sessionStorage when it changes
  useEffect(() => {
    if (!activeRoom) return;
    
    // Save to sessionStorage for immediate persistence across refreshes
    sessionStorage.setItem(`chat_active_room_${nodeId}`, activeRoom.id);
    
    // Also save to IndexedDB for longer term storage if state is loaded
    if (stateLoadedRef.current) {
      saveChatState({
        id: nodeId,
        content: {
          activeRoomId: activeRoom.id
        }
      }).catch(error => {
        console.error(`Failed to save chat state for window ${nodeId} to IndexedDB:`, error);
      });
      
      console.log(`Saved active room ID ${activeRoom.id} to IndexedDB for window ${nodeId}`);
    }
    
    // Check for any saved draft message
    const savedDraft = localStorage.getItem(`chat_draft_${nodeId}_${activeRoom.id}`);
    if (savedDraft && newMessage !== savedDraft) {
      setNewMessage(savedDraft);
      setCharCount(savedDraft.length);
    }
  }, [activeRoom, nodeId, newMessage]);

  // Join room and fetch messages
  useEffect(() => {
    if (!activeRoom || !socket) return;

    // Join the room via WebSocket
    socket.emit('join_room', activeRoom.id);

    // Fetch messages for the room
    const fetchMessages = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setMessages(response.data);
      } catch (error) {
        console.error('Failed to fetch messages:', error);
      }
    };

    // Fetch voice channels for the room
    const fetchVoiceChannels = async () => {
      try {
        const token = localStorage.getItem('auth_token');
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/voice-channels`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setVoiceChannels(response.data);
      } catch (error) {
        console.error('Failed to fetch voice channels:', error);
      }
    };

    fetchMessages();
    fetchVoiceChannels();

    // Listen for new messages
    const handleNewMessage = (message) => {
      setMessages((prev) => [...prev, message]);
    };

    socket.on('new_message', handleNewMessage);
//test
    return () => {
      // Leave the room when component unmounts or room changes
      socket.emit('leave_room', activeRoom.id);
      socket.off('new_message', handleNewMessage);
    };
  }, [activeRoom, socket]);

  // Set up voice activity detection
  useEffect(() => {
    if (!localStream || !socket || !activeVoiceChannel) return;
    
    // Create audio context and analyzer
    try {
      // Clean up any existing audio context
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
      
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      audioContextRef.current = audioContext;
      
      // Create analyzer node
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 256;
      analyser.smoothingTimeConstant = 0.8;
      analyserRef.current = analyser;
      
      // Connect the stream to the analyzer
      const source = audioContext.createMediaStreamSource(localStream);
      source.connect(analyser);
      
      // Set up the buffer for the analyzer
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      
      // Function to check if user is speaking
      const checkSpeaking = () => {
        if (!analyser || !socket || !activeVoiceChannel || isMuted) return;
        
        analyser.getByteFrequencyData(dataArray);
        
        // Calculate average volume
        let sum = 0;
        for (let i = 0; i < bufferLength; i++) {
          sum += dataArray[i];
        }
        const average = sum / bufferLength;
        
        // Threshold for speaking detection
        const threshold = 20; // Adjust as needed
        
        // Check if speaking
        const isSpeaking = average > threshold;
        
        // If speaking state changed, emit event
        if (isSpeaking && !speakingUsers.has(user.id)) {
          // User started speaking
          socket.emit('voice_speaking_start', {
            channelId: activeVoiceChannel.id
          });
          
          // Update local state
          setSpeakingUsers(prev => {
            const newSet = new Set(prev);
            newSet.add(user.id);
            return newSet;
          });
          
          // Clear any existing timeout
          if (speakingTimeoutRef.current) {
            clearTimeout(speakingTimeoutRef.current);
          }
        } else if (!isSpeaking && speakingUsers.has(user.id)) {
          // Set a timeout to stop speaking status after a short delay
          // This prevents the speaking status from flickering
          if (!speakingTimeoutRef.current) {
            speakingTimeoutRef.current = setTimeout(() => {
              socket.emit('voice_speaking_stop', {
                channelId: activeVoiceChannel.id
              });
              
              // Update local state
              setSpeakingUsers(prev => {
                const newSet = new Set(prev);
                newSet.delete(user.id);
                return newSet;
              });
              
              speakingTimeoutRef.current = null;
            }, 300); // 300ms delay
          }
        }
      };
      
      // Set up interval to check speaking
      const intervalId = setInterval(checkSpeaking, 100); // Check every 100ms
      
      return () => {
        clearInterval(intervalId);
        if (speakingTimeoutRef.current) {
          clearTimeout(speakingTimeoutRef.current);
        }
        if (audioContextRef.current) {
          audioContextRef.current.close();
          audioContextRef.current = null;
        }
        analyserRef.current = null;
      };
    } catch (error) {
      console.error('Error setting up voice activity detection:', error);
    }
  }, [localStream, socket, activeVoiceChannel, isMuted, user.id, speakingUsers]);
  
  // Voice chat socket event handlers
  useEffect(() => {
    if (!socket) return;
    
    // Handle speaking events
    const handleUserSpeakingStart = (data) => {
      if (data.channelId === activeVoiceChannel?.id && data.userId !== user.id) {
        setSpeakingUsers(prev => {
          const newSet = new Set(prev);
          newSet.add(data.userId);
          return newSet;
        });
      }
    };
    
    const handleUserSpeakingStop = (data) => {
      if (data.channelId === activeVoiceChannel?.id && data.userId !== user.id) {
        setSpeakingUsers(prev => {
          const newSet = new Set(prev);
          newSet.delete(data.userId);
          return newSet;
        });
      }
    };
    
    socket.on('user_speaking_start', handleUserSpeakingStart);
    socket.on('user_speaking_stop', handleUserSpeakingStop);
    
    // Handle when a user joins a voice channel
    const handleUserJoinedVoice = (data) => {
      console.log('User joined voice:', data);
      
      // Add to participants list
      setVoiceParticipants(prev => {
        // Check if user is already in the list
        if (prev.some(p => p.user_id === data.userId)) {
          return prev;
        }
        
        // Play join sound if this is our active channel and we're not the one joining
        if (activeVoiceChannel && 
            activeVoiceChannel.id === data.channelId && 
            data.userId !== user.id &&
            joinSoundRef.current) {
          // Reset the audio to the beginning and play it
          joinSoundRef.current.currentTime = 0;
          joinSoundRef.current.play().catch(err => {
            console.error('Error playing join sound:', err);
          });
        }
        
        return [...prev, {
          user_id: data.userId,
          username: data.username,
          is_muted: data.isMuted,
          channel_id: data.channelId
        }];
      });
      
      // If this is our active voice channel and we have a local stream,
      // initiate a peer connection to the new user
      if (activeVoiceChannel && 
          activeVoiceChannel.id === data.channelId && 
          localStream && 
          localStream.active && // Check that stream is active
          data.userId !== user.id) {
        
        console.log('Creating new peer connection to user:', data.userId);
        
        // Create peer connection with optimized settings
        try {
          // Track connection start time for performance monitoring
          const connectionStartTime = performance.now();
          
          const peer = new SimplePeer({
            initiator: true,
            trickle: true, // Enable trickle ICE for faster connections
            stream: localStream,
            config: {
              iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' },
                { urls: 'stun:stun3.l.google.com:19302' },
                { urls: 'stun:stun4.l.google.com:19302' }
              ],
              iceCandidatePoolSize: 10 // Pre-gather some ICE candidates
            }
          });
            
            peer.on('signal', signal => {
              console.log('Generated signal for user:', data.userId, signal);
              console.time('signaling-' + data.userId);
              socket.emit('voice_signal', {
                channelId: activeVoiceChannel.id,
                targetUserId: data.userId,
                signal
              });
            });
            
            peer.on('stream', stream => {
              console.log('Received stream from user:', data.userId, stream);
              // Create audio element for the remote stream
              createAudioElement(data.userId, stream);
            });
            
            // Add error handling
            peer.on('error', err => {
              console.error('Peer connection error (initiator):', err);
            });
            
            // Monitor ICE connection state
            peer.on('iceStateChange', state => {
              console.log('ICE state change (initiator):', state);
            });
            
            // Monitor connection state with timing
            peer.on('connect', () => {
              console.timeEnd('signaling-' + data.userId);
              const connectionTime = performance.now() - connectionStartTime;
              console.log('Peer connection established (initiator) with user:', data.userId, 'in', connectionTime.toFixed(0), 'ms');
            });
            
            // Add to peers state
            setPeers(prev => ({
              ...prev,
              [data.userId]: peer
            }));
          } catch (err) {
            console.error('Error creating peer connection (initiator):', err);
          }
      }
    };

    
    
    // Handle when a user leaves a voice channel
    const handleUserLeftVoice = (data) => {
      console.log('User left voice:', data);
      
      // Play leave sound if this is our active channel and we're not the one leaving
      if (activeVoiceChannel && 
          activeVoiceChannel.id === data.channelId && 
          data.userId !== user.id &&
          leaveSoundRef.current) {
        // Reset the audio to the beginning and play it
        leaveSoundRef.current.currentTime = 0;
        leaveSoundRef.current.play().catch(err => {
          console.error('Error playing leave sound:', err);
        });
      }
      
      // Remove from participants list
      setVoiceParticipants(prev => 
        prev.filter(p => !(p.user_id === data.userId && p.channel_id === data.channelId))
      );
      
      // If we have a peer connection to this user, clean it up
      if (peers[data.userId]) {
        // Use our helper function to safely destroy the peer
        safelyDestroyPeer(peers[data.userId], data.userId, destroyedPeersRef);
        
        // Remove the audio element
        const audioElement = document.getElementById(`remote-audio-${data.userId}`);
        if (audioElement) {
          try {
            audioElement.remove();
          } catch (err) {
            console.error('Error removing audio element:', err);
          }
        }
        
        // Remove from peers state with a small delay to allow cleanup
        setTimeout(() => {
          setPeers(prev => {
            const newPeers = { ...prev };
            delete newPeers[data.userId];
            return newPeers;
          });
        }, 200);
      }
    };
    
    // Handle voice participants list
    const handleVoiceParticipants = (data) => {
      if (data.channelId === activeVoiceChannel?.id) {
        setVoiceParticipants(data.participants);
      }
    };
    
    // Handle WebRTC signaling
    const handleVoiceSignal = (data) => {
      console.log('Received voice signal:', data);
      
      // If the signal is for us and we're in the same channel
      if (data.channelId === activeVoiceChannel?.id && data.fromUserId !== user.id) {
        
        // If we already have a peer for this user and it's not in the destroyed list
        if (peers[data.fromUserId] && !destroyedPeersRef.current.has(data.fromUserId)) {
          console.log('Signaling existing peer for user:', data.fromUserId);
          try {
            peers[data.fromUserId].signal(data.signal);
          } catch (err) {
            console.error('Error signaling peer, it may have been destroyed:', err);
            // Mark this peer as destroyed to prevent future signaling attempts
            destroyedPeersRef.current.add(data.fromUserId);
          }
        } else {
          // Check if we have a valid stream
          if (!localStream || !localStream.active) {
            console.error('Cannot create peer connection: localStream is not available or not active');
            return;
          }
          
          // Create a new peer with optimized settings
          console.log('Creating new non-initiator peer for user:', data.fromUserId);
          
          try {
            // Track connection start time for performance monitoring
            const connectionStartTime = performance.now();
            
            const peer = new SimplePeer({
              initiator: false,
              trickle: true, // Enable trickle ICE for faster connections
              stream: localStream,
              config: {
                iceServers: [
                  { urls: 'stun:stun.l.google.com:19302' },
                  { urls: 'stun:stun1.l.google.com:19302' },
                  { urls: 'stun:stun2.l.google.com:19302' },
                  { urls: 'stun:stun3.l.google.com:19302' },
                  { urls: 'stun:stun4.l.google.com:19302' }
                ],
                iceCandidatePoolSize: 10 // Pre-gather some ICE candidates
              }
            });
              
              peer.on('signal', signal => {
                console.log('Generated response signal for user:', data.fromUserId, signal);
                console.time('signaling-' + data.fromUserId);
                socket.emit('voice_signal', {
                  channelId: activeVoiceChannel.id,
                  targetUserId: data.fromUserId,
                  signal
                });
              });
              
              peer.on('stream', stream => {
                console.log('Received stream from user:', data.fromUserId, stream);
                // Create audio element for the remote stream
                createAudioElement(data.fromUserId, stream);
              });
              
              // Add error handling
              peer.on('error', err => {
                console.error('Peer connection error (non-initiator):', err);
              });
              
              // Monitor ICE connection state
              peer.on('iceStateChange', state => {
                console.log('ICE state change (non-initiator):', state);
              });
              
              // Monitor connection state with timing
              peer.on('connect', () => {
                console.timeEnd('signaling-' + data.fromUserId);
                const connectionTime = performance.now() - connectionStartTime;
                console.log('Peer connection established (non-initiator) with user:', data.fromUserId, 'in', connectionTime.toFixed(0), 'ms');
              });
              
              // Signal with the received data
              peer.signal(data.signal);
              
              // Add to peers state
              setPeers(prev => ({
                ...prev,
                [data.fromUserId]: peer
              }));
            } catch (err) {
              console.error('Error creating peer connection (non-initiator):', err);
            }
        }
      }
    };
    
    // Handle mute status changes
    const handleUserMuteChanged = (data) => {
      setVoiceParticipants(prev => 
        prev.map(p => 
          p.user_id === data.userId && p.channel_id === data.channelId
            ? { ...p, is_muted: data.isMuted }
            : p
        )
      );
    };
    
    socket.on('user_joined_voice', handleUserJoinedVoice);
    socket.on('user_left_voice', handleUserLeftVoice);
    socket.on('voice_participants', handleVoiceParticipants);
    socket.on('voice_signal', handleVoiceSignal);
    socket.on('user_mute_changed', handleUserMuteChanged);
    
    return () => {
      socket.off('user_joined_voice', handleUserJoinedVoice);
      socket.off('user_left_voice', handleUserLeftVoice);
      socket.off('voice_participants', handleVoiceParticipants);
      socket.off('voice_signal', handleVoiceSignal);
      socket.off('user_mute_changed', handleUserMuteChanged);
    };
  }, [socket, activeVoiceChannel, localStream, peers, user]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleMessageChange = (e) => {
    const value = e.target.value;
    if (value.length <= MAX_CHARS) {
      setNewMessage(value);
      setCharCount(value.length);
      
      // Save draft message to localStorage
      if (activeRoom) {
        localStorage.setItem(`chat_draft_${nodeId}_${activeRoom.id}`, value);
      }
    }
  };

    // Command execution function
    const executeCommand = async (parsedCommand) => {
      const { command, args } = parsedCommand;
      
      // Handle different commands
      switch (command) {
        case 'clear':
        case 'delete':
          // Check if user is admin
          if (!user?.is_admin) {
            // Add system message that only admins can use this command
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: 'Command failed: Admin privileges required',
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
            return;
          }
          
          try {
            let count = 'all';
            if (args.length > 0) {
              count = args[0].toLowerCase() === 'all' ? 'all' : parseInt(args[0], 10);
              if (count !== 'all' && (isNaN(count) || count <= 0)) {
                setMessages(prev => [...prev, {
                  id: 'system-' + Date.now(),
                  username: 'System',
                  message: 'Invalid count. Usage: /clear [count|all]',
                  created_at: new Date().toISOString(),
                  isSystem: true
                }]);
                return;
              }
            }
            
            // Call the API to delete messages
            const token = localStorage.getItem('auth_token');
            const response = await axios.delete(
              `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages?count=${count}`,
              { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // Add system message about successful deletion
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: `${response.data.count} messages have been deleted from this channel.`,
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
          } catch (error) {
            console.error('Failed to clear messages:', error);
            setMessages(prev => [...prev, {
              id: 'system-' + Date.now(),
              username: 'System',
              message: `Failed to clear messages: ${error.response?.data?.message || error.message}`,
              created_at: new Date().toISOString(),
              isSystem: true
            }]);
          }
          break;
          
        // Add other commands here in the future if needed
        
        default:
          // Unknown command
          setMessages(prev => [...prev, {
            id: 'system-' + Date.now(),
            username: 'System',
            message: `Unknown command: /${command}`,
            created_at: new Date().toISOString(),
            isSystem: true
          }]);
      }
    };

    const handleSendMessage = async (e) => {
      e.preventDefault();
      if (!newMessage.trim() || !activeRoom) return;
  
      // Check if this is a command
      const parsedCommand = parseCommand(newMessage);
      if (parsedCommand) {
        // This is a command, handle it with executeCommand
        await executeCommand(parsedCommand);
        setNewMessage('');
        setCharCount(0);
        // Clear the draft message from localStorage
        localStorage.removeItem(`chat_draft_${nodeId}_${activeRoom.id}`);
        return;
      }
  
      // This is a regular message, send it to the server
      try {
        const token = localStorage.getItem('auth_token');
        await axios.post(
          `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/messages`,
          { message: newMessage },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setNewMessage('');
        setCharCount(0);
        // Clear the draft message from localStorage
        localStorage.removeItem(`chat_draft_${nodeId}_${activeRoom.id}`);
      } catch (error) {
        console.error('Failed to send message:', error);
      }
    };

  const handleCreateRoom = async (e) => {
    e.preventDefault();
    if (!newRoomName.trim()) return;

    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms`,
        { name: newRoomName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setRooms((prev) => [response.data, ...prev]);
      setNewRoomName('');
      setActiveRoom(response.data);
    } catch (error) {
      console.error('Failed to create room:', error);
    }
  };
  
  // Add new function to handle message deletion
  const handleDeleteMessage = async (messageId) => {
    try {
      const token = localStorage.getItem('auth_token');
      const endpoint = API_CONFIG.ENDPOINTS.CHAT_DELETE_MESSAGE.replace(':id', messageId);
      await axios.delete(
        `${API_CONFIG.BASE_URL}${endpoint}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      // The message will be removed from the UI when the socket event is received
      setActiveMenu(null); // Close the menu
    } catch (error) {
      console.error('Failed to delete message:', error);
    }
  };

  // Toggle menu function
  const toggleMenu = (messageId) => {
    setActiveMenu(activeMenu === messageId ? null : messageId);
  };

  const joinRoom = async (room) => {
    try {
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${room.id}/join`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setActiveRoom(room);
    } catch (error) {
      console.error('Failed to join room:', error);
    }
  };
  
  // Voice chat functions
  const createVoiceChannel = async (e) => {
    e.preventDefault();
    if (!newVoiceChannelName.trim() || !activeRoom) return;
    
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/chat/rooms/${activeRoom.id}/voice-channels`,
        { name: newVoiceChannelName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setVoiceChannels(prev => [response.data, ...prev]);
      setNewVoiceChannelName('');
    } catch (error) {
      console.error('Failed to create voice channel:', error);
    }
  };
  
  const joinVoiceChannel = async (channel) => {
    // If already in a voice channel, leave it first
    if (activeVoiceChannel) {
      await leaveVoiceChannel();
    }
    
    try {
      // Request microphone access
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      
      // Verify we have an active stream with audio tracks
      if (!stream || !stream.active || stream.getAudioTracks().length === 0) {
        console.error('Failed to get active audio stream');
        alert('Could not access microphone. Please check your permissions.');
        return;
      }
      
      // Set initial mute state
      stream.getAudioTracks()[0].enabled = !isMuted;
      
      // Store the stream
      setLocalStream(stream);
      
      // Set the active voice channel
      setActiveVoiceChannel(channel);
      
      // Join the channel via socket
      socket.emit('join_voice', { 
        channelId: channel.id,
        isMuted
      });
      
      console.log(`Joined voice channel: ${channel.name}`);
    } catch (error) {
      console.error('Failed to join voice channel:', error);
      alert('Could not access microphone. Please check your permissions.');
    }
  };
  
  const leaveVoiceChannel = async () => {
    if (!activeVoiceChannel || !socket) return;
    
    // Notify server
    socket.emit('leave_voice', activeVoiceChannel.id);
    
    // Clean up peer connections safely using our helper function
    try {
      // Get keys (user IDs) from the peers object to use with safelyDestroyPeer
      Object.entries(peers).forEach(([userId, peer]) => {
        safelyDestroyPeer(peer, userId, destroyedPeersRef);
      });
    } catch (err) {
      console.error('Error cleaning up peer connections:', err);
    }
    
    // Clear the destroyed peers set when leaving a channel
    destroyedPeersRef.current = new Set();
    
    // Delay setting peers to empty to allow cleanup to complete
    setTimeout(() => {
      setPeers({});
    }, 300);
    
    // Remove remote audio elements
    document.querySelectorAll('[id^="remote-audio-"]').forEach(el => {
      try {
        el.remove();
      } catch (err) {
        console.error('Error removing audio element:', err);
      }
    });
    
    // Stop local stream
    if (localStream) {
      try {
        localStream.getTracks().forEach(track => track.stop());
      } catch (err) {
        console.error('Error stopping local stream tracks:', err);
      }
      setLocalStream(null);
    }
    
    // Clear active voice channel
    setActiveVoiceChannel(null);
    setVoiceParticipants([]);
    
    console.log('Left voice channel');
  };
  
  const toggleMute = () => {
    if (!localStream) return;
    
    // Toggle mute state
    const newMuteState = !isMuted;
    setIsMuted(newMuteState);
    
    // Update audio track
    localStream.getAudioTracks()[0].enabled = !newMuteState;
    
    // Notify others
    if (socket && activeVoiceChannel) {
      socket.emit('voice_mute_toggle', {
        channelId: activeVoiceChannel.id,
        isMuted: newMuteState
      });
    }
  };

  return (
    <div className="flex h-full">
      {/* Room sidebar */}
      <div className="w-1/9 max-w-[20%] min-w-[10%] bg-stone-900 border-r border-stone-700 flex flex-col">
        {/* Text channels */}
        <div className="p-2 border-b border-stone-700">
          <h3 className="text-teal-400 font-medium text-sm">Text Channels</h3>
        </div>
        <div className="flex-1 overflow-y-auto">
          {rooms.map((room) => (
            <div
              key={room.id}
              className={`text-sm p-2 cursor-pointer hover:bg-stone-700 ${
                activeRoom?.id === room.id ? 'bg-stone-800' : ''
              }`}
              onClick={() => joinRoom(room)}
            >
              <div className="text-white">{room.name}</div>
            </div>
          ))}
        </div>
        
        {/* Voice channels
        {activeRoom && (
          <>
            <div className="p-2 border-t border-b border-stone-700 flex justify-between items-center">
              <h3 className="text-teal-400 font-medium text-sm">Voice Channels</h3>
            </div>   
            <div className="overflow-y-auto">
              {voiceChannels.map((channel) => (
                <div
                  key={channel.id}
                  className={`text-sm p-2 cursor-pointer hover:bg-stone-700 ${
                    activeVoiceChannel?.id === channel.id ? 'bg-stone-800' : ''
                  }`}
                >
                  <div 
                    className="text-white flex items-center justify-between"
                    onClick={() => activeVoiceChannel?.id === channel.id ? leaveVoiceChannel() : joinVoiceChannel(channel)}
                  >
                    <span>{channel.name}</span>
                    {activeVoiceChannel?.id === channel.id ? (
                      <PhoneOff size={16} className="text-red-500" />
                    ) : (
                      <Phone size={16} className="text-teal-400" />
                    )}
                  </div> 
                  
                  {voiceParticipants.length > 0 && channel.id === activeVoiceChannel?.id && (
                    <div className="mt-1 pl-2 border-l border-stone-700">
                      {voiceParticipants.map(participant => (
                        <div key={participant.user_id} className="flex items-center text-xs text-stone-400 py-1">
                          {participant.is_muted ? (
                            <MicOff size={12} className="mr-1 text-red-500" />
                          ) : (
                            <Mic size={12} className={`mr-1 ${speakingUsers.has(participant.user_id) ? 'text-teal-400 animate-pulse' : 'text-green-500'}`} />
                          )}
                          <span 
                            className={`${speakingUsers.has(participant.user_id) && !participant.is_muted ? 'text-teal-400 font-medium animate-pulse' : ''}`}
                            style={{
                              textShadow: speakingUsers.has(participant.user_id) && !participant.is_muted ? '0 0 10px rgba(20, 184, 166, 0.5)' : 'none'
                            }}
                          >
                            {participant.username}
                          </span>
                          {participant.user_id === user.id && (
                            <button 
                              onClick={(e) => {
                                e.stopPropagation();
                                toggleMute();
                              }}
                              className="ml-2 text-stone-400 hover:text-teal-400"
                              title={isMuted ? "Unmute" : "Mute"}
                            >
                              {isMuted ? <MicOff size={12} /> : <Mic size={12} />}
                            </button>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </>
        )}*/}
      </div>

      {/* Chat area */}
      <div className="flex-1 flex flex-col">
        {activeRoom ? (
          <>
            <div className="p-2 bg-stone-900 border-b border-stone-700 font-mono text-sm">
              <h3 className="text-teal-400 font-medium">{activeRoom.name}</h3>
            </div>
            <div className="flex-1 overflow-y-auto p-4 bg-stone-900">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className="mb-1"
                >
                  <div
                    className="hover:bg-stone-800 inline-block rounded-lg px-4 py-2 w-[100%] break-all overflow-wrap break-word hyphens-auto overflow-hidden whitespace-pre-wrap relative text-white"
                    style={{ wordBreak: 'break-word', overflowWrap: 'break-word' }}
                  >
                    <div className="text-teal-400 flex font-medium text-s mb-1">
                      {msg.username}
                      <div className="text-xs text-white opacity-75 mt-1 ml-3">
                        {(() => {
                          // Ensure UTC interpretation by appending 'Z' if not already present
                          const timestamp = msg.created_at.endsWith('Z') ? 
                            msg.created_at : 
                            msg.created_at + 'Z';
                          
                          const msgDate = new Date(timestamp);
                          
                          return msgDate.toLocaleTimeString('en-US', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: 'numeric',
                            minute: '2-digit',
                            timeZoneName: 'short',
                            hour12: false
                          });
                        })()}
                      </div>
                      
                      {/* Admin controls - only show if user is admin */}
                      {user?.is_admin && (
                        <div className="ml-auto">
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteMessage(msg.id);
                            }}
                            className="text-stone-400 hover:text-stone-300 focus:outline-none"
                            title="Delete message"
                          >
                            <Trash size={16} />
                          </button>
                        </div>
                      )}
                    </div>
                    <div>{msg.message}</div>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            <form
              onSubmit={handleSendMessage}
              className="p-2 bg-stone-900 border-t border-stone-700 flex"
            >
              <div className="flex-1 flex flex-col">
                <input
                  type="text"
                  value={newMessage}
                  onChange={handleMessageChange}
                  className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none focus:ring-1 focus:ring-teal-400"
                  maxLength={MAX_CHARS}
                />
              </div>
            </form>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-stone-900">
            <div className="text-stone-500">
              Select a channel to start chatting
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatWindow;

================
File: src/components/windows/DiceRollGif.jsx
================
import React, { useEffect, useRef, useState } from 'react';

/**
 * Component to display dice roll GIF with animation completion detection
 */
const DiceRollGif = ({ src, onAnimationComplete }) => {
  const imgRef = useRef(null);
  const [isLoaded, setIsLoaded] = useState(false);
  
  // When the image loads, start tracking animation completion
  const handleImageLoad = () => {
    setIsLoaded(true);
  };
  
  // Effect to handle animation completion
  useEffect(() => {
    if (!isLoaded || !imgRef.current) return;
    
    // Create a temporary canvas to analyze the GIF
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Set a timeout that slightly exceeds typical GIF durations
    // This is a fallback in case we can't detect the exact animation end
    const timeoutId = setTimeout(() => {
      onAnimationComplete();
    }, 3000); // 3 seconds should be enough for most dice roll animations
    
    // For a more accurate approach (future improvement):
    // We could load the GIF via a GIF parsing library to get exact duration
    // Or track the animation via requestAnimationFrame and pixel comparison

    return () => {
      clearTimeout(timeoutId);
    };
  }, [isLoaded, onAnimationComplete]);
  
  return (
    <img 
      ref={imgRef}
      src={src} 
      alt="Rolling dice" 
      className="inline-block max-w-full h-32"
      onLoad={handleImageLoad}
    />
  );
};

export default DiceRollGif;

================
File: src/components/windows/explorer/api/fileOperations.js
================
import API_CONFIG from '../../../../config/api';
import { convertUserFileNameToServer } from '../utils/fileUtils';

// Function to fetch public directory contents
export const fetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : publicPath;
    
    // Fetch public directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`Failed to load public files: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || [],
      isPublic: true
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    console.error('Error fetching public directory contents:', error);
    return {
      files: [],
      error: error.message || 'Failed to load public files. Please try again.'
    };
  }
};

// Function to fetch public file content
export const fetchPublicFileContent = async (filePath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch public file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    const data = await response.json();
    console.log(`[DEBUG] Public file fetch - Content received length: ${data.content?.length || 0} characters`);
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    console.error('[DEBUG] Error fetching public file content:', error);
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to fetch private directory contents from the server (admin only)
export const fetchDirectoryContents = async (path = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : path;
    
    // Fetch directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view files.');
      } else {
        throw new Error(`Failed to load files: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || []
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    return {
      files: [],
      error: error.message || 'Failed to load files. Please try again.'
    };
  }
};

// Function to fetch file content
export const fetchFileContent = async (filePath) => {
  console.log(`[DEBUG] fetchFileContent called with path: ${filePath}`);
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view file content.');
      } else {
        const errorText = await response.text();
        throw new Error(`Failed to load file content: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to save file content
export const saveFileContent = async (filePath, content) => {

  
  try {
    // Check if filePath is valid
    if (!filePath || filePath.trim() === '') {
      throw new Error('No file selected. Please select a file first.');
    }
    
    // Special handling for .map files to ensure rotation is included
    let contentToSave = content;
    if (filePath?.endsWith('.map') && typeof content === 'string') {
      // For map files, parse the JSON, process it, and re-stringify it
      try {
        const mapData = JSON.parse(content);
        
        // Ensure all cells have rotation property
        if (mapData.layers && Array.isArray(mapData.layers)) {
          mapData.layers.forEach(layer => {
            if (layer.cells && Array.isArray(layer.cells)) {
              layer.cells = layer.cells.map(cell => {
                // If rotation doesn't exist, add it with default value of 0
                if (cell.rotation === undefined) {
                  return { ...cell, rotation: 0 };
                }
                // Ensure rotation is a number
                if (typeof cell.rotation !== 'number') {
                  return { ...cell, rotation: Number(cell.rotation) };
                }
                return cell;
              });
            }
          });
        }
        
        // Use a custom replacer to guarantee rotation values are included
        contentToSave = JSON.stringify(mapData, (key, value) => {
          if (key === 'rotation') {
            return value === undefined ? 0 : Number(value);
          }
          return value;
        }, 2);
        
      } catch (parseError) {
        // If we can't parse, just use the original content
        contentToSave = content;
      }
    }
    
    // Create request body
    const requestBody = JSON.stringify({
      path: filePath,
      content: contentToSave
    });
    
    
    // Make the API request
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      },
      body: requestBody
    });
    
    
    const responseData = await response.json();
    
    if (!response.ok) {
      throw new Error(responseData.message || `Failed to save file: ${response.statusText}`);
    }
    
    console.log(`[DEBUG] saveFileContent - Success!`);
    return { 
      error: null,
      size: responseData.size,
      modified: responseData.modified
    };
  } catch (error) {
    console.error('[DEBUG] Error saving file:', error);
    return { error: error.message || 'Error saving file' };
  }
};

// Simple path join function for browser environment
const joinPaths = (...parts) => {
  // Filter out empty parts and normalize
  const normalized = parts.map(part => {
    if (part === undefined || part === null) return '';
    // Remove leading/trailing slashes
    return part.toString().replace(/^\/+|\/+$/g, '');
  }).filter(Boolean);
  
  // Join with slashes and add leading slash
  return '/' + normalized.join('/');
};

// Function to create a new file or folder
export const createNewItem = async (activeTab, activeFolderPath, newItemName, createType) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Determine if we're creating in the public folder or private folder
    const isPublicFolder = activeTab === 'public';
    
    // For files, convert user-facing filename to server filename (handles .txt -> .prosemirror)
    const serverItemName = createType === 'file' 
      ? convertUserFileNameToServer(newItemName.trim())
      : newItemName.trim();
    
    console.log(`[DEBUG] Creating ${createType}: User name="${newItemName}" -> Server name="${serverItemName}"`);
    
    // Construct the full path for the new item
    let newItemPath;
    if (isPublicFolder) {
      // For public folder, prefix with /public if not already included
      const publicPrefix = activeFolderPath.startsWith('/public') ? '' : '/public';
      // Remove any leading slash from activeFolderPath if it exists and if using publicPrefix
      const folderPath = publicPrefix && activeFolderPath.startsWith('/') 
        ? activeFolderPath.substring(1) 
        : activeFolderPath;
      newItemPath = joinPaths(publicPrefix, folderPath, serverItemName);
    } else {
      // For private folder (admin only)
      newItemPath = joinPaths(activeFolderPath, serverItemName);
    }
    
    // Create the new file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CREATE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        path: newItemPath,
        type: createType,
        content: createType === 'file' ? '' : undefined
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to create ${createType}: ${response.statusText}`);
    }
    
    return { 
      success: true, 
      path: newItemPath,
      error: null
    };
  } catch (error) {
    console.error(`Error creating ${createType}:`, error);
    return { 
      success: false, 
      path: null,
      error: error.message || `Failed to create ${createType}` 
    };
  }
};

// Function to rename a file or folder
export const renameItem = async (itemPath, newName) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Rename the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_RENAME}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        oldPath: itemPath,
        newName: newName.trim()
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to rename: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error renaming:', error);
    return { success: false, error: error.message || 'Failed to rename' };
  }
};

// Function to delete a file or folder
export const deleteItem = async (itemPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Delete the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_DELETE}?path=${encodeURIComponent(itemPath)}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to delete: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error deleting:', error);
    return { success: false, error: error.message || 'Failed to delete' };
  }
};

// Function to move a file or folder
// Function to get storage usage statistics
export const getStorageStats = async () => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch storage stats from the server
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STORAGE_STATS}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`Failed to load storage stats: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    return {
      quota: data.quota,
      used: data.used,
      available: data.available,
      unlimited: data.unlimited,
      error: null
    };
  } catch (error) {
    console.error('Error fetching storage stats:', error);
    return {
      quota: 0,
      used: 0,
      available: 0,
      unlimited: false,
      error: error.message || 'Failed to load storage stats'
    };
  }
};

export const moveItem = async (sourcePath, destinationPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Call the API to move the file
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        sourcePath,
        destinationPath
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to move: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error moving item:', error);
    return { success: false, error: error.message || 'Failed to move item' };
  }
};

================
File: src/components/windows/explorer/components/canvas/CanvasContainer.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  generateId, 
  isPointInNode, 
  createTextNode, 
  createEdge,
  calculateBestConnectionSides,
  getConnectionPoints,
  drawConnection,
  getCanvasColor
} from '../../utils/canvasUtils';
import TextNode from './TextNode';

/**
 * CanvasContainer handles the infinite canvas, viewport, and interactions
 */
const CanvasContainer = ({ 
  canvasData, 
  onChange,
  readOnly = false
}) => {
  // State for viewport and interaction
  const [scale, setScale] = useState(1);
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const [isPanning, setIsPanning] = useState(false);
  const [panStart, setPanStart] = useState({ x: 0, y: 0 });
  const [selectedNodeIds, setSelectedNodeIds] = useState([]);
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStart, setConnectionStart] = useState(null);
  const [hoveredNodeId, setHoveredNodeId] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [draggedNodeIds, setDraggedNodeIds] = useState([]);

  // Refs for canvas elements
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  const interactionLayerRef = useRef(null);

  // Get the currently selected node
  const selectedNode = canvasData.nodes.find(node => node.id === selectedNodeIds[0]);

  // Draw the canvas with nodes and edges
  const drawCanvas = useCallback(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const { width, height } = canvas;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Apply viewport transformation
    ctx.save();
    ctx.translate(offset.x, offset.y);
    ctx.scale(scale, scale);
    
    // Draw background grid (optional)
    ctx.strokeStyle = '#2a2a2a';
    ctx.lineWidth = 1 / scale;
    
    const gridSize = 20;
    const startX = Math.floor(-offset.x / scale / gridSize) * gridSize;
    const startY = Math.floor(-offset.y / scale / gridSize) * gridSize;
    const endX = Math.ceil((width - offset.x) / scale / gridSize) * gridSize;
    const endY = Math.ceil((height - offset.y) / scale / gridSize) * gridSize;
    
    // Draw vertical grid lines
    for (let x = startX; x <= endX; x += gridSize) {
      ctx.beginPath();
      ctx.moveTo(x, startY);
      ctx.lineTo(x, endY);
      ctx.stroke();
    }
    
    // Draw horizontal grid lines
    for (let y = startY; y <= endY; y += gridSize) {
      ctx.beginPath();
      ctx.moveTo(startX, y);
      ctx.lineTo(endX, y);
      ctx.stroke();
    }
    
    // Draw edges
    canvasData.edges.forEach(edge => {
      const sourceNode = canvasData.nodes.find(n => n.id === edge.fromNode);
      const targetNode = canvasData.nodes.find(n => n.id === edge.toNode);
      
      if (sourceNode && targetNode) {
        // Get connection points
        const points = getConnectionPoints(
          sourceNode, 
          targetNode, 
          edge.fromSide, 
          edge.toSide
        );
        
        // Draw the connection
        drawConnection(
          ctx, 
          points.source, 
          points.target, 
          getCanvasColor(edge.color),
          edge.fromEnd === 'arrow',
          edge.toEnd === 'arrow'
        );
      }
    });
    
    // Restore the context
    ctx.restore();
  }, [canvasData, offset, scale]);

  // Resize canvas to fit container
  const resizeCanvas = useCallback(() => {
    if (!containerRef.current || !canvasRef.current || !interactionLayerRef.current) return;
    
    const container = containerRef.current;
    const canvas = canvasRef.current;
    const interactionLayer = interactionLayerRef.current;
    
    // Set canvas size to match container
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    interactionLayer.width = container.clientWidth;
    interactionLayer.height = container.clientHeight;
    
    // Redraw canvas
    drawCanvas();
  }, [drawCanvas]);

  // Initialize and set up event listeners
  useEffect(() => {
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, [resizeCanvas]);

  // Redraw canvas when data changes
  useEffect(() => {
    drawCanvas();
  }, [canvasData, drawCanvas, selectedNodeIds, scale, offset]);

  // Handle mouse wheel for zooming
  const handleWheel = (e) => {
    e.preventDefault();
    
    const { deltaY } = e;
    const direction = deltaY > 0 ? -1 : 1;
    
    // Calculate zoom
    const factor = 0.1;
    const newScale = Math.max(0.1, scale * (1 + direction * factor));
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Calculate new offset to zoom around mouse position
    const newOffsetX = mouseX - (mouseX - offset.x) * (newScale / scale);
    const newOffsetY = mouseY - (mouseY - offset.y) * (newScale / scale);
    
    setScale(newScale);
    setOffset({ x: newOffsetX, y: newOffsetY });
  };

  // Handle mouse down for panning and selection
  const handleMouseDown = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Check if clicked on a node
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    if (nodeUnderMouse) {
      // Select the node
      if (e.shiftKey) {
        // Add to selection if holding shift
        setSelectedNodeIds(prev => 
          prev.includes(nodeUnderMouse.id) 
            ? prev.filter(id => id !== nodeUnderMouse.id) 
            : [...prev, nodeUnderMouse.id]
        );
      } else if (!selectedNodeIds.includes(nodeUnderMouse.id)) {
        // Replace selection
        setSelectedNodeIds([nodeUnderMouse.id]);
      }
      
      // Prepare for dragging
      setIsDragging(true);
      setDraggedNodeIds(selectedNodeIds.includes(nodeUnderMouse.id) 
        ? selectedNodeIds 
        : [nodeUnderMouse.id]
      );
    } else {
      // Start panning
      setIsPanning(true);
      setPanStart({ x: mouseX, y: mouseY });
      
      // Clear selection unless shift is held
      if (!e.shiftKey) {
        setSelectedNodeIds([]);
      }
    }
  };

  // Handle mouse move for panning and dragging
  const handleMouseMove = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Handle panning
    if (isPanning) {
      const deltaX = mouseX - panStart.x;
      const deltaY = mouseY - panStart.y;
      
      setOffset(prev => ({
        x: prev.x + deltaX,
        y: prev.y + deltaY
      }));
      
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Handle dragging
    if (isDragging && draggedNodeIds.length > 0 && !readOnly) {
      // Calculate the delta from last mouse position
      const lastMousePos = {
        x: (panStart.x - offset.x) / scale,
        y: (panStart.y - offset.y) / scale
      };
      
      const deltaX = canvasX - lastMousePos.x;
      const deltaY = canvasY - lastMousePos.y;
      
      // Update node positions
      const updatedNodes = canvasData.nodes.map(node => {
        if (draggedNodeIds.includes(node.id)) {
          return {
            ...node,
            x: node.x + deltaX,
            y: node.y + deltaY
          };
        }
        return node;
      });
      
      // Update canvas data
      onChange({
        ...canvasData,
        nodes: updatedNodes
      });
      
      // Update pan start
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Check for node under mouse for hover effect
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    setHoveredNodeId(nodeUnderMouse?.id || null);
  };

  // Handle mouse up to stop panning and dragging
  const handleMouseUp = () => {
    setIsPanning(false);
    setIsDragging(false);
    setDraggedNodeIds([]);
  };

  // Handle node selection
  const handleNodeSelect = (nodeId) => {
    setSelectedNodeIds([nodeId]);
  };

  // Handle node text change
  const handleNodeTextChange = (nodeId, text) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          text
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node resize
  const handleNodeResize = (nodeId, width, height) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          width,
          height
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node move
  const handleNodeMove = (nodeId, x, y) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          x,
          y
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Add a new text node at a specific position
  const addTextNode = (x, y, text = 'New note') => {
    if (readOnly) return;
    
    // Convert screen coordinates to canvas coordinates
    const canvasX = (x - offset.x) / scale;
    const canvasY = (y - offset.y) / scale;
    
    // Create a new node
    const newNode = createTextNode(canvasX, canvasY, text);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      nodes: [...canvasData.nodes, newNode]
    });
    
    // Select the new node
    setSelectedNodeIds([newNode.id]);
    
    // Start editing the new node
    setEditingNodeId(newNode.id);
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const connectNodes = (sourceId, targetId) => {
    if (readOnly) return;
    
    // Find the nodes
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) return;
    
    // Calculate best connection sides
    const { fromSide, toSide } = calculateBestConnectionSides(sourceNode, targetNode);
    
    // Create a new edge
    const newEdge = createEdge(sourceId, targetId, fromSide, toSide);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      edges: [...canvasData.edges, newEdge]
    });
    
    return newEdge.id;
  };

  // Delete selected nodes and their connections
  const deleteSelected = () => {
    if (readOnly || selectedNodeIds.length === 0) return;
    
    // Filter out selected nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !selectedNodeIds.includes(node.id)
    );
    
    // Filter out edges connected to deleted nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !selectedNodeIds.includes(edge.fromNode) && 
      !selectedNodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    onChange({
      ...canvasData,
      nodes: updatedNodes,
      edges: updatedEdges
    });
    
    // Clear selection
    setSelectedNodeIds([]);
  };

  // Start editing a node
  const startNodeEditing = (nodeId) => {
    setEditingNodeId(nodeId);
  };

  // Stop editing a node
  const stopNodeEditing = () => {
    setEditingNodeId(null);
  };

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-full overflow-hidden bg-stone-900"
      tabIndex={0} // Make container focusable for keyboard shortcuts
      onKeyDown={(e) => {
        // Delete key to remove selected nodes
        if (e.key === 'Delete' && !readOnly) {
          deleteSelected();
        }
      }}
    >
      {/* Canvas for rendering edges */}
      <canvas 
        ref={canvasRef}
        className="absolute top-0 left-0 w-full h-full"
      />
      
      {/* Interaction layer */}
      <canvas 
        ref={interactionLayerRef}
        className="absolute top-0 left-0 w-full h-full"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onDoubleClick={(e) => {
          if (readOnly) return;
          
          // Get mouse position
          const rect = canvasRef.current.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          // Add a new node at this position
          addTextNode(mouseX, mouseY);
        }}
      />
      
      {/* Node elements */}
      <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
        {canvasData.nodes.map(node => (
          node.type === 'text' && (
            <TextNode
              key={node.id}
              node={node}
              selected={selectedNodeIds.includes(node.id)}
              onSelect={handleNodeSelect}
              onChange={handleNodeTextChange}
              onResize={handleNodeResize}
              onMove={handleNodeMove}
              scale={scale}
              isEditing={editingNodeId === node.id}
              onStartEditing={startNodeEditing}
              onStopEditing={stopNodeEditing}
            />
          )
        ))}
      </div>
      
      {/* Controls */}
      <div className="absolute bottom-4 right-4 flex flex-col gap-2 bg-stone-800 p-2 rounded shadow">
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(scale + 0.1)}
        >
          +
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(Math.max(0.1, scale - 0.1))}
        >
          -
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => {
            // Reset view
            setScale(1);
            setOffset({ x: 0, y: 0 });
          }}
        >
          Reset
        </button>
      </div>
    </div>
  );
};

export default CanvasContainer;

================
File: src/components/windows/explorer/components/canvas/CanvasEditor.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { 
  createEmptyCanvas, 
  createTextNode, 
  createEdge, 
  generateId 
} from '../../utils/canvasUtils';
import CanvasContainer from './CanvasContainer';
import { 
  Plus, 
  Save, 
  Trash2, 
  Type,
  Link as LinkIcon,
  ArrowRight
} from 'lucide-react';

/**
 * Canvas Editor component that implements the JSONCanvas format
 * This is the main component for editing .canvas files
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasData, setCanvasData] = useState(createEmptyCanvas());
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeText, setNewNodeText] = useState('');
  const [showConnectionCreator, setShowConnectionCreator] = useState(false);
  const [connectionNodes, setConnectionNodes] = useState({ source: '', target: '' });

  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const parsed = JSON.parse(fileContent);
        
        // Check if it has the basic JSONCanvas structure
        if (parsed.nodes || parsed.edges) {
          setCanvasData({
            nodes: parsed.nodes || [],
            edges: parsed.edges || []
          });
          
          // Extract canvas name from file path
          if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          setCanvasData(createEmptyCanvas());
          console.warn('Invalid canvas format, creating new canvas');
        }
        
        setError(null);
      } else {
        // Create a new canvas if no content
        setCanvasData(createEmptyCanvas());
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      setCanvasData(createEmptyCanvas());
    } finally {
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);

  // Save canvas to file
  const handleSaveCanvas = useCallback(() => {
    if (!selectedFile) return;
    
    try {
      // Set status to saving
      setSaveStatus('saving');
      
      // Convert canvasData to proper format for saving
      // Make sure to remove any runtime-only properties
      const saveData = {
        nodes: canvasData.nodes.map(node => ({
          id: node.id,
          type: node.type,
          x: node.x,
          y: node.y,
          width: node.width,
          height: node.height,
          text: node.text,
          color: node.color
        })),
        edges: canvasData.edges.map(edge => ({
          id: edge.id,
          fromNode: edge.fromNode,
          toNode: edge.toNode,
          fromSide: edge.fromSide,
          toSide: edge.toSide,
          fromEnd: edge.fromEnd,
          toEnd: edge.toEnd,
          color: edge.color
        }))
      };
      
      // Serialize to JSON
      const jsonData = JSON.stringify(saveData, null, 2);
      
      // Call parent onSave function
      onSave(jsonData);
      
      // Update status
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  }, [canvasData, selectedFile, onSave]);

  // Auto-save when canvas data changes
  useEffect(() => {
    if (canvasData.nodes.length > 0 || canvasData.edges.length > 0) {
      // Only trigger auto-save if we have content
      const timer = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
      
      return () => clearTimeout(timer);
    }
  }, [canvasData, handleSaveCanvas]);

  // Add a new node to the canvas
  const addNode = (type, text) => {
    // Create a node positioned in the center of the visible area
    const centerX = 100;
    const centerY = 100;
    
    let newNode;
    if (type === 'text') {
      newNode = createTextNode(centerX, centerY, text || 'New note');
    } else {
      // Default to text node
      newNode = createTextNode(centerX, centerY, text || 'New note');
    }
    
    // Add node to canvas data
    setCanvasData(prev => ({
      ...prev,
      nodes: [...prev.nodes, newNode]
    }));
    
    // Reset UI state
    setShowNodeCreator(false);
    setNewNodeText('');
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const createConnection = (sourceId, targetId) => {
    // Find nodes to connect
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) {
      setError('Could not find one or both nodes to connect.');
      return;
    }
    
    // Create the edge and add it to canvas data
    const newEdge = createEdge(sourceId, targetId);
    
    setCanvasData(prev => ({
      ...prev,
      edges: [...prev.edges, newEdge]
    }));
    
    // Reset UI state
    setShowConnectionCreator(false);
    setConnectionNodes({ source: '', target: '' });
    
    return newEdge.id;
  };

  // Delete selected nodes
  const handleDeleteSelected = (nodeIds) => {
    if (!nodeIds || nodeIds.length === 0) return;
    
    // Remove nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !nodeIds.includes(node.id)
    );
    
    // Remove edges connected to those nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !nodeIds.includes(edge.fromNode) && 
      !nodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    setCanvasData({
      nodes: updatedNodes,
      edges: updatedEdges
    });
  };

  // Handle canvas data changes from CanvasContainer
  const handleCanvasChange = (newData) => {
    setCanvasData(newData);
    setSaveStatus('saving');
  };

  // If the canvas is still loading, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => setShowNodeCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Note
          </button>
          
          <button 
            onClick={() => setShowConnectionCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Create connection"
          >
            <ArrowRight size={14} />
            Connect
          </button>
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => addNode('text', newNodeText)}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Connection creator dialog */}
      {showConnectionCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              Create Connection
            </span>
            <button
              onClick={() => setShowConnectionCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">From Node:</label>
              <select
                value={connectionNodes.source}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, source: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select source node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">To Node:</label>
              <select
                value={connectionNodes.target}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, target: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select target node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex justify-end">
              <button
                onClick={() => createConnection(connectionNodes.source, connectionNodes.target)}
                disabled={!connectionNodes.source || !connectionNodes.target}
                className={`px-2 py-1 rounded text-xs ${
                  connectionNodes.source && connectionNodes.target
                    ? 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                    : 'bg-stone-600 text-stone-400 cursor-not-allowed'
                }`}
              >
                Connect
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas container */}
      <div className="flex-1 overflow-hidden">
        <CanvasContainer 
          canvasData={canvasData}
          onChange={handleCanvasChange}
          onDeleteSelected={handleDeleteSelected}
        />
      </div>
      
      {/* Status indicator */}
      <div className="px-2 py-1 border-t border-stone-700 bg-stone-800 text-xs flex justify-between">
        <span>
          {canvasData.nodes.length} nodes, {canvasData.edges.length} connections
        </span>
        <span>
          {saveStatus === 'saving' && <span className="text-yellow-400">Saving...</span>}
          {saveStatus === 'saved' && <span className="text-green-400">Saved</span>}
          {saveStatus === 'error' && <span className="text-red-400">Error saving!</span>}
        </span>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: src/components/windows/explorer/components/canvas/TextNode.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { getCanvasColor } from '../../utils/canvasUtils';

/**
 * TextNode component renders an individual text node in the canvas
 */
const TextNode = ({
  node,
  selected,
  onSelect,
  onChange,
  onResize,
  onMove,
  scale,
  isEditing,
  onStartEditing,
  onStopEditing
}) => {
  const [localText, setLocalText] = useState(node.text || '');
  const textareaRef = useRef(null);
  const nodeRef = useRef(null);
  const resizeHandleRef = useRef(null);
  const [isResizing, setIsResizing] = useState(false);
  const [initialSize, setInitialSize] = useState({ width: 0, height: 0 });
  const [initialPosition, setInitialPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });

  // Update local text when node text changes
  useEffect(() => {
    setLocalText(node.text || '');
  }, [node.text]);

  // Focus the textarea when editing starts
  useEffect(() => {
    if (isEditing && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [isEditing]);

  // Handle mouse down for node selection and drag start
  const handleMouseDown = (e) => {
    e.stopPropagation();
    
    // Select this node
    onSelect(node.id);
    
    // If not already editing, prepare for dragging
    if (!isEditing) {
      setIsDragging(true);
      setInitialPosition({ x: node.x, y: node.y });
      setDragOffset({
        x: e.clientX / scale - node.x,
        y: e.clientY / scale - node.y
      });
    }
  };

  // Handle mouse down on resize handle
  const handleResizeMouseDown = (e) => {
    e.stopPropagation();
    
    // Start resizing
    setIsResizing(true);
    setInitialSize({ width: node.width, height: node.height });
    setInitialPosition({ x: e.clientX, y: e.clientY });
  };

  // Handle text change
  const handleTextChange = (e) => {
    const newText = e.target.value;
    setLocalText(newText);
    onChange(node.id, newText);
  };

  // Handle double click to start editing
  const handleDoubleClick = (e) => {
    e.stopPropagation();
    
    // Start editing
    if (!isEditing) {
      onStartEditing(node.id);
    }
  };

  // Handle blur to stop editing
  const handleBlur = () => {
    if (isEditing) {
      onStopEditing();
    }
  };

  // Get the background color
  const bgColor = getCanvasColor(node.color) || '#1e293b';
  const borderColor = selected ? '#14b8a6' : '#334155';

  return (
    <div
      ref={nodeRef}
      className="absolute select-none"
      style={{
        left: node.x,
        top: node.y,
        width: node.width,
        height: node.height,
        transform: `scale(${scale})`,
        transformOrigin: 'top left',
        zIndex: selected ? 10 : 1
      }}
      onMouseDown={handleMouseDown}
      onDoubleClick={handleDoubleClick}
    >
      <div
        className="w-full h-full rounded-md overflow-hidden flex flex-col"
        style={{
          backgroundColor: bgColor,
          border: `2px solid ${borderColor}`,
          boxShadow: selected ? '0 0 0 2px rgba(20, 184, 166, 0.5)' : 'none'
        }}
      >
        {isEditing ? (
          <textarea
            ref={textareaRef}
            className="w-full h-full p-2 bg-transparent text-white resize-none focus:outline-none"
            value={localText}
            onChange={handleTextChange}
            onBlur={handleBlur}
          />
        ) : (
          <div className="w-full h-full p-2 text-white overflow-auto whitespace-pre-wrap">
            {localText}
          </div>
        )}
        
        {/* Resize handle - only show when selected */}
        {selected && (
          <div
            ref={resizeHandleRef}
            className="absolute bottom-0 right-0 w-4 h-4 bg-teal-500 rounded-tl-md cursor-nwse-resize"
            onMouseDown={handleResizeMouseDown}
          />
        )}
      </div>
    </div>
  );
};

export default TextNode;

================
File: src/components/windows/explorer/components/CanvasEditor.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel
} from 'reactflow';
import 'reactflow/dist/style.css';
import { 
  Plus, 
  Save, 
  FileText, 
  Trash2, 
  Type,
  Square,
  Link as LinkIcon,
  Edit,
} from 'lucide-react';

// Import node types from the node registry
import nodeTypes from './nodes';

/**
 * Canvas Editor component for use within the FileContent area
 * This component handles the editing of .canvas files in the file explorer
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // ReactFlow states
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  // UI states
  const [selectedElements, setSelectedElements] = useState([]);
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeType, setNewNodeType] = useState('text');
  const [newNodeText, setNewNodeText] = useState('');
  const [editingNode, setEditingNode] = useState(null);
  
  // For auto-save functionality
  const saveTimeoutRef = useRef(null);
  
  // Setup custom node types with required props
  const customNodeTypes = {};
  
  // Add the TextNode and pass required props
  customNodeTypes.text = (props) => {
    // Create a handler for text updates
    const handleNodeTextChange = (nodeId, newText) => {
      setNodes((nds) => 
        nds.map((node) => {
          if (node.id === nodeId) {
            return {
              ...node,
              data: {
                ...node.data,
                text: newText
              }
            };
          }
          return node;
        })
      );
    };
    
    // Add the onChange handler to node data
    const nodeWithHandlers = {
      ...props,
      data: {
        ...props.data,
        onChange: handleNodeTextChange
      },
      editingNode: editingNode,
      setEditingNode: setEditingNode
    };
    
    // Use the TextNode component from the registry
    return React.createElement(nodeTypes.text, nodeWithHandlers);
  };
  
  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const canvasData = JSON.parse(fileContent);
        
        if (canvasData.nodes && canvasData.edges) {
          // Transform nodes from JSONCanvas format to ReactFlow format
          const transformedNodes = canvasData.nodes.map(node => {
            // Check if node has position as an object or direct x/y properties
            const nodeX = node.position?.x !== undefined ? node.position.x : (node.x || 0);
            const nodeY = node.position?.y !== undefined ? node.position.y : (node.y || 0);
            
            return {
              id: node.id,
              type: node.type,
              // For ReactFlow, use position property
              position: {
                x: nodeX,
                y: nodeY
              },
              // Preserve data, or create default data object with text if not present
              data: node.data || { text: node.text || "Text node" }
            };
          });
          
          console.log('[DEBUG] Transformed nodes:', transformedNodes.length);
          setNodes(transformedNodes);
          setEdges(canvasData.edges);
          
          // Extract canvas name from file path or use from canvas data
          if (canvasData.name) {
            setCanvasName(canvasData.name);
          } else if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          createNewCanvas();
        }
        
        setIsLoading(false);
        setError(null);
      } else {
        // Create a new canvas if no content
        createNewCanvas();
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      createNewCanvas();
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);
  
  // Auto-save when node/edge data changes
  useEffect(() => {
    if (nodes.length > 0 || edges.length > 0) {
      // Only start auto-save if we have actual content
      
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [nodes, edges]);
  
  // Create a new canvas
  const createNewCanvas = () => {
    setNodes([]);
    setEdges([]);
    
    // Set canvas name from file if available
    if (selectedFile) {
      const pathParts = selectedFile.path.split('/');
      const fileName = pathParts[pathParts.length - 1];
      setCanvasName(fileName.replace('.canvas', ''));
    } else {
      setCanvasName('Untitled Canvas');
    }
    
    setSaveStatus('saved');
  };
  
  // Save canvas to file
  const handleSaveCanvas = () => {
    if (!selectedFile) return;
    
    try {
      // Transform nodes from ReactFlow format back to JSONCanvas format
      const transformedNodes = nodes.map(node => {
        // Extract position from ReactFlow format
        const nodePosition = node.position || { x: 0, y: 0 };
        
        return {
          id: node.id,
          type: node.type,
          // Store position in a position object for compatibility with JSONCanvas format
          position: {
            x: nodePosition.x,
            y: nodePosition.y
          },
          // Preserve the data object
          data: node.data
        };
      });
      
      // Create canvas data structure
      const canvasData = {
        name: canvasName,
        nodes: transformedNodes,
        edges,
        version: "1.0",
        metadata: {
          created: new Date().toISOString(),
          modified: new Date().toISOString()
        }
      };
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Canvas Editor - Saving canvas data:', {
        nodesLength: transformedNodes.length,
        edgesLength: edges.length,
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Serialize to JSON string
      const canvasContent = JSON.stringify(canvasData, null, 2);
      
      // Call the parent onSave function
      onSave(canvasContent);
      
      // Update state
      setSaveStatus('saved');
      setError(null);
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  };
  
  // Handle connection (edge) creation
  const onConnect = useCallback((params) => {
    // Create a custom edge with styling and ID
    setEdges((eds) => addEdge({
      ...params,
      id: `edge-${Date.now()}`,
      type: 'default',
      animated: false,
      style: { stroke: '#14b8a6' }
    }, eds));
  }, [setEdges]);
  
  // Handle node selection
  const onSelectionChange = useCallback(({ nodes, edges }) => {
    setSelectedElements([...nodes, ...edges]);
  }, []);
  
  // Handle drag over for node creation
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);
  
  // Handle drop for node creation
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      
      const type = event.dataTransfer.getData('application/reactflow/type');
      if (!type || !reactFlowInstance) return;
      
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });
      
      const newNode = {
        id: `node-${Date.now()}`,
        type,
        position,
        data: { text: 'New text node' },
      };
      
      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance, setNodes]
  );
  
  // Create a new node
  const createNode = (type) => {
    if (!reactFlowInstance) return;
    
    // If we have a viewport, center the node in the visible area
    const position = reactFlowInstance.project({
      x: window.innerWidth / 2,
      y: window.innerHeight / 2
    });
    
    const newNode = {
      id: `node-${Date.now()}`,
      type,
      position,
      data: { text: newNodeText || 'New text node' }
    };
    
    // Add the node and immediately set it to edit mode
    setNodes((nds) => {
      const updatedNodes = nds.concat(newNode);
      setTimeout(() => {
        setEditingNode(newNode.id);
      }, 100);
      return updatedNodes;
    });
    
    setShowNodeCreator(false);
    setNewNodeText('');
  };
  
  // Delete selected elements
  const deleteSelected = () => {
    const selectedNodeIds = selectedElements
      .filter(el => el.type !== 'default')
      .map(el => el.id);
    
    const selectedEdgeIds = selectedElements
      .filter(el => el.type === 'default')
      .map(el => el.id);
    
    setNodes(nodes.filter(node => !selectedNodeIds.includes(node.id)));
    setEdges(edges.filter(edge => !selectedEdgeIds.includes(edge.id)));
    setSelectedElements([]);
  };
  
  // If canvas data isn't loaded yet, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('text');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Node
          </button>
          
          {/* Edit button - appears when a node is selected */}
          {selectedElements.length === 1 && selectedElements[0].type === 'text' && (
            <button 
              onClick={() => setEditingNode(selectedElements[0].id)}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Edit selected node"
            >
              <Edit size={14} />
              Edit
            </button>
          )}
          
          {selectedElements.length > 0 && (
            <button 
              onClick={deleteSelected}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Delete selected"
            >
              <Trash2 size={14} />
              Delete
            </button>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => createNode('text')}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas area */}
      <div className="flex-1 overflow-hidden">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          connectionMode="loose"
          onConnect={onConnect}
          onInit={setReactFlowInstance}
          onDrop={onDrop}
          onDragOver={onDragOver}
          onSelectionChange={onSelectionChange}
          nodeTypes={customNodeTypes}
          fitView
          snapToGrid
          snapGrid={[15, 15]}
          defaultViewport={{ x: 0, y: 0, zoom: 1 }}
          minZoom={0.1}
          maxZoom={4}
          deleteKeyCode="Delete"
          multiSelectionKeyCode="Control"
          selectionKeyCode="Shift"
        >
          {/* Empty canvas help message */}
          {nodes.length === 0 && (
            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
              <div className="bg-stone-800 bg-opacity-80 p-6 rounded-lg shadow-lg text-center max-w-md">
                <Type size={40} className="mx-auto mb-4 text-teal-500" />
                <h3 className="text-xl text-teal-400 mb-2 font-semibold">Canvas Editor</h3>
                <p className="text-stone-300 mb-4">
                  This is your canvas workspace. Create notes and connect them with arrows.
                </p>
                <ul className="text-left text-stone-300 space-y-2 mb-4">
                  <li>• Click "Add Node" to create a new text node</li>
                  <li>• Hover over a node and click the edit button to edit content</li>
                  <li>• Drag from a node's connection handle (teal dot) to another node to create a connection</li>
                  <li>• Select nodes and press Delete or use the Delete button</li>
                </ul>
                <p className="text-stone-400 text-sm">
                  See canvas-editor-documentation.md for more details
                </p>
              </div>
            </div>
          )}
          <Background color="#44403c" gap={16} />
          <Controls showInteractive={false} />
          <MiniMap
            nodeColor={(node) => '#14b8a6'}
            maskColor="rgba(0, 0, 0, 0.5)"
            style={{ backgroundColor: '#292524' }}
          />
          
          <Panel position="top-left" className="bg-stone-800 p-2 rounded shadow-md">
            <div className="flex flex-col gap-1">
              <div className="text-xs text-stone-400">Drag to create:</div>
              <div 
                className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                draggable
                onDragStart={(event) => {
                  event.dataTransfer.setData('application/reactflow/type', 'text');
                  event.dataTransfer.effectAllowed = 'move';
                }}
              >
                <Type size={14} />
                <span className="text-xs">Text Node</span>
              </div>
            </div>
          </Panel>
        </ReactFlow>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: src/components/windows/explorer/components/CommandInput.jsx
================
import React from 'react';

const CommandInput = ({ focusRef, isAdmin, handleCommand }) => {
  // Handle command input
  const onKeyDown = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      handleCommand(cmd);
      e.target.value = '';
    }
  };

  return (
    <div className="p-2 flex items-center gap-2 border-t border-stone-700">
      <span className="text-teal-400">$</span>
      <input
        ref={focusRef}
        type="text"
        onKeyDown={onKeyDown}
        className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
      />
    </div>
  );
};

export default CommandInput;

================
File: src/components/windows/explorer/components/dialogs/FileDialogs.jsx
================
import React, { useRef, useEffect, useState } from 'react';
import { AVAILABLE_FILE_TYPES, convertServerFileNameToUser } from '../../utils/fileUtils';
import { 
  X, FileText, Code, Coffee, BookOpen, Globe, File, 
  Music, Image, Figma, Map 
} from 'lucide-react';

// Dialog for creating a new file or folder
export const CreateFileDialog = ({
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  errorMessage,
  closeCreateDialog,
  createNewItem
}) => {
  const createInputRef = useRef(null);
  const [showAutocomplete, setShowAutocomplete] = useState(false);
  const [filteredTypes, setFilteredTypes] = useState([]);
  const [selectedTypeIndex, setSelectedTypeIndex] = useState(0);
  
  // Get file type icon for autocomplete menu
  const getFileTypeIcon = (fileType) => {
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (fileType) {
      case 'txt': return <FileText {...iconProps} />;
      case 'md': return <FileText {...iconProps} />;
      case 'canvas': return <Figma {...iconProps} />;
      case 'map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showCreateDialog && createInputRef.current) {
      createInputRef.current.focus();
    }
  }, [showCreateDialog]);
  
  // Handle input change to detect periods and filter file types
  const handleInputChange = (e) => {
    const value = e.target.value;
    setNewItemName(value);
    
    // Only show autocomplete for files, not folders
    if (createType === 'file') {
      // Check if we should show autocomplete
      const lastPeriodIndex = value.lastIndexOf('.');
      if (lastPeriodIndex !== -1 && lastPeriodIndex < value.length) {
        const suffix = value.substring(lastPeriodIndex + 1);
        
        // Filter available types based on what user has typed after the period
        const filtered = AVAILABLE_FILE_TYPES.filter(type => 
          type.startsWith(suffix.toLowerCase())
        );
        
        setFilteredTypes(filtered);
        setShowAutocomplete(filtered.length > 0);
        setSelectedTypeIndex(0);
      } else {
        setShowAutocomplete(false);
      }
    }
  };
  
  // Function to select and apply a file type
  const selectFileType = (type) => {
    const lastPeriodIndex = newItemName.lastIndexOf('.');
    if (lastPeriodIndex !== -1) {
      // Replace everything after the period with the selected file type
      setNewItemName(newItemName.substring(0, lastPeriodIndex + 1) + type);
    }
    setShowAutocomplete(false);
  };
  
  // Handle key press in the create dialog
  const handleCreateKeyPress = (e) => {
    if (showAutocomplete) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev + 1) % filteredTypes.length
        );
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev - 1 + filteredTypes.length) % filteredTypes.length
        );
      } else if (e.key === 'Tab' || e.key === 'Enter') {
        e.preventDefault();
        selectFileType(filteredTypes[selectedTypeIndex]);
        if (e.key === 'Enter') {
          // If Enter was pressed and a type was selected, also create the item
          setTimeout(() => createNewItem(), 10);
        }
      } else if (e.key === 'Escape') {
        e.preventDefault();
        setShowAutocomplete(false);
      }
    } else if (e.key === 'Enter') {
      e.preventDefault();
      createNewItem();
    } else if (e.key === 'Escape') {
      closeCreateDialog();
    }
  };
  
  if (!showCreateDialog) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          {createType === 'file' ? 'New File' : 'New Folder'}
        </span>
        <button
          onClick={closeCreateDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2 relative">
        <div className="flex-1 relative">
          <input
            ref={createInputRef}
            type="text"
            value={newItemName}
            onChange={handleInputChange}
            onKeyDown={handleCreateKeyPress}
            placeholder={createType === 'file' ? 'filename.ext' : 'folder name'}
            className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            disabled={isCreating}
          />
          {showAutocomplete && (
            <div className="absolute bottom-full mb-1 w-full bg-stone-800 border border-stone-600 rounded shadow-lg z-50 max-h-32 overflow-y-auto">
              {filteredTypes.map((type, index) => (
                <div 
                  key={type}
                  onClick={() => selectFileType(type)}
                  className={`px-2 py-1 cursor-pointer text-sm flex items-center ${
                    index === selectedTypeIndex 
                      ? 'bg-stone-600 text-white' 
                      : 'hover:bg-stone-700 text-teal-400'
                  }`}
                >
                  {getFileTypeIcon(type)}
                  {type}
                </div>
              ))}
            </div>
          )}
        </div>
        <button
          onClick={createNewItem}
          disabled={isCreating || !newItemName.trim()}
          className={`px-2 py-1 rounded text-xs ${
            isCreating || !newItemName.trim()
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isCreating ? 'Creating...' : 'Create'}
        </button>
      </div>
    </div>
  );
};

// Dialog for renaming a file or folder
export const RenameDialog = ({
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  errorMessage,
  closeRenameDialog,
  renameItem
}) => {
  const renameInputRef = useRef(null);
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showRenameDialog && renameInputRef.current) {
      renameInputRef.current.focus();
    }
  }, [showRenameDialog]);
  
  // Handle key press in the rename dialog
  const handleRenameKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      renameItem();
    } else if (e.key === 'Escape') {
      closeRenameDialog();
    }
  };
  
  if (!showRenameDialog || !itemToRename) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Rename {itemToRename.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeRenameDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2">
        <input
          ref={renameInputRef}
          type="text"
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          onKeyDown={handleRenameKeyPress}
          placeholder="New name"
          className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          disabled={isRenaming}
        />
        <button
          onClick={renameItem}
          disabled={isRenaming || !newName.trim() || newName === itemToRename.name}
          className={`px-2 py-1 rounded text-xs ${
            isRenaming || !newName.trim() || newName === itemToRename.name
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isRenaming ? 'Renaming...' : 'Rename'}
        </button>
      </div>
    </div>
  );
};

// Dialog for deleting a file or folder
export const DeleteDialog = ({
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  errorMessage,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  if (!showDeleteDialog || !itemToDelete) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Delete {itemToDelete.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeDeleteDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="mb-2 text-sm">
        <p>Are you sure you want to delete <span className="text-red-400 font-bold">{convertServerFileNameToUser(itemToDelete.name)}</span>?</p>
        {itemToDelete.type === 'directory' && (
          <p className="text-red-400 text-xs mt-1">This will delete all files and folders inside it!</p>
        )}
      </div>
      <div className="flex gap-2 justify-end">
        <button
          onClick={closeDeleteDialog}
          className="px-2 py-1 rounded text-xs bg-stone-700 hover:bg-stone-600"
        >
          Cancel
        </button>
        <button
          onClick={handleDeleteItem}
          disabled={isDeleting}
          className={`px-2 py-1 rounded text-xs ${
            isDeleting
              ? 'bg-red-900 text-red-300 cursor-not-allowed'
              : 'bg-red-700 text-red-100 hover:bg-red-600'
          }`}
        >
          {isDeleting ? 'Deleting...' : 'Delete'}
        </button>
      </div>
    </div>
  );
};

================
File: src/components/windows/explorer/components/FileContent.jsx
================
import React, { useRef, useEffect, useState } from 'react';
import { FileText, Edit, Eye, Download, Map, PanelLeftClose, PanelLeftOpen, Users } from 'lucide-react';
import { convertMarkdownToHtml } from '../utils/markdownUtils';
import { shouldUseProseMirrorEditor, convertServerFileNameToUser } from '../utils/fileUtils';
import MapEditor from './MapEditor';
import CanvasEditor from './CanvasEditor';
import ProseMirrorEditor from './ProseMirrorEditor';
import API_CONFIG from '../../../../config/api';

const FileContent = ({
  selectedFile,
  isContentLoading,
  fileContent,
  errorMessage,
  showPreview,
  editMode,
  saveStatus,
  converter,
  isAdmin,
  user,
  activeTab,
  isFileTreeCollapsed,
  toggleFileTreeCollapse,
  setFileContent,
  toggleEditMode,
  handleMarkdownChange,
  handleSaveFileContent,
  handleExportFile
}) => {
  const [currentParty, setCurrentParty] = useState(null);
  const [isLoadingMap, setIsLoadingMap] = useState(false);

  // Check if user has a party and is the creator
  useEffect(() => {
    const fetchCurrentParty = async () => {
      if (!user) return;

      try {
        // Get JWT token from localStorage
        const token = localStorage.getItem('auth_token');
        if (!token) return;

        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/current-party`, {
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const party = await response.json();
          setCurrentParty(party);
        } else {
          setCurrentParty(null);
        }
      } catch (error) {
        console.error('Error fetching current party:', error);
        setCurrentParty(null);
      }
    };

    fetchCurrentParty();
  }, [user]);

  // Handle loading map for party
  const handleLoadMapForParty = async () => {
    if (!selectedFile || !currentParty || !fileContent) {
      return;
    }

    try {
      setIsLoadingMap(true);

      // Parse the map data
      let mapData;
      try {
        mapData = JSON.parse(fileContent);
      } catch (parseError) {
        console.error('Error parsing map file:', parseError);
        alert('Error: Invalid map file format');
        return;
      }

      // Get JWT token from localStorage
      const token = localStorage.getItem('auth_token');
      if (!token) {
        alert('Authentication required. Please log in.');
        return;
      }

      // Send to the party load-map endpoint
      const response = await fetch(`${API_CONFIG.BASE_URL}/parties/${currentParty.id}/load-map`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          mapFilePath: selectedFile.path || selectedFile.name,
          mapData: mapData
        })
      });

      if (response.ok) {
        alert(`Map "${convertServerFileNameToUser(selectedFile.name)}" loaded successfully for party "${currentParty.name}"`);
      } else {
        const errorData = await response.json();
        alert(`Error loading map: ${errorData.message}`);
      }
    } catch (error) {
      console.error('Error loading map for party:', error);
      alert('Error loading map for party');
    } finally {
      setIsLoadingMap(false);
    }
  };

  // Debug logging

  // Add an effect to log when file content changes
  useEffect(() => {
  }, [fileContent]);

  // Add an effect to log when selected file changes
  useEffect(() => {
  }, [selectedFile]);
  
  // Add debugging for save file content function
  const wrappedHandleSaveFileContent = (content) => {

    
    // Call the original function
    handleSaveFileContent(content);
  };

  // Check if user can load maps (is party creator)
  const canLoadMap = currentParty && user && currentParty.creator_id === user.id;


  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {selectedFile ? (
        <>
          {/* Header with file name, status, and controls */}
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
            <div className="flex items-center">
              {/* File tree toggle button */}
              <button
                onClick={toggleFileTreeCollapse}
                className="p-1 rounded hover:bg-stone-700 text-teal-400 hover:text-teal-300 mr-3"
                title={isFileTreeCollapsed ? "Show File Tree" : "Hide File Tree"}
              >
                {isFileTreeCollapsed ? <PanelLeftOpen size={16} /> : <PanelLeftClose size={16} />}
              </button>
              
              <span className="mr-2">{convertServerFileNameToUser(selectedFile.name)}</span>
              {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
              {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
              {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
            </div>
            
            <div className="flex gap-2">
              {/* Export button - available for all file types */}
              <button 
                onClick={handleExportFile}
                className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
                title={`Export ${convertServerFileNameToUser(selectedFile.name)}`}
              >
                <Download size={14} />
                Export
              </button>

              {/* Load button - available for .map files when user is party creator */}
              {selectedFile.name.endsWith('.map') && canLoadMap && (
                <button 
                  onClick={handleLoadMapForParty}
                  disabled={isLoadingMap}
                  className="px-2 py-1 bg-amber-800 hover:bg-amber-700 disabled:bg-stone-600 disabled:cursor-not-allowed rounded text-xs flex items-center gap-1"
                  title={`Load map for party "${currentParty.name}"`}
                >
                  <Users size={14} />
                  {isLoadingMap ? 'Loading...' : 'Load'}
                </button>
              )}
              
              {/* Show save button for ProseMirror files (.txt/.prosemirror) to admins or users with file access (for private files) */}
              {/* {shouldUseProseMirrorEditor(selectedFile.name) && (isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <button 
                  onClick={() => handleSaveFileContent()}
                  className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs"
                  title="Save file"
                >
                  Save
                </button>
              )} */}
            </div>
          </div>
          
          {/* Error message */}
          {errorMessage && (
            <div className="p-2 bg-red-900 text-red-200 text-sm">
              {errorMessage}
            </div>
          )}
          
          {/* Content area - editor or preview based on file type */}
          {isContentLoading ? (
            <div className="flex-1 flex items-center justify-center">
              <span className="text-teal-300">Loading content...</span>
            </div>
          ) : selectedFile.name.endsWith('.canvas') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Canvas Editor for .canvas files - only for admin users and users with file access
            <CanvasEditor
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : selectedFile.name.endsWith('.map') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Map Editor for .map files - only for admin users and users with file access
            <MapEditor 
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : shouldUseProseMirrorEditor(selectedFile.name) && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // ProseMirror WYSIWYG Editor for .txt/.prosemirror files - admins and users with file access
            <ProseMirrorEditor
              content={fileContent}
              onChange={setFileContent}
              onSave={wrappedHandleSaveFileContent}
              placeholder="Start typing your document here..."
              readOnly={false}
            />
          ) : (
            // Preview mode for all other files and read-only markdown
            <div className="flex-1 overflow-auto p-4">
              <div className="markdown-preview text-teal-50">
                {selectedFile.name.endsWith('.md') ? (
                  <div 
                    dangerouslySetInnerHTML={{ 
                      __html: convertMarkdownToHtml(converter, fileContent) 
                    }} 
                    className="markdown-content"
                  />
                ) : (
                  <pre className="font-mono text-sm whitespace-pre-wrap">
                    {fileContent}
                  </pre>
                )}
              </div>
            </div>
          )}
        </>
      ) : (
        // No file selected
        <div className="flex items-center justify-center h-full text-stone-600">
          <div className="text-center">
            <FileText size={48} className="mx-auto mb-4" />
            <p>Select a file to view</p>
            <p className="text-xs mt-2">All file types are supported for viewing</p>
            {isAdmin && (
              <p className="text-xs mt-1">
                Admin users can edit text (.txt), map (.map), and canvas (.canvas) files
              </p>
            )}
            {!isAdmin && user && user.has_file_access && (
              <p className="text-xs mt-1">
                Users with file access can edit text (.txt), map (.map), and canvas (.canvas) files in the Private section
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default FileContent;

================
File: src/components/windows/explorer/components/FileTree.jsx
================
import React from 'react';
import { 
  FolderOpen, ChevronRight, ChevronDown, File, Coffee, Code, 
  BookOpen, FileText, Globe, Lock, FileEdit, Trash2, Music, Image, Figma,
  FolderPlus, Plus, Map
} from 'lucide-react';
import { getFileIconName, convertServerFileNameToUser } from '../utils/fileUtils';
import StorageStats from './StorageStats';
import { CreateFileDialog, RenameDialog, DeleteDialog } from './dialogs/FileDialogs';

const FileTree = ({ 
  files, 
  publicFiles, 
  activeTab,
  expandedFolders,
  currentPath,
  selectedFile,
  isTreeLoading,
  errorMessage,
  isAdmin,
  user,
  toggleFolder,
  handleFileSelect,
  openRenameDialog,
  openDeleteDialog,
  openCreateDialog,
  handleDragStart,
  handleDragOver,
  handleDragLeave,
  handleDrop,
  handleContainerDragOver,
  handleContainerDragLeave,
  handleContainerDrop,
  dropTarget,
  storageStats,
  // Dialog-related props
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  closeCreateDialog,
  createNewItem,
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  closeRenameDialog,
  renameItem,
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  
  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    const iconName = getFileIconName(fileName);
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (iconName) {
      case 'FileText': return <FileText {...iconProps} />;
      case 'Code': return <Code {...iconProps} />;
      case 'Coffee': return <Coffee {...iconProps} />;
      case 'BookOpen': return <BookOpen {...iconProps} />;
      case 'Globe': return <Globe {...iconProps} />;
      case 'Music': return <Music {...iconProps} />;
      case 'Image': return <Image {...iconProps} />;
      case 'Figma': return <Figma {...iconProps} />;
      case 'Map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    // Keep track of the path to the currently selected file to highlight its parent folder
    const selectedFilePath = selectedFile?.path || '';
    const selectedFileParentPath = selectedFile && selectedFile.type !== 'directory' ? 
      selectedFilePath.substring(0, selectedFilePath.lastIndexOf('/')) || '/' : '';
    
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        // A folder is considered active if it's the current path OR if it's the parent of the selected file
        const isActive = currentPath === item.path || (selectedFileParentPath === item.path);
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center justify-between py-1 px-1 rounded hover:bg-stone-700 cursor-pointer group ${
                isActive ? 'bg-stone-800 text-teal-300 font-bold' : 
                isExpanded ? 'text-teal-300' : 'text-teal-400'
              } ${dropTarget && dropTarget.path === item.path ? 'bg-teal-900 border border-teal-500' : ''}`}
              onClick={() => toggleFolder(item.path, item)}
              draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
              onDragStart={(e) => handleDragStart(e, item)}
              onDragOver={(e) => handleDragOver(e, item)}
              onDragLeave={(e) => handleDragLeave(e)}
              onDrop={(e) => handleDrop(e, item)}
            >
              <div className="flex items-center">
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                <FolderOpen size={16} className="ml-1 mr-2" />
                <span className="text-sm">{item.name}</span>
              </div>
              
              {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <div className="flex">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openRenameDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                    title="Rename folder"
                  >
                    <FileEdit size={14} />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openDeleteDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                    title="Delete folder"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              )}
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center justify-between py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 group ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
            draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
            onDragStart={(e) => handleDragStart(e, item)}
          >
            <div className="flex items-center">
              {getFileIcon(item.name)}
              <span className="text-sm">{convertServerFileNameToUser(item.name)}</span>
            </div>
            
            {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
              <div className="flex">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openRenameDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                  title="Rename file"
                >
                  <FileEdit size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openDeleteDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                  title="Delete file"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            )}
          </div>
        );
      }
    });
  };

  return (
    <div className="w-1/4 border-r border-stone-700 flex flex-col overflow-hidden">
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <span>FILES</span>
          
          {/* Tabs for switching between public and private files */}
          <div className="flex ml-4">
            <button
              onClick={() => {
                if (activeTab !== 'public') {
                  // First set the active tab, then select the root folder
                  handleFileSelect({ 
                    path: '/', 
                    type: 'directory', 
                    name: 'Root', 
                    isPublic: true,
                    setTab: 'public' // Add flag to explicitly set the tab
                  });
                }
              }}
              className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ${
                activeTab === 'public' 
                  ? 'bg-stone-700 text-teal-300' 
                  : 'bg-stone-800 hover:bg-stone-700'
              }`}
              title="Public files (readable by all users)"
            >
              <Globe size={14} />
              <span>Public</span>
            </button>
            
            {(isAdmin || (user && user.has_file_access)) && (
              <button
                onClick={() => {
                  if (activeTab !== 'private') {
                    // First set the active tab, then select the root folder
                    handleFileSelect({ 
                      path: '/', 
                      type: 'directory', 
                      name: 'Root',
                      setTab: 'private' // Add flag to explicitly set the tab
                    });
                  }
                }}
                className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ml-1 ${
                  activeTab === 'private' 
                    ? 'bg-stone-700 text-teal-300' 
                    : 'bg-stone-800 hover:bg-stone-700'
                }`}
                title="Private files (admin only)"
              >
                <Lock size={14} />
                <span>Private</span>
              </button>
            )}
          </div>
        </div>
        
        <div className="flex gap-2">
          {/* File creation buttons (admins for both tabs, users with file access only for private tab) */}
          {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
            <>
              <button
                onClick={() => openCreateDialog('file')}
                className="p-1 rounded hover:bg-stone-700 text-teal-400"
                title="Create new file"
              >
                <Plus size={16} />
              </button>
              <button
                onClick={() => openCreateDialog('directory')}
                className="p-1 rounded hover:bg-stone-700 text-teal-400"
                title="Create new folder"
              >
                <FolderPlus size={16} />
              </button>
            </>
          )}
        </div>
      </div>
      
      <div 
        className="flex-1 overflow-auto"
        onDragOver={handleContainerDragOver}
        onDragLeave={handleContainerDragLeave}
        onDrop={handleContainerDrop}
      >
        {isTreeLoading ? (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading files...</span>
          </div>
        ) : errorMessage ? (
          <div className="p-2 text-red-400">{errorMessage}</div>
        ) : (
          <div className="p-2 font-mono">
            {activeTab === 'public' ? (
              // Show public files to all users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Globe size={16} className="mr-2" />
                  <span className="text-sm font-bold">Public Files</span>
                </div>
                {publicFiles.length > 0 ? (
                  renderFileTree(publicFiles)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No public files available</div>
                )}
              </>
            ) : (
              // Show private files to admin users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Lock size={16} className="mr-2" />
                  <span className="text-sm font-bold">Private Files</span>
                </div>
                {files.length > 0 ? (
                  renderFileTree(files)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No private files available</div>
                )}
              </>
            )}
          </div>
        )}
      </div>
      
      <div className="p-2 border-t border-stone-700 text-xs">
        {selectedFile ? selectedFile.path : currentPath}
      </div>
      
      {/* Storage statistics display */}
      {(isAdmin || (user && user.has_file_access)) && (
        <StorageStats stats={storageStats} />
      )}
      
      {/* File operation dialogs */}
      <CreateFileDialog
        showCreateDialog={showCreateDialog}
        createType={createType}
        newItemName={newItemName}
        setNewItemName={setNewItemName}
        isCreating={isCreating}
        errorMessage={errorMessage}
        closeCreateDialog={closeCreateDialog}
        createNewItem={createNewItem}
      />
        
      <RenameDialog
        showRenameDialog={showRenameDialog}
        itemToRename={itemToRename}
        newName={newName}
        setNewName={setNewName}
        isRenaming={isRenaming}
        errorMessage={errorMessage}
        closeRenameDialog={closeRenameDialog}
        renameItem={renameItem}
      />
        
      <DeleteDialog
        showDeleteDialog={showDeleteDialog}
        itemToDelete={itemToDelete}
        isDeleting={isDeleting}
        errorMessage={errorMessage}
        closeDeleteDialog={closeDeleteDialog}
        handleDeleteItem={handleDeleteItem}
      />
    </div>
  );
};

export default FileTree;

================
File: src/components/windows/explorer/components/MapEditor.jsx
================
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Map, Save, FileDown } from 'lucide-react';
import { 
  createEmptyMap, 
  serializeMap, 
  parseMapFile, 
  convertMapToAscii, 
  convertAsciiToMap 
} from '../../mapeditor/utils/mapUtils';

// Import sub-components
import MapToolbar from '../../mapeditor/MapToolbar';
import MapCanvas from '../../mapeditor/MapCanvas';
import LayerPanel from '../../mapeditor/LayerPanel';
import TilePalette from '../../mapeditor/TilePalette';

/**
 * Map Editor component for use within the FileContent area
 * This component handles the editing of .map files in the file explorer
 */
const MapEditor = ({ fileContent, selectedFile, onSave }) => {
  // State for map data
  const [mapData, setMapData] = useState(null);
  const [currentLayer, setCurrentLayer] = useState(0);
  const [currentTool, setCurrentTool] = useState('floor'); // Default to floor instead of select
  const [isDirty, setIsDirty] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showAsciiModal, setShowAsciiModal] = useState(false);
  const [asciiContent, setAsciiContent] = useState('');
  const [asciiImportText, setAsciiImportText] = useState('');
  const [asciiModalMode, setAsciiModalMode] = useState('export'); // 'export' or 'import'
  const [selectedTileId, setSelectedTileId] = useState(0);
  const [selectedTilesetId, setSelectedTilesetId] = useState(null); // NEW: Add state for tileset ID
  const [selectedRotation, setSelectedRotation] = useState(0); // Add state for rotation
  const [selectedTileType, setSelectedTileType] = useState('floor'); // NEW: Add state for tile type
  const [showGrid, setShowGrid] = useState(true); // State for grid visibility
  const [brushSize, setBrushSize] = useState(1); // State for brush size
  
  // Use ref instead of state for the reset view function to avoid render-phase updates
  const resetViewFnRef = useRef(null);
  
  // References
  const autoSaveTimeoutRef = useRef(null);
  const isInitialLoadRef = useRef(true); // Track initial load to prevent layer reset during auto-save

  // Load map data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        const parsedMap = parseMapFile(fileContent);
        setMapData(parsedMap);
        
        // Only reset currentLayer on initial load, not on auto-saves
        if (isInitialLoadRef.current) {
          setCurrentLayer(0);
          isInitialLoadRef.current = false;
        }
        
        setIsDirty(false);
        setError(null);
      } else {
        // Create a new map if no content
        setMapData(createEmptyMap());
        setIsDirty(true);
      }
    } catch (err) {
      console.error('Error parsing map file:', err);
      setError('Failed to parse map file. Creating a new map.');
      setMapData(createEmptyMap());
      setIsDirty(true);
    }
  }, [fileContent]);
  
  // Auto-save when map data changes
  useEffect(() => {
    // If the map is dirty (has unsaved changes), auto-save after a delay
    if (isDirty && mapData) {
      // Clear any existing timeout
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      autoSaveTimeoutRef.current = setTimeout(() => {
        handleSaveMap();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [isDirty, mapData]);

  // Handler for saving the map
  const handleSaveMap = () => {
    if (!mapData) return;
    
    try {
      // Serialize the map data to JSON string
      const mapContent = serializeMap(mapData);
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Map Editor - Saving map data:', {
        mapDataExists: !!mapData,
        serializedLength: mapContent?.length,
        serializedPreview: mapContent?.substring(0, 100) + '...',
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Call the parent onSave function
      onSave(mapContent);
      
      // Update state
      setIsDirty(false);
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving map:', err);
      setError('Failed to save map file.');
      setSaveStatus('error');
    }
  };

  // Handler for map edits
  // UPDATED: Add tilesetId parameter to accept the tileset ID from MapCanvas
  const handleEdit = (x, y, tool, rotation, tileId = selectedTileId, tilesetId = selectedTilesetId) => {
    if (!mapData || !mapData.layers || !mapData.layers[currentLayer]) return;
    
    console.log('🔄 [Explorer MapEditor] handleEdit called:', {
      coordinates: { x, y },
      tool,
      rotation,
      tileId,
      tilesetId,
      selectedTileId,
      selectedTilesetId
    });
    
    // Clone the current map data to avoid direct state mutation
    const newMapData = { ...mapData };
    const layerData = { ...newMapData.layers[currentLayer] };
    
    // Find if the cell already exists in this layer
    const existingCellIndex = layerData.cells.findIndex(cell => cell.x === x && cell.y === y);
    
    if (tool === 'erase') {
      // If erasing and the cell exists, remove it
      if (existingCellIndex !== -1) {
        layerData.cells = layerData.cells.filter((_, index) => index !== existingCellIndex);
      }
    } else {
      // Create the cell data based on the tool type
      // Include the received rotation value and tilesetId
      let cellData = { x, y, type: tool, rotation: rotation || 0 }; // Default to 0 if rotation is undefined/falsy
      
      // CRITICAL FIX: Include the selected tile ID and tilesetId for shadow tiles as well!
      if (tool === 'floor' || tool === 'wall' || tool === 'shadow') {
        cellData.tileId = tileId;
        cellData.tilesetId = tilesetId; // NEW: Include tilesetId
        
        // For shadow tiles, add extra debug logging
        if (tool === 'shadow') {
          console.log(`MapEditor CRITICAL: Creating shadow tile at (${x}, ${y}) with tileId=${tileId}, tilesetId=${tilesetId}`);
        }
      }
      
      // If a cell already exists at this position, update it immutably
      if (existingCellIndex !== -1) {
        // Create a new array with the updated cell
        layerData.cells = layerData.cells.map((cell, index) => 
          index === existingCellIndex ? cellData : cell
        );
      } else {
        // Otherwise, add a new cell (already immutable via push to a cloned array)
        layerData.cells.push(cellData);
      }
    }
    
    // Update the layer in the map data
    newMapData.layers[currentLayer] = layerData;
    
    // Update state
    setMapData(newMapData);
    setIsDirty(true);
  };

  // NEW: Handler for tile selection from TilePalette (supports both tileId and tilesetId)
// NEW: Handler for tile selection from TilePalette (supports both tileId and tilesetId)
const handleSelectTile = (tileId, tilesetId = null) => {
  console.log('🟢 [Explorer MapEditor] handleSelectTile called:', { tileId, tilesetId });
  console.log('🔧 [Explorer MapEditor] SETTING STATE:', { 
    newTileId: tileId, 
    newTilesetId: tilesetId,
    previousTileId: selectedTileId,
    previousTilesetId: selectedTilesetId 
  });
  
  setSelectedTileId(tileId);
  setSelectedTilesetId(tilesetId);  // ← Make sure this line exists and works
  
  // Debug state after setting
  setTimeout(() => {
    console.log('🔍 [Explorer MapEditor] State after update:', { 
      selectedTileId, 
      selectedTilesetId 
    });
  }, 10);
};

  // Handler for rotation changes from TilePalette
  const handleRotateTile = (newRotation) => {
    setSelectedRotation(newRotation);
    // Note: We don't mark as dirty here, as rotation is a tool setting, not map data change
  };

  // NEW: Handler for changing tile type
  const handleChangeTileType = (tileType) => {
    setSelectedTileType(tileType);
    // When changing tile type, also change the current tool
    if (currentTool !== 'select' && currentTool !== 'erase') {
      setCurrentTool(tileType);
    }
  };

  // Layer management functions
  const handleToggleLayerVisibility = (layerIndex) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      visible: !newMapData.layers[layerIndex].visible
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  const handleAddLayer = () => {
    if (!mapData) return;
    
    const newLayerName = `Layer ${mapData.layers.length + 1}`;
    const newLayer = {
      name: newLayerName,
      visible: true,
      cells: []
    };
    
    const newMapData = { 
      ...mapData,
      layers: [...mapData.layers, newLayer]
    };
    
    setMapData(newMapData);
    setCurrentLayer(newMapData.layers.length - 1);
    setIsDirty(true);
  };

  const handleRemoveLayer = (layerIndex) => {
    if (!mapData || !mapData.layers || mapData.layers.length <= 1) return;
    
    const newMapData = { ...mapData };
    newMapData.layers = newMapData.layers.filter((_, index) => index !== layerIndex);
    
    setMapData(newMapData);
    
    // Adjust current layer if necessary
    if (currentLayer >= newMapData.layers.length) {
      setCurrentLayer(newMapData.layers.length - 1);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerUp = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex >= mapData.layers.length - 1) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex + 1]] = [layers[layerIndex + 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex + 1);
    } else if (currentLayer === layerIndex + 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerDown = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex <= 0) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex - 1]] = [layers[layerIndex - 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex - 1);
    } else if (currentLayer === layerIndex - 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleRenameLayer = (layerIndex, newName) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex] || !newName) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      name: newName
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // Handler for exporting to ASCII
  const handleExportAscii = () => {
    if (!mapData) return;
    
    try {
      // Convert the map data to ASCII
      const ascii = convertMapToAscii(mapData);
      setAsciiContent(ascii);
      setAsciiModalMode('export');
      setShowAsciiModal(true);
    } catch (err) {
      console.error('Error exporting to ASCII:', err);
      setError('Failed to export map to ASCII format.');
    }
  };

  // Handler for importing from ASCII
  const handleImportAscii = () => {
    setAsciiImportText('');
    setAsciiModalMode('import');
    setShowAsciiModal(true);
  };

  // Handler for confirming ASCII import
  const handleConfirmAsciiImport = () => {
    if (!asciiImportText.trim()) {
      setError('No ASCII content to import.');
      return;
    }
    
    try {
      // Convert ASCII to map data
      const newMapData = convertAsciiToMap(asciiImportText, mapData.name);
      
      // Preserve metadata from existing map if possible
      if (mapData.metadata) {
        newMapData.metadata = {
          ...newMapData.metadata,
          author: mapData.metadata.author || 'user',
          modified: new Date().toISOString()
        };
      }
      
      // Update the map data
      setMapData(newMapData);
      setIsDirty(true);
      setShowAsciiModal(false);
    } catch (err) {
      console.error('Error importing from ASCII:', err);
      setError('Failed to import ASCII map. The format may be invalid.');
    }
  };

  // Handler for downloading the ASCII map
  const handleDownloadAscii = () => {
    if (!asciiContent) return;
    
    try {
      // Create a blob with the ASCII content
      const blob = new Blob([asciiContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Create a temporary anchor element to trigger the download
      const a = document.createElement('a');
      a.href = url;
      a.download = `${mapData.name || 'map'}.txt`;
      
      // Append the anchor to the document, click it, and remove it
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      // Clean up by revoking the object URL
      URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Error downloading ASCII map:', err);
      setError('Failed to download ASCII map.');
    }
  };


  // Handler for applying map property changes
  const handleApplyProperties = (properties) => {
    if (!mapData) return;

    const newMapData = { 
      ...mapData,
      name: properties.name,
      width: properties.width,
      height: properties.height,
      gridSize: properties.gridSize
    };

    // Update map data
    setMapData(newMapData);
    setIsDirty(true);
  };
  
  // Handler for updating layer opacity
  const handleUpdateLayerOpacity = (layerIndex, opacity) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      opacity: opacity
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // If map data isn't loaded yet, show a loading state
  if (!mapData) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading map editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <MapToolbar 
        onSave={handleSaveMap}
        onUndo={() => console.log('Undo not implemented')}
        onRedo={() => console.log('Redo not implemented')}
        onClear={() => {
          // Create a new empty map but preserve properties like name, width, height, gridSize
          const newMap = createEmptyMap();
          newMap.name = mapData.name;
          newMap.width = mapData.width;
          newMap.height = mapData.height;
          newMap.gridSize = mapData.gridSize;
          // Preserve metadata if it exists
          if (mapData.metadata) {
            newMap.metadata = { ...mapData.metadata };
          }
          setMapData(newMap);
          setIsDirty(true);
        }}
        onExportAscii={handleExportAscii}
        onImportAscii={handleImportAscii}
        onToggleGrid={() => setShowGrid(!showGrid)}
        onResetView={() => {
          // Call the reset view function if it exists
          if (resetViewFnRef.current) {
            resetViewFnRef.current();
          }
        }}
        showGrid={showGrid}
        saveStatus={saveStatus}
        mapData={mapData}
        onApplyProperties={handleApplyProperties}
      />
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Main content area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Canvas for map editing */}
        <MapCanvas 
          mapData={mapData}
          currentLayer={currentLayer}
          currentTool={currentTool}
          selectedTileId={selectedTileId}
          selectedTilesetId={selectedTilesetId} // NEW: Pass tilesetId to canvas
          selectedRotation={selectedRotation} // Pass rotation state to canvas
          onEdit={handleEdit}
          showGrid={showGrid}
          resetViewRef={resetViewFnRef} // Pass ref instead of setter function
          brushSize={brushSize}
        />
        
        {/* Layer panel - UPDATED: Use new TilePalette if this layout supports it */}
        <div className="w-64 bg-stone-800 border-l border-stone-700 flex flex-col">
          {/* Layer Panel */}
          <LayerPanel 
            layers={mapData.layers}
            currentLayer={currentLayer}
            setCurrentLayer={setCurrentLayer}
            onToggleLayerVisibility={handleToggleLayerVisibility}
            onAddLayer={handleAddLayer}
            onRemoveLayer={handleRemoveLayer}
            onMoveLayerUp={handleMoveLayerUp}
            onMoveLayerDown={handleMoveLayerDown} 
            onRenameLayer={handleRenameLayer}
            onUpdateLayerOpacity={handleUpdateLayerOpacity}
            selectedTileId={selectedTileId}
            onSelectTile={handleSelectTile} // UPDATED: Use new handler that supports tilesetId
            selectedTilesetId={selectedTilesetId} // NEW: Pass tilesetId
            selectedRotation={selectedRotation} // Pass rotation state to LayerPanel
            onRotateTile={handleRotateTile} // Pass rotation handler to LayerPanel
            currentTool={currentTool}
            setCurrentTool={setCurrentTool}
            brushSize={brushSize}
            setBrushSize={setBrushSize}
          />
        </div>
      </div>
      
      
      {/* ASCII Modal */}
      {showAsciiModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
          <div className="bg-stone-800 border border-stone-700 rounded-lg shadow-lg w-full max-w-3xl max-h-[80vh] flex flex-col">
            <div className="flex justify-between items-center p-4 border-b border-stone-700">
              <h2 className="text-lg font-semibold text-teal-300">
                {asciiModalMode === 'export' ? 'ASCII Map Export' : 'Import ASCII Map'}
              </h2>
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="p-1 hover:bg-stone-700 rounded text-teal-400"
              >
                &times;
              </button>
            </div>
            
            <div className="p-4 flex-1 overflow-auto">
              {asciiModalMode === 'export' ? (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    This is the ASCII representation of your map. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <pre className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 whitespace-pre">
                    {asciiContent}
                  </pre>
                </div>
              ) : (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    Paste ASCII map content below. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <textarea 
                    className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 resize-none focus:outline-none focus:ring-1 focus:ring-teal-500"
                    value={asciiImportText}
                    onChange={e => setAsciiImportText(e.target.value)}
                    placeholder="Paste ASCII map here..."
                  />
                </div>
              )}
            </div>
            
            <div className="p-4 border-t border-stone-700 flex justify-end space-x-2">
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="px-4 py-2 bg-stone-700 hover:bg-stone-600 rounded text-teal-100"
              >
                Cancel
              </button>
              
              {asciiModalMode === 'export' ? (
                <button 
                  onClick={handleDownloadAscii}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100 flex items-center"
                >
                  <FileDown size={16} className="mr-2" />
                  Download ASCII
                </button>
              ) : (
                <button 
                  onClick={handleConfirmAsciiImport}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100"
                >
                  Import
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MapEditor;

================
File: src/components/windows/explorer/components/nodes/index.js
================
import TextNode from './TextNode';

/**
 * Node type registry
 * Export all node types from this file to easily import them elsewhere
 */

const nodeTypes = {
  // Add all node types here
  text: TextNode,
  // Additional node types can be added here in the future
};

export default nodeTypes;

================
File: src/components/windows/explorer/components/nodes/TextNode.jsx
================
import React, { useState } from 'react';
import { Edit } from 'lucide-react';
import { Handle, Position } from 'reactflow';

/**
 * TextNode component for displaying and editing text nodes in the canvas
 * This component is used in the Canvas Editor
 */
const TextNode = ({ id, data, isConnectable, setEditingNode, editingNode }) => {
  const isEditing = editingNode === id;
  const [isHovered, setIsHovered] = useState(false);
  
  const handleEditClick = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setEditingNode(id);
  };
  
  const handleEdit = (e) => {
    const updatedText = e.target.value;
    
    // Update the node data is handled by the parent component
    // through the setNodes function passed via data
    if (data.onChange) {
      data.onChange(id, updatedText);
    }
  };
  
  const handleBlur = () => {
    setEditingNode(null);
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      setEditingNode(null);
    } else if (e.key === 'Enter' && e.ctrlKey) {
      setEditingNode(null);
    }
  };
  
  return (
    <div 
      className="p-2 bg-stone-800 border border-stone-700 rounded shadow-md relative"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Handle 
        type="source" 
        position={Position.Top} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Bottom handle */}
      <Handle 
        type="source" 
        position={Position.Bottom} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Right handle */}
      <Handle 
        type="source" 
        position={Position.Right} 
        id="right"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Left handle */}
      <Handle 
        type="source" 
        position={Position.Left} 
        id="left"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />
      {isEditing ? (
        <textarea
          className="w-full h-full bg-stone-700 text-teal-400 p-2 rounded font-mono text-sm focus:outline-none resize-none min-h-[80px]"
          value={data.text}
          onChange={handleEdit}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          autoFocus
        />
      ) : (
        <>
          <div className="text-teal-400 text-sm whitespace-pre-wrap pr-6">{data.text}</div>
          {isHovered && (
            <button
              className="absolute top-1 right-1 bg-stone-700 p-1 rounded-sm hover:bg-stone-600 transition-colors"
              onClick={handleEditClick}
              title="Edit node"
            >
              <Edit size={14} className="text-teal-400" />
            </button>
          )}
        </>
      )}
    </div>
  );
};

export default TextNode;

================
File: src/components/windows/explorer/components/ProseMirrorEditor.css
================
/* ProseMirror Editor Styles */

.ProseMirror {
  outline: none;
  white-space: pre-wrap;
  word-wrap: break-word;
  background-color: #292524; /* stone-800 to match container */
  min-height: 100%;
}

/* Table Styles */
.ProseMirror table {
  border-collapse: collapse;
  table-layout: fixed;
  width: 100%;
  overflow: hidden;
  margin: 1rem 0;
  border: 1px solid #4c5563;
}

.ProseMirror td,
.ProseMirror th {
  min-width: 1em;
  border: 1px solid #4c5563;
  padding: 8px 12px;
  vertical-align: top;
  box-sizing: border-box;
  position: relative;
  background-color: #292524;
}

.ProseMirror th {
  font-weight: bold;
  text-align: left;
  background-color: #1c1917;
}

.ProseMirror .column-resize-handle {
  position: absolute;
  right: -2px;
  top: 0;
  bottom: 0;
  width: 4px;
  z-index: 20;
  background-color: #14b8a6;
  pointer-events: none;
}

.ProseMirror.resize-cursor {
  cursor: ew-resize;
  cursor: col-resize;
}

/* Selected cells */
.ProseMirror .selectedCell:after {
  z-index: 2;
  position: absolute;
  content: "";
  left: 0; right: 0; top: 0; bottom: 0;
  background: rgba(20, 184, 166, 0.3);
  pointer-events: none;
}

/* List Styles */
.ProseMirror ul,
.ProseMirror ol {
  padding-left: 1.5rem;
  margin: 0.5rem 0;
}

.ProseMirror li {
  margin: 0.25rem 0;
}

.ProseMirror li > p {
  margin: 0;
}

/* Blockquote Styles */
.ProseMirror blockquote {
  border-left: 4px solid #14b8a6;
  padding-left: 1rem;
  margin: 1rem 0;
  font-style: italic;
  color: #94a3b8;
}

/* Code Block Styles */
.ProseMirror pre {
  background: #1c1917;
  border: 1px solid #44403c;
  border-radius: 0.375rem;
  padding: 1rem;
  font-family: 'Courier New', Courier, monospace;
  white-space: pre;
  overflow-x: auto;
  margin: 1rem 0;
}

/* Inline Code Styles */
.ProseMirror code {
  background: #292524;
  border: 1px solid #44403c;
  border-radius: 0.25rem;
  padding: 0.125rem 0.25rem;
  font-family: 'Courier New', Courier, monospace;
  font-size: 0.875em;
  color: #14b8a6;
}

/* Heading Styles */
.ProseMirror h1 {
  font-size: 2rem;
  font-weight: bold;
  margin: 1.5rem 0 1rem 0;
  color: #f0fdfa;
  border-bottom: 2px solid #14b8a6;
  padding-bottom: 0.5rem;
}

.ProseMirror h2 {
  font-size: 1.75rem;
  font-weight: bold;
  margin: 1.25rem 0 0.75rem 0;
  color: #f0fdfa;
}

.ProseMirror h3 {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 1rem 0 0.5rem 0;
  color: #f0fdfa;
}

.ProseMirror h4 {
  font-size: 1.25rem;
  font-weight: bold;
  margin: 1rem 0 0.5rem 0;
  color: #f0fdfa;
}

.ProseMirror h5 {
  font-size: 1.125rem;
  font-weight: bold;
  margin: 0.75rem 0 0.5rem 0;
  color: #f0fdfa;
}

.ProseMirror h6 {
  font-size: 1rem;
  font-weight: bold;
  margin: 0.75rem 0 0.5rem 0;
  color: #94a3b8;
}

/* Paragraph Styles */
.ProseMirror p {
  margin: 0.5rem 0;
  line-height: 1.6;
}

/* Strong and Emphasis */
.ProseMirror strong {
  font-weight: bold;
  color: #f0fdfa;
}

.ProseMirror em {
  font-style: italic;
  color: #bef264;
}

/* Horizontal Rule */
.ProseMirror hr {
  border: none;
  border-top: 2px solid #44403c;
  margin: 2rem 0;
}

/* Selection Styles */
.ProseMirror-selectednode {
  outline: 2px solid #14b8a6;
  outline-offset: 2px;
}

/* Focus Styles */
.ProseMirror-focused {
  outline: none;
}

/* Placeholder when empty */
.ProseMirror p.is-editor-empty:first-child::before {
  content: attr(data-placeholder);
  float: left;
  color: #6b7280;
  pointer-events: none;
  height: 0;
}

/* Gapcursor for empty spaces */
.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid #14b8a6;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection {
  caret-color: transparent;
}

/* Link Styles */
.ProseMirror a {
  color: #14b8a6;
  text-decoration: underline;
}

.ProseMirror a:hover {
  color: #0f766e;
}

/* Table cell resize handle visibility */
.ProseMirror table:hover .column-resize-handle {
  background-color: #14b8a6;
}

/* Improve spacing for nested lists */
.ProseMirror li > ul,
.ProseMirror li > ol {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}

/* Code block language indicator if needed */
.ProseMirror pre[data-language]:before {
  content: attr(data-language);
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background: #44403c;
  color: #94a3b8;
  padding: 0.125rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

================
File: src/components/windows/explorer/components/ProseMirrorEditor.jsx
================
import React, { useEffect, useRef, useState } from 'react';
import { EditorState } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Schema, Node } from 'prosemirror-model';
import { schema } from 'prosemirror-schema-basic';
import { addListNodes } from 'prosemirror-schema-list';
import { keymap } from 'prosemirror-keymap';
import { history, undo, redo } from 'prosemirror-history';
import { 
  baseKeymap, 
  toggleMark, 
  setBlockType, 
  wrapIn
} from 'prosemirror-commands';
import { 
  wrapInList, 
  splitListItem, 
  liftListItem, 
  sinkListItem 
} from 'prosemirror-schema-list';
import { InputRule, inputRules, wrappingInputRule, textblockTypeInputRule, smartQuotes, emDash, ellipsis } from 'prosemirror-inputrules';
import { tableEditing, columnResizing, goToNextCell, deleteTable, addRowAfter, addRowBefore, deleteRow, addColumnAfter, addColumnBefore, deleteColumn } from 'prosemirror-tables';
import { 
  Bold, Italic, Code, List, ListOrdered, Quote, 
  Undo2, Redo2, Table, RotateCcw, Trash2, Plus, Minus
} from 'lucide-react';
import './ProseMirrorEditor.css';

// Import table nodes
import { tableNodes } from 'prosemirror-tables';

// Create enhanced schema with tables and lists
const mySchema = new Schema({
  nodes: addListNodes(schema.spec.nodes, 'paragraph block*', 'block').append(tableNodes({
    tableGroup: 'block',
    cellContent: 'block+',
    cellAttributes: {
      background: {
        default: null,
        getFromDOM(dom) { return dom.style.backgroundColor || null },
        setDOMAttr(value, attrs) { if (value) attrs.style = (attrs.style || '') + `background-color: ${value};` }
      }
    }
  })),
  marks: schema.spec.marks
});

// Custom table creation function
function createSimpleTable(schema, rows = 3, cols = 3, withHeaderRow = true) {
  const tableRows = [];
  
  for (let i = 0; i < rows; i++) {
    const cells = [];
    const isHeaderRow = withHeaderRow && i === 0;
    
    for (let j = 0; j < cols; j++) {
      const cellType = isHeaderRow ? schema.nodes.table_header : schema.nodes.table_cell;
      const cell = cellType.create(null, [
        schema.nodes.paragraph.create()
      ]);
      cells.push(cell);
    }
    
    const row = schema.nodes.table_row.create(null, cells);
    tableRows.push(row);
  }
  
  return schema.nodes.table.create(null, tableRows);
}

// Create input rules for markdown-style shortcuts
function buildInputRules(schema) {
  const rules = smartQuotes.concat(ellipsis, emDash);
  
  // Bold with **text**
  rules.push(new InputRule(/\*\*([^\*]+)\*\*$/, (state, match, start, end) => {
    const { tr } = state;
    tr.delete(start, end).insertText(match[1]);
    return tr.addMark(start, start + match[1].length, schema.marks.strong.create());
  }));
  
  // Italic with *text*
  rules.push(new InputRule(/\*([^\*]+)\*$/, (state, match, start, end) => {
    const { tr } = state;
    tr.delete(start, end).insertText(match[1]);
    return tr.addMark(start, start + match[1].length, schema.marks.em.create());
  }));
  
  // Code with `text`
  rules.push(new InputRule(/`([^`]+)`$/, (state, match, start, end) => {
    const { tr } = state;
    tr.delete(start, end).insertText(match[1]);
    return tr.addMark(start, start + match[1].length, schema.marks.code.create());
  }));
  
  // Headings
  for (let i = 1; i <= 6; i++) {
    rules.push(textblockTypeInputRule(
      new RegExp(`^#{${i}}\\s$`),
      schema.nodes.heading,
      { level: i }
    ));
  }
  
  // Blockquote
  rules.push(wrappingInputRule(/^\s*>\s$/, schema.nodes.blockquote));
  
  // Code block
  rules.push(textblockTypeInputRule(/^```$/, schema.nodes.code_block));
  
  // Bullet list
  rules.push(wrappingInputRule(/^\s*([-+*])\s$/, schema.nodes.bullet_list));
  
  // Ordered list
  rules.push(wrappingInputRule(/^\s*(\d+)\.\s$/, schema.nodes.ordered_list));
  
  return inputRules({ rules });
}

// Helper function to check if cursor is inside a table
const isInTable = (state) => {
  const { $from } = state.selection;
  for (let d = $from.depth; d > 0; d--) {
    if ($from.node(d).type.spec.tableRole) return true;
  }
  return false;
};

// Toolbar component
const EditorToolbar = ({ view, disabled, onStateUpdate }) => {
  const [activeMarks, setActiveMarks] = useState(new Set());
  const [currentBlockType, setCurrentBlockType] = useState('paragraph');
  const [inTable, setInTable] = useState(false);
  
  // Update active states when selection changes
  useEffect(() => {
    if (!view) return;
    
    const updateState = () => {
      const { state } = view;
      const { from, to, empty } = state.selection;
      
      // Get active marks
      const marks = new Set();
      if (empty) {
        // Get marks that would be applied to typed text
        const storedMarks = state.storedMarks || state.selection.$from.marks();
        storedMarks.forEach(mark => marks.add(mark.type.name));
      } else {
        // Get marks that apply to the entire selection
        state.doc.nodesBetween(from, to, (node) => {
          node.marks.forEach(mark => marks.add(mark.type.name));
        });
      }
      setActiveMarks(marks);
      
      // Check if cursor is in a table
      setInTable(isInTable(state));
      
      // Get current block type
      const $from = state.selection.$from;
      const blockType = $from.parent.type.name;
      setCurrentBlockType(blockType);
    };
    
    updateState();
    
    // Store update function for external calls
    if (onStateUpdate) {
      onStateUpdate(updateState);
    }
    
    // Listen for focus/blur events
    view.dom.addEventListener('focus', updateState);
    view.dom.addEventListener('blur', updateState);
    
    return () => {
      view.dom.removeEventListener('focus', updateState);
      view.dom.removeEventListener('blur', updateState);
    };
  }, [view, onStateUpdate]);
  
  const runCommand = (command) => {
    if (disabled || !view) return false;
    return command(view.state, view.dispatch, view);
  };
  
  const toggleMarkCommand = (markType) => {
    return runCommand(toggleMark(markType));
  };
  
  const setBlockTypeCommand = (nodeType, attrs = {}) => {
    return runCommand(setBlockType(nodeType, attrs));
  };
  
  const wrapInCommand = (nodeType, attrs = {}) => {
    return runCommand(wrapIn(nodeType, attrs));
  };
  
  const insertTable = () => {
    const table = createSimpleTable(mySchema, 3, 3, true);
    const tr = view.state.tr.replaceSelectionWith(table);
    view.dispatch(tr);
  };
  
  const ToolbarButton = ({ onClick, active, disabled: buttonDisabled, title, children, variant = 'default' }) => {
    const baseClasses = "p-2 rounded flex items-center justify-center";
    const variantClasses = {
      default: active 
        ? "bg-teal-600 text-white" 
        : "hover:bg-stone-700 text-teal-400",
      dropdown: "hover:bg-stone-700 text-teal-400 px-2"
    };
    
    return (
      <button
        onMouseDown={(e) => {
          e.preventDefault(); // Prevent focus shift away from editor
          if (!disabled && !buttonDisabled && onClick) {
            onClick(e);
          }
        }}
        disabled={disabled || buttonDisabled}
        className={`${baseClasses} ${variantClasses[variant]} ${disabled || buttonDisabled ? 'opacity-50 cursor-not-allowed' : ''}`}
        title={title}
      >
        {children}
      </button>
    );
  };
  
  const ToolbarDivider = () => (
    <div className="w-px h-6 bg-stone-600 mx-1" />
  );
  
  return (
    <div className="border-b border-stone-700 bg-stone-800 p-2 flex items-center gap-1 flex-wrap">
      {/* Undo/Redo */}
      <ToolbarButton onClick={() => runCommand(undo)} title="Undo (Ctrl+Z)">
        <Undo2 size={18} />
      </ToolbarButton>
      <ToolbarButton onClick={() => runCommand(redo)} title="Redo (Ctrl+Y)">
        <Redo2 size={18} />
      </ToolbarButton>
      
      <ToolbarDivider />
      
      {/* Headings Dropdown */}
      <select
        value={currentBlockType === 'heading' ? `heading-${view?.state.selection.$from.parent.attrs.level || 1}` : currentBlockType}
        onChange={(e) => {
          const value = e.target.value;
          if (value.startsWith('heading-')) {
            const level = parseInt(value.split('-')[1]);
            setBlockTypeCommand(mySchema.nodes.heading, { level });
          } else if (value === 'paragraph') {
            setBlockTypeCommand(mySchema.nodes.paragraph);
          } else if (value === 'code_block') {
            setBlockTypeCommand(mySchema.nodes.code_block);
          }
        }}
        className="bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600 min-w-[100px]"
        disabled={disabled}
      >
        <option value="paragraph">Paragraph</option>
        <option value="heading-1">Heading 1</option>
        <option value="heading-2">Heading 2</option>
        <option value="heading-3">Heading 3</option>
        <option value="heading-4">Heading 4</option>
        <option value="heading-5">Heading 5</option>
        <option value="heading-6">Heading 6</option>
        <option value="code_block">Code Block</option>
      </select>
      
      <ToolbarDivider />
      
      {/* Text Formatting */}
      <ToolbarButton 
        onClick={() => toggleMarkCommand(mySchema.marks.strong)}
        active={activeMarks.has('strong')}
        title="Bold (Ctrl+B)"
      >
        <Bold size={18} />
      </ToolbarButton>
      <ToolbarButton 
        onClick={() => toggleMarkCommand(mySchema.marks.em)}
        active={activeMarks.has('em')}
        title="Italic (Ctrl+I)"
      >
        <Italic size={18} />
      </ToolbarButton>
      <ToolbarButton 
        onClick={() => toggleMarkCommand(mySchema.marks.code)}
        active={activeMarks.has('code')}
        title="Code (Ctrl+`)"
      >
        <Code size={18} />
      </ToolbarButton>
      
      <ToolbarDivider />
      
      {/* Lists */}
      <ToolbarButton 
        onClick={() => runCommand(wrapInList(mySchema.nodes.bullet_list))}
        active={currentBlockType === 'bullet_list'}
        title="Bullet List"
      >
        <List size={18} />
      </ToolbarButton>
      <ToolbarButton 
        onClick={() => runCommand(wrapInList(mySchema.nodes.ordered_list))}
        active={currentBlockType === 'ordered_list'}
        title="Numbered List"
      >
        <ListOrdered size={18} />
      </ToolbarButton>
      
      <ToolbarDivider />
      
      {/* Block Elements */}
      <ToolbarButton 
        onClick={() => wrapInCommand(mySchema.nodes.blockquote)}
        active={currentBlockType === 'blockquote'}
        title="Blockquote"
      >
        <Quote size={18} />
      </ToolbarButton>
      
      <ToolbarDivider />
      
      {/* Table */}
      <ToolbarButton onClick={insertTable} title="Insert Table">
        <Table size={18} />
      </ToolbarButton>
      
      {/* Table Management (only show when in table) */}
      {inTable && (
        <>
          <ToolbarButton 
            onClick={() => runCommand(deleteTable)}
            title="Delete Table"
          >
            <Trash2 size={18} />
          </ToolbarButton>
          <ToolbarButton 
            onClick={() => runCommand(addRowAfter)}
            title="Add Row After"
          >
            <Plus size={18} />
          </ToolbarButton>
          <ToolbarButton 
            onClick={() => runCommand(deleteRow)}
            title="Delete Row"
          >
            <Minus size={18} />
          </ToolbarButton>
          <ToolbarButton 
            onClick={() => runCommand(addColumnAfter)}
            title="Add Column After"
          >
            <div className="flex items-center">
              <Plus size={14} />
              <div className="w-px h-3 bg-current ml-1" />
            </div>
          </ToolbarButton>
          <ToolbarButton 
            onClick={() => runCommand(deleteColumn)}
            title="Delete Column"
          >
            <div className="flex items-center">
              <Minus size={14} />
              <div className="w-px h-3 bg-current ml-1" />
            </div>
          </ToolbarButton>
        </>
      )}
      
      <ToolbarDivider />
      
      {/* Clear Formatting */}
      <ToolbarButton 
        onClick={() => {
          const { state, dispatch } = view;
          const { from, to } = state.selection;
          const tr = state.tr;
          
          // Remove all marks from selection
          state.doc.nodesBetween(from, to, (node, pos) => {
            if (node.marks.length > 0) {
              const start = Math.max(from, pos);
              const end = Math.min(to, pos + node.nodeSize);
              node.marks.forEach(mark => {
                tr.removeMark(start, end, mark.type);
              });
            }
          });
          
          dispatch(tr);
        }}
        title="Clear Formatting"
      >
        <RotateCcw size={18} />
      </ToolbarButton>
    </div>
  );
};

const ProseMirrorEditor = ({ 
  content = '', 
  onChange, 
  onSave,
  placeholder = 'Start typing your markdown here...',
  className = '',
  readOnly = false 
}) => {
  const editorRef = useRef(null);
  const viewRef = useRef(null);
  const toolbarUpdateRef = useRef(null);
  const [isReady, setIsReady] = useState(false);
  const lastExternalContentRef = useRef(content);
  const isInternalChangeRef = useRef(false);

  // Create the editor view only once or when readOnly changes
  useEffect(() => {
    if (!editorRef.current) return;

    // Parse the initial JSON content
    let doc;
    try {
      console.log('ProseMirror: Creating editor with content:', content?.substring(0, 100) + '...');
      if (content && content.trim()) {
        // Try to parse as JSON first
        const jsonContent = JSON.parse(content);
        doc = Node.fromJSON(mySchema, jsonContent);
        lastExternalContentRef.current = content;
      } else {
        // Create empty document with a paragraph
        doc = mySchema.nodes.doc.create([
          mySchema.nodes.paragraph.create()
        ]);
      }
    } catch (error) {
      console.error('Error parsing ProseMirror JSON:', error);
      // Fallback: create empty document or try to parse as plain text
      if (content && content.trim()) {
        try {
          // If JSON parsing failed, treat as plain text and create a paragraph
          doc = mySchema.nodes.doc.create([
            mySchema.nodes.paragraph.create(null, [
              mySchema.text(content)
            ])
          ]);
          lastExternalContentRef.current = content;
        } catch (fallbackError) {
          console.error('Fallback parsing failed:', fallbackError);
          doc = mySchema.nodes.doc.create([
            mySchema.nodes.paragraph.create()
          ]);
        }
      } else {
        doc = mySchema.nodes.doc.create([
          mySchema.nodes.paragraph.create()
        ]);
      }
    }

    // Create enhanced plugins array
    const plugins = [
      buildInputRules(mySchema),
      history(),
      keymap({
        // Text formatting shortcuts
        'Mod-b': toggleMark(mySchema.marks.strong),
        'Mod-i': toggleMark(mySchema.marks.em),
        'Mod-`': toggleMark(mySchema.marks.code),
        
        // List shortcuts  
        'Shift-Ctrl-8': wrapInList(mySchema.nodes.bullet_list),
        'Shift-Ctrl-9': wrapInList(mySchema.nodes.ordered_list),
        
        // List item navigation
        'Tab': sinkListItem(mySchema.nodes.list_item),
        'Shift-Tab': liftListItem(mySchema.nodes.list_item),
        'Enter': splitListItem(mySchema.nodes.list_item),
        
        // Table navigation
        'Tab': goToNextCell(1),
        'Shift-Tab': goToNextCell(-1),
        
        // Block shortcuts
        'Ctrl-Shift-0': setBlockType(mySchema.nodes.paragraph),
        'Ctrl-Shift-1': setBlockType(mySchema.nodes.heading, { level: 1 }),
        'Ctrl-Shift-2': setBlockType(mySchema.nodes.heading, { level: 2 }),
        'Ctrl-Shift-3': setBlockType(mySchema.nodes.heading, { level: 3 }),
        'Ctrl-Shift-4': setBlockType(mySchema.nodes.heading, { level: 4 }),
        'Ctrl-Shift-5': setBlockType(mySchema.nodes.heading, { level: 5 }),
        'Ctrl-Shift-6': setBlockType(mySchema.nodes.heading, { level: 6 }),
        
        // Quote
        'Ctrl-Shift-.': wrapIn(mySchema.nodes.blockquote),
        
        // Save
        'Mod-s': () => {
          if (onSave && viewRef.current) {
            const jsonContent = JSON.stringify(viewRef.current.state.doc.toJSON(), null, 2);
            onSave(jsonContent);
            return true;
          }
          return false;
        }
      }),
      keymap(baseKeymap),
      columnResizing(),
      tableEditing()
    ];

    // Create the editor state
    const state = EditorState.create({
      doc,
      plugins
    });

    // Create the editor view
    const view = new EditorView(editorRef.current, {
      state,
      editable: () => !readOnly,
      dispatchTransaction: (transaction) => {
        const newState = view.state.apply(transaction);
        view.updateState(newState);
        
        // Trigger toolbar update on selection changes or doc changes
        if (toolbarUpdateRef.current && (transaction.selectionSet || transaction.docChanged)) {
          // Use setTimeout to ensure the update happens after the state is applied
          setTimeout(() => {
            if (toolbarUpdateRef.current) {
              toolbarUpdateRef.current();
            }
          }, 0);
        }
        
        // Call onChange with the JSON content
        if (onChange && transaction.docChanged) {
          isInternalChangeRef.current = true;
          const jsonContent = JSON.stringify(newState.doc.toJSON(), null, 2);
          onChange(jsonContent);
          // Reset the flag after the state update
          setTimeout(() => {
            isInternalChangeRef.current = false;
          }, 0);
        }
      },
      attributes: {
        class: `prose prose-invert max-w-none focus:outline-none ${className}`,
        style: 'min-height: 200px; padding: 1rem;'
      }
    });

    viewRef.current = view;
    setIsReady(true);

    // Cleanup function
    return () => {
      if (view) {
        view.destroy();
      }
      viewRef.current = null;
      setIsReady(false);
    };
  }, [readOnly]); // Only recreate when readOnly changes

  // Handle external content changes (from file loading)
  useEffect(() => {
    if (!viewRef.current || !isReady) return;
    
    // Skip if this is an internal change (from user typing)
    if (isInternalChangeRef.current) {
      return;
    }

    // Only update if content actually changed externally
    if (content !== lastExternalContentRef.current) {
      console.log('ProseMirror: External content change detected, updating editor');
      
      try {
        let doc;
        if (content && content.trim()) {
          // Try to parse as JSON
          const jsonContent = JSON.parse(content);
          doc = Node.fromJSON(mySchema, jsonContent);
        } else {
          doc = mySchema.nodes.doc.create([
            mySchema.nodes.paragraph.create()
          ]);
        }

        // Get current selection to preserve cursor position if possible
        const currentSelection = viewRef.current.state.selection;
        
        // Create new state with updated content
        const newState = EditorState.create({
          doc,
          plugins: viewRef.current.state.plugins,
          // Try to preserve selection if the document structure allows it
          selection: currentSelection && doc.content.size >= currentSelection.from ? currentSelection : undefined
        });
        
        viewRef.current.updateState(newState);
        lastExternalContentRef.current = content;
      } catch (error) {
        console.error('Error updating editor with external content:', error);
      }
    }
  }, [content, isReady]);

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {/* Toolbar */}
      <EditorToolbar 
        view={viewRef.current} 
        disabled={!isReady || readOnly}
        onStateUpdate={(updateFn) => {
          toolbarUpdateRef.current = updateFn;
        }}
      />
      
      {/* Editor */}
      <div className="flex-1 overflow-auto">
        <div 
          ref={editorRef}
          className="w-full h-full bg-stone-800 text-teal-50 prose-headings:text-teal-100 prose-a:text-teal-400 prose-strong:text-teal-100 prose-em:text-teal-200 prose-code:text-teal-300 prose-pre:bg-stone-900 prose-blockquote:border-teal-600 prose-hr:border-stone-600"
          style={{ minHeight: '400px' }}
        />
        {!isReady && (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading editor...</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProseMirrorEditor;

================
File: src/components/windows/explorer/components/StorageStats.jsx
================
import React from 'react';

const StorageStats = ({ stats, isAdmin }) => {
  // If stats aren't available yet or the user doesn't have file access, don't show anything
  if (!stats || stats.isLoading) {
    return null;
  }

  // Format bytes to human-readable format
  const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    if (bytes === null || bytes === undefined) return 'Unlimited';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  };

  // Calculate percentage used
  const percentUsed = stats.unlimited ? 0 : Math.min(100, Math.round((stats.used / stats.quota) * 100)) || 0;
  
  return (
    <div className="px-2 py-1 bg-stone-800 text-xs border-t border-stone-700">
      <div className="flex justify-between items-center ${isAdmin ? 'mb-0' : 'mb-1'}">
        <span className="text-gray-400">Storage:</span>
        <span className="text-teal-400">
          {stats.unlimited 
            ? 'Unlimited (Admin)'
            : `${formatBytes(stats.used)} of ${formatBytes(stats.quota)}`
          }
        </span>
      </div>
      
      {!stats.unlimited && (
        <div className="w-full bg-stone-700 rounded-full h-1.5 mb-1">
          <div 
            className="bg-teal-600 h-1.5 rounded-full" 
            style={{ width: `${percentUsed}%` }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default StorageStats;

================
File: src/components/windows/explorer/ExplorerWindow.jsx
================
import React from 'react';
import useExplorerState from './state/useExplorerState';
import { useAuth } from '../../../context/AuthContext';
import FileTree from './components/FileTree';
import FileContent from './components/FileContent';
import StorageStats from './components/StorageStats';
import { PanelLeftOpen } from 'lucide-react';
import '../ExplorerWindow.css';

const ExplorerWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check user permissions
  const { user } = useAuth();
  // Use the custom hook to manage state and operations
  const explorerState = useExplorerState(nodeId, windowState, updateWindowState);
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden relative">
        {/* File tree panel - conditionally rendered */}
        {!explorerState.isFileTreeCollapsed && (
          <FileTree 
            files={explorerState.files}
            publicFiles={explorerState.publicFiles}
            activeTab={explorerState.activeTab}
            expandedFolders={explorerState.expandedFolders}
            currentPath={explorerState.currentPath}
            selectedFile={explorerState.selectedFile}
            isTreeLoading={explorerState.isTreeLoading}
            errorMessage={explorerState.errorMessage}
            isAdmin={explorerState.isAdmin}
            user={user}
            toggleFolder={explorerState.toggleFolder}
            handleFileSelect={explorerState.handleFileSelect}
            openRenameDialog={explorerState.openRenameDialog}
            openDeleteDialog={explorerState.openDeleteDialog}
            openCreateDialog={explorerState.openCreateDialog}
            handleDragStart={explorerState.handleDragStart}
            handleDragOver={explorerState.handleDragOver}
            handleDragLeave={explorerState.handleDragLeave}
            handleDrop={explorerState.handleDrop}
            handleContainerDragOver={explorerState.handleContainerDragOver}
            handleContainerDragLeave={explorerState.handleContainerDragLeave}
            handleContainerDrop={explorerState.handleContainerDrop}
            dropTarget={explorerState.dropTarget}
            storageStats={explorerState.storageStats}
            // Dialog-related props
            showCreateDialog={explorerState.showCreateDialog}
            createType={explorerState.createType}
            newItemName={explorerState.newItemName}
            setNewItemName={explorerState.setNewItemName}
            isCreating={explorerState.isCreating}
            closeCreateDialog={explorerState.closeCreateDialog}
            createNewItem={explorerState.createNewItem}
            showRenameDialog={explorerState.showRenameDialog}
            itemToRename={explorerState.itemToRename}
            newName={explorerState.newName}
            setNewName={explorerState.setNewName}
            isRenaming={explorerState.isRenaming}
            closeRenameDialog={explorerState.closeRenameDialog}
            renameItem={explorerState.renameItem}
            showDeleteDialog={explorerState.showDeleteDialog}
            itemToDelete={explorerState.itemToDelete}
            isDeleting={explorerState.isDeleting}
            closeDeleteDialog={explorerState.closeDeleteDialog}
            handleDeleteItem={explorerState.handleDeleteItem}
          />
        )}
        
        
        {/* File content panel - takes full width when tree is collapsed */}
        <FileContent
          selectedFile={explorerState.selectedFile}
          isContentLoading={explorerState.isContentLoading}
          fileContent={explorerState.fileContent}
          errorMessage={explorerState.errorMessage}
          showPreview={explorerState.showPreview}
          editMode={explorerState.editMode}
          saveStatus={explorerState.saveStatus}
          converter={explorerState.converter}
          isAdmin={explorerState.isAdmin}
          user={user}
          activeTab={explorerState.activeTab}
          isFileTreeCollapsed={explorerState.isFileTreeCollapsed}
          toggleFileTreeCollapse={explorerState.toggleFileTreeCollapse}
          setFileContent={explorerState.setFileContent}
          toggleEditMode={explorerState.toggleEditMode}
          handleMarkdownChange={explorerState.handleMarkdownChange}
          handleSaveFileContent={explorerState.handleSaveFileContent}
          handleExportFile={explorerState.handleExportFile}
        />
      </div>
      
      {/* Command input */}
    </div>
  );
};

export default ExplorerWindow;

================
File: src/components/windows/explorer/README.md
================
# Explorer Window Component

This directory contains a modular implementation of the ExplorerWindow component. The code has been refactored to improve maintainability and make it easier to extend functionality.

## Architecture Overview

The ExplorerWindow has been split into several components and modules following a clean separation of concerns:

```
explorer/
├── ExplorerWindow.jsx              # Main component (orchestrator)
├── state/
│   └── useExplorerState.js         # Custom hook for state management
├── components/
│   ├── FileTree.jsx                # Tree view UI and navigation
│   ├── FileContent.jsx             # Content viewing/editing panel
│   ├── CommandInput.jsx            # Command input field
│   └── dialogs/
│       └── FileDialogs.jsx         # Dialog components for file operations
├── api/
│   └── fileOperations.js           # API calls and file operations
├── utils/
│   ├── fileUtils.js                # File-related utility functions
│   └── markdownUtils.js            # Markdown-specific utilities
└── README.md                       # This documentation file
```

## Component Responsibilities

### ExplorerWindow.jsx
- Acts as the main component that orchestrates all other components
- Retrieves state and operations from useExplorerState
- Passes down props to child components

### useExplorerState.js
- Centralizes all state management
- Handles state persistence and retrieval
- Implements business logic for all user interactions
- Provides functions for file operations

### FileTree.jsx
- Displays the directory structure
- Handles file/folder selection
- Manages UI for drag and drop operations

### FileContent.jsx
- Displays file content based on file type
- Provides editing interface for markdown files
- Renders markdown preview

### CommandInput.jsx
- Provides command input interface
- Handles command execution

### FileDialogs.jsx
- Contains dialog components for creating, renaming, and deleting files/folders

### fileOperations.js
- Encapsulates API calls to the server
- Handles error states and response parsing

### fileUtils.js and markdownUtils.js
- Provide utility functions for file and markdown operations

## Data Flow

1. User interactions in UI components trigger functions received from useExplorerState
2. useExplorerState processes these actions, updates state, and interacts with the API as needed
3. State changes flow back to UI components through props

## Adding Support for New File Types

To add support for new file types (e.g., canvas files, audio files, images):

1. Update `fileUtils.js` to recognize and provide appropriate icons for the new file types
2. Extend `FileContent.jsx` to render the new file types appropriately
3. If needed, add specific utility files (similar to markdownUtils.js) for the new file types
4. Update state in `useExplorerState.js` to handle any special behaviors for the new file types

## State Management

The component uses a custom hook approach for state management, which offers several advantages:

- Centralizes state logic in one place
- Makes the main component simpler and more declarative
- Allows for easier testing of business logic
- Simplifies adding new features or file type support

This approach is more maintainable than using a context provider for this specific use case, as the component tree is not deeply nested. If the component structure becomes more complex in the future, the code could be adapted to use a context provider instead.

================
File: src/components/windows/explorer/repomix-output.txt
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
api/fileOperations.js
components/canvas/CanvasContainer.jsx
components/canvas/CanvasEditor.jsx
components/canvas/TextNode.jsx
components/CanvasEditor.jsx
components/CommandInput.jsx
components/dialogs/FileDialogs.jsx
components/FileContent.jsx
components/FileTree.jsx
components/MapEditor.jsx
components/nodes/index.js
components/nodes/TextNode.jsx
components/StorageStats.jsx
ExplorerWindow.jsx
README.md
state/useExplorerState.js
utils/canvasUtils.js
utils/fileUtils.js
utils/markdownUtils.js

================================================================
Files
================================================================

================
File: api/fileOperations.js
================
import API_CONFIG from '../../../../config/api';

// Function to fetch public directory contents
export const fetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : publicPath;
    
    // Fetch public directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`Failed to load public files: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || [],
      isPublic: true
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    console.error('Error fetching public directory contents:', error);
    return {
      files: [],
      error: error.message || 'Failed to load public files. Please try again.'
    };
  }
};

// Function to fetch public file content
export const fetchPublicFileContent = async (filePath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch public file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    const data = await response.json();
    console.log(`[DEBUG] Public file fetch - Content received length: ${data.content?.length || 0} characters`);
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    console.error('[DEBUG] Error fetching public file content:', error);
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to fetch private directory contents from the server (admin only)
export const fetchDirectoryContents = async (path = '/', refreshAll = false) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // If refreshAll is true, start from the root
    const pathToFetch = refreshAll ? '/' : path;
    
    // Fetch directory contents from the server
    const response = await fetch(
      `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view files.');
      } else {
        throw new Error(`Failed to load files: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    // Transform the data to match our expected format
    const transformedFiles = data.items.map(item => ({
      name: item.name,
      type: item.type,
      path: item.path,
      children: item.children || []
    }));
    
    return {
      files: transformedFiles,
      error: null
    };
  } catch (error) {
    return {
      files: [],
      error: error.message || 'Failed to load files. Please try again.'
    };
  }
};

// Function to fetch file content
export const fetchFileContent = async (filePath) => {
  console.log(`[DEBUG] fetchFileContent called with path: ${filePath}`);
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch file content from the server
    const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`;
    
    const response = await fetch(
      url,
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );
    
    
    if (!response.ok) {
      // If response is 403, it means the user doesn't have admin access
      if (response.status === 403) {
        throw new Error('Admin access required to view file content.');
      } else {
        const errorText = await response.text();
        throw new Error(`Failed to load file content: ${response.statusText}`);
      }
    }
    
    const data = await response.json();
    
    return {
      content: data.content,
      error: null
    };
  } catch (error) {
    return {
      content: '',
      error: error.message || 'Error loading file'
    };
  }
};

// Function to save file content
export const saveFileContent = async (filePath, content) => {

  
  try {
    // Check if filePath is valid
    if (!filePath || filePath.trim() === '') {
      throw new Error('No file selected. Please select a file first.');
    }
    
    // Special handling for .map files to ensure rotation is included
    let contentToSave = content;
    if (filePath?.endsWith('.map') && typeof content === 'string') {
      // For map files, parse the JSON, process it, and re-stringify it
      try {
        const mapData = JSON.parse(content);
        
        // Ensure all cells have rotation property
        if (mapData.layers && Array.isArray(mapData.layers)) {
          mapData.layers.forEach(layer => {
            if (layer.cells && Array.isArray(layer.cells)) {
              layer.cells = layer.cells.map(cell => {
                // If rotation doesn't exist, add it with default value of 0
                if (cell.rotation === undefined) {
                  return { ...cell, rotation: 0 };
                }
                // Ensure rotation is a number
                if (typeof cell.rotation !== 'number') {
                  return { ...cell, rotation: Number(cell.rotation) };
                }
                return cell;
              });
            }
          });
        }
        
        // Use a custom replacer to guarantee rotation values are included
        contentToSave = JSON.stringify(mapData, (key, value) => {
          if (key === 'rotation') {
            return value === undefined ? 0 : Number(value);
          }
          return value;
        }, 2);
        
      } catch (parseError) {
        // If we can't parse, just use the original content
        contentToSave = content;
      }
    }
    
    // Create request body
    const requestBody = JSON.stringify({
      path: filePath,
      content: contentToSave
    });
    
    
    // Make the API request
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
      },
      body: requestBody
    });
    
    
    const responseData = await response.json();
    
    if (!response.ok) {
      throw new Error(responseData.message || `Failed to save file: ${response.statusText}`);
    }
    
    console.log(`[DEBUG] saveFileContent - Success!`);
    return { 
      error: null,
      size: responseData.size,
      modified: responseData.modified
    };
  } catch (error) {
    console.error('[DEBUG] Error saving file:', error);
    return { error: error.message || 'Error saving file' };
  }
};

// Simple path join function for browser environment
const joinPaths = (...parts) => {
  // Filter out empty parts and normalize
  const normalized = parts.map(part => {
    if (part === undefined || part === null) return '';
    // Remove leading/trailing slashes
    return part.toString().replace(/^\/+|\/+$/g, '');
  }).filter(Boolean);
  
  // Join with slashes and add leading slash
  return '/' + normalized.join('/');
};

// Function to create a new file or folder
export const createNewItem = async (activeTab, activeFolderPath, newItemName, createType) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Determine if we're creating in the public folder or private folder
    const isPublicFolder = activeTab === 'public';
    
    // Construct the full path for the new item
    let newItemPath;
    if (isPublicFolder) {
      // For public folder, prefix with /public if not already included
      const publicPrefix = activeFolderPath.startsWith('/public') ? '' : '/public';
      // Remove any leading slash from activeFolderPath if it exists and if using publicPrefix
      const folderPath = publicPrefix && activeFolderPath.startsWith('/') 
        ? activeFolderPath.substring(1) 
        : activeFolderPath;
      newItemPath = joinPaths(publicPrefix, folderPath, newItemName.trim());
    } else {
      // For private folder (admin only)
      newItemPath = joinPaths(activeFolderPath, newItemName.trim());
    }
    
    // Create the new file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CREATE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        path: newItemPath,
        type: createType,
        content: createType === 'file' ? '' : undefined
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to create ${createType}: ${response.statusText}`);
    }
    
    return { 
      success: true, 
      path: newItemPath,
      error: null
    };
  } catch (error) {
    console.error(`Error creating ${createType}:`, error);
    return { 
      success: false, 
      path: null,
      error: error.message || `Failed to create ${createType}` 
    };
  }
};

// Function to rename a file or folder
export const renameItem = async (itemPath, newName) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Rename the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_RENAME}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        oldPath: itemPath,
        newName: newName.trim()
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to rename: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error renaming:', error);
    return { success: false, error: error.message || 'Failed to rename' };
  }
};

// Function to delete a file or folder
export const deleteItem = async (itemPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Delete the file or folder
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_DELETE}?path=${encodeURIComponent(itemPath)}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to delete: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error deleting:', error);
    return { success: false, error: error.message || 'Failed to delete' };
  }
};

// Function to move a file or folder
// Function to get storage usage statistics
export const getStorageStats = async () => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Fetch storage stats from the server
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.STORAGE_STATS}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`Failed to load storage stats: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    return {
      quota: data.quota,
      used: data.used,
      available: data.available,
      unlimited: data.unlimited,
      error: null
    };
  } catch (error) {
    console.error('Error fetching storage stats:', error);
    return {
      quota: 0,
      used: 0,
      available: 0,
      unlimited: false,
      error: error.message || 'Failed to load storage stats'
    };
  }
};

export const moveItem = async (sourcePath, destinationPath) => {
  try {
    // Get the authentication token
    const token = localStorage.getItem('auth_token');
    if (!token) {
      throw new Error('Authentication required. Please log in.');
    }
    
    // Call the API to move the file
    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        sourcePath,
        destinationPath
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to move: ${response.statusText}`);
    }
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Error moving item:', error);
    return { success: false, error: error.message || 'Failed to move item' };
  }
};

================
File: components/canvas/CanvasContainer.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  generateId, 
  isPointInNode, 
  createTextNode, 
  createEdge,
  calculateBestConnectionSides,
  getConnectionPoints,
  drawConnection,
  getCanvasColor
} from '../../utils/canvasUtils';
import TextNode from './TextNode';

/**
 * CanvasContainer handles the infinite canvas, viewport, and interactions
 */
const CanvasContainer = ({ 
  canvasData, 
  onChange,
  readOnly = false
}) => {
  // State for viewport and interaction
  const [scale, setScale] = useState(1);
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const [isPanning, setIsPanning] = useState(false);
  const [panStart, setPanStart] = useState({ x: 0, y: 0 });
  const [selectedNodeIds, setSelectedNodeIds] = useState([]);
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionStart, setConnectionStart] = useState(null);
  const [hoveredNodeId, setHoveredNodeId] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [draggedNodeIds, setDraggedNodeIds] = useState([]);

  // Refs for canvas elements
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  const interactionLayerRef = useRef(null);

  // Get the currently selected node
  const selectedNode = canvasData.nodes.find(node => node.id === selectedNodeIds[0]);

  // Draw the canvas with nodes and edges
  const drawCanvas = useCallback(() => {
    if (!canvasRef.current) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const { width, height } = canvas;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Apply viewport transformation
    ctx.save();
    ctx.translate(offset.x, offset.y);
    ctx.scale(scale, scale);
    
    // Draw background grid (optional)
    ctx.strokeStyle = '#2a2a2a';
    ctx.lineWidth = 1 / scale;
    
    const gridSize = 20;
    const startX = Math.floor(-offset.x / scale / gridSize) * gridSize;
    const startY = Math.floor(-offset.y / scale / gridSize) * gridSize;
    const endX = Math.ceil((width - offset.x) / scale / gridSize) * gridSize;
    const endY = Math.ceil((height - offset.y) / scale / gridSize) * gridSize;
    
    // Draw vertical grid lines
    for (let x = startX; x <= endX; x += gridSize) {
      ctx.beginPath();
      ctx.moveTo(x, startY);
      ctx.lineTo(x, endY);
      ctx.stroke();
    }
    
    // Draw horizontal grid lines
    for (let y = startY; y <= endY; y += gridSize) {
      ctx.beginPath();
      ctx.moveTo(startX, y);
      ctx.lineTo(endX, y);
      ctx.stroke();
    }
    
    // Draw edges
    canvasData.edges.forEach(edge => {
      const sourceNode = canvasData.nodes.find(n => n.id === edge.fromNode);
      const targetNode = canvasData.nodes.find(n => n.id === edge.toNode);
      
      if (sourceNode && targetNode) {
        // Get connection points
        const points = getConnectionPoints(
          sourceNode, 
          targetNode, 
          edge.fromSide, 
          edge.toSide
        );
        
        // Draw the connection
        drawConnection(
          ctx, 
          points.source, 
          points.target, 
          getCanvasColor(edge.color),
          edge.fromEnd === 'arrow',
          edge.toEnd === 'arrow'
        );
      }
    });
    
    // Restore the context
    ctx.restore();
  }, [canvasData, offset, scale]);

  // Resize canvas to fit container
  const resizeCanvas = useCallback(() => {
    if (!containerRef.current || !canvasRef.current || !interactionLayerRef.current) return;
    
    const container = containerRef.current;
    const canvas = canvasRef.current;
    const interactionLayer = interactionLayerRef.current;
    
    // Set canvas size to match container
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
    interactionLayer.width = container.clientWidth;
    interactionLayer.height = container.clientHeight;
    
    // Redraw canvas
    drawCanvas();
  }, [drawCanvas]);

  // Initialize and set up event listeners
  useEffect(() => {
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, [resizeCanvas]);

  // Redraw canvas when data changes
  useEffect(() => {
    drawCanvas();
  }, [canvasData, drawCanvas, selectedNodeIds, scale, offset]);

  // Handle mouse wheel for zooming
  const handleWheel = (e) => {
    e.preventDefault();
    
    const { deltaY } = e;
    const direction = deltaY > 0 ? -1 : 1;
    
    // Calculate zoom
    const factor = 0.1;
    const newScale = Math.max(0.1, scale * (1 + direction * factor));
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Calculate new offset to zoom around mouse position
    const newOffsetX = mouseX - (mouseX - offset.x) * (newScale / scale);
    const newOffsetY = mouseY - (mouseY - offset.y) * (newScale / scale);
    
    setScale(newScale);
    setOffset({ x: newOffsetX, y: newOffsetY });
  };

  // Handle mouse down for panning and selection
  const handleMouseDown = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Check if clicked on a node
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    if (nodeUnderMouse) {
      // Select the node
      if (e.shiftKey) {
        // Add to selection if holding shift
        setSelectedNodeIds(prev => 
          prev.includes(nodeUnderMouse.id) 
            ? prev.filter(id => id !== nodeUnderMouse.id) 
            : [...prev, nodeUnderMouse.id]
        );
      } else if (!selectedNodeIds.includes(nodeUnderMouse.id)) {
        // Replace selection
        setSelectedNodeIds([nodeUnderMouse.id]);
      }
      
      // Prepare for dragging
      setIsDragging(true);
      setDraggedNodeIds(selectedNodeIds.includes(nodeUnderMouse.id) 
        ? selectedNodeIds 
        : [nodeUnderMouse.id]
      );
    } else {
      // Start panning
      setIsPanning(true);
      setPanStart({ x: mouseX, y: mouseY });
      
      // Clear selection unless shift is held
      if (!e.shiftKey) {
        setSelectedNodeIds([]);
      }
    }
  };

  // Handle mouse move for panning and dragging
  const handleMouseMove = (e) => {
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to canvas coordinates
    const canvasX = (mouseX - offset.x) / scale;
    const canvasY = (mouseY - offset.y) / scale;
    
    // Handle panning
    if (isPanning) {
      const deltaX = mouseX - panStart.x;
      const deltaY = mouseY - panStart.y;
      
      setOffset(prev => ({
        x: prev.x + deltaX,
        y: prev.y + deltaY
      }));
      
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Handle dragging
    if (isDragging && draggedNodeIds.length > 0 && !readOnly) {
      // Calculate the delta from last mouse position
      const lastMousePos = {
        x: (panStart.x - offset.x) / scale,
        y: (panStart.y - offset.y) / scale
      };
      
      const deltaX = canvasX - lastMousePos.x;
      const deltaY = canvasY - lastMousePos.y;
      
      // Update node positions
      const updatedNodes = canvasData.nodes.map(node => {
        if (draggedNodeIds.includes(node.id)) {
          return {
            ...node,
            x: node.x + deltaX,
            y: node.y + deltaY
          };
        }
        return node;
      });
      
      // Update canvas data
      onChange({
        ...canvasData,
        nodes: updatedNodes
      });
      
      // Update pan start
      setPanStart({ x: mouseX, y: mouseY });
    }
    
    // Check for node under mouse for hover effect
    const nodeUnderMouse = canvasData.nodes.find(node => 
      isPointInNode({ x: canvasX, y: canvasY }, node)
    );
    
    setHoveredNodeId(nodeUnderMouse?.id || null);
  };

  // Handle mouse up to stop panning and dragging
  const handleMouseUp = () => {
    setIsPanning(false);
    setIsDragging(false);
    setDraggedNodeIds([]);
  };

  // Handle node selection
  const handleNodeSelect = (nodeId) => {
    setSelectedNodeIds([nodeId]);
  };

  // Handle node text change
  const handleNodeTextChange = (nodeId, text) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          text
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node resize
  const handleNodeResize = (nodeId, width, height) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          width,
          height
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Handle node move
  const handleNodeMove = (nodeId, x, y) => {
    const updatedNodes = canvasData.nodes.map(node => {
      if (node.id === nodeId) {
        return {
          ...node,
          x,
          y
        };
      }
      return node;
    });
    
    onChange({
      ...canvasData,
      nodes: updatedNodes
    });
  };

  // Add a new text node at a specific position
  const addTextNode = (x, y, text = 'New note') => {
    if (readOnly) return;
    
    // Convert screen coordinates to canvas coordinates
    const canvasX = (x - offset.x) / scale;
    const canvasY = (y - offset.y) / scale;
    
    // Create a new node
    const newNode = createTextNode(canvasX, canvasY, text);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      nodes: [...canvasData.nodes, newNode]
    });
    
    // Select the new node
    setSelectedNodeIds([newNode.id]);
    
    // Start editing the new node
    setEditingNodeId(newNode.id);
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const connectNodes = (sourceId, targetId) => {
    if (readOnly) return;
    
    // Find the nodes
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) return;
    
    // Calculate best connection sides
    const { fromSide, toSide } = calculateBestConnectionSides(sourceNode, targetNode);
    
    // Create a new edge
    const newEdge = createEdge(sourceId, targetId, fromSide, toSide);
    
    // Add to canvas data
    onChange({
      ...canvasData,
      edges: [...canvasData.edges, newEdge]
    });
    
    return newEdge.id;
  };

  // Delete selected nodes and their connections
  const deleteSelected = () => {
    if (readOnly || selectedNodeIds.length === 0) return;
    
    // Filter out selected nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !selectedNodeIds.includes(node.id)
    );
    
    // Filter out edges connected to deleted nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !selectedNodeIds.includes(edge.fromNode) && 
      !selectedNodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    onChange({
      ...canvasData,
      nodes: updatedNodes,
      edges: updatedEdges
    });
    
    // Clear selection
    setSelectedNodeIds([]);
  };

  // Start editing a node
  const startNodeEditing = (nodeId) => {
    setEditingNodeId(nodeId);
  };

  // Stop editing a node
  const stopNodeEditing = () => {
    setEditingNodeId(null);
  };

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-full overflow-hidden bg-stone-900"
      tabIndex={0} // Make container focusable for keyboard shortcuts
      onKeyDown={(e) => {
        // Delete key to remove selected nodes
        if (e.key === 'Delete' && !readOnly) {
          deleteSelected();
        }
      }}
    >
      {/* Canvas for rendering edges */}
      <canvas 
        ref={canvasRef}
        className="absolute top-0 left-0 w-full h-full"
      />
      
      {/* Interaction layer */}
      <canvas 
        ref={interactionLayerRef}
        className="absolute top-0 left-0 w-full h-full"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onDoubleClick={(e) => {
          if (readOnly) return;
          
          // Get mouse position
          const rect = canvasRef.current.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          // Add a new node at this position
          addTextNode(mouseX, mouseY);
        }}
      />
      
      {/* Node elements */}
      <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
        {canvasData.nodes.map(node => (
          node.type === 'text' && (
            <TextNode
              key={node.id}
              node={node}
              selected={selectedNodeIds.includes(node.id)}
              onSelect={handleNodeSelect}
              onChange={handleNodeTextChange}
              onResize={handleNodeResize}
              onMove={handleNodeMove}
              scale={scale}
              isEditing={editingNodeId === node.id}
              onStartEditing={startNodeEditing}
              onStopEditing={stopNodeEditing}
            />
          )
        ))}
      </div>
      
      {/* Controls */}
      <div className="absolute bottom-4 right-4 flex flex-col gap-2 bg-stone-800 p-2 rounded shadow">
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(scale + 0.1)}
        >
          +
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => setScale(Math.max(0.1, scale - 0.1))}
        >
          -
        </button>
        <button 
          className="p-2 bg-stone-700 hover:bg-stone-600 rounded text-white"
          onClick={() => {
            // Reset view
            setScale(1);
            setOffset({ x: 0, y: 0 });
          }}
        >
          Reset
        </button>
      </div>
    </div>
  );
};

export default CanvasContainer;

================
File: components/canvas/CanvasEditor.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { 
  createEmptyCanvas, 
  createTextNode, 
  createEdge, 
  generateId 
} from '../../utils/canvasUtils';
import CanvasContainer from './CanvasContainer';
import { 
  Plus, 
  Save, 
  Trash2, 
  Type,
  Link as LinkIcon,
  ArrowRight
} from 'lucide-react';

/**
 * Canvas Editor component that implements the JSONCanvas format
 * This is the main component for editing .canvas files
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasData, setCanvasData] = useState(createEmptyCanvas());
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeText, setNewNodeText] = useState('');
  const [showConnectionCreator, setShowConnectionCreator] = useState(false);
  const [connectionNodes, setConnectionNodes] = useState({ source: '', target: '' });

  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const parsed = JSON.parse(fileContent);
        
        // Check if it has the basic JSONCanvas structure
        if (parsed.nodes || parsed.edges) {
          setCanvasData({
            nodes: parsed.nodes || [],
            edges: parsed.edges || []
          });
          
          // Extract canvas name from file path
          if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          setCanvasData(createEmptyCanvas());
          console.warn('Invalid canvas format, creating new canvas');
        }
        
        setError(null);
      } else {
        // Create a new canvas if no content
        setCanvasData(createEmptyCanvas());
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      setCanvasData(createEmptyCanvas());
    } finally {
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);

  // Save canvas to file
  const handleSaveCanvas = useCallback(() => {
    if (!selectedFile) return;
    
    try {
      // Set status to saving
      setSaveStatus('saving');
      
      // Convert canvasData to proper format for saving
      // Make sure to remove any runtime-only properties
      const saveData = {
        nodes: canvasData.nodes.map(node => ({
          id: node.id,
          type: node.type,
          x: node.x,
          y: node.y,
          width: node.width,
          height: node.height,
          text: node.text,
          color: node.color
        })),
        edges: canvasData.edges.map(edge => ({
          id: edge.id,
          fromNode: edge.fromNode,
          toNode: edge.toNode,
          fromSide: edge.fromSide,
          toSide: edge.toSide,
          fromEnd: edge.fromEnd,
          toEnd: edge.toEnd,
          color: edge.color
        }))
      };
      
      // Serialize to JSON
      const jsonData = JSON.stringify(saveData, null, 2);
      
      // Call parent onSave function
      onSave(jsonData);
      
      // Update status
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  }, [canvasData, selectedFile, onSave]);

  // Auto-save when canvas data changes
  useEffect(() => {
    if (canvasData.nodes.length > 0 || canvasData.edges.length > 0) {
      // Only trigger auto-save if we have content
      const timer = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
      
      return () => clearTimeout(timer);
    }
  }, [canvasData, handleSaveCanvas]);

  // Add a new node to the canvas
  const addNode = (type, text) => {
    // Create a node positioned in the center of the visible area
    const centerX = 100;
    const centerY = 100;
    
    let newNode;
    if (type === 'text') {
      newNode = createTextNode(centerX, centerY, text || 'New note');
    } else {
      // Default to text node
      newNode = createTextNode(centerX, centerY, text || 'New note');
    }
    
    // Add node to canvas data
    setCanvasData(prev => ({
      ...prev,
      nodes: [...prev.nodes, newNode]
    }));
    
    // Reset UI state
    setShowNodeCreator(false);
    setNewNodeText('');
    
    return newNode.id;
  };

  // Create a connection between two nodes
  const createConnection = (sourceId, targetId) => {
    // Find nodes to connect
    const sourceNode = canvasData.nodes.find(n => n.id === sourceId);
    const targetNode = canvasData.nodes.find(n => n.id === targetId);
    
    if (!sourceNode || !targetNode) {
      setError('Could not find one or both nodes to connect.');
      return;
    }
    
    // Create the edge and add it to canvas data
    const newEdge = createEdge(sourceId, targetId);
    
    setCanvasData(prev => ({
      ...prev,
      edges: [...prev.edges, newEdge]
    }));
    
    // Reset UI state
    setShowConnectionCreator(false);
    setConnectionNodes({ source: '', target: '' });
    
    return newEdge.id;
  };

  // Delete selected nodes
  const handleDeleteSelected = (nodeIds) => {
    if (!nodeIds || nodeIds.length === 0) return;
    
    // Remove nodes
    const updatedNodes = canvasData.nodes.filter(node => 
      !nodeIds.includes(node.id)
    );
    
    // Remove edges connected to those nodes
    const updatedEdges = canvasData.edges.filter(edge => 
      !nodeIds.includes(edge.fromNode) && 
      !nodeIds.includes(edge.toNode)
    );
    
    // Update canvas data
    setCanvasData({
      nodes: updatedNodes,
      edges: updatedEdges
    });
  };

  // Handle canvas data changes from CanvasContainer
  const handleCanvasChange = (newData) => {
    setCanvasData(newData);
    setSaveStatus('saving');
  };

  // If the canvas is still loading, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => setShowNodeCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Note
          </button>
          
          <button 
            onClick={() => setShowConnectionCreator(true)}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Create connection"
          >
            <ArrowRight size={14} />
            Connect
          </button>
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => addNode('text', newNodeText)}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Connection creator dialog */}
      {showConnectionCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              Create Connection
            </span>
            <button
              onClick={() => setShowConnectionCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">From Node:</label>
              <select
                value={connectionNodes.source}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, source: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select source node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex gap-2 items-center">
              <label className="text-xs w-20">To Node:</label>
              <select
                value={connectionNodes.target}
                onChange={(e) => setConnectionNodes(prev => ({ ...prev, target: e.target.value }))}
                className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded text-xs focus:outline-none"
              >
                <option value="">Select target node</option>
                {canvasData.nodes.map(node => (
                  <option key={node.id} value={node.id}>
                    {node.text ? node.text.substring(0, 20) + (node.text.length > 20 ? '...' : '') : node.id}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="flex justify-end">
              <button
                onClick={() => createConnection(connectionNodes.source, connectionNodes.target)}
                disabled={!connectionNodes.source || !connectionNodes.target}
                className={`px-2 py-1 rounded text-xs ${
                  connectionNodes.source && connectionNodes.target
                    ? 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                    : 'bg-stone-600 text-stone-400 cursor-not-allowed'
                }`}
              >
                Connect
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas container */}
      <div className="flex-1 overflow-hidden">
        <CanvasContainer 
          canvasData={canvasData}
          onChange={handleCanvasChange}
          onDeleteSelected={handleDeleteSelected}
        />
      </div>
      
      {/* Status indicator */}
      <div className="px-2 py-1 border-t border-stone-700 bg-stone-800 text-xs flex justify-between">
        <span>
          {canvasData.nodes.length} nodes, {canvasData.edges.length} connections
        </span>
        <span>
          {saveStatus === 'saving' && <span className="text-yellow-400">Saving...</span>}
          {saveStatus === 'saved' && <span className="text-green-400">Saved</span>}
          {saveStatus === 'error' && <span className="text-red-400">Error saving!</span>}
        </span>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: components/canvas/TextNode.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { getCanvasColor } from '../../utils/canvasUtils';

/**
 * TextNode component renders an individual text node in the canvas
 */
const TextNode = ({
  node,
  selected,
  onSelect,
  onChange,
  onResize,
  onMove,
  scale,
  isEditing,
  onStartEditing,
  onStopEditing
}) => {
  const [localText, setLocalText] = useState(node.text || '');
  const textareaRef = useRef(null);
  const nodeRef = useRef(null);
  const resizeHandleRef = useRef(null);
  const [isResizing, setIsResizing] = useState(false);
  const [initialSize, setInitialSize] = useState({ width: 0, height: 0 });
  const [initialPosition, setInitialPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });

  // Update local text when node text changes
  useEffect(() => {
    setLocalText(node.text || '');
  }, [node.text]);

  // Focus the textarea when editing starts
  useEffect(() => {
    if (isEditing && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [isEditing]);

  // Handle mouse down for node selection and drag start
  const handleMouseDown = (e) => {
    e.stopPropagation();
    
    // Select this node
    onSelect(node.id);
    
    // If not already editing, prepare for dragging
    if (!isEditing) {
      setIsDragging(true);
      setInitialPosition({ x: node.x, y: node.y });
      setDragOffset({
        x: e.clientX / scale - node.x,
        y: e.clientY / scale - node.y
      });
    }
  };

  // Handle mouse down on resize handle
  const handleResizeMouseDown = (e) => {
    e.stopPropagation();
    
    // Start resizing
    setIsResizing(true);
    setInitialSize({ width: node.width, height: node.height });
    setInitialPosition({ x: e.clientX, y: e.clientY });
  };

  // Handle text change
  const handleTextChange = (e) => {
    const newText = e.target.value;
    setLocalText(newText);
    onChange(node.id, newText);
  };

  // Handle double click to start editing
  const handleDoubleClick = (e) => {
    e.stopPropagation();
    
    // Start editing
    if (!isEditing) {
      onStartEditing(node.id);
    }
  };

  // Handle blur to stop editing
  const handleBlur = () => {
    if (isEditing) {
      onStopEditing();
    }
  };

  // Get the background color
  const bgColor = getCanvasColor(node.color) || '#1e293b';
  const borderColor = selected ? '#14b8a6' : '#334155';

  return (
    <div
      ref={nodeRef}
      className="absolute select-none"
      style={{
        left: node.x,
        top: node.y,
        width: node.width,
        height: node.height,
        transform: `scale(${scale})`,
        transformOrigin: 'top left',
        zIndex: selected ? 10 : 1
      }}
      onMouseDown={handleMouseDown}
      onDoubleClick={handleDoubleClick}
    >
      <div
        className="w-full h-full rounded-md overflow-hidden flex flex-col"
        style={{
          backgroundColor: bgColor,
          border: `2px solid ${borderColor}`,
          boxShadow: selected ? '0 0 0 2px rgba(20, 184, 166, 0.5)' : 'none'
        }}
      >
        {isEditing ? (
          <textarea
            ref={textareaRef}
            className="w-full h-full p-2 bg-transparent text-white resize-none focus:outline-none"
            value={localText}
            onChange={handleTextChange}
            onBlur={handleBlur}
          />
        ) : (
          <div className="w-full h-full p-2 text-white overflow-auto whitespace-pre-wrap">
            {localText}
          </div>
        )}
        
        {/* Resize handle - only show when selected */}
        {selected && (
          <div
            ref={resizeHandleRef}
            className="absolute bottom-0 right-0 w-4 h-4 bg-teal-500 rounded-tl-md cursor-nwse-resize"
            onMouseDown={handleResizeMouseDown}
          />
        )}
      </div>
    </div>
  );
};

export default TextNode;

================
File: components/CanvasEditor.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel
} from 'reactflow';
import 'reactflow/dist/style.css';
import { 
  Plus, 
  Save, 
  FileText, 
  Trash2, 
  Type,
  Square,
  Link as LinkIcon,
  Edit,
} from 'lucide-react';

// Import node types from the node registry
import nodeTypes from './nodes';

/**
 * Canvas Editor component for use within the FileContent area
 * This component handles the editing of .canvas files in the file explorer
 */
const CanvasEditor = ({ fileContent, selectedFile, onSave }) => {
  const [canvasName, setCanvasName] = useState('Untitled Canvas');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // ReactFlow states
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);
  
  // UI states
  const [selectedElements, setSelectedElements] = useState([]);
  const [showNodeCreator, setShowNodeCreator] = useState(false);
  const [newNodeType, setNewNodeType] = useState('text');
  const [newNodeText, setNewNodeText] = useState('');
  const [editingNode, setEditingNode] = useState(null);
  
  // For auto-save functionality
  const saveTimeoutRef = useRef(null);
  
  // Setup custom node types with required props
  const customNodeTypes = {};
  
  // Add the TextNode and pass required props
  customNodeTypes.text = (props) => {
    // Create a handler for text updates
    const handleNodeTextChange = (nodeId, newText) => {
      setNodes((nds) => 
        nds.map((node) => {
          if (node.id === nodeId) {
            return {
              ...node,
              data: {
                ...node.data,
                text: newText
              }
            };
          }
          return node;
        })
      );
    };
    
    // Add the onChange handler to node data
    const nodeWithHandlers = {
      ...props,
      data: {
        ...props.data,
        onChange: handleNodeTextChange
      },
      editingNode: editingNode,
      setEditingNode: setEditingNode
    };
    
    // Use the TextNode component from the registry
    return React.createElement(nodeTypes.text, nodeWithHandlers);
  };
  
  // Load canvas data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        setIsLoading(true);
        
        // Parse the JSON canvas file
        const canvasData = JSON.parse(fileContent);
        
        if (canvasData.nodes && canvasData.edges) {
          // Transform nodes from JSONCanvas format to ReactFlow format
          const transformedNodes = canvasData.nodes.map(node => {
            // Check if node has position as an object or direct x/y properties
            const nodeX = node.position?.x !== undefined ? node.position.x : (node.x || 0);
            const nodeY = node.position?.y !== undefined ? node.position.y : (node.y || 0);
            
            return {
              id: node.id,
              type: node.type,
              // For ReactFlow, use position property
              position: {
                x: nodeX,
                y: nodeY
              },
              // Preserve data, or create default data object with text if not present
              data: node.data || { text: node.text || "Text node" }
            };
          });
          
          console.log('[DEBUG] Transformed nodes:', transformedNodes.length);
          setNodes(transformedNodes);
          setEdges(canvasData.edges);
          
          // Extract canvas name from file path or use from canvas data
          if (canvasData.name) {
            setCanvasName(canvasData.name);
          } else if (selectedFile) {
            const pathParts = selectedFile.path.split('/');
            const fileName = pathParts[pathParts.length - 1];
            setCanvasName(fileName.replace('.canvas', ''));
          }
          
          setSaveStatus('saved');
        } else {
          // Create a new canvas if the structure is invalid
          createNewCanvas();
        }
        
        setIsLoading(false);
        setError(null);
      } else {
        // Create a new canvas if no content
        createNewCanvas();
      }
    } catch (err) {
      console.error('Error parsing canvas file:', err);
      setError('Failed to parse canvas file. Creating a new canvas.');
      createNewCanvas();
      setIsLoading(false);
    }
  }, [fileContent, selectedFile]);
  
  // Auto-save when node/edge data changes
  useEffect(() => {
    if (nodes.length > 0 || edges.length > 0) {
      // Only start auto-save if we have actual content
      
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveCanvas();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [nodes, edges]);
  
  // Create a new canvas
  const createNewCanvas = () => {
    setNodes([]);
    setEdges([]);
    
    // Set canvas name from file if available
    if (selectedFile) {
      const pathParts = selectedFile.path.split('/');
      const fileName = pathParts[pathParts.length - 1];
      setCanvasName(fileName.replace('.canvas', ''));
    } else {
      setCanvasName('Untitled Canvas');
    }
    
    setSaveStatus('saved');
  };
  
  // Save canvas to file
  const handleSaveCanvas = () => {
    if (!selectedFile) return;
    
    try {
      // Transform nodes from ReactFlow format back to JSONCanvas format
      const transformedNodes = nodes.map(node => {
        // Extract position from ReactFlow format
        const nodePosition = node.position || { x: 0, y: 0 };
        
        return {
          id: node.id,
          type: node.type,
          // Store position in a position object for compatibility with JSONCanvas format
          position: {
            x: nodePosition.x,
            y: nodePosition.y
          },
          // Preserve the data object
          data: node.data
        };
      });
      
      // Create canvas data structure
      const canvasData = {
        name: canvasName,
        nodes: transformedNodes,
        edges,
        version: "1.0",
        metadata: {
          created: new Date().toISOString(),
          modified: new Date().toISOString()
        }
      };
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Canvas Editor - Saving canvas data:', {
        nodesLength: transformedNodes.length,
        edgesLength: edges.length,
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Serialize to JSON string
      const canvasContent = JSON.stringify(canvasData, null, 2);
      
      // Call the parent onSave function
      onSave(canvasContent);
      
      // Update state
      setSaveStatus('saved');
      setError(null);
    } catch (err) {
      console.error('Error saving canvas:', err);
      setError('Failed to save canvas file.');
      setSaveStatus('error');
    }
  };
  
  // Handle connection (edge) creation
  const onConnect = useCallback((params) => {
    // Create a custom edge with styling and ID
    setEdges((eds) => addEdge({
      ...params,
      id: `edge-${Date.now()}`,
      type: 'default',
      animated: false,
      style: { stroke: '#14b8a6' }
    }, eds));
  }, [setEdges]);
  
  // Handle node selection
  const onSelectionChange = useCallback(({ nodes, edges }) => {
    setSelectedElements([...nodes, ...edges]);
  }, []);
  
  // Handle drag over for node creation
  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);
  
  // Handle drop for node creation
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      
      const type = event.dataTransfer.getData('application/reactflow/type');
      if (!type || !reactFlowInstance) return;
      
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });
      
      const newNode = {
        id: `node-${Date.now()}`,
        type,
        position,
        data: { text: 'New text node' },
      };
      
      setNodes((nds) => nds.concat(newNode));
    },
    [reactFlowInstance, setNodes]
  );
  
  // Create a new node
  const createNode = (type) => {
    if (!reactFlowInstance) return;
    
    // If we have a viewport, center the node in the visible area
    const position = reactFlowInstance.project({
      x: window.innerWidth / 2,
      y: window.innerHeight / 2
    });
    
    const newNode = {
      id: `node-${Date.now()}`,
      type,
      position,
      data: { text: newNodeText || 'New text node' }
    };
    
    // Add the node and immediately set it to edit mode
    setNodes((nds) => {
      const updatedNodes = nds.concat(newNode);
      setTimeout(() => {
        setEditingNode(newNode.id);
      }, 100);
      return updatedNodes;
    });
    
    setShowNodeCreator(false);
    setNewNodeText('');
  };
  
  // Delete selected elements
  const deleteSelected = () => {
    const selectedNodeIds = selectedElements
      .filter(el => el.type !== 'default')
      .map(el => el.id);
    
    const selectedEdgeIds = selectedElements
      .filter(el => el.type === 'default')
      .map(el => el.id);
    
    setNodes(nodes.filter(node => !selectedNodeIds.includes(node.id)));
    setEdges(edges.filter(edge => !selectedEdgeIds.includes(edge.id)));
    setSelectedElements([]);
  };
  
  // If canvas data isn't loaded yet, show a loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading canvas editor...</span>
      </div>
    );
  }
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <div className="p-2 border-b border-stone-700 flex justify-between items-center bg-stone-800">
        <h2 className="text-md font-semibold text-teal-400">{canvasName}</h2>
        
        <div className="flex gap-2">
          <button 
            onClick={handleSaveCanvas}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Save canvas"
          >
            <Save size={14} />
            Save
          </button>
          
          <button 
            onClick={() => {
              setNewNodeType('text');
              setShowNodeCreator(true);
            }}
            className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
            title="Add text node"
          >
            <Type size={14} />
            Add Node
          </button>
          
          {/* Edit button - appears when a node is selected */}
          {selectedElements.length === 1 && selectedElements[0].type === 'text' && (
            <button 
              onClick={() => setEditingNode(selectedElements[0].id)}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Edit selected node"
            >
              <Edit size={14} />
              Edit
            </button>
          )}
          
          {selectedElements.length > 0 && (
            <button 
              onClick={deleteSelected}
              className="px-2 py-1 bg-stone-700 hover:bg-stone-600 rounded text-xs flex items-center gap-1"
              title="Delete selected"
            >
              <Trash2 size={14} />
              Delete
            </button>
          )}
        </div>
      </div>
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Node creator dialog */}
      {showNodeCreator && (
        <div className="p-2 border-b border-stone-700 bg-stone-800">
          <div className="flex items-center justify-between mb-1">
            <span className="text-sm font-bold">
              New Text Node
            </span>
            <button
              onClick={() => setShowNodeCreator(false)}
              className="p-1 rounded hover:bg-stone-700 text-stone-400"
            >
              <Trash2 size={14} />
            </button>
          </div>
          
          <div className="flex flex-col gap-2">
            <textarea
              value={newNodeText}
              onChange={(e) => setNewNodeText(e.target.value)}
              placeholder="Enter text content"
              className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
              rows={3}
            />
            <div className="flex justify-end">
              <button
                onClick={() => createNode('text')}
                className="px-2 py-1 bg-teal-700 text-teal-100 hover:bg-teal-600 rounded text-xs"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Canvas area */}
      <div className="flex-1 overflow-hidden">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          connectionMode="loose"
          onConnect={onConnect}
          onInit={setReactFlowInstance}
          onDrop={onDrop}
          onDragOver={onDragOver}
          onSelectionChange={onSelectionChange}
          nodeTypes={customNodeTypes}
          fitView
          snapToGrid
          snapGrid={[15, 15]}
          defaultViewport={{ x: 0, y: 0, zoom: 1 }}
          minZoom={0.1}
          maxZoom={4}
          deleteKeyCode="Delete"
          multiSelectionKeyCode="Control"
          selectionKeyCode="Shift"
        >
          {/* Empty canvas help message */}
          {nodes.length === 0 && (
            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
              <div className="bg-stone-800 bg-opacity-80 p-6 rounded-lg shadow-lg text-center max-w-md">
                <Type size={40} className="mx-auto mb-4 text-teal-500" />
                <h3 className="text-xl text-teal-400 mb-2 font-semibold">Canvas Editor</h3>
                <p className="text-stone-300 mb-4">
                  This is your canvas workspace. Create notes and connect them with arrows.
                </p>
                <ul className="text-left text-stone-300 space-y-2 mb-4">
                  <li>• Click "Add Node" to create a new text node</li>
                  <li>• Hover over a node and click the edit button to edit content</li>
                  <li>• Drag from a node's connection handle (teal dot) to another node to create a connection</li>
                  <li>• Select nodes and press Delete or use the Delete button</li>
                </ul>
                <p className="text-stone-400 text-sm">
                  See canvas-editor-documentation.md for more details
                </p>
              </div>
            </div>
          )}
          <Background color="#44403c" gap={16} />
          <Controls showInteractive={false} />
          <MiniMap
            nodeColor={(node) => '#14b8a6'}
            maskColor="rgba(0, 0, 0, 0.5)"
            style={{ backgroundColor: '#292524' }}
          />
          
          <Panel position="top-left" className="bg-stone-800 p-2 rounded shadow-md">
            <div className="flex flex-col gap-1">
              <div className="text-xs text-stone-400">Drag to create:</div>
              <div 
                className="flex items-center gap-1 p-1 bg-stone-700 rounded cursor-grab"
                draggable
                onDragStart={(event) => {
                  event.dataTransfer.setData('application/reactflow/type', 'text');
                  event.dataTransfer.effectAllowed = 'move';
                }}
              >
                <Type size={14} />
                <span className="text-xs">Text Node</span>
              </div>
            </div>
          </Panel>
        </ReactFlow>
      </div>
    </div>
  );
};

export default CanvasEditor;

================
File: components/CommandInput.jsx
================
import React from 'react';

const CommandInput = ({ focusRef, isAdmin, handleCommand }) => {
  // Handle command input
  const onKeyDown = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      handleCommand(cmd);
      e.target.value = '';
    }
  };

  return (
    <div className="p-2 flex items-center gap-2 border-t border-stone-700">
      <span className="text-teal-400">$</span>
      <input
        ref={focusRef}
        type="text"
        onKeyDown={onKeyDown}
        className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
      />
    </div>
  );
};

export default CommandInput;

================
File: components/dialogs/FileDialogs.jsx
================
import React, { useRef, useEffect, useState } from 'react';
import { AVAILABLE_FILE_TYPES } from '../../utils/fileUtils';
import { 
  X, FileText, Code, Coffee, BookOpen, Globe, File, 
  Music, Image, Figma, Map 
} from 'lucide-react';

// Dialog for creating a new file or folder
export const CreateFileDialog = ({
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  errorMessage,
  closeCreateDialog,
  createNewItem
}) => {
  const createInputRef = useRef(null);
  const [showAutocomplete, setShowAutocomplete] = useState(false);
  const [filteredTypes, setFilteredTypes] = useState([]);
  const [selectedTypeIndex, setSelectedTypeIndex] = useState(0);
  
  // Get file type icon for autocomplete menu
  const getFileTypeIcon = (fileType) => {
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (fileType) {
      case 'md': return <FileText {...iconProps} />;
      case 'canvas': return <Figma {...iconProps} />;
      case 'map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showCreateDialog && createInputRef.current) {
      createInputRef.current.focus();
    }
  }, [showCreateDialog]);
  
  // Handle input change to detect periods and filter file types
  const handleInputChange = (e) => {
    const value = e.target.value;
    setNewItemName(value);
    
    // Only show autocomplete for files, not folders
    if (createType === 'file') {
      // Check if we should show autocomplete
      const lastPeriodIndex = value.lastIndexOf('.');
      if (lastPeriodIndex !== -1 && lastPeriodIndex < value.length) {
        const suffix = value.substring(lastPeriodIndex + 1);
        
        // Filter available types based on what user has typed after the period
        const filtered = AVAILABLE_FILE_TYPES.filter(type => 
          type.startsWith(suffix.toLowerCase())
        );
        
        setFilteredTypes(filtered);
        setShowAutocomplete(filtered.length > 0);
        setSelectedTypeIndex(0);
      } else {
        setShowAutocomplete(false);
      }
    }
  };
  
  // Function to select and apply a file type
  const selectFileType = (type) => {
    const lastPeriodIndex = newItemName.lastIndexOf('.');
    if (lastPeriodIndex !== -1) {
      // Replace everything after the period with the selected file type
      setNewItemName(newItemName.substring(0, lastPeriodIndex + 1) + type);
    }
    setShowAutocomplete(false);
  };
  
  // Handle key press in the create dialog
  const handleCreateKeyPress = (e) => {
    if (showAutocomplete) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev + 1) % filteredTypes.length
        );
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedTypeIndex(prev => 
          (prev - 1 + filteredTypes.length) % filteredTypes.length
        );
      } else if (e.key === 'Tab' || e.key === 'Enter') {
        e.preventDefault();
        selectFileType(filteredTypes[selectedTypeIndex]);
        if (e.key === 'Enter') {
          // If Enter was pressed and a type was selected, also create the item
          setTimeout(() => createNewItem(), 10);
        }
      } else if (e.key === 'Escape') {
        e.preventDefault();
        setShowAutocomplete(false);
      }
    } else if (e.key === 'Enter') {
      e.preventDefault();
      createNewItem();
    } else if (e.key === 'Escape') {
      closeCreateDialog();
    }
  };
  
  if (!showCreateDialog) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          {createType === 'file' ? 'New File' : 'New Folder'}
        </span>
        <button
          onClick={closeCreateDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2 relative">
        <div className="flex-1 relative">
          <input
            ref={createInputRef}
            type="text"
            value={newItemName}
            onChange={handleInputChange}
            onKeyDown={handleCreateKeyPress}
            placeholder={createType === 'file' ? 'filename.ext' : 'folder name'}
            className="w-full bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
            disabled={isCreating}
          />
          {showAutocomplete && (
            <div className="absolute bottom-full mb-1 w-full bg-stone-800 border border-stone-600 rounded shadow-lg z-50 max-h-32 overflow-y-auto">
              {filteredTypes.map((type, index) => (
                <div 
                  key={type}
                  onClick={() => selectFileType(type)}
                  className={`px-2 py-1 cursor-pointer text-sm flex items-center ${
                    index === selectedTypeIndex 
                      ? 'bg-stone-600 text-white' 
                      : 'hover:bg-stone-700 text-teal-400'
                  }`}
                >
                  {getFileTypeIcon(type)}
                  {type}
                </div>
              ))}
            </div>
          )}
        </div>
        <button
          onClick={createNewItem}
          disabled={isCreating || !newItemName.trim()}
          className={`px-2 py-1 rounded text-xs ${
            isCreating || !newItemName.trim()
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isCreating ? 'Creating...' : 'Create'}
        </button>
      </div>
    </div>
  );
};

// Dialog for renaming a file or folder
export const RenameDialog = ({
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  errorMessage,
  closeRenameDialog,
  renameItem
}) => {
  const renameInputRef = useRef(null);
  
  // Focus the input field when the dialog is shown
  useEffect(() => {
    if (showRenameDialog && renameInputRef.current) {
      renameInputRef.current.focus();
    }
  }, [showRenameDialog]);
  
  // Handle key press in the rename dialog
  const handleRenameKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      renameItem();
    } else if (e.key === 'Escape') {
      closeRenameDialog();
    }
  };
  
  if (!showRenameDialog || !itemToRename) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Rename {itemToRename.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeRenameDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="flex gap-2">
        <input
          ref={renameInputRef}
          type="text"
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          onKeyDown={handleRenameKeyPress}
          placeholder="New name"
          className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          disabled={isRenaming}
        />
        <button
          onClick={renameItem}
          disabled={isRenaming || !newName.trim() || newName === itemToRename.name}
          className={`px-2 py-1 rounded text-xs ${
            isRenaming || !newName.trim() || newName === itemToRename.name
              ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
              : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
          }`}
        >
          {isRenaming ? 'Renaming...' : 'Rename'}
        </button>
      </div>
    </div>
  );
};

// Dialog for deleting a file or folder
export const DeleteDialog = ({
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  errorMessage,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  if (!showDeleteDialog || !itemToDelete) return null;
  
  return (
    <div className="p-2 border-t border-stone-700 bg-stone-800">
      <div className="flex items-center justify-between mb-1">
        <span className="text-sm font-bold">
          Delete {itemToDelete.type === 'directory' ? 'Folder' : 'File'}
        </span>
        <button
          onClick={closeDeleteDialog}
          className="p-1 rounded hover:bg-stone-700 text-stone-400"
        >
          <X size={14} />
        </button>
      </div>
      <div className="mb-2 text-sm">
        <p>Are you sure you want to delete <span className="text-red-400 font-bold">{itemToDelete.name}</span>?</p>
        {itemToDelete.type === 'directory' && (
          <p className="text-red-400 text-xs mt-1">This will delete all files and folders inside it!</p>
        )}
      </div>
      <div className="flex gap-2 justify-end">
        <button
          onClick={closeDeleteDialog}
          className="px-2 py-1 rounded text-xs bg-stone-700 hover:bg-stone-600"
        >
          Cancel
        </button>
        <button
          onClick={handleDeleteItem}
          disabled={isDeleting}
          className={`px-2 py-1 rounded text-xs ${
            isDeleting
              ? 'bg-red-900 text-red-300 cursor-not-allowed'
              : 'bg-red-700 text-red-100 hover:bg-red-600'
          }`}
        >
          {isDeleting ? 'Deleting...' : 'Delete'}
        </button>
      </div>
    </div>
  );
};

================
File: components/FileContent.jsx
================
import React, { useRef, useEffect } from 'react';
import { FileText, Edit, Eye, Bold, Italic, Code as CodeIcon, Link, Heading, List, ListOrdered, CheckSquare, Download, Map } from 'lucide-react';
import { handleEditorKeyDown, convertMarkdownToHtml } from '../utils/markdownUtils';
import MapEditor from './MapEditor';
import CanvasEditor from './CanvasEditor';

const FileContent = ({
  selectedFile,
  isContentLoading,
  fileContent,
  errorMessage,
  showPreview,
  editMode,
  saveStatus,
  converter,
  isAdmin,
  user,
  activeTab,
  setFileContent,
  toggleEditMode,
  handleMarkdownChange,
  handleSaveFileContent,
  handleExportFile
}) => {
  // Debug logging

  // Add an effect to log when file content changes
  useEffect(() => {
  }, [fileContent]);

  // Add an effect to log when selected file changes
  useEffect(() => {
  }, [selectedFile]);
  
  // Add debugging for save file content function
  const wrappedHandleSaveFileContent = (content) => {

    
    // Call the original function
    handleSaveFileContent(content);
  };

  const textareaRef = useRef(null);

  // Insert markdown syntax at cursor position
  const insertMarkdown = (prefix, suffix = '') => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, wrap it with prefix and suffix
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start + prefix.length;
        textarea.selectionEnd = end + prefix.length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor between prefix and suffix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
        textarea.focus();
      }, 0);
    }
  };

  // Insert list items
  const insertList = (listPrefix) => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, apply list formatting to each line
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const lines = selectedText.split('\n');
      
      // Format each line as a list item
      const formattedLines = lines.map(line => {
        // Skip empty lines
        if (line.trim() === '') return line;
        
        // For numbered lists, increment the number for each line
        if (listPrefix === '1. ') {
          const index = lines.indexOf(line) + 1;
          return `${index}. ${line}`;
        }
        
        return `${listPrefix}${line}`;
      });
      
      const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start;
        textarea.selectionEnd = start + formattedLines.join('\n').length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + listPrefix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor after the inserted prefix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
        textarea.focus();
      }, 0);
    }
  };

  // Handle editor keyboard events
  const onEditorKeyDown = (e) => {
    handleEditorKeyDown(e, textareaRef, fileContent, setFileContent);
  };

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {selectedFile ? (
        <>
          {/* Header with file name, status, and controls */}
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
            <div className="flex items-center">
              <span className="mr-2">{selectedFile.name}</span>
              {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
              {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
              {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
            </div>
            
            <div className="flex gap-2">
              {/* Export button - available for all file types */}
              <button 
                onClick={handleExportFile}
                className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs flex items-center gap-1"
                title="Export file"
              >
                <Download size={14} />
                Export
              </button>
              
              {/* Show edit/preview toggle for markdown files to admins or users with file access (for private files) */}
              {selectedFile.name.endsWith('.md') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <>
                  {editMode && (
                    <button 
                      onClick={handleSaveFileContent}
                      className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs"
                      title="Save file"
                    >
                      Save
                    </button>
                  )}
                  <button 
                    onClick={toggleEditMode}
                    className={`px-2 py-1 rounded text-xs flex items-center gap-1 ${editMode ? 'bg-teal-700 text-teal-100' : 'bg-stone-800 hover:bg-stone-700'}`}
                    title={editMode ? "Switch to preview mode" : "Switch to edit mode"}
                  >
                    {editMode ? <Eye size={14} /> : <Edit size={14} />}
                    {editMode ? 'Preview' : 'Edit'}
                  </button>
                </>
              )}
            </div>
          </div>
          
          {/* Error message */}
          {errorMessage && (
            <div className="p-2 bg-red-900 text-red-200 text-sm">
              {errorMessage}
            </div>
          )}
          
          {/* Content area - editor or preview based on file type */}
          {isContentLoading ? (
            <div className="flex-1 flex items-center justify-center">
              <span className="text-teal-300">Loading content...</span>
            </div>
          ) : selectedFile.name.endsWith('.canvas') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Canvas Editor for .canvas files - only for admin users and users with file access
            <CanvasEditor
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : selectedFile.name.endsWith('.map') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Map Editor for .map files - only for admin users and users with file access
            <MapEditor 
              fileContent={fileContent}
              selectedFile={selectedFile}
              onSave={wrappedHandleSaveFileContent}
            />
          ) : editMode && selectedFile.name.endsWith('.md') && (isAdmin || (user && user.has_file_access && activeTab === 'private')) ? (
            // Markdown Editor mode - only for markdown files and admin users
            <div className="flex-1 flex flex-col">
              {/* Markdown toolbar */}
              <div className="p-2 border-b border-stone-700 bg-stone-800 flex flex-wrap gap-2">
                <button 
                  onClick={() => insertMarkdown('### ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Heading"
                >
                  <Heading size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('**', '**')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Bold"
                >
                  <Bold size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('*', '*')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Italic"
                >
                  <Italic size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('`', '`')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Inline Code"
                >
                  <CodeIcon size={16} />
                </button>
                <button 
                  onClick={() => insertMarkdown('[', '](url)')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Link"
                >
                  <Link size={16} />
                </button>
                <span className="border-r border-stone-700 h-6"></span>
                <button 
                  onClick={() => insertList('- ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Bullet List"
                >
                  <List size={16} />
                </button>
                <button 
                  onClick={() => insertList('1. ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Numbered List"
                >
                  <ListOrdered size={16} />
                </button>
                <button 
                  onClick={() => insertList('- [ ] ')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Checklist"
                >
                  <CheckSquare size={16} />
                </button>
              </div>
              
              <div className="flex-1 p-2">
                <textarea
                  ref={textareaRef}
                  className="w-full h-full bg-stone-800 text-teal-50 p-4 resize-none focus:outline-none font-mono"
                  value={fileContent}
                  onChange={handleMarkdownChange}
                  onKeyDown={onEditorKeyDown}
                  placeholder="# Start typing your markdown here..."
                />
              </div>
            </div>
          ) : (
            // Preview mode
            <div className="flex-1 overflow-auto p-4">
              <div className="markdown-preview text-teal-50">
                {selectedFile.name.endsWith('.md') ? (
                  <div 
                    dangerouslySetInnerHTML={{ 
                      __html: convertMarkdownToHtml(converter, fileContent) 
                    }} 
                    className="markdown-content"
                  />
                ) : (
                  <pre className="font-mono text-sm whitespace-pre-wrap">
                    {fileContent}
                  </pre>
                )}
              </div>
            </div>
          )}
        </>
      ) : (
        // No file selected
        <div className="flex items-center justify-center h-full text-stone-600">
          <div className="text-center">
            <FileText size={48} className="mx-auto mb-4" />
            <p>Select a file to view</p>
            <p className="text-xs mt-2">All file types are supported for viewing</p>
            {isAdmin && (
              <p className="text-xs mt-1">
                Admin users can edit markdown (.md), map (.map), and canvas (.canvas) files
              </p>
            )}
            {!isAdmin && user && user.has_file_access && (
              <p className="text-xs mt-1">
                Users with file access can edit markdown (.md), map (.map), and canvas (.canvas) files in the Private section
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default FileContent;

================
File: components/FileTree.jsx
================
import React from 'react';
import { 
  FolderOpen, ChevronRight, ChevronDown, File, Coffee, Code, 
  BookOpen, FileText, Globe, Lock, FileEdit, Trash2, Music, Image, Figma,
  FolderPlus, Plus, Map
} from 'lucide-react';
import { getFileIconName } from '../utils/fileUtils';
import StorageStats from './StorageStats';
import { CreateFileDialog, RenameDialog, DeleteDialog } from './dialogs/FileDialogs';

const FileTree = ({ 
  files, 
  publicFiles, 
  activeTab,
  expandedFolders,
  currentPath,
  selectedFile,
  isTreeLoading,
  errorMessage,
  isAdmin,
  user,
  toggleFolder,
  handleFileSelect,
  openRenameDialog,
  openDeleteDialog,
  openCreateDialog,
  handleDragStart,
  handleDragOver,
  handleDragLeave,
  handleDrop,
  handleContainerDragOver,
  handleContainerDragLeave,
  handleContainerDrop,
  dropTarget,
  storageStats,
  // Dialog-related props
  showCreateDialog,
  createType,
  newItemName,
  setNewItemName,
  isCreating,
  closeCreateDialog,
  createNewItem,
  showRenameDialog,
  itemToRename,
  newName,
  setNewName,
  isRenaming,
  closeRenameDialog,
  renameItem,
  showDeleteDialog,
  itemToDelete,
  isDeleting,
  closeDeleteDialog,
  handleDeleteItem
}) => {
  
  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    const iconName = getFileIconName(fileName);
    const iconProps = { size: 16, className: "mr-2" };
    
    switch (iconName) {
      case 'FileText': return <FileText {...iconProps} />;
      case 'Code': return <Code {...iconProps} />;
      case 'Coffee': return <Coffee {...iconProps} />;
      case 'BookOpen': return <BookOpen {...iconProps} />;
      case 'Globe': return <Globe {...iconProps} />;
      case 'Music': return <Music {...iconProps} />;
      case 'Image': return <Image {...iconProps} />;
      case 'Figma': return <Figma {...iconProps} />;
      case 'Map': return <Map {...iconProps} />;
      default: return <File {...iconProps} />;
    }
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    // Keep track of the path to the currently selected file to highlight its parent folder
    const selectedFilePath = selectedFile?.path || '';
    const selectedFileParentPath = selectedFile && selectedFile.type !== 'directory' ? 
      selectedFilePath.substring(0, selectedFilePath.lastIndexOf('/')) || '/' : '';
    
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        // A folder is considered active if it's the current path OR if it's the parent of the selected file
        const isActive = currentPath === item.path || (selectedFileParentPath === item.path);
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center justify-between py-1 px-1 rounded hover:bg-stone-700 cursor-pointer group ${
                isActive ? 'bg-stone-800 text-teal-300 font-bold' : 
                isExpanded ? 'text-teal-300' : 'text-teal-400'
              } ${dropTarget && dropTarget.path === item.path ? 'bg-teal-900 border border-teal-500' : ''}`}
              onClick={() => toggleFolder(item.path, item)}
              draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
              onDragStart={(e) => handleDragStart(e, item)}
              onDragOver={(e) => handleDragOver(e, item)}
              onDragLeave={(e) => handleDragLeave(e)}
              onDrop={(e) => handleDrop(e, item)}
            >
              <div className="flex items-center">
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                <FolderOpen size={16} className="ml-1 mr-2" />
                <span className="text-sm">{item.name}</span>
              </div>
              
              {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
                <div className="flex">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openRenameDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                    title="Rename folder"
                  >
                    <FileEdit size={14} />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openDeleteDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                    title="Delete folder"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              )}
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center justify-between py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 group ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
            draggable={isAdmin || (user?.has_file_access && activeTab === 'private')}
            onDragStart={(e) => handleDragStart(e, item)}
          >
            <div className="flex items-center">
              {getFileIcon(item.name)}
              <span className="text-sm">{item.name}</span>
            </div>
            
            {/* File operation buttons */}
            {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
              <div className="flex">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openRenameDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                  title="Rename file"
                >
                  <FileEdit size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openDeleteDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                  title="Delete file"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            )}
          </div>
        );
      }
    });
  };

  return (
    <div className="w-1/4 border-r border-stone-700 flex flex-col overflow-hidden">
      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <span>FILES</span>
          
          {/* Tabs for switching between public and private files */}
          <div className="flex ml-4">
            <button
              onClick={() => {
                if (activeTab !== 'public') {
                  // First set the active tab, then select the root folder
                  handleFileSelect({ 
                    path: '/', 
                    type: 'directory', 
                    name: 'Root', 
                    isPublic: true,
                    setTab: 'public' // Add flag to explicitly set the tab
                  });
                }
              }}
              className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ${
                activeTab === 'public' 
                  ? 'bg-stone-700 text-teal-300' 
                  : 'bg-stone-800 hover:bg-stone-700'
              }`}
              title="Public files (readable by all users)"
            >
              <Globe size={14} />
              <span>Public</span>
            </button>
            
            {(isAdmin || (user && user.has_file_access)) && (
              <button
                onClick={() => {
                  if (activeTab !== 'private') {
                    // First set the active tab, then select the root folder
                    handleFileSelect({ 
                      path: '/', 
                      type: 'directory', 
                      name: 'Root',
                      setTab: 'private' // Add flag to explicitly set the tab
                    });
                  }
                }}
                className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ml-1 ${
                  activeTab === 'private' 
                    ? 'bg-stone-700 text-teal-300' 
                    : 'bg-stone-800 hover:bg-stone-700'
                }`}
                title="Private files (admin only)"
              >
                <Lock size={14} />
                <span>Private</span>
              </button>
            )}
          </div>
        </div>
        
        {/* File creation buttons (admins for both tabs, users with file access only for private tab) */}
        {(isAdmin || (user && user.has_file_access && activeTab === 'private')) && (
          <div className="flex gap-2">
            <button
              onClick={() => openCreateDialog('file')}
              className="p-1 rounded hover:bg-stone-700 text-teal-400"
              title="Create new file"
            >
              <Plus size={16} />
            </button>
            <button
              onClick={() => openCreateDialog('directory')}
              className="p-1 rounded hover:bg-stone-700 text-teal-400"
              title="Create new folder"
            >
              <FolderPlus size={16} />
            </button>
          </div>
        )}
      </div>
      
      <div 
        className="flex-1 overflow-auto"
        onDragOver={handleContainerDragOver}
        onDragLeave={handleContainerDragLeave}
        onDrop={handleContainerDrop}
      >
        {isTreeLoading ? (
          <div className="flex items-center justify-center h-full">
            <span className="text-teal-300">Loading files...</span>
          </div>
        ) : errorMessage ? (
          <div className="p-2 text-red-400">{errorMessage}</div>
        ) : (
          <div className="p-2 font-mono">
            {activeTab === 'public' ? (
              // Show public files to all users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Globe size={16} className="mr-2" />
                  <span className="text-sm font-bold">Public Files</span>
                </div>
                {publicFiles.length > 0 ? (
                  renderFileTree(publicFiles)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No public files available</div>
                )}
              </>
            ) : (
              // Show private files to admin users
              <>
                <div className="flex items-center py-1 px-1 text-teal-300">
                  <Lock size={16} className="mr-2" />
                  <span className="text-sm font-bold">Private Files</span>
                </div>
                {files.length > 0 ? (
                  renderFileTree(files)
                ) : (
                  <div className="ml-4 text-stone-500 text-sm">No private files available</div>
                )}
              </>
            )}
          </div>
        )}
      </div>
      
      <div className="p-2 border-t border-stone-700 text-xs">
        {selectedFile ? selectedFile.path : currentPath}
      </div>
      
      {/* Storage statistics display */}
      {(isAdmin || (user && user.has_file_access)) && (
        <StorageStats stats={storageStats} />
      )}
      
      {/* File operation dialogs */}
      <CreateFileDialog
        showCreateDialog={showCreateDialog}
        createType={createType}
        newItemName={newItemName}
        setNewItemName={setNewItemName}
        isCreating={isCreating}
        errorMessage={errorMessage}
        closeCreateDialog={closeCreateDialog}
        createNewItem={createNewItem}
      />
        
      <RenameDialog
        showRenameDialog={showRenameDialog}
        itemToRename={itemToRename}
        newName={newName}
        setNewName={setNewName}
        isRenaming={isRenaming}
        errorMessage={errorMessage}
        closeRenameDialog={closeRenameDialog}
        renameItem={renameItem}
      />
        
      <DeleteDialog
        showDeleteDialog={showDeleteDialog}
        itemToDelete={itemToDelete}
        isDeleting={isDeleting}
        errorMessage={errorMessage}
        closeDeleteDialog={closeDeleteDialog}
        handleDeleteItem={handleDeleteItem}
      />
    </div>
  );
};

export default FileTree;

================
File: components/MapEditor.jsx
================
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Map, Save, FileDown } from 'lucide-react';
import { 
  createEmptyMap, 
  serializeMap, 
  parseMapFile, 
  convertMapToAscii, 
  convertAsciiToMap 
} from '../../mapeditor/utils/mapUtils';

// Import sub-components
import MapToolbar from '../../mapeditor/MapToolbar';
import MapCanvas from '../../mapeditor/MapCanvas';
import LayerPanel from '../../mapeditor/LayerPanel';
import TilePalette from '../../mapeditor/TilePalette';

/**
 * Map Editor component for use within the FileContent area
 * This component handles the editing of .map files in the file explorer
 */
const MapEditor = ({ fileContent, selectedFile, onSave }) => {
  // State for map data
  const [mapData, setMapData] = useState(null);
  const [currentLayer, setCurrentLayer] = useState(0);
  const [currentTool, setCurrentTool] = useState('floor'); // Default to floor instead of select
  const [isDirty, setIsDirty] = useState(false);
  const [error, setError] = useState(null);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  const [showAsciiModal, setShowAsciiModal] = useState(false);
  const [asciiContent, setAsciiContent] = useState('');
  const [asciiImportText, setAsciiImportText] = useState('');
  const [asciiModalMode, setAsciiModalMode] = useState('export'); // 'export' or 'import'
  const [selectedTileId, setSelectedTileId] = useState(0);
  const [selectedRotation, setSelectedRotation] = useState(0); // Add state for rotation
  const [showGrid, setShowGrid] = useState(true); // State for grid visibility
  const [brushSize, setBrushSize] = useState(1); // State for brush size
  
  // Use ref instead of state for the reset view function to avoid render-phase updates
  const resetViewFnRef = useRef(null);
  
  // References
  const autoSaveTimeoutRef = useRef(null);
  const isInitialLoadRef = useRef(true); // Track initial load to prevent layer reset during auto-save

  // Load map data when fileContent changes
  useEffect(() => {
    try {
      if (fileContent) {
        const parsedMap = parseMapFile(fileContent);
        setMapData(parsedMap);
        
        // Only reset currentLayer on initial load, not on auto-saves
        if (isInitialLoadRef.current) {
          setCurrentLayer(0);
          isInitialLoadRef.current = false;
        }
        
        setIsDirty(false);
        setError(null);
      } else {
        // Create a new map if no content
        setMapData(createEmptyMap());
        setIsDirty(true);
      }
    } catch (err) {
      console.error('Error parsing map file:', err);
      setError('Failed to parse map file. Creating a new map.');
      setMapData(createEmptyMap());
      setIsDirty(true);
    }
  }, [fileContent]);
  
  // Auto-save when map data changes
  useEffect(() => {
    // If the map is dirty (has unsaved changes), auto-save after a delay
    if (isDirty && mapData) {
      // Clear any existing timeout
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      // Set save status to 'saving'
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      autoSaveTimeoutRef.current = setTimeout(() => {
        handleSaveMap();
      }, 1000); // 1 second debounce
    }
    
    // Cleanup function to clear the timeout when component unmounts
    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [isDirty, mapData]);

  // Handler for saving the map
  const handleSaveMap = () => {
    if (!mapData) return;
    
    try {
      // Serialize the map data to JSON string
      const mapContent = serializeMap(mapData);
      
      // Debug logs to track the data flow
      console.log('[DEBUG] Map Editor - Saving map data:', {
        mapDataExists: !!mapData,
        serializedLength: mapContent?.length,
        serializedPreview: mapContent?.substring(0, 100) + '...',
        selectedFile: selectedFile?.path
      });
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Call the parent onSave function
      onSave(mapContent);
      
      // Update state
      setIsDirty(false);
      setSaveStatus('saved');
    } catch (err) {
      console.error('Error saving map:', err);
      setError('Failed to save map file.');
      setSaveStatus('error');
    }
  };

  // Handler for map edits
  // Add 'rotation' parameter to accept the rotation value from MapCanvas
  const handleEdit = (x, y, tool, rotation) => {
    if (!mapData || !mapData.layers || !mapData.layers[currentLayer]) return;
    
    // Clone the current map data to avoid direct state mutation
    const newMapData = { ...mapData };
    const layerData = { ...newMapData.layers[currentLayer] };
    
    // Find if the cell already exists in this layer
    const existingCellIndex = layerData.cells.findIndex(cell => cell.x === x && cell.y === y);
    
    if (tool === 'erase') {
      // If erasing and the cell exists, remove it
      if (existingCellIndex !== -1) {
        layerData.cells = layerData.cells.filter((_, index) => index !== existingCellIndex);
      }
    } else {
      // Create the cell data based on the tool type
      // Include the received rotation value
      let cellData = { x, y, type: tool, rotation: rotation || 0 }; // Default to 0 if rotation is undefined/falsy
      
      // CRITICAL FIX: Include the selected tile ID for shadow tiles as well!
      if (tool === 'floor' || tool === 'wall' || tool === 'shadow') {
        cellData.tileId = selectedTileId;
        
        // For shadow tiles, add extra debug logging
        if (tool === 'shadow') {
          console.log(`MapEditor CRITICAL: Creating shadow tile at (${x}, ${y}) with tileId=${selectedTileId}`);
        }
      }
      
      // If a cell already exists at this position, update it immutably
      if (existingCellIndex !== -1) {
        // Create a new array with the updated cell
        layerData.cells = layerData.cells.map((cell, index) => 
          index === existingCellIndex ? cellData : cell
        );
      } else {
        // Otherwise, add a new cell (already immutable via push to a cloned array)
        layerData.cells.push(cellData);
      }
    }
    
    // Update the layer in the map data
    newMapData.layers[currentLayer] = layerData;
    
    // Update state
    setMapData(newMapData);
    setIsDirty(true);
  };

  // Handler for rotation changes from TilePalette
  const handleRotateTile = (newRotation) => {
    setSelectedRotation(newRotation);
    // Note: We don't mark as dirty here, as rotation is a tool setting, not map data change
  };

  // Layer management functions
  const handleToggleLayerVisibility = (layerIndex) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      visible: !newMapData.layers[layerIndex].visible
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  const handleAddLayer = () => {
    if (!mapData) return;
    
    const newLayerName = `Layer ${mapData.layers.length + 1}`;
    const newLayer = {
      name: newLayerName,
      visible: true,
      cells: []
    };
    
    const newMapData = { 
      ...mapData,
      layers: [...mapData.layers, newLayer]
    };
    
    setMapData(newMapData);
    setCurrentLayer(newMapData.layers.length - 1);
    setIsDirty(true);
  };

  const handleRemoveLayer = (layerIndex) => {
    if (!mapData || !mapData.layers || mapData.layers.length <= 1) return;
    
    const newMapData = { ...mapData };
    newMapData.layers = newMapData.layers.filter((_, index) => index !== layerIndex);
    
    setMapData(newMapData);
    
    // Adjust current layer if necessary
    if (currentLayer >= newMapData.layers.length) {
      setCurrentLayer(newMapData.layers.length - 1);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerUp = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex >= mapData.layers.length - 1) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex + 1]] = [layers[layerIndex + 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex + 1);
    } else if (currentLayer === layerIndex + 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleMoveLayerDown = (layerIndex) => {
    if (!mapData || !mapData.layers || layerIndex <= 0) return;
    
    const newMapData = { ...mapData };
    const layers = [...newMapData.layers];
    
    // Swap layers
    [layers[layerIndex], layers[layerIndex - 1]] = [layers[layerIndex - 1], layers[layerIndex]];
    
    newMapData.layers = layers;
    setMapData(newMapData);
    
    // Update current layer if necessary
    if (currentLayer === layerIndex) {
      setCurrentLayer(layerIndex - 1);
    } else if (currentLayer === layerIndex - 1) {
      setCurrentLayer(layerIndex);
    }
    
    setIsDirty(true);
  };

  const handleRenameLayer = (layerIndex, newName) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex] || !newName) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      name: newName
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // Handler for exporting to ASCII
  const handleExportAscii = () => {
    if (!mapData) return;
    
    try {
      // Convert the map data to ASCII
      const ascii = convertMapToAscii(mapData);
      setAsciiContent(ascii);
      setAsciiModalMode('export');
      setShowAsciiModal(true);
    } catch (err) {
      console.error('Error exporting to ASCII:', err);
      setError('Failed to export map to ASCII format.');
    }
  };

  // Handler for importing from ASCII
  const handleImportAscii = () => {
    setAsciiImportText('');
    setAsciiModalMode('import');
    setShowAsciiModal(true);
  };

  // Handler for confirming ASCII import
  const handleConfirmAsciiImport = () => {
    if (!asciiImportText.trim()) {
      setError('No ASCII content to import.');
      return;
    }
    
    try {
      // Convert ASCII to map data
      const newMapData = convertAsciiToMap(asciiImportText, mapData.name);
      
      // Preserve metadata from existing map if possible
      if (mapData.metadata) {
        newMapData.metadata = {
          ...newMapData.metadata,
          author: mapData.metadata.author || 'user',
          modified: new Date().toISOString()
        };
      }
      
      // Update the map data
      setMapData(newMapData);
      setIsDirty(true);
      setShowAsciiModal(false);
    } catch (err) {
      console.error('Error importing from ASCII:', err);
      setError('Failed to import ASCII map. The format may be invalid.');
    }
  };

  // Handler for downloading the ASCII map
  const handleDownloadAscii = () => {
    if (!asciiContent) return;
    
    try {
      // Create a blob with the ASCII content
      const blob = new Blob([asciiContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Create a temporary anchor element to trigger the download
      const a = document.createElement('a');
      a.href = url;
      a.download = `${mapData.name || 'map'}.txt`;
      
      // Append the anchor to the document, click it, and remove it
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      // Clean up by revoking the object URL
      URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Error downloading ASCII map:', err);
      setError('Failed to download ASCII map.');
    }
  };


  // Handler for applying map property changes
  const handleApplyProperties = (properties) => {
    if (!mapData) return;

    const newMapData = { 
      ...mapData,
      name: properties.name,
      width: properties.width,
      height: properties.height,
      gridSize: properties.gridSize
    };

    // Update map data
    setMapData(newMapData);
    setIsDirty(true);
  };
  
  // Handler for updating layer opacity
  const handleUpdateLayerOpacity = (layerIndex, opacity) => {
    if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return;
    
    const newMapData = { ...mapData };
    newMapData.layers[layerIndex] = {
      ...newMapData.layers[layerIndex],
      opacity: opacity
    };
    
    setMapData(newMapData);
    setIsDirty(true);
  };

  // If map data isn't loaded yet, show a loading state
  if (!mapData) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="text-teal-300">Loading map editor...</span>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      {/* Toolbar */}
      <MapToolbar 
        onSave={handleSaveMap}
        onUndo={() => console.log('Undo not implemented')}
        onRedo={() => console.log('Redo not implemented')}
        onClear={() => {
          // Create a new empty map but preserve properties like name, width, height, gridSize
          const newMap = createEmptyMap();
          newMap.name = mapData.name;
          newMap.width = mapData.width;
          newMap.height = mapData.height;
          newMap.gridSize = mapData.gridSize;
          // Preserve metadata if it exists
          if (mapData.metadata) {
            newMap.metadata = { ...mapData.metadata };
          }
          setMapData(newMap);
          setIsDirty(true);
        }}
        onExportAscii={handleExportAscii}
        onImportAscii={handleImportAscii}
        onToggleGrid={() => setShowGrid(!showGrid)}
        onResetView={() => {
          // Call the reset view function if it exists
          if (resetViewFnRef.current) {
            resetViewFnRef.current();
          }
        }}
        showGrid={showGrid}
        saveStatus={saveStatus}
        mapData={mapData}
        onApplyProperties={handleApplyProperties}
      />
      
      {/* Error message */}
      {error && (
        <div className="p-2 bg-red-900 text-red-200 text-sm">
          {error}
        </div>
      )}
      
      {/* Main content area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Canvas for map editing */}
        <MapCanvas 
          mapData={mapData}
          currentLayer={currentLayer}
          currentTool={currentTool}
          selectedTileId={selectedTileId}
          selectedRotation={selectedRotation} // Pass rotation state to canvas
          onEdit={handleEdit}
          showGrid={showGrid}
          resetViewRef={resetViewFnRef} // Pass ref instead of setter function
          brushSize={brushSize}
        />
        
        {/* Layer panel with integrated tile palette */}
        <LayerPanel 
          layers={mapData.layers}
          currentLayer={currentLayer}
          setCurrentLayer={setCurrentLayer}
          onToggleLayerVisibility={handleToggleLayerVisibility}
          onAddLayer={handleAddLayer}
          onRemoveLayer={handleRemoveLayer}
          onMoveLayerUp={handleMoveLayerUp}
          onMoveLayerDown={handleMoveLayerDown}
          onRenameLayer={handleRenameLayer}
          onUpdateLayerOpacity={handleUpdateLayerOpacity}
          selectedTileId={selectedTileId}
          onSelectTile={setSelectedTileId}
          selectedRotation={selectedRotation} // Pass rotation state to LayerPanel
          onRotateTile={handleRotateTile} // Pass rotation handler to LayerPanel
          currentTool={currentTool}
          setCurrentTool={setCurrentTool}
          brushSize={brushSize}
          setBrushSize={setBrushSize}
        />
      </div>
      
      
      {/* ASCII Modal */}
      {showAsciiModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 z-50">
          <div className="bg-stone-800 border border-stone-700 rounded-lg shadow-lg w-full max-w-3xl max-h-[80vh] flex flex-col">
            <div className="flex justify-between items-center p-4 border-b border-stone-700">
              <h2 className="text-lg font-semibold text-teal-300">
                {asciiModalMode === 'export' ? 'ASCII Map Export' : 'Import ASCII Map'}
              </h2>
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="p-1 hover:bg-stone-700 rounded text-teal-400"
              >
                &times;
              </button>
            </div>
            
            <div className="p-4 flex-1 overflow-auto">
              {asciiModalMode === 'export' ? (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    This is the ASCII representation of your map. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <pre className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 whitespace-pre">
                    {asciiContent}
                  </pre>
                </div>
              ) : (
                <div className="flex flex-col h-full">
                  <p className="mb-4 text-sm text-stone-300">
                    Paste ASCII map content below. Each character represents a cell type:
                    <br />
                    <code className="bg-stone-900 px-1 rounded">
                      # = Wall, . = Floor, + = Door, " = Grass, ' = Ashes, &gt; = Stairs, @ = Spawn
                    </code>
                  </p>
                  <textarea 
                    className="bg-stone-900 p-4 rounded font-mono text-teal-100 text-sm overflow-auto flex-1 resize-none focus:outline-none focus:ring-1 focus:ring-teal-500"
                    value={asciiImportText}
                    onChange={e => setAsciiImportText(e.target.value)}
                    placeholder="Paste ASCII map here..."
                  />
                </div>
              )}
            </div>
            
            <div className="p-4 border-t border-stone-700 flex justify-end space-x-2">
              <button 
                onClick={() => setShowAsciiModal(false)}
                className="px-4 py-2 bg-stone-700 hover:bg-stone-600 rounded text-teal-100"
              >
                Cancel
              </button>
              
              {asciiModalMode === 'export' ? (
                <button 
                  onClick={handleDownloadAscii}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100 flex items-center"
                >
                  <FileDown size={16} className="mr-2" />
                  Download ASCII
                </button>
              ) : (
                <button 
                  onClick={handleConfirmAsciiImport}
                  className="px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-teal-100"
                >
                  Import
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MapEditor;

================
File: components/nodes/index.js
================
import TextNode from './TextNode';

/**
 * Node type registry
 * Export all node types from this file to easily import them elsewhere
 */

const nodeTypes = {
  // Add all node types here
  text: TextNode,
  // Additional node types can be added here in the future
};

export default nodeTypes;

================
File: components/nodes/TextNode.jsx
================
import React, { useState } from 'react';
import { Edit } from 'lucide-react';
import { Handle, Position } from 'reactflow';

/**
 * TextNode component for displaying and editing text nodes in the canvas
 * This component is used in the Canvas Editor
 */
const TextNode = ({ id, data, isConnectable, setEditingNode, editingNode }) => {
  const isEditing = editingNode === id;
  const [isHovered, setIsHovered] = useState(false);
  
  const handleEditClick = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setEditingNode(id);
  };
  
  const handleEdit = (e) => {
    const updatedText = e.target.value;
    
    // Update the node data is handled by the parent component
    // through the setNodes function passed via data
    if (data.onChange) {
      data.onChange(id, updatedText);
    }
  };
  
  const handleBlur = () => {
    setEditingNode(null);
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      setEditingNode(null);
    } else if (e.key === 'Enter' && e.ctrlKey) {
      setEditingNode(null);
    }
  };
  
  return (
    <div 
      className="p-2 bg-stone-800 border border-stone-700 rounded shadow-md relative"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Handle 
        type="source" 
        position={Position.Top} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Bottom handle */}
      <Handle 
        type="source" 
        position={Position.Bottom} 
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Right handle */}
      <Handle 
        type="source" 
        position={Position.Right} 
        id="right"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />

      {/* Left handle */}
      <Handle 
        type="source" 
        position={Position.Left} 
        id="left"
        isConnectable={isConnectable} 
        style={{ 
          background: '#14b8a6', // teal-500 color
          width: '0.45rem',
          height: '0.45rem',
          borderRadius: '9999px',
          border: 'none'
        }}
      />
      {isEditing ? (
        <textarea
          className="w-full h-full bg-stone-700 text-teal-400 p-2 rounded font-mono text-sm focus:outline-none resize-none min-h-[80px]"
          value={data.text}
          onChange={handleEdit}
          onBlur={handleBlur}
          onKeyDown={handleKeyDown}
          autoFocus
        />
      ) : (
        <>
          <div className="text-teal-400 text-sm whitespace-pre-wrap pr-6">{data.text}</div>
          {isHovered && (
            <button
              className="absolute top-1 right-1 bg-stone-700 p-1 rounded-sm hover:bg-stone-600 transition-colors"
              onClick={handleEditClick}
              title="Edit node"
            >
              <Edit size={14} className="text-teal-400" />
            </button>
          )}
        </>
      )}
    </div>
  );
};

export default TextNode;

================
File: components/StorageStats.jsx
================
import React from 'react';

const StorageStats = ({ stats, isAdmin }) => {
  // If stats aren't available yet or the user doesn't have file access, don't show anything
  if (!stats || stats.isLoading) {
    return null;
  }

  // Format bytes to human-readable format
  const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    if (bytes === null || bytes === undefined) return 'Unlimited';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  };

  // Calculate percentage used
  const percentUsed = stats.unlimited ? 0 : Math.min(100, Math.round((stats.used / stats.quota) * 100)) || 0;
  
  return (
    <div className="px-2 py-1 bg-stone-800 text-xs border-t border-stone-700">
      <div className="flex justify-between items-center ${isAdmin ? 'mb-0' : 'mb-1'}">
        <span className="text-gray-400">Storage:</span>
        <span className="text-teal-400">
          {stats.unlimited 
            ? 'Unlimited (Admin)'
            : `${formatBytes(stats.used)} of ${formatBytes(stats.quota)}`
          }
        </span>
      </div>
      
      {!stats.unlimited && (
        <div className="w-full bg-stone-700 rounded-full h-1.5 mb-1">
          <div 
            className="bg-teal-600 h-1.5 rounded-full" 
            style={{ width: `${percentUsed}%` }}
          ></div>
        </div>
      )}
    </div>
  );
};

export default StorageStats;

================
File: ExplorerWindow.jsx
================
import React from 'react';
import useExplorerState from './state/useExplorerState';
import { useAuth } from '../../../context/AuthContext';
import FileTree from './components/FileTree';
import FileContent from './components/FileContent';
import CommandInput from './components/CommandInput';
import StorageStats from './components/StorageStats';
import '../ExplorerWindow.css';

const ExplorerWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check user permissions
  const { user } = useAuth();
  // Use the custom hook to manage state and operations
  const explorerState = useExplorerState(nodeId, windowState, updateWindowState);
  
  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden relative">
        {/* File tree panel */}
        <FileTree 
          files={explorerState.files}
          publicFiles={explorerState.publicFiles}
          activeTab={explorerState.activeTab}
          expandedFolders={explorerState.expandedFolders}
          currentPath={explorerState.currentPath}
          selectedFile={explorerState.selectedFile}
          isTreeLoading={explorerState.isTreeLoading}
          errorMessage={explorerState.errorMessage}
          isAdmin={explorerState.isAdmin}
          user={user}
          toggleFolder={explorerState.toggleFolder}
          handleFileSelect={explorerState.handleFileSelect}
          openRenameDialog={explorerState.openRenameDialog}
          openDeleteDialog={explorerState.openDeleteDialog}
          openCreateDialog={explorerState.openCreateDialog}
          handleDragStart={explorerState.handleDragStart}
          handleDragOver={explorerState.handleDragOver}
          handleDragLeave={explorerState.handleDragLeave}
          handleDrop={explorerState.handleDrop}
          handleContainerDragOver={explorerState.handleContainerDragOver}
          handleContainerDragLeave={explorerState.handleContainerDragLeave}
          handleContainerDrop={explorerState.handleContainerDrop}
          dropTarget={explorerState.dropTarget}
          storageStats={explorerState.storageStats}
          // Dialog-related props
          showCreateDialog={explorerState.showCreateDialog}
          createType={explorerState.createType}
          newItemName={explorerState.newItemName}
          setNewItemName={explorerState.setNewItemName}
          isCreating={explorerState.isCreating}
          closeCreateDialog={explorerState.closeCreateDialog}
          createNewItem={explorerState.createNewItem}
          showRenameDialog={explorerState.showRenameDialog}
          itemToRename={explorerState.itemToRename}
          newName={explorerState.newName}
          setNewName={explorerState.setNewName}
          isRenaming={explorerState.isRenaming}
          closeRenameDialog={explorerState.closeRenameDialog}
          renameItem={explorerState.renameItem}
          showDeleteDialog={explorerState.showDeleteDialog}
          itemToDelete={explorerState.itemToDelete}
          isDeleting={explorerState.isDeleting}
          closeDeleteDialog={explorerState.closeDeleteDialog}
          handleDeleteItem={explorerState.handleDeleteItem}
        />
        
        
        {/* File content panel */}
        <FileContent
          selectedFile={explorerState.selectedFile}
          isContentLoading={explorerState.isContentLoading}
          fileContent={explorerState.fileContent}
          errorMessage={explorerState.errorMessage}
          showPreview={explorerState.showPreview}
          editMode={explorerState.editMode}
          saveStatus={explorerState.saveStatus}
          converter={explorerState.converter}
          isAdmin={explorerState.isAdmin}
          user={user}
          activeTab={explorerState.activeTab}
          setFileContent={explorerState.setFileContent}
          toggleEditMode={explorerState.toggleEditMode}
          handleMarkdownChange={explorerState.handleMarkdownChange}
          handleSaveFileContent={explorerState.handleSaveFileContent}
          handleExportFile={explorerState.handleExportFile}
        />
      </div>
      
      {/* Command input */}
      <CommandInput
        focusRef={focusRef}
        isAdmin={explorerState.isAdmin}
        handleCommand={explorerState.handleCommand}
      />
    </div>
  );
};

export default ExplorerWindow;

================
File: README.md
================
# Explorer Window Component

This directory contains a modular implementation of the ExplorerWindow component. The code has been refactored to improve maintainability and make it easier to extend functionality.

## Architecture Overview

The ExplorerWindow has been split into several components and modules following a clean separation of concerns:

```
explorer/
├── ExplorerWindow.jsx              # Main component (orchestrator)
├── state/
│   └── useExplorerState.js         # Custom hook for state management
├── components/
│   ├── FileTree.jsx                # Tree view UI and navigation
│   ├── FileContent.jsx             # Content viewing/editing panel
│   ├── CommandInput.jsx            # Command input field
│   └── dialogs/
│       └── FileDialogs.jsx         # Dialog components for file operations
├── api/
│   └── fileOperations.js           # API calls and file operations
├── utils/
│   ├── fileUtils.js                # File-related utility functions
│   └── markdownUtils.js            # Markdown-specific utilities
└── README.md                       # This documentation file
```

## Component Responsibilities

### ExplorerWindow.jsx
- Acts as the main component that orchestrates all other components
- Retrieves state and operations from useExplorerState
- Passes down props to child components

### useExplorerState.js
- Centralizes all state management
- Handles state persistence and retrieval
- Implements business logic for all user interactions
- Provides functions for file operations

### FileTree.jsx
- Displays the directory structure
- Handles file/folder selection
- Manages UI for drag and drop operations

### FileContent.jsx
- Displays file content based on file type
- Provides editing interface for markdown files
- Renders markdown preview

### CommandInput.jsx
- Provides command input interface
- Handles command execution

### FileDialogs.jsx
- Contains dialog components for creating, renaming, and deleting files/folders

### fileOperations.js
- Encapsulates API calls to the server
- Handles error states and response parsing

### fileUtils.js and markdownUtils.js
- Provide utility functions for file and markdown operations

## Data Flow

1. User interactions in UI components trigger functions received from useExplorerState
2. useExplorerState processes these actions, updates state, and interacts with the API as needed
3. State changes flow back to UI components through props

## Adding Support for New File Types

To add support for new file types (e.g., canvas files, audio files, images):

1. Update `fileUtils.js` to recognize and provide appropriate icons for the new file types
2. Extend `FileContent.jsx` to render the new file types appropriately
3. If needed, add specific utility files (similar to markdownUtils.js) for the new file types
4. Update state in `useExplorerState.js` to handle any special behaviors for the new file types

## State Management

The component uses a custom hook approach for state management, which offers several advantages:

- Centralizes state logic in one place
- Makes the main component simpler and more declarative
- Allows for easier testing of business logic
- Simplifies adding new features or file type support

This approach is more maintainable than using a context provider for this specific use case, as the component tree is not deeply nested. If the component structure becomes more complex in the future, the code could be adapted to use a context provider instead.

================
File: state/useExplorerState.js
================
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../../../context/AuthContext';
import { useWindowState } from '../../../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../../../utils/windowTypes';
import { saveExplorerState, getExplorerState } from '../../../../services/indexedDBService';
import { createMarkdownConverter } from '../utils/markdownUtils';
import { 
  fetchPublicDirectoryContents, 
  fetchDirectoryContents, 
  fetchPublicFileContent, 
  fetchFileContent,
  saveFileContent as apiSaveFileContent,
  createNewItem as apiCreateNewItem,
  renameItem as apiRenameItem,
  deleteItem as apiDeleteItem,
  moveItem as apiMoveItem,
  getStorageStats as apiGetStorageStats
} from '../api/fileOperations';
import { 
  getParentDirectoryPath, 
  expandParentFolders, 
  getActiveFolderPath 
} from '../utils/fileUtils';

const useExplorerState = (nodeId, windowState, updateWindowState) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Refs to track state loading and saving
  const stateLoadedRef = useRef(false);
  const explorerSaveTimeoutRef = useRef(null); // New ref for debounced explorer state saving
  
  // Reference to store the saved state that needs to be restored after files are loaded
  const pendingStateRestoreRef = useRef(null);
  const fileLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [publicFiles, setPublicFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isTreeLoading, setIsTreeLoading] = useState(true);
  const [isContentLoading, setIsContentLoading] = useState(false);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  const [activeTab, setActiveTab] = useState(windowState?.activeTab || 'public'); // 'public' or 'private'
  
  // Additional state for markdown editing
  const [editMode, setEditMode] = useState(windowState?.editMode || false);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // State for file/folder creation
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [createType, setCreateType] = useState('file'); // 'file' or 'directory'
  const [newItemName, setNewItemName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  
  // State for file/folder renaming
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [itemToRename, setItemToRename] = useState(null);
  const [newName, setNewName] = useState('');
  const [isRenaming, setIsRenaming] = useState(false);
  
  // State for file/folder deletion
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // State for drag and drop
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [isMoving, setIsMoving] = useState(false);
  
  // For auto-save functionality and editor references
  const saveTimeoutRef = useRef(null);
  
  // Create markdown converter
  const converter = createMarkdownConverter();

  // Track previous node ID to detect window swaps
  const prevNodeIdRef = useRef(nodeId);

  // Load explorer state from IndexedDB on mount or when nodeId changes
  useEffect(() => {
    const loadExplorerState = async () => {
      console.log(`[DEBUG] Starting to load explorer state for window ${nodeId}`);
      
      // If nodeId changed but it's not the first load, it likely means a window swap occurred
      const isSwapDetected = prevNodeIdRef.current !== nodeId && prevNodeIdRef.current !== null;
      if (isSwapDetected) {
        console.log(`[DEBUG] Node ID changed from ${prevNodeIdRef.current} to ${nodeId}, possible window swap detected`);
        // Reset the state loaded flag to force a reload after a swap
        stateLoadedRef.current = false;
        // Clear any pending state
        pendingStateRestoreRef.current = null;
      }
      
      // Update prevNodeIdRef for future comparisons
      prevNodeIdRef.current = nodeId;
      
      try {
        // Try to load explorer state from IndexedDB
        const savedState = await getExplorerState(nodeId);
        console.log(`[DEBUG] Retrieved state from IndexedDB:`, savedState);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`[DEBUG] Valid saved state found for window ${nodeId}:`, savedState.content);
          
          // Store the saved state in the ref for later restoration after files are loaded
          pendingStateRestoreRef.current = savedState.content;
          
          // Restore expanded folders and active tab immediately
          if (savedState.content.expandedFolders) {
            console.log(`[DEBUG] Restoring expanded folders`);
            setExpandedFolders(savedState.content.expandedFolders);
          }
          
          if (savedState.content.activeTab) {
            console.log(`[DEBUG] Restoring active tab: ${savedState.content.activeTab}`);
            setActiveTab(savedState.content.activeTab);
          }
          
          if (savedState.content.editMode !== undefined && isAdmin) {
            console.log(`[DEBUG] Restoring edit mode: ${savedState.content.editMode}`);
            setEditMode(savedState.content.editMode);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        } else {
          console.log(`[DEBUG] No valid saved state found or state already loaded`);
          // Even if no state is loaded, mark as loaded to allow future saves
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`[DEBUG] Failed to load explorer state:`, error);
        // Ensure we still mark state as loaded even if there's an error
        stateLoadedRef.current = true;
      }
    };
    
    loadExplorerState();
  }, [nodeId, isAdmin]);
  
  // Handle window activation
  useEffect(() => {
    if (windowState?.isActive) {
      // Save this as the active explorer window
      setActiveWindow(nodeId, WINDOW_TYPES.EXPLORER);
    }
  }, [windowState?.isActive, nodeId, setActiveWindow]);
  
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    // Early return if state hasn't been loaded yet (prevents overwriting with default values)
    if (!stateLoadedRef.current) return;
    
    // Clear any existing timeout
    if (explorerSaveTimeoutRef.current) {
      clearTimeout(explorerSaveTimeoutRef.current);
    }
    
    // Save the explorer state to IndexedDB with debounce
    explorerSaveTimeoutRef.current = setTimeout(() => {
      console.log(`[DEBUG] Saving explorer state for window ${nodeId}:`, {
        selectedFile,
        expandedFolders,
        activeTab,
        editMode
      });
      
      saveExplorerState({
        id: nodeId,
        content: {
          selectedFile,
          expandedFolders,
          activeTab,
          editMode
        }
      }).catch(error => {
        console.error(`[DEBUG] Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
      });
    }, 300); // 300ms debounce
    
    // Clear timeout on cleanup
    return () => {
      if (explorerSaveTimeoutRef.current) {
        clearTimeout(explorerSaveTimeoutRef.current);
      }
    };
  }, [selectedFile, expandedFolders, activeTab, editMode, nodeId]);

  // Load initial directory contents and restore selected file afterward
  useEffect(() => {
    console.log('[DEBUG] Starting to load directory contents');
    
    // First, load the files
    const loadFilesAndRestoreSelection = async () => {
      try {
        // Load public files for all users
        await handleFetchPublicDirectoryContents('/', true);
        
      // Load private files for admin users or users with file access (if applicable)
      if (isAdmin || user?.has_file_access) {
        try {
          await handleFetchDirectoryContents('/', true);
        } catch (error) {
          console.error('Failed to load private files:', error);
          setFiles([]);
          if (activeTab === 'private') {
            setErrorMessage('Failed to load private files. Please ensure your directory exists.');
          }
        }
      }
        
        // Mark files as loaded
        fileLoadedRef.current = true;
        
        // Now that files are loaded, restore the selected file if we have one pending
        if (pendingStateRestoreRef.current && pendingStateRestoreRef.current.selectedFile) {
          const restoredFile = pendingStateRestoreRef.current.selectedFile;
          console.log(`[DEBUG] Now restoring selected file after files are loaded:`, restoredFile);
          
          // Set the selected file
          setSelectedFile(restoredFile);
          
          // Update the current path to ensure parent directories are visible
          if (restoredFile.type === 'file') {
            // For files, set the current path to the parent directory
            const parentPath = getParentDirectoryPath(restoredFile.path);
            setCurrentPath(parentPath);
          } else {
            // For directories, set the current path to the directory itself
            setCurrentPath(restoredFile.path);
          }
          
          // Ensure parent folders are expanded
          setExpandedFolders(prev => expandParentFolders(restoredFile.path, prev));
          
          // If it's a file, load its content
          if (restoredFile.type === 'file') {
            console.log(`[DEBUG] Loading content for restored file: ${restoredFile.path}`);
            
            // Set the preview mode for markdown files
            if (restoredFile.name.endsWith('.md')) {
              console.log(`[DEBUG] Setting preview mode for markdown file`);
              setShowPreview(true);
              
              // Also restore edit mode if it was saved
              if (pendingStateRestoreRef.current.editMode && isAdmin) {
                console.log(`[DEBUG] Restoring edit mode: ${pendingStateRestoreRef.current.editMode}`);
                setEditMode(pendingStateRestoreRef.current.editMode);
              }
            }
            
            // Use handleFileSelect to load the file content
            // Use setTimeout to ensure this happens after state updates
            setTimeout(() => {
              console.log(`[DEBUG] Executing delayed file selection for: ${restoredFile.path}`);
              handleFileSelect(restoredFile, true);
            }, 100);
          }
          
          // Clear the pending restore
          pendingStateRestoreRef.current = null;
        } else {
          console.log('[DEBUG] No file to restore or files not loaded yet');
        }
      } catch (error) {
        console.error('[DEBUG] Error in loadFilesAndRestoreSelection:', error);
      }
    };
    
    loadFilesAndRestoreSelection();
  }, [isAdmin, activeTab]);

  // State for storage statistics
  const [storageStats, setStorageStats] = useState({
    quota: 0,
    used: 0,
    available: 0,
    unlimited: false,
    isLoading: false
  });

  // Fetch storage statistics
  const fetchStorageStats = async () => {
    if (!user?.has_file_access && !isAdmin) return;
    
    setStorageStats(prev => ({ ...prev, isLoading: true }));
    
    try {
      const stats = await apiGetStorageStats();
      if (stats.error) {
        setErrorMessage(stats.error);
        setStorageStats(prev => ({
          ...prev,
          isLoading: false
        }));
      } else {
        setStorageStats({
          quota: stats.quota,
          used: stats.used,
          available: stats.available,
          unlimited: stats.unlimited,
          isLoading: false
        });
      }
    } catch (error) {
      console.error('Error fetching storage stats:', error);
      setStorageStats(prev => ({
        ...prev,
        isLoading: false
      }));
    }
  };

  // Fetch storage stats on mount and after file operations
  useEffect(() => {
    if (user?.has_file_access || isAdmin) {
      fetchStorageStats();
    }
  }, [user, isAdmin]);

  // Reset content states when switching tabs
  useEffect(() => {
    // Clear file content and reset view states when changing tabs
    setSelectedFile(null);
    setFileContent('');
    setShowPreview(false);
    setEditMode(false);
    setSaveStatus('saved');
    setErrorMessage('');
    
    // Reset current path to root for the selected tab
    setCurrentPath('/');
  }, [activeTab]);

  // Auto-save functionality with debounce
  useEffect(() => {
    // Auto-save if in edit mode, user has permission, and we have a markdown file selected
    // Allow for admins and users with file_access (for private files)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (editMode && hasEditPermission && selectedFile && selectedFile.name.endsWith('.md') && fileContent) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveFileContent();
      }, 1000); // 1 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [fileContent, editMode, isAdmin, selectedFile]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview,
        editMode,
        saveStatus,
        activeTab
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, editMode, saveStatus, activeTab, updateWindowState]);
  
  // Fetch public directory contents
  const handleFetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicDirectoryContents(publicPath, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setPublicFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(publicPath);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch public file content
  const handleFetchPublicFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Fetch private directory contents
  const handleFetchDirectoryContents = async (path = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchDirectoryContents(path, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(path);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch private file content
  const handleFetchFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Save file content
  const handleSaveFileContent = async (content) => {
    console.log('[DEBUG] useExplorerState - handleSaveFileContent called:', {
      selectedFilePath: selectedFile?.path,
      selectedFileName: selectedFile?.name,
      contentProvided: content !== undefined,
      // If content is provided, use it, otherwise use the state's fileContent
      contentToSaveType: typeof (content !== undefined ? content : fileContent),
      contentToSaveLength: (content !== undefined ? content : fileContent)?.length || 0,
      contentToSavePreview: typeof (content !== undefined ? content : fileContent) === 'string' 
        ? (content !== undefined ? content : fileContent).substring(0, 100) + '...' 
        : 'not a string'
    });
    
    // Check if filePath is valid
    if (!selectedFile || !selectedFile.path || selectedFile.path.trim() === '') {
      console.error('[DEBUG] handleSaveFileContent - No file selected');
      setErrorMessage('No file selected. Please select a file first.');
      setSaveStatus('error');
      return;
    }
    
    setSaveStatus('saving');
    
    // Use content parameter if provided, otherwise use state's fileContent
    const contentToSave = content !== undefined ? content : fileContent;
    
    console.log('[DEBUG] Sending to API:', {
      path: selectedFile.path,
      contentType: typeof contentToSave,
      contentLength: contentToSave?.length || 0
    });
    
    const result = await apiSaveFileContent(selectedFile.path, contentToSave);
    
    if (result.error) {
      console.error('[DEBUG] API Save Error:', result.error);
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      console.log('[DEBUG] API Save Success:', result);
      setErrorMessage('');
      setSaveStatus('saved');
      
      // If content parameter was provided, update the state's fileContent
      if (content !== undefined) {
        setFileContent(content);
      }
    }
  };
  
  // Toggle folder expansion
  const toggleFolder = (folderPath, folder) => {
    const isExpanding = !expandedFolders[folderPath];
    
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: isExpanding
    }));
    
    // If we're expanding the folder, also set it as the current path
    if (isExpanding) {
      setCurrentPath(folderPath);
      setSelectedFile(folder);
    }
  };
  
  // Create a new file or folder
  const createNewItem = async () => {
    if (!newItemName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    setIsCreating(true);
    setErrorMessage('');
    
    // Get the active folder path where the new item should be created
    const activeFolderPath = getActiveFolderPath(selectedFile, currentPath);
    
    const result = await apiCreateNewItem(activeTab, activeFolderPath, newItemName, createType);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowCreateDialog(false);
      setNewItemName('');
      
      // Refresh the entire file tree from the root
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
      
      // If it's a directory, expand it
      if (createType === 'directory' && result.path) {
        setExpandedFolders(prev => ({
          ...prev,
          [result.path]: true
        }));
      }
    }
    
    setIsCreating(false);
  };
  
  // Open the create dialog
  const openCreateDialog = (type) => {
    setCreateType(type);
    setNewItemName('');
    setErrorMessage('');
    setShowCreateDialog(true);
  };
  
  // Close the create dialog
  const closeCreateDialog = () => {
    setShowCreateDialog(false);
    setNewItemName('');
    setErrorMessage('');
  };
  
  // Open the rename dialog
  const openRenameDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to rename files or file access permission for private files.');
      return;
    }
    
    setItemToRename(item);
    setNewName(item.name);
    setErrorMessage('');
    setShowRenameDialog(true);
  };
  
  // Close the rename dialog
  const closeRenameDialog = () => {
    setShowRenameDialog(false);
    setItemToRename(null);
    setNewName('');
    setErrorMessage('');
  };
  
  // Rename a file or folder
  const renameItem = async () => {
    if (!newName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    if (!itemToRename) {
      setErrorMessage('No item selected for renaming');
      return;
    }
    
    setIsRenaming(true);
    setErrorMessage('');
    
    const result = await apiRenameItem(itemToRename.path, newName);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowRenameDialog(false);
      setItemToRename(null);
      setNewName('');
      
      // If the renamed item was selected, update the selected file
      if (selectedFile && selectedFile.path === itemToRename.path) {
        setSelectedFile(null);
      }
      
      // Refresh the appropriate file list
      if (itemToRename.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsRenaming(false);
  };
  
  // Open the delete dialog
  const openDeleteDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to delete files or file access permission for private files.');
      return;
    }
    
    setItemToDelete(item);
    setErrorMessage('');
    setShowDeleteDialog(true);
  };
  
  // Close the delete dialog
  const closeDeleteDialog = () => {
    setShowDeleteDialog(false);
    setItemToDelete(null);
    setErrorMessage('');
  };
  
  // Delete a file or folder
  const handleDeleteItem = async () => {
    if (!itemToDelete) {
      setErrorMessage('No item selected for deletion');
      return;
    }
    
    setIsDeleting(true);
    setErrorMessage('');
    
    const result = await apiDeleteItem(itemToDelete.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog
      setShowDeleteDialog(false);
      setItemToDelete(null);
      
      // If the deleted item was selected, clear the selection
      if (selectedFile && selectedFile.path === itemToDelete.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (itemToDelete.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsDeleting(false);
  };
  
  // Handle drag start event
  const handleDragStart = (e, item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    setDraggedItem(item);
    e.dataTransfer.setData('text/plain', item.path);
    e.dataTransfer.effectAllowed = 'move';
    
    // Add dragging class to the element
    e.currentTarget.classList.add('dragging');
    
    // Remove the class after a short delay to ensure it's applied
    setTimeout(() => {
      if (e.currentTarget) {
        e.currentTarget.classList.remove('dragging');
      }
    }, 100);
  };
  
  // Handle drag over event
  const handleDragOver = (e, folder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Only allow dropping into directories
    if (folder.type === 'directory') {
      setDropTarget(folder);
      e.dataTransfer.dropEffect = 'move';
      
      // Add drop-target class to the element
      e.currentTarget.classList.add('drop-target');
    }
  };
  
  // Handle drag over for the file tree container (to allow dropping to root)
  const handleContainerDragOver = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Set root as the drop target
    const rootFolder = {
      type: 'directory',
      path: draggedItem.isPublic ? '/public' : '/',
      name: 'Root'
    };
    setDropTarget(rootFolder);
    e.dataTransfer.dropEffect = 'move';
  };
  
  // Handle drag leave event
  const handleDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
  };
  
  // Handle drag leave for the container
  const handleContainerDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
  };
  
  // Handle drop event
  const handleDrop = async (e, targetFolder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !targetFolder) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Reset drop target
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
    
    // Only allow dropping into directories
    if (targetFolder.type !== 'directory') {
      return;
    }
    
    // Check if dropping on itself
    if (draggedItem.path === targetFolder.path) {
      return;
    }
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle drop event for the container (moving to root)
  const handleContainerDrop = async (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !dropTarget) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Process the drop using the dropTarget which was set in handleContainerDragOver
    const targetFolder = dropTarget;
    
    // Reset drop target
    setDropTarget(null);
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle folder selection
  const handleFolderSelect = (folder) => {
    // Update the current path to the selected folder's path
    setCurrentPath(folder.path);
    
    // Set the selected folder
    setSelectedFile(folder);
    
    // Expand the folder
    setExpandedFolders(prev => ({
      ...prev,
      [folder.path]: true
    }));
    
    // Reset content and preview
    setFileContent('');
    setShowPreview(false);
    
    // Reset edit mode
    if (editMode) {
      setEditMode(false);
    }
  };
  
  // Handle file selection
  const handleFileSelect = (file, skipTabSwitch = false) => {
    // Check if this selection should change the active tab, but skip when restoring files
    if (!skipTabSwitch) {
      if (file.setTab) {
        setActiveTab(file.setTab);
      } else if (file.isPublic !== undefined) {
        // Update active tab based on file's isPublic property
        setActiveTab(file.isPublic ? 'public' : 'private');
      }
    }

    // If it's a directory, handle it differently
    if (file.type === 'directory') {
      handleFolderSelect(file);
      return;
    }
    
    setSelectedFile(file);
    
    // Make sure parent folders are expanded so the file is visible on reload
    setExpandedFolders(prev => expandParentFolders(file.path, prev));
    
    // Set current path to the parent directory for better context
    const parentPath = getParentDirectoryPath(file.path);
    setCurrentPath(parentPath);
    
    // Reset edit mode when selecting a new file
    if (editMode) {
      setEditMode(false);
    }
    
    // Fetch content for all file types
    if (file.isPublic) {
      // Fetch public file content
      handleFetchPublicFileContent(file.path);
    } else {
      // Fetch private file content (admin only)
      handleFetchFileContent(file.path);
    }
    
    // Only set preview mode for markdown files
    if (file.name.endsWith('.md')) {
      setShowPreview(true);
    } else {
      setShowPreview(false);
    }
  };
  
  // Toggle edit mode
  const toggleEditMode = () => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to edit files or file access permission for private files.');
      return;
    }
    
    if (!selectedFile || !selectedFile.name.endsWith('.md')) {
      setErrorMessage('Only markdown files can be edited.');
      return;
    }
    
    setEditMode(!editMode);
    // When switching to preview mode, ensure preview is shown
    if (editMode) {
      setShowPreview(true);
    }
  };
  
  // Handle markdown content change
  const handleMarkdownChange = (e) => {
    setFileContent(e.target.value);
  };
  
  // Handle commands (for the command input)
  const handleCommand = (cmd) => {
    // Commands:
    // - refresh: refresh file list
    // - preview: toggle markdown preview
    // - edit: toggle edit mode (users with permission)
    // - save: manually save the current file
    // - new-file: create a new file (users with permission)
    // - new-folder: create a new folder (users with permission)
    // - rename: rename selected file or folder (users with permission)
    // - delete: delete selected file or folder (users with permission)
    // - public: switch to public files tab
    // - private: switch to private files tab (users with permission)
    
    // Check permission for file operations
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    const canAccessPrivate = isAdmin || user?.has_file_access;
    
    if (cmd === 'refresh') {
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
      setShowPreview(!showPreview);
      if (editMode) {
        setEditMode(false);
      }
    } else if (cmd === 'edit' && selectedFile?.name.endsWith('.md')) {
      toggleEditMode();
    } else if (cmd === 'save' && editMode && selectedFile?.name.endsWith('.md')) {
      handleSaveFileContent();
    } else if (cmd === 'new-file' && hasEditPermission) {
      openCreateDialog('file');
    } else if (cmd === 'new-folder' && hasEditPermission) {
      openCreateDialog('directory');
    } else if (cmd === 'rename' && selectedFile && hasEditPermission) {
      openRenameDialog(selectedFile);
    } else if (cmd === 'delete' && selectedFile && hasEditPermission) {
      openDeleteDialog(selectedFile);
    } else if (cmd === 'public') {
      setActiveTab('public');
    } else if (cmd === 'private' && canAccessPrivate) {
      setActiveTab('private');
    } else {
      setErrorMessage(`Unknown command: ${cmd}`);
    }
  };

  // Handle file or folder export/download
  const handleExportFile = async () => {
    if (!selectedFile) {
      setErrorMessage('No file or folder selected');
      return;
    }
    
    try {
      // If it's a directory, create a zip file
      if (selectedFile.type === 'directory') {
        // Import JSZip dynamically 
        const JSZip = (await import('jszip')).default;
        const zip = new JSZip();
        
        setErrorMessage('Creating zip file...');
        
        // Function to recursively gather files from a folder
        const addFolderToZip = async (folderPath, zipFolder) => {
          // Determine which API to use based on whether the folder is public or private
          const fetchApi = selectedFile.isPublic ? fetchPublicDirectoryContents : fetchDirectoryContents;
          
          // Fetch directory contents
          const result = await fetchApi(folderPath, false);
          
          if (result.error) {
            throw new Error(`Failed to access folder: ${result.error}`);
          }
          
          // Process each item in the folder
          for (const item of result.files) {
            if (item.type === 'directory') {
              // Create a subfolder in the zip and process recursively
              const newFolder = zipFolder.folder(item.name);
              await addFolderToZip(item.path, newFolder);
            } else {
              // Fetch file content
              const contentApi = selectedFile.isPublic ? fetchPublicFileContent : fetchFileContent;
              const contentResult = await contentApi(item.path);
              
              if (contentResult.error) {
                console.error(`Error loading file content for ${item.path}: ${contentResult.error}`);
                continue;
              }
              
              // Add file to zip
              zipFolder.file(item.name, contentResult.content);
            }
          }
        };
        
        // Start the recursive process from the selected folder
        await addFolderToZip(selectedFile.path, zip);
        
        // Generate the zip file
        const content = await zip.generateAsync({type: 'blob'});
        
        // Create a filename for the zip file (folder name + .zip)
        const zipFileName = `${selectedFile.name}.zip`;
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(content);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = zipFileName;
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
        
        // Clear the export message
        setErrorMessage('');
      } else {
        // For single file export, keep existing behavior
        if (!fileContent) {
          setErrorMessage('File has no content');
          return;
        }
        
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: 'text/plain' });
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(blob);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = selectedFile.name;
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      console.error('Error exporting:', error);
      setErrorMessage(`Failed to export: ${error.message}`);
    }
  };
  
  return {
    files,
    publicFiles,
    currentPath,
    selectedFile,
    expandedFolders,
    isTreeLoading,
    isContentLoading,
    fileContent,
    errorMessage,
    showPreview,
    activeTab,
    editMode,
    saveStatus,
    showCreateDialog,
    createType, 
    newItemName,
    isCreating,
    showRenameDialog,
    itemToRename,
    newName,
    isRenaming,
    showDeleteDialog,
    itemToDelete,
    isDeleting,
    draggedItem,
    dropTarget,
    isMoving,
    converter,
    isAdmin,
    storageStats,
    fetchStorageStats,
    handleFetchPublicDirectoryContents,
    handleFetchDirectoryContents,
    handleSaveFileContent,
    handleExportFile,
    toggleFolder,
    createNewItem,
    openCreateDialog,
    closeCreateDialog,
    openRenameDialog,
    closeRenameDialog,
    renameItem,
    openDeleteDialog,
    closeDeleteDialog,
    handleDeleteItem,
    handleDragStart,
    handleDragOver,
    handleContainerDragOver,
    handleDragLeave,
    handleContainerDragLeave,
    handleDrop,
    handleContainerDrop,
    handleFileSelect,
    toggleEditMode,
    handleMarkdownChange,
    handleCommand,
    setNewItemName,
    setNewName,
    setErrorMessage,
    setFileContent,
    setSelectedFile
  };
};

export default useExplorerState;

================
File: utils/canvasUtils.js
================
/**
 * Utility functions for the canvas editor
 */

/**
 * Generate a unique ID for a node or edge
 * @param {string} prefix - Prefix for the ID (e.g., 'node' or 'edge')
 * @returns {string} Unique ID
 */
export const generateId = (prefix = 'node') => {
  return `${prefix}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
};

/**
 * Calculate the distance between two points
 * @param {Object} point1 - First point {x, y}
 * @param {Object} point2 - Second point {x, y}
 * @returns {number} Distance
 */
export const distance = (point1, point2) => {
  return Math.sqrt(
    Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2)
  );
};

/**
 * Check if a point is inside a node
 * @param {Object} point - Point to check {x, y}
 * @param {Object} node - Node {x, y, width, height}
 * @returns {boolean} True if point is inside node
 */
export const isPointInNode = (point, node) => {
  return (
    point.x >= node.x &&
    point.x <= node.x + node.width &&
    point.y >= node.y &&
    point.y <= node.y + node.height
  );
};

/**
 * Get connection points for edges based on the fromSide and toSide
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @param {string} fromSide - Side of source node to connect from ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node to connect to ('top', 'right', 'bottom', 'left')
 * @returns {Object} Connection points {source: {x, y}, target: {x, y}}
 */
export const getConnectionPoints = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  const source = { x: 0, y: 0 };
  const target = { x: 0, y: 0 };

  // Source node connection point
  switch (fromSide) {
    case 'top':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y;
      break;
    case 'right':
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    case 'bottom':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y + fromNode.height;
      break;
    case 'left':
      source.x = fromNode.x;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    default:
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
  }

  // Target node connection point
  switch (toSide) {
    case 'top':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y;
      break;
    case 'right':
      target.x = toNode.x + toNode.width;
      target.y = toNode.y + toNode.height / 2;
      break;
    case 'bottom':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y + toNode.height;
      break;
    case 'left':
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
      break;
    default:
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
  }

  return { source, target };
};

/**
 * Calculate the best connection sides for two nodes
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @returns {Object} Best sides {fromSide, toSide}
 */
export const calculateBestConnectionSides = (fromNode, toNode) => {
  // Calculate center points
  const fromCenter = {
    x: fromNode.x + fromNode.width / 2,
    y: fromNode.y + fromNode.height / 2
  };
  const toCenter = {
    x: toNode.x + toNode.width / 2,
    y: toNode.y + toNode.height / 2
  };

  // Calculate angle between centers
  const angle = Math.atan2(toCenter.y - fromCenter.y, toCenter.x - fromCenter.x);
  
  // Convert angle to degrees
  const degrees = (angle * 180) / Math.PI;
  
  // Determine from side based on angle
  let fromSide;
  if (degrees >= -45 && degrees < 45) {
    fromSide = 'right';
  } else if (degrees >= 45 && degrees < 135) {
    fromSide = 'bottom';
  } else if (degrees >= 135 || degrees < -135) {
    fromSide = 'left';
  } else {
    fromSide = 'top';
  }
  
  // Calculate opposite side for target
  let toSide;
  switch (fromSide) {
    case 'right': toSide = 'left'; break;
    case 'bottom': toSide = 'top'; break;
    case 'left': toSide = 'right'; break;
    case 'top': toSide = 'bottom'; break;
    default: toSide = 'left';
  }
  
  return { fromSide, toSide };
};

/**
 * Draw an arrow at the end of a line
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {number} x - X coordinate of arrow tip
 * @param {number} y - Y coordinate of arrow tip
 * @param {number} angle - Angle of the line in radians
 * @param {number} size - Size of the arrow
 */
export const drawArrow = (ctx, x, y, angle, size = 10) => {
  ctx.save();
  ctx.translate(x, y);
  ctx.rotate(angle);
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(-size, -size / 2);
  ctx.lineTo(-size, size / 2);
  ctx.closePath();
  ctx.fill();
  ctx.restore();
};

/**
 * Draw a connection line between two points with optional arrow
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {Object} source - Source point {x, y}
 * @param {Object} target - Target point {x, y}
 * @param {string} color - Line color
 * @param {boolean} showSourceArrow - Whether to show an arrow at the source
 * @param {boolean} showTargetArrow - Whether to show an arrow at the target
 */
export const drawConnection = (ctx, source, target, color = '#14b8a6', showSourceArrow = false, showTargetArrow = true) => {
  const angle = Math.atan2(target.y - source.y, target.x - source.x);
  
  // Draw line
  ctx.strokeStyle = color;
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(source.x, source.y);
  ctx.lineTo(target.x, target.y);
  ctx.stroke();
  
  // Draw arrows
  ctx.fillStyle = color;
  if (showSourceArrow) {
    drawArrow(ctx, source.x, source.y, angle + Math.PI);
  }
  if (showTargetArrow) {
    drawArrow(ctx, target.x, target.y, angle);
  }
};

/**
 * Convert a canvas color code to an actual color
 * @param {string} colorCode - Color code (e.g., '1', '2', '#FF0000')
 * @returns {string} CSS color value
 */
export const getCanvasColor = (colorCode) => {
  // Map of preset colors
  const colorMap = {
    '1': '#ef4444', // red
    '2': '#f97316', // orange
    '3': '#eab308', // yellow
    '4': '#22c55e', // green
    '5': '#06b6d4', // cyan
    '6': '#a855f7'  // purple
  };
  
  // If colorCode is a preset, return the mapped color
  if (colorMap[colorCode]) {
    return colorMap[colorCode];
  }
  
  // Otherwise, return the color code as is (assuming it's a valid CSS color)
  return colorCode || '#14b8a6'; // Default to teal if no color provided
};

/**
 * Create a new empty canvas with the JSONCanvas format
 * @returns {Object} Empty canvas data
 */
export const createEmptyCanvas = () => {
  return {
    nodes: [],
    edges: []
  };
};

/**
 * Create a new text node with default properties
 * @param {number} x - X position
 * @param {number} y - Y position
 * @param {string} text - Node text content
 * @returns {Object} New text node
 */
export const createTextNode = (x, y, text = 'New note') => {
  return {
    id: generateId('node'),
    type: 'text',
    x,
    y,
    width: 200,
    height: 100,
    text
  };
};

/**
 * Create a new edge connecting two nodes
 * @param {string} fromNode - ID of source node
 * @param {string} toNode - ID of target node
 * @param {string} fromSide - Side of source node ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node ('top', 'right', 'bottom', 'left')
 * @returns {Object} New edge
 */
export const createEdge = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  return {
    id: generateId('edge'),
    fromNode,
    toNode,
    fromSide,
    toSide,
    fromEnd: 'none',
    toEnd: 'arrow'
  };
};

================
File: utils/fileUtils.js
================
// List of available file types. idk why canvas exists atm this doesnt even do anything
export const AVAILABLE_FILE_TYPES = [
  'md',
  'canvas',
  'map'
];

// Helper function to get parent directory path from a file path
export const getParentDirectoryPath = (filePath) => {
  // Remove trailing slash if present
  const normalizedPath = filePath.endsWith('/') ? filePath.slice(0, -1) : filePath;
  // Find the last slash in the path
  const lastSlashIndex = normalizedPath.lastIndexOf('/');
  
  if (lastSlashIndex === -1) {
    // No slash found, return root
    return '/';
  }
  
  // Return everything up to the last slash
  return normalizedPath.substring(0, lastSlashIndex) || '/';
};

// Helper function to expand all parent folders of a path
export const expandParentFolders = (filePath, currentExpandedFolders) => {
  const parts = filePath.split('/').filter(Boolean);
  let currentPath = '';
  
  // Create a new expanded folders object
  const newExpandedFolders = { ...currentExpandedFolders };
  
  // Expand each parent folder
  for (let i = 0; i < parts.length; i++) {
    currentPath += '/' + parts[i];
    newExpandedFolders[currentPath] = true;
  }
  
  return newExpandedFolders;
};

// Get file icon based on file extension
export const getFileIconName = (fileName) => {
  if (fileName.endsWith('.md')) return 'FileText';
  if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return 'Code';
  if (fileName.endsWith('.json')) return 'Coffee';
  if (fileName.endsWith('.css')) return 'BookOpen';
  if (fileName.endsWith('.html')) return 'Globe';
  if (fileName.endsWith('.svg') || fileName.endsWith('.png') || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg') || fileName.endsWith('.gif')) return 'Image';
  if (fileName.endsWith('.mp3') || fileName.endsWith('.wav') || fileName.endsWith('.ogg')) return 'Music';
  if (fileName.endsWith('.canvas')) return 'Figma';
  if (fileName.endsWith('.map')) return 'Map';
  return 'File';
};

// Helper function to get the active folder path based on selected item and current path
export const getActiveFolderPath = (selectedFile, currentPath) => {
  if (selectedFile) {
    // If selected item is a directory, use its path
    if (selectedFile.type === 'directory') {
      return selectedFile.path;
    }
    // If selected item is a file, use its parent directory
    return getParentDirectoryPath(selectedFile.path);
  }
  // Fall back to current path if no file is selected
  return currentPath;
};

================
File: utils/markdownUtils.js
================
import showdown from 'showdown';

// Initialize Showdown converter for Markdown with enhanced options
export const createMarkdownConverter = () => {
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true,
    breaks: true,  // Enable line breaks to be rendered as <br> tags
    simpleLineBreaks: true,
    openLinksInNewWindow: true,
    backslashEscapesHTMLTags: true,
    ghCodeBlocks: true,
    ghCompatibleHeaderId: true,
    ghMentions: true,
    smoothLivePreview: true
  });
  
  // Enable additional extensions
  converter.setFlavor('github');
  
  return converter;
};

// Insert markdown syntax at cursor position
export const insertMarkdown = (textareaRef, fileContent, setFileContent, prefix, suffix = '') => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, wrap it with prefix and suffix
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start + prefix.length;
      textarea.selectionEnd = end + prefix.length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor between prefix and suffix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
      textarea.focus();
    }, 0);
  }
};

// Insert list items
export const insertList = (textareaRef, fileContent, setFileContent, listPrefix) => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, apply list formatting to each line
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const lines = selectedText.split('\n');
    
    // Format each line as a list item
    const formattedLines = lines.map(line => {
      // Skip empty lines
      if (line.trim() === '') return line;
      
      // For numbered lists, increment the number for each line
      if (listPrefix === '1. ') {
        const index = lines.indexOf(line) + 1;
        return `${index}. ${line}`;
      }
      
      return `${listPrefix}${line}`;
    });
    
    const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start;
      textarea.selectionEnd = start + formattedLines.join('\n').length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + listPrefix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor after the inserted prefix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
      textarea.focus();
    }, 0);
  }
};

// Get the current line of text at cursor position
export const getCurrentLine = (text, cursorPos) => {
  const textBeforeCursor = text.substring(0, cursorPos);
  const lineStartPos = textBeforeCursor.lastIndexOf('\n') + 1;
  const lineEndPos = text.indexOf('\n', cursorPos);
  const actualLineEndPos = lineEndPos !== -1 ? lineEndPos : text.length;
  return text.substring(lineStartPos, actualLineEndPos);
};

// Handle keyboard events in the editor
export const handleEditorKeyDown = (e, textareaRef, fileContent, setFileContent) => {
  // Handle keyboard shortcuts
  if (e.ctrlKey || e.metaKey) {
    // Ctrl+B or Cmd+B for bold
    if (e.key === 'b') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '**', '**');
      return;
    }
    
    // Ctrl+I or Cmd+I for italic
    if (e.key === 'i') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '*', '*');
      return;
    }
    
    // Ctrl+Shift+L for unordered list
    if (e.shiftKey && e.key === 'L') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- ');
      return;
    }
    
    // Ctrl+Shift+O for ordered list
    if (e.shiftKey && e.key === 'O') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '1. ');
      return;
    }
    
    // Ctrl+Shift+C for checklist
    if (e.shiftKey && e.key === 'C') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- [ ] ');
      return;
    }
  }
  
  // Auto-continue lists on Enter
  if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check for list patterns
    const bulletListMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+(.*)/);
    const numberedListMatch = currentLine.match(/^(\s*)(\d+)\.?\s+(.*)/);
    const checklistMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+\[([ xX])\]\s+(.*)/);
    
    if (bulletListMatch || numberedListMatch || checklistMatch) {
      // Get the indentation and list marker
      let indentation, marker, content;
      
      if (checklistMatch) {
        indentation = checklistMatch[1];
        marker = checklistMatch[2];
        const checkState = checklistMatch[3];
        content = checklistMatch[4];
        
        // If the checklist item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the checklist with an unchecked box
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} [ ] `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (bulletListMatch) {
        indentation = bulletListMatch[1];
        marker = bulletListMatch[2];
        content = bulletListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the bullet list
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (numberedListMatch) {
        indentation = numberedListMatch[1];
        const number = parseInt(numberedListMatch[2], 10);
        content = numberedListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the numbered list with incremented number
        e.preventDefault();
        const newListItem = `\n${indentation}${number + 1}. `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      }
    }
  }
  
  // Handle tab for indentation in lists
  if (e.key === 'Tab') {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check if we're in a list item
    const listMatch = currentLine.match(/^(\s*)(-|\*|\+|\d+\.|\[[ xX]\])\s+/);
    if (listMatch) {
      e.preventDefault();
      
      // Add or remove indentation based on shift key
      if (e.shiftKey) {
        // Outdent: remove 2 spaces from the beginning if they exist
        if (currentLine.startsWith('  ')) {
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const lineEnd = text.indexOf('\n', cursorPos);
          const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
          
          const newContent = text.substring(0, lineStart) + currentLine.substring(2) + text.substring(actualLineEnd);
          setFileContent(newContent);
          
          // Adjust cursor position
          const newCursorPos = cursorPos - 2;
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = newCursorPos > lineStart ? newCursorPos : lineStart;
            textarea.focus();
          }, 0);
        }
      } else {
        // Indent: add 2 spaces at the beginning
        const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
        const lineEnd = text.indexOf('\n', cursorPos);
        const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
        
        const newContent = text.substring(0, lineStart) + '  ' + currentLine + text.substring(actualLineEnd);
        setFileContent(newContent);
        
        // Adjust cursor position
        const newCursorPos = cursorPos + 2;
        setTimeout(() => {
          textarea.selectionStart = textarea.selectionEnd = newCursorPos;
          textarea.focus();
        }, 0);
      }
    }
  }
};

// Convert markdown to HTML
export const convertMarkdownToHtml = (converter, markdown) => {
  return converter.makeHtml(markdown);
};



================================================================
End of Codebase
================================================================

================
File: src/components/windows/explorer/state/useExplorerState.js
================
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../../../context/AuthContext';
import { useWindowState } from '../../../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../../../utils/windowTypes';
import { saveExplorerState, getExplorerState } from '../../../../services/indexedDBService';
import { createMarkdownConverter } from '../utils/markdownUtils';
import { 
  fetchPublicDirectoryContents, 
  fetchDirectoryContents, 
  fetchPublicFileContent, 
  fetchFileContent,
  saveFileContent as apiSaveFileContent,
  createNewItem as apiCreateNewItem,
  renameItem as apiRenameItem,
  deleteItem as apiDeleteItem,
  moveItem as apiMoveItem,
  getStorageStats as apiGetStorageStats
} from '../api/fileOperations';
import { 
  getParentDirectoryPath, 
  expandParentFolders, 
  getActiveFolderPath,
  shouldUseProseMirrorEditor,
  convertServerFileNameToUser
} from '../utils/fileUtils';

const useExplorerState = (nodeId, windowState, updateWindowState) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Refs to track state loading and saving
  const stateLoadedRef = useRef(false);
  const explorerSaveTimeoutRef = useRef(null); // New ref for debounced explorer state saving
  
  // Reference to store the saved state that needs to be restored after files are loaded
  const pendingStateRestoreRef = useRef(null);
  const fileLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [publicFiles, setPublicFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isTreeLoading, setIsTreeLoading] = useState(true);
  const [isContentLoading, setIsContentLoading] = useState(false);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  const [activeTab, setActiveTab] = useState(windowState?.activeTab || 'public'); // 'public' or 'private'
  const [isFileTreeCollapsed, setIsFileTreeCollapsed] = useState(windowState?.isFileTreeCollapsed || false);
  
  // Additional state for markdown editing
  const [editMode, setEditMode] = useState(windowState?.editMode || false);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // State for file/folder creation
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [createType, setCreateType] = useState('file'); // 'file' or 'directory'
  const [newItemName, setNewItemName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  
  // State for file/folder renaming
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [itemToRename, setItemToRename] = useState(null);
  const [newName, setNewName] = useState('');
  const [isRenaming, setIsRenaming] = useState(false);
  
  // State for file/folder deletion
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // State for drag and drop
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [isMoving, setIsMoving] = useState(false);
  
  // For auto-save functionality and editor references
  const saveTimeoutRef = useRef(null);
  
  // Create markdown converter
  const converter = createMarkdownConverter();

  // Track previous node ID to detect window swaps
  const prevNodeIdRef = useRef(nodeId);

  // Load explorer state from IndexedDB on mount or when nodeId changes
  useEffect(() => {
    const loadExplorerState = async () => {
      console.log(`[DEBUG] Starting to load explorer state for window ${nodeId}`);
      
      // If nodeId changed but it's not the first load, it likely means a window swap occurred
      const isSwapDetected = prevNodeIdRef.current !== nodeId && prevNodeIdRef.current !== null;
      if (isSwapDetected) {
        console.log(`[DEBUG] Node ID changed from ${prevNodeIdRef.current} to ${nodeId}, possible window swap detected`);
        // Reset the state loaded flag to force a reload after a swap
        stateLoadedRef.current = false;
        // Clear any pending state
        pendingStateRestoreRef.current = null;
      }
      
      // Update prevNodeIdRef for future comparisons
      prevNodeIdRef.current = nodeId;
      
      try {
        // Try to load explorer state from IndexedDB
        const savedState = await getExplorerState(nodeId);
        console.log(`[DEBUG] Retrieved state from IndexedDB:`, savedState);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`[DEBUG] Valid saved state found for window ${nodeId}:`, savedState.content);
          
          // Store the saved state in the ref for later restoration after files are loaded
          pendingStateRestoreRef.current = savedState.content;
          
          // Restore expanded folders and active tab immediately
          if (savedState.content.expandedFolders) {
            console.log(`[DEBUG] Restoring expanded folders`);
            setExpandedFolders(savedState.content.expandedFolders);
          }
          
          if (savedState.content.activeTab) {
            console.log(`[DEBUG] Restoring active tab: ${savedState.content.activeTab}`);
            setActiveTab(savedState.content.activeTab);
          }
          
          if (savedState.content.editMode !== undefined && isAdmin) {
            console.log(`[DEBUG] Restoring edit mode: ${savedState.content.editMode}`);
            setEditMode(savedState.content.editMode);
          }
          
          if (savedState.content.isFileTreeCollapsed !== undefined) {
            console.log(`[DEBUG] Restoring file tree collapsed state: ${savedState.content.isFileTreeCollapsed}`);
            setIsFileTreeCollapsed(savedState.content.isFileTreeCollapsed);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        } else {
          console.log(`[DEBUG] No valid saved state found or state already loaded`);
          // Even if no state is loaded, mark as loaded to allow future saves
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`[DEBUG] Failed to load explorer state:`, error);
        // Ensure we still mark state as loaded even if there's an error
        stateLoadedRef.current = true;
      }
    };
    
    loadExplorerState();
  }, [nodeId, isAdmin]);
  
  // Handle window activation
  useEffect(() => {
    if (windowState?.isActive) {
      // Save this as the active explorer window
      setActiveWindow(nodeId, WINDOW_TYPES.EXPLORER);
    }
  }, [windowState?.isActive, nodeId, setActiveWindow]);
  
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    // Early return if state hasn't been loaded yet (prevents overwriting with default values)
    if (!stateLoadedRef.current) return;
    
    // Clear any existing timeout
    if (explorerSaveTimeoutRef.current) {
      clearTimeout(explorerSaveTimeoutRef.current);
    }
    
    // Save the explorer state to IndexedDB with debounce
    explorerSaveTimeoutRef.current = setTimeout(() => {
      console.log(`[DEBUG] Saving explorer state for window ${nodeId}:`, {
        selectedFile,
        expandedFolders,
        activeTab,
        editMode,
        isFileTreeCollapsed
      });
      
      saveExplorerState({
        id: nodeId,
        content: {
          selectedFile,
          expandedFolders,
          activeTab,
          editMode,
          isFileTreeCollapsed
        }
      }).catch(error => {
        console.error(`[DEBUG] Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
      });
    }, 300); // 300ms debounce
    
    // Clear timeout on cleanup
    return () => {
      if (explorerSaveTimeoutRef.current) {
        clearTimeout(explorerSaveTimeoutRef.current);
      }
    };
  }, [selectedFile, expandedFolders, activeTab, editMode, isFileTreeCollapsed, nodeId]);

  // Load initial directory contents and restore selected file afterward
  useEffect(() => {
    console.log('[DEBUG] Starting to load directory contents');
    
    // First, load the files
    const loadFilesAndRestoreSelection = async () => {
      try {
        // Load public files for all users
        await handleFetchPublicDirectoryContents('/', true);
        
      // Load private files for admin users or users with file access (if applicable)
      if (isAdmin || user?.has_file_access) {
        try {
          await handleFetchDirectoryContents('/', true);
        } catch (error) {
          console.error('Failed to load private files:', error);
          setFiles([]);
          if (activeTab === 'private') {
            setErrorMessage('Failed to load private files. Please ensure your directory exists.');
          }
        }
      }
        
        // Mark files as loaded
        fileLoadedRef.current = true;
        
        // Now that files are loaded, restore the selected file if we have one pending
        if (pendingStateRestoreRef.current && pendingStateRestoreRef.current.selectedFile) {
          const restoredFile = pendingStateRestoreRef.current.selectedFile;
          console.log(`[DEBUG] Now restoring selected file after files are loaded:`, restoredFile);
          
          // Set the selected file
          setSelectedFile(restoredFile);
          
          // Update the current path to ensure parent directories are visible
          if (restoredFile.type === 'file') {
            // For files, set the current path to the parent directory
            const parentPath = getParentDirectoryPath(restoredFile.path);
            setCurrentPath(parentPath);
          } else {
            // For directories, set the current path to the directory itself
            setCurrentPath(restoredFile.path);
          }
          
          // Ensure parent folders are expanded
          setExpandedFolders(prev => expandParentFolders(restoredFile.path, prev));
          
          // If it's a file, load its content
          if (restoredFile.type === 'file') {
            console.log(`[DEBUG] Loading content for restored file: ${restoredFile.path}`);
            
            // Set the preview mode for markdown files
            if (restoredFile.name.endsWith('.md')) {
              console.log(`[DEBUG] Setting preview mode for markdown file`);
              setShowPreview(true);
              
              // Also restore edit mode if it was saved
              if (pendingStateRestoreRef.current.editMode && isAdmin) {
                console.log(`[DEBUG] Restoring edit mode: ${pendingStateRestoreRef.current.editMode}`);
                setEditMode(pendingStateRestoreRef.current.editMode);
              }
            }
            
            // Use handleFileSelect to load the file content
            // Use setTimeout to ensure this happens after state updates
            setTimeout(() => {
              console.log(`[DEBUG] Executing delayed file selection for: ${restoredFile.path}`);
              handleFileSelect(restoredFile, true);
            }, 100);
          }
          
          // Clear the pending restore
          pendingStateRestoreRef.current = null;
        } else {
          console.log('[DEBUG] No file to restore or files not loaded yet');
        }
      } catch (error) {
        console.error('[DEBUG] Error in loadFilesAndRestoreSelection:', error);
      }
    };
    
    loadFilesAndRestoreSelection();
  }, [isAdmin, activeTab]);

  // State for storage statistics
  const [storageStats, setStorageStats] = useState({
    quota: 0,
    used: 0,
    available: 0,
    unlimited: false,
    isLoading: false
  });

  // Fetch storage statistics
  const fetchStorageStats = async () => {
    if (!user?.has_file_access && !isAdmin) return;
    
    setStorageStats(prev => ({ ...prev, isLoading: true }));
    
    try {
      const stats = await apiGetStorageStats();
      if (stats.error) {
        setErrorMessage(stats.error);
        setStorageStats(prev => ({
          ...prev,
          isLoading: false
        }));
      } else {
        setStorageStats({
          quota: stats.quota,
          used: stats.used,
          available: stats.available,
          unlimited: stats.unlimited,
          isLoading: false
        });
      }
    } catch (error) {
      console.error('Error fetching storage stats:', error);
      setStorageStats(prev => ({
        ...prev,
        isLoading: false
      }));
    }
  };

  // Fetch storage stats on mount and after file operations
  useEffect(() => {
    if (user?.has_file_access || isAdmin) {
      fetchStorageStats();
    }
  }, [user, isAdmin]);

  // Reset content states when switching tabs
  useEffect(() => {
    // Clear file content and reset view states when changing tabs
    setSelectedFile(null);
    setFileContent('');
    setShowPreview(false);
    setEditMode(false);
    setSaveStatus('saved');
    setErrorMessage('');
    
    // Reset current path to root for the selected tab
    setCurrentPath('/');
  }, [activeTab]);

  // Auto-save functionality with debounce
  useEffect(() => {
    // Auto-save if user has permission and we have a ProseMirror file selected (.txt/.prosemirror)
    // Allow for admins and users with file_access (for private files)
    // Note: ProseMirror is always "live" so no need to check editMode for these files
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (hasEditPermission && selectedFile && shouldUseProseMirrorEditor(selectedFile.name) && fileContent) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        handleSaveFileContent();
      }, 1000); // 1 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [fileContent, isAdmin, selectedFile, activeTab, user]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview,
        editMode,
        saveStatus,
        activeTab
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, editMode, saveStatus, activeTab, updateWindowState]);
  
  // Fetch public directory contents
  const handleFetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicDirectoryContents(publicPath, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setPublicFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(publicPath);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch public file content
  const handleFetchPublicFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchPublicFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Fetch private directory contents
  const handleFetchDirectoryContents = async (path = '/', refreshAll = false) => {
    setIsTreeLoading(true);
    setErrorMessage('');
    
    const result = await fetchDirectoryContents(path, refreshAll);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      setFiles(result.files);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(path);
      }
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        setExpandedFolders(prev => expandParentFolders(currentPath, prev));
      }
    }
    
    setIsTreeLoading(false);
    return result; // Return result so we can chain promises
  };
  
  // Fetch private file content
  const handleFetchFileContent = async (filePath) => {
    setIsContentLoading(true);
    setErrorMessage('');
    
    const result = await fetchFileContent(filePath);
    
    if (result.error) {
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      setFileContent(result.content);
      setSaveStatus('saved');
    }
    
    setIsContentLoading(false);
  };
  
  // Save file content
  const handleSaveFileContent = async (content) => {
    console.log('[DEBUG] useExplorerState - handleSaveFileContent called:', {
      selectedFilePath: selectedFile?.path,
      selectedFileName: selectedFile?.name,
      contentProvided: content !== undefined,
      // If content is provided, use it, otherwise use the state's fileContent
      contentToSaveType: typeof (content !== undefined ? content : fileContent),
      contentToSaveLength: (content !== undefined ? content : fileContent)?.length || 0,
      contentToSavePreview: typeof (content !== undefined ? content : fileContent) === 'string' 
        ? (content !== undefined ? content : fileContent).substring(0, 100) + '...' 
        : 'not a string'
    });
    
    // Check if filePath is valid
    if (!selectedFile || !selectedFile.path || selectedFile.path.trim() === '') {
      console.error('[DEBUG] handleSaveFileContent - No file selected');
      setErrorMessage('No file selected. Please select a file first.');
      setSaveStatus('error');
      return;
    }
    
    setSaveStatus('saving');
    
    // Use content parameter if provided, otherwise use state's fileContent
    const contentToSave = content !== undefined ? content : fileContent;
    
    console.log('[DEBUG] Sending to API:', {
      path: selectedFile.path,
      contentType: typeof contentToSave,
      contentLength: contentToSave?.length || 0
    });
    
    const result = await apiSaveFileContent(selectedFile.path, contentToSave);
    
    if (result.error) {
      console.error('[DEBUG] API Save Error:', result.error);
      setErrorMessage(result.error);
      setSaveStatus('error');
    } else {
      console.log('[DEBUG] API Save Success:', result);
      setErrorMessage('');
      setSaveStatus('saved');
      
      // If content parameter was provided, update the state's fileContent
      if (content !== undefined) {
        setFileContent(content);
      }
    }
  };
  
  // Toggle folder expansion
  const toggleFolder = (folderPath, folder) => {
    const isExpanding = !expandedFolders[folderPath];
    
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: isExpanding
    }));
    
    if (isExpanding) {
      // If we're expanding the folder, set it as the current path and selected item
      setCurrentPath(folderPath);
      setSelectedFile(folder);
      // Clear file content since we're selecting a folder
      setFileContent('');
      setShowPreview(false);
      if (editMode) {
        setEditMode(false);
      }
    } else {
      // If we're collapsing the folder, check if the currently selected file is within this folder
      if (selectedFile && selectedFile.path.startsWith(folderPath + '/')) {
        // Clear the selection and content if the selected file is within the collapsed folder
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
        // Reset current path to parent directory
        const parentPath = getParentDirectoryPath(folderPath);
        setCurrentPath(parentPath);
      }
    }
  };
  
  // Create a new file or folder
  const createNewItem = async () => {
    if (!newItemName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    setIsCreating(true);
    setErrorMessage('');
    
    // Get the active folder path where the new item should be created
    const activeFolderPath = getActiveFolderPath(selectedFile, currentPath);
    
    const result = await apiCreateNewItem(activeTab, activeFolderPath, newItemName, createType);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowCreateDialog(false);
      setNewItemName('');
      
      // Refresh the entire file tree from the root
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
      
      // If it's a directory, expand it
      if (createType === 'directory' && result.path) {
        setExpandedFolders(prev => ({
          ...prev,
          [result.path]: true
        }));
      }
    }
    
    setIsCreating(false);
  };
  
  // Open the create dialog
  const openCreateDialog = (type) => {
    setCreateType(type);
    setNewItemName('');
    setErrorMessage('');
    setShowCreateDialog(true);
  };
  
  // Close the create dialog
  const closeCreateDialog = () => {
    setShowCreateDialog(false);
    setNewItemName('');
    setErrorMessage('');
  };
  
  // Open the rename dialog
  const openRenameDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to rename files or file access permission for private files.');
      return;
    }
    
    setItemToRename(item);
    setNewName(item.name);
    setErrorMessage('');
    setShowRenameDialog(true);
  };
  
  // Close the rename dialog
  const closeRenameDialog = () => {
    setShowRenameDialog(false);
    setItemToRename(null);
    setNewName('');
    setErrorMessage('');
  };
  
  // Rename a file or folder
  const renameItem = async () => {
    if (!newName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    if (!itemToRename) {
      setErrorMessage('No item selected for renaming');
      return;
    }
    
    setIsRenaming(true);
    setErrorMessage('');
    
    const result = await apiRenameItem(itemToRename.path, newName);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog and reset the form
      setShowRenameDialog(false);
      setItemToRename(null);
      setNewName('');
      
      // If the renamed item was selected, update the selected file
      if (selectedFile && selectedFile.path === itemToRename.path) {
        setSelectedFile(null);
      }
      
      // Refresh the appropriate file list
      if (itemToRename.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsRenaming(false);
  };
  
  // Open the delete dialog
  const openDeleteDialog = (item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to delete files or file access permission for private files.');
      return;
    }
    
    setItemToDelete(item);
    setErrorMessage('');
    setShowDeleteDialog(true);
  };
  
  // Close the delete dialog
  const closeDeleteDialog = () => {
    setShowDeleteDialog(false);
    setItemToDelete(null);
    setErrorMessage('');
  };
  
  // Delete a file or folder
  const handleDeleteItem = async () => {
    if (!itemToDelete) {
      setErrorMessage('No item selected for deletion');
      return;
    }
    
    setIsDeleting(true);
    setErrorMessage('');
    
    const result = await apiDeleteItem(itemToDelete.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // Close the dialog
      setShowDeleteDialog(false);
      setItemToDelete(null);
      
      // If the deleted item was selected, clear the selection
      if (selectedFile && selectedFile.path === itemToDelete.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (itemToDelete.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    setIsDeleting(false);
  };
  
  // Handle drag start event
  const handleDragStart = (e, item) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    setDraggedItem(item);
    e.dataTransfer.setData('text/plain', item.path);
    e.dataTransfer.effectAllowed = 'move';
    
    // Add dragging class to the element
    e.currentTarget.classList.add('dragging');
    
    // Remove the class after a short delay to ensure it's applied
    setTimeout(() => {
      if (e.currentTarget) {
        e.currentTarget.classList.remove('dragging');
      }
    }, 100);
  };
  
  // Handle drag over event
  const handleDragOver = (e, folder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Only allow dropping into directories
    if (folder.type === 'directory') {
      setDropTarget(folder);
      e.dataTransfer.dropEffect = 'move';
      
      // Add drop-target class to the element
      e.currentTarget.classList.add('drop-target');
    }
  };
  
  // Handle drag over for the file tree container (to allow dropping to root)
  const handleContainerDragOver = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Set root as the drop target
    const rootFolder = {
      type: 'directory',
      path: draggedItem.isPublic ? '/public' : '/',
      name: 'Root'
    };
    setDropTarget(rootFolder);
    e.dataTransfer.dropEffect = 'move';
  };
  
  // Handle drag leave event
  const handleDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
  };
  
  // Handle drag leave for the container
  const handleContainerDragLeave = (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
  };
  
  // Handle drop event
  const handleDrop = async (e, targetFolder) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !targetFolder) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Reset drop target
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
    
    // Only allow dropping into directories
    if (targetFolder.type !== 'directory') {
      return;
    }
    
    // Check if dropping on itself
    if (draggedItem.path === targetFolder.path) {
      return;
    }
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle drop event for the container (moving to root)
  const handleContainerDrop = async (e) => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission || !draggedItem || !dropTarget) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Process the drop using the dropTarget which was set in handleContainerDragOver
    const targetFolder = dropTarget;
    
    // Reset drop target
    setDropTarget(null);
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    setIsMoving(true);
    setErrorMessage('');
    
    const result = await apiMoveItem(draggedItem.path, targetFolder.path);
    
    if (result.error) {
      setErrorMessage(result.error);
    } else {
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    }
    
    // Clear drag state
    setDraggedItem(null);
    setIsMoving(false);
  };
  
  // Handle folder selection
  const handleFolderSelect = (folder) => {
    // Update the current path to the selected folder's path
    setCurrentPath(folder.path);
    
    // Set the selected folder
    setSelectedFile(folder);
    
    // Expand the folder
    setExpandedFolders(prev => ({
      ...prev,
      [folder.path]: true
    }));
    
    // Reset content and preview
    setFileContent('');
    setShowPreview(false);
    
    // Reset edit mode
    if (editMode) {
      setEditMode(false);
    }
  };
  
  // Handle file selection
  const handleFileSelect = (file, skipTabSwitch = false) => {
    // Check if this selection should change the active tab, but skip when restoring files
    if (!skipTabSwitch) {
      if (file.setTab) {
        setActiveTab(file.setTab);
      } else if (file.isPublic !== undefined) {
        // Update active tab based on file's isPublic property
        setActiveTab(file.isPublic ? 'public' : 'private');
      }
    }

    // If it's a directory, handle it differently
    if (file.type === 'directory') {
      handleFolderSelect(file);
      return;
    }
    
    setSelectedFile(file);
    
    // Make sure parent folders are expanded so the file is visible on reload
    setExpandedFolders(prev => expandParentFolders(file.path, prev));
    
    // Set current path to the parent directory for better context
    const parentPath = getParentDirectoryPath(file.path);
    setCurrentPath(parentPath);
    
    // Reset edit mode when selecting a new file
    if (editMode) {
      setEditMode(false);
    }
    
    // Fetch content for all file types
    if (file.isPublic) {
      // Fetch public file content
      handleFetchPublicFileContent(file.path);
    } else {
      // Fetch private file content (admin only)
      handleFetchFileContent(file.path);
    }
    
    // Only set preview mode for markdown files
    if (file.name.endsWith('.md')) {
      setShowPreview(true);
    } else {
      setShowPreview(false);
    }
  };
  
  // Toggle edit mode
  const toggleEditMode = () => {
    // Allow admins or users with file_access (for private files only)
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    if (!hasEditPermission) {
      setErrorMessage('Admin access required to edit files or file access permission for private files.');
      return;
    }
    
    if (!selectedFile || !selectedFile.name.endsWith('.md')) {
      setErrorMessage('Only markdown files can be edited.');
      return;
    }
    
    setEditMode(!editMode);
    // When switching to preview mode, ensure preview is shown
    if (editMode) {
      setShowPreview(true);
    }
  };
  
  // Handle markdown content change
  const handleMarkdownChange = (e) => {
    setFileContent(e.target.value);
  };
  
  // Handle commands (for the command input)
  const handleCommand = (cmd) => {
    // Commands:
    // - refresh: refresh file list
    // - preview: toggle markdown preview
    // - edit: toggle edit mode (users with permission)
    // - save: manually save the current file
    // - new-file: create a new file (users with permission)
    // - new-folder: create a new folder (users with permission)
    // - rename: rename selected file or folder (users with permission)
    // - delete: delete selected file or folder (users with permission)
    // - public: switch to public files tab
    // - private: switch to private files tab (users with permission)
    
    // Check permission for file operations
    const hasEditPermission = isAdmin || (user?.has_file_access && activeTab === 'private');
    const canAccessPrivate = isAdmin || user?.has_file_access;
    
    if (cmd === 'refresh') {
      if (activeTab === 'public') {
        handleFetchPublicDirectoryContents('/', true);
      } else {
        handleFetchDirectoryContents('/', true);
      }
    } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
      setShowPreview(!showPreview);
      if (editMode) {
        setEditMode(false);
      }
    } else if (cmd === 'edit' && selectedFile?.name.endsWith('.md')) {
      toggleEditMode();
    } else if (cmd === 'save' && editMode && selectedFile?.name.endsWith('.md')) {
      handleSaveFileContent();
    } else if (cmd === 'new-file' && hasEditPermission) {
      openCreateDialog('file');
    } else if (cmd === 'new-folder' && hasEditPermission) {
      openCreateDialog('directory');
    } else if (cmd === 'rename' && selectedFile && hasEditPermission) {
      openRenameDialog(selectedFile);
    } else if (cmd === 'delete' && selectedFile && hasEditPermission) {
      openDeleteDialog(selectedFile);
    } else if (cmd === 'public') {
      setActiveTab('public');
    } else if (cmd === 'private' && canAccessPrivate) {
      setActiveTab('private');
    } else {
      setErrorMessage(`Unknown command: ${cmd}`);
    }
  };

  // Toggle file tree collapse
  const toggleFileTreeCollapse = () => {
    setIsFileTreeCollapsed(!isFileTreeCollapsed);
  };
  
  // Handle file or folder export/download
  const handleExportFile = async () => {
    if (!selectedFile) {
      setErrorMessage('No file or folder selected');
      return;
    }
    
    try {
      // If it's a directory, create a zip file
      if (selectedFile.type === 'directory') {
        // Import JSZip dynamically 
        const JSZip = (await import('jszip')).default;
        const zip = new JSZip();
        
        setErrorMessage('Creating zip file...');
        
        // Function to recursively gather files from a folder
        const addFolderToZip = async (folderPath, zipFolder) => {
          // Determine which API to use based on whether the folder is public or private
          const fetchApi = selectedFile.isPublic ? fetchPublicDirectoryContents : fetchDirectoryContents;
          
          // Fetch directory contents
          const result = await fetchApi(folderPath, false);
          
          if (result.error) {
            throw new Error(`Failed to access folder: ${result.error}`);
          }
          
          // Process each item in the folder
          for (const item of result.files) {
            if (item.type === 'directory') {
              // Create a subfolder in the zip and process recursively
              const newFolder = zipFolder.folder(item.name);
              await addFolderToZip(item.path, newFolder);
            } else {
              // Fetch file content
              const contentApi = selectedFile.isPublic ? fetchPublicFileContent : fetchFileContent;
              const contentResult = await contentApi(item.path);
              
              if (contentResult.error) {
                console.error(`Error loading file content for ${item.path}: ${contentResult.error}`);
                continue;
              }
              
              // Add file to zip
              zipFolder.file(item.name, contentResult.content);
            }
          }
        };
        
        // Start the recursive process from the selected folder
        await addFolderToZip(selectedFile.path, zip);
        
        // Generate the zip file
        const content = await zip.generateAsync({type: 'blob'});
        
        // Create a filename for the zip file (folder name + .zip)
        const zipFileName = `${selectedFile.name}.zip`;
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(content);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = zipFileName;
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
        
        // Clear the export message
        setErrorMessage('');
      } else {
        // For single file export, keep existing behavior
        if (!fileContent) {
          setErrorMessage('File has no content');
          return;
        }
        
        // Create a blob with the file content
        const blob = new Blob([fileContent], { type: 'text/plain' });
        
        // Create a temporary URL for the blob
        const url = URL.createObjectURL(blob);
        
        // Create a temporary anchor element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = convertServerFileNameToUser(selectedFile.name);
        
        // Append the anchor to the document, click it, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        // Clean up by revoking the object URL
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      console.error('Error exporting:', error);
      setErrorMessage(`Failed to export: ${error.message}`);
    }
  };
  
  return {
    files,
    publicFiles,
    currentPath,
    selectedFile,
    expandedFolders,
    isTreeLoading,
    isContentLoading,
    fileContent,
    errorMessage,
    showPreview,
    activeTab,
    editMode,
    saveStatus,
    isFileTreeCollapsed,
    showCreateDialog,
    createType, 
    newItemName,
    isCreating,
    showRenameDialog,
    itemToRename,
    newName,
    isRenaming,
    showDeleteDialog,
    itemToDelete,
    isDeleting,
    draggedItem,
    dropTarget,
    isMoving,
    converter,
    isAdmin,
    storageStats,
    fetchStorageStats,
    handleFetchPublicDirectoryContents,
    handleFetchDirectoryContents,
    handleSaveFileContent,
    handleExportFile,
    toggleFolder,
    toggleFileTreeCollapse,
    createNewItem,
    openCreateDialog,
    closeCreateDialog,
    openRenameDialog,
    closeRenameDialog,
    renameItem,
    openDeleteDialog,
    closeDeleteDialog,
    handleDeleteItem,
    handleDragStart,
    handleDragOver,
    handleContainerDragOver,
    handleDragLeave,
    handleContainerDragLeave,
    handleDrop,
    handleContainerDrop,
    handleFileSelect,
    toggleEditMode,
    handleMarkdownChange,
    handleCommand,
    setNewItemName,
    setNewName,
    setErrorMessage,
    setFileContent,
    setSelectedFile
  };
};

export default useExplorerState;

================
File: src/components/windows/explorer/utils/canvasUtils.js
================
/**
 * Utility functions for the canvas editor
 */

/**
 * Generate a unique ID for a node or edge
 * @param {string} prefix - Prefix for the ID (e.g., 'node' or 'edge')
 * @returns {string} Unique ID
 */
export const generateId = (prefix = 'node') => {
  return `${prefix}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
};

/**
 * Calculate the distance between two points
 * @param {Object} point1 - First point {x, y}
 * @param {Object} point2 - Second point {x, y}
 * @returns {number} Distance
 */
export const distance = (point1, point2) => {
  return Math.sqrt(
    Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2)
  );
};

/**
 * Check if a point is inside a node
 * @param {Object} point - Point to check {x, y}
 * @param {Object} node - Node {x, y, width, height}
 * @returns {boolean} True if point is inside node
 */
export const isPointInNode = (point, node) => {
  return (
    point.x >= node.x &&
    point.x <= node.x + node.width &&
    point.y >= node.y &&
    point.y <= node.y + node.height
  );
};

/**
 * Get connection points for edges based on the fromSide and toSide
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @param {string} fromSide - Side of source node to connect from ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node to connect to ('top', 'right', 'bottom', 'left')
 * @returns {Object} Connection points {source: {x, y}, target: {x, y}}
 */
export const getConnectionPoints = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  const source = { x: 0, y: 0 };
  const target = { x: 0, y: 0 };

  // Source node connection point
  switch (fromSide) {
    case 'top':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y;
      break;
    case 'right':
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    case 'bottom':
      source.x = fromNode.x + fromNode.width / 2;
      source.y = fromNode.y + fromNode.height;
      break;
    case 'left':
      source.x = fromNode.x;
      source.y = fromNode.y + fromNode.height / 2;
      break;
    default:
      source.x = fromNode.x + fromNode.width;
      source.y = fromNode.y + fromNode.height / 2;
  }

  // Target node connection point
  switch (toSide) {
    case 'top':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y;
      break;
    case 'right':
      target.x = toNode.x + toNode.width;
      target.y = toNode.y + toNode.height / 2;
      break;
    case 'bottom':
      target.x = toNode.x + toNode.width / 2;
      target.y = toNode.y + toNode.height;
      break;
    case 'left':
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
      break;
    default:
      target.x = toNode.x;
      target.y = toNode.y + toNode.height / 2;
  }

  return { source, target };
};

/**
 * Calculate the best connection sides for two nodes
 * @param {Object} fromNode - Source node {x, y, width, height}
 * @param {Object} toNode - Target node {x, y, width, height}
 * @returns {Object} Best sides {fromSide, toSide}
 */
export const calculateBestConnectionSides = (fromNode, toNode) => {
  // Calculate center points
  const fromCenter = {
    x: fromNode.x + fromNode.width / 2,
    y: fromNode.y + fromNode.height / 2
  };
  const toCenter = {
    x: toNode.x + toNode.width / 2,
    y: toNode.y + toNode.height / 2
  };

  // Calculate angle between centers
  const angle = Math.atan2(toCenter.y - fromCenter.y, toCenter.x - fromCenter.x);
  
  // Convert angle to degrees
  const degrees = (angle * 180) / Math.PI;
  
  // Determine from side based on angle
  let fromSide;
  if (degrees >= -45 && degrees < 45) {
    fromSide = 'right';
  } else if (degrees >= 45 && degrees < 135) {
    fromSide = 'bottom';
  } else if (degrees >= 135 || degrees < -135) {
    fromSide = 'left';
  } else {
    fromSide = 'top';
  }
  
  // Calculate opposite side for target
  let toSide;
  switch (fromSide) {
    case 'right': toSide = 'left'; break;
    case 'bottom': toSide = 'top'; break;
    case 'left': toSide = 'right'; break;
    case 'top': toSide = 'bottom'; break;
    default: toSide = 'left';
  }
  
  return { fromSide, toSide };
};

/**
 * Draw an arrow at the end of a line
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {number} x - X coordinate of arrow tip
 * @param {number} y - Y coordinate of arrow tip
 * @param {number} angle - Angle of the line in radians
 * @param {number} size - Size of the arrow
 */
export const drawArrow = (ctx, x, y, angle, size = 10) => {
  ctx.save();
  ctx.translate(x, y);
  ctx.rotate(angle);
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(-size, -size / 2);
  ctx.lineTo(-size, size / 2);
  ctx.closePath();
  ctx.fill();
  ctx.restore();
};

/**
 * Draw a connection line between two points with optional arrow
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {Object} source - Source point {x, y}
 * @param {Object} target - Target point {x, y}
 * @param {string} color - Line color
 * @param {boolean} showSourceArrow - Whether to show an arrow at the source
 * @param {boolean} showTargetArrow - Whether to show an arrow at the target
 */
export const drawConnection = (ctx, source, target, color = '#14b8a6', showSourceArrow = false, showTargetArrow = true) => {
  const angle = Math.atan2(target.y - source.y, target.x - source.x);
  
  // Draw line
  ctx.strokeStyle = color;
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(source.x, source.y);
  ctx.lineTo(target.x, target.y);
  ctx.stroke();
  
  // Draw arrows
  ctx.fillStyle = color;
  if (showSourceArrow) {
    drawArrow(ctx, source.x, source.y, angle + Math.PI);
  }
  if (showTargetArrow) {
    drawArrow(ctx, target.x, target.y, angle);
  }
};

/**
 * Convert a canvas color code to an actual color
 * @param {string} colorCode - Color code (e.g., '1', '2', '#FF0000')
 * @returns {string} CSS color value
 */
export const getCanvasColor = (colorCode) => {
  // Map of preset colors
  const colorMap = {
    '1': '#ef4444', // red
    '2': '#f97316', // orange
    '3': '#eab308', // yellow
    '4': '#22c55e', // green
    '5': '#06b6d4', // cyan
    '6': '#a855f7'  // purple
  };
  
  // If colorCode is a preset, return the mapped color
  if (colorMap[colorCode]) {
    return colorMap[colorCode];
  }
  
  // Otherwise, return the color code as is (assuming it's a valid CSS color)
  return colorCode || '#14b8a6'; // Default to teal if no color provided
};

/**
 * Create a new empty canvas with the JSONCanvas format
 * @returns {Object} Empty canvas data
 */
export const createEmptyCanvas = () => {
  return {
    nodes: [],
    edges: []
  };
};

/**
 * Create a new text node with default properties
 * @param {number} x - X position
 * @param {number} y - Y position
 * @param {string} text - Node text content
 * @returns {Object} New text node
 */
export const createTextNode = (x, y, text = 'New note') => {
  return {
    id: generateId('node'),
    type: 'text',
    x,
    y,
    width: 200,
    height: 100,
    text
  };
};

/**
 * Create a new edge connecting two nodes
 * @param {string} fromNode - ID of source node
 * @param {string} toNode - ID of target node
 * @param {string} fromSide - Side of source node ('top', 'right', 'bottom', 'left')
 * @param {string} toSide - Side of target node ('top', 'right', 'bottom', 'left')
 * @returns {Object} New edge
 */
export const createEdge = (fromNode, toNode, fromSide = 'right', toSide = 'left') => {
  return {
    id: generateId('edge'),
    fromNode,
    toNode,
    fromSide,
    toSide,
    fromEnd: 'none',
    toEnd: 'arrow'
  };
};

================
File: src/components/windows/explorer/utils/fileUtils.js
================
// List of available file types for autocomplete
export const AVAILABLE_FILE_TYPES = [
  'txt',    // User-facing extension, actually .prosemirror on server
  'canvas',
  'map'
];

// File extension aliasing - maps user-facing extensions to server extensions
export const FILE_EXTENSION_ALIASES = {
  'txt': 'prosemirror',    // Users see .txt, server stores .prosemirror
};

// Convert user-facing extension to server extension
export const getServerExtension = (userExtension) => {
  return FILE_EXTENSION_ALIASES[userExtension] || userExtension;
};

// Convert server extension to user-facing extension
export const getUserExtension = (serverExtension) => {
  const alias = Object.entries(FILE_EXTENSION_ALIASES).find(([user, server]) => server === serverExtension);
  return alias ? alias[0] : serverExtension;
};

// Get the actual extension from a filename (either user or server)
export const getFileExtension = (fileName) => {
  const lastDot = fileName.lastIndexOf('.');
  return lastDot !== -1 ? fileName.substring(lastDot + 1) : '';
};

// Check if a file should use the ProseMirror editor
export const shouldUseProseMirrorEditor = (fileName) => {
  const ext = getFileExtension(fileName);
  return ext === 'prosemirror' || ext === 'txt';
};

// Convert a user-input filename to server filename
export const convertUserFileNameToServer = (userFileName) => {
  const lastDot = userFileName.lastIndexOf('.');
  if (lastDot === -1) return userFileName;
  
  const baseName = userFileName.substring(0, lastDot);
  const userExt = userFileName.substring(lastDot + 1);
  const serverExt = getServerExtension(userExt);
  
  return `${baseName}.${serverExt}`;
};

// Convert a server filename to user-facing filename
export const convertServerFileNameToUser = (serverFileName) => {
  const lastDot = serverFileName.lastIndexOf('.');
  if (lastDot === -1) return serverFileName;
  
  const baseName = serverFileName.substring(0, lastDot);
  const serverExt = serverFileName.substring(lastDot + 1);
  const userExt = getUserExtension(serverExt);
  
  return `${baseName}.${userExt}`;
};

// Helper function to get parent directory path from a file path
export const getParentDirectoryPath = (filePath) => {
  // Remove trailing slash if present
  const normalizedPath = filePath.endsWith('/') ? filePath.slice(0, -1) : filePath;
  // Find the last slash in the path
  const lastSlashIndex = normalizedPath.lastIndexOf('/');
  
  if (lastSlashIndex === -1) {
    // No slash found, return root
    return '/';
  }
  
  // Return everything up to the last slash
  return normalizedPath.substring(0, lastSlashIndex) || '/';
};

// Helper function to expand all parent folders of a path
export const expandParentFolders = (filePath, currentExpandedFolders) => {
  const parts = filePath.split('/').filter(Boolean);
  let currentPath = '';
  
  // Create a new expanded folders object
  const newExpandedFolders = { ...currentExpandedFolders };
  
  // Expand each parent folder
  for (let i = 0; i < parts.length; i++) {
    currentPath += '/' + parts[i];
    newExpandedFolders[currentPath] = true;
  }
  
  return newExpandedFolders;
};

// Get file icon based on file extension
export const getFileIconName = (fileName) => {
  if (fileName.endsWith('.txt') || fileName.endsWith('.prosemirror')) return 'FileText';
  if (fileName.endsWith('.md')) return 'FileText';
  if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return 'Code';
  if (fileName.endsWith('.json')) return 'Coffee';
  if (fileName.endsWith('.css')) return 'BookOpen';
  if (fileName.endsWith('.html')) return 'Globe';
  if (fileName.endsWith('.svg') || fileName.endsWith('.png') || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg') || fileName.endsWith('.gif')) return 'Image';
  if (fileName.endsWith('.mp3') || fileName.endsWith('.wav') || fileName.endsWith('.ogg')) return 'Music';
  if (fileName.endsWith('.canvas')) return 'Figma';
  if (fileName.endsWith('.map')) return 'Map';
  return 'File';
};

// Helper function to get the active folder path based on selected item and current path
export const getActiveFolderPath = (selectedFile, currentPath) => {
  if (selectedFile) {
    // If selected item is a directory, use its path
    if (selectedFile.type === 'directory') {
      return selectedFile.path;
    }
    // If selected item is a file, use its parent directory
    return getParentDirectoryPath(selectedFile.path);
  }
  // Fall back to current path if no file is selected
  return currentPath;
};

================
File: src/components/windows/explorer/utils/markdownUtils.js
================
import showdown from 'showdown';

// Initialize Showdown converter for Markdown with enhanced options
export const createMarkdownConverter = () => {
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true,
    breaks: true,  // Enable line breaks to be rendered as <br> tags
    simpleLineBreaks: true,
    openLinksInNewWindow: true,
    backslashEscapesHTMLTags: true,
    ghCodeBlocks: true,
    ghCompatibleHeaderId: true,
    ghMentions: true,
    smoothLivePreview: true
  });
  
  // Enable additional extensions
  converter.setFlavor('github');
  
  return converter;
};

// Insert markdown syntax at cursor position
export const insertMarkdown = (textareaRef, fileContent, setFileContent, prefix, suffix = '') => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, wrap it with prefix and suffix
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start + prefix.length;
      textarea.selectionEnd = end + prefix.length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor between prefix and suffix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
      textarea.focus();
    }, 0);
  }
};

// Insert list items
export const insertList = (textareaRef, fileContent, setFileContent, listPrefix) => {
  const textarea = textareaRef.current;
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = fileContent;
  
  // If text is selected, apply list formatting to each line
  if (start !== end) {
    const selectedText = text.substring(start, end);
    const lines = selectedText.split('\n');
    
    // Format each line as a list item
    const formattedLines = lines.map(line => {
      // Skip empty lines
      if (line.trim() === '') return line;
      
      // For numbered lists, increment the number for each line
      if (listPrefix === '1. ') {
        const index = lines.indexOf(line) + 1;
        return `${index}. ${line}`;
      }
      
      return `${listPrefix}${line}`;
    });
    
    const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
    setFileContent(newContent);
    
    // Set cursor position after the inserted text
    setTimeout(() => {
      textarea.selectionStart = start;
      textarea.selectionEnd = start + formattedLines.join('\n').length;
      textarea.focus();
    }, 0);
  } else {
    // No selection, just insert at cursor
    const newContent = text.substring(0, start) + listPrefix + text.substring(start);
    setFileContent(newContent);
    
    // Move cursor after the inserted prefix
    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
      textarea.focus();
    }, 0);
  }
};

// Get the current line of text at cursor position
export const getCurrentLine = (text, cursorPos) => {
  const textBeforeCursor = text.substring(0, cursorPos);
  const lineStartPos = textBeforeCursor.lastIndexOf('\n') + 1;
  const lineEndPos = text.indexOf('\n', cursorPos);
  const actualLineEndPos = lineEndPos !== -1 ? lineEndPos : text.length;
  return text.substring(lineStartPos, actualLineEndPos);
};

// Handle keyboard events in the editor
export const handleEditorKeyDown = (e, textareaRef, fileContent, setFileContent) => {
  // Handle keyboard shortcuts
  if (e.ctrlKey || e.metaKey) {
    // Ctrl+B or Cmd+B for bold
    if (e.key === 'b') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '**', '**');
      return;
    }
    
    // Ctrl+I or Cmd+I for italic
    if (e.key === 'i') {
      e.preventDefault();
      insertMarkdown(textareaRef, fileContent, setFileContent, '*', '*');
      return;
    }
    
    // Ctrl+Shift+L for unordered list
    if (e.shiftKey && e.key === 'L') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- ');
      return;
    }
    
    // Ctrl+Shift+O for ordered list
    if (e.shiftKey && e.key === 'O') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '1. ');
      return;
    }
    
    // Ctrl+Shift+C for checklist
    if (e.shiftKey && e.key === 'C') {
      e.preventDefault();
      insertList(textareaRef, fileContent, setFileContent, '- [ ] ');
      return;
    }
  }
  
  // Auto-continue lists on Enter
  if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check for list patterns
    const bulletListMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+(.*)/);
    const numberedListMatch = currentLine.match(/^(\s*)(\d+)\.?\s+(.*)/);
    const checklistMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+\[([ xX])\]\s+(.*)/);
    
    if (bulletListMatch || numberedListMatch || checklistMatch) {
      // Get the indentation and list marker
      let indentation, marker, content;
      
      if (checklistMatch) {
        indentation = checklistMatch[1];
        marker = checklistMatch[2];
        const checkState = checklistMatch[3];
        content = checklistMatch[4];
        
        // If the checklist item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the checklist with an unchecked box
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} [ ] `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (bulletListMatch) {
        indentation = bulletListMatch[1];
        marker = bulletListMatch[2];
        content = bulletListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the bullet list
        e.preventDefault();
        const newListItem = `\n${indentation}${marker} `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      } else if (numberedListMatch) {
        indentation = numberedListMatch[1];
        const number = parseInt(numberedListMatch[2], 10);
        content = numberedListMatch[3];
        
        // If the list item is empty, remove the list marker
        if (content.trim() === '') {
          e.preventDefault();
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
          setFileContent(newContent);
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = lineStart;
            textarea.focus();
          }, 0);
          return;
        }
        
        // Continue the numbered list with incremented number
        e.preventDefault();
        const newListItem = `\n${indentation}${number + 1}. `;
        insertMarkdown(textareaRef, fileContent, setFileContent, newListItem);
        return;
      }
    }
  }
  
  // Handle tab for indentation in lists
  if (e.key === 'Tab') {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const cursorPos = textarea.selectionStart;
    const text = fileContent;
    const currentLine = getCurrentLine(text, cursorPos);
    
    // Check if we're in a list item
    const listMatch = currentLine.match(/^(\s*)(-|\*|\+|\d+\.|\[[ xX]\])\s+/);
    if (listMatch) {
      e.preventDefault();
      
      // Add or remove indentation based on shift key
      if (e.shiftKey) {
        // Outdent: remove 2 spaces from the beginning if they exist
        if (currentLine.startsWith('  ')) {
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const lineEnd = text.indexOf('\n', cursorPos);
          const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
          
          const newContent = text.substring(0, lineStart) + currentLine.substring(2) + text.substring(actualLineEnd);
          setFileContent(newContent);
          
          // Adjust cursor position
          const newCursorPos = cursorPos - 2;
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = newCursorPos > lineStart ? newCursorPos : lineStart;
            textarea.focus();
          }, 0);
        }
      } else {
        // Indent: add 2 spaces at the beginning
        const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
        const lineEnd = text.indexOf('\n', cursorPos);
        const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
        
        const newContent = text.substring(0, lineStart) + '  ' + currentLine + text.substring(actualLineEnd);
        setFileContent(newContent);
        
        // Adjust cursor position
        const newCursorPos = cursorPos + 2;
        setTimeout(() => {
          textarea.selectionStart = textarea.selectionEnd = newCursorPos;
          textarea.focus();
        }, 0);
      }
    }
  }
};

// Convert markdown to HTML
export const convertMarkdownToHtml = (converter, markdown) => {
  return converter.makeHtml(markdown);
};

================
File: src/components/windows/ExplorerWindow-fix.jsx
================
// This is a patch file that contains only important modifications to fix the file persistence issue
// You should compare this with your existing ExplorerWindow.jsx and integrate these changes

// KEY CHANGES:

// 1. In handleFileSelect function, add this line AFTER setting the selected file:
/*
    // Make sure parent folders are expanded so the file is visible on reload
    expandParentFolders(file.path);
*/

// 2. In loadExplorerState function, when restoring a file, add this code to ensure proper path setting:
/*
    // Important: Update the currentPath to ensure parent directories are visible
    if (restoredFile.type === 'file') {
      // For files, set the current path to the parent directory
      const parentPath = getParentDirectoryPath(restoredFile.path);
      setCurrentPath(parentPath);
    } else {
      // For directories, set the current path to the directory itself
      setCurrentPath(restoredFile.path);
    }
*/

// 3. Add a debounce for explorer state saving by adding a new ref:
/*
    const explorerSaveTimeoutRef = useRef(null); // New ref for debounced explorer state saving
*/

// 4. Modify the useEffect that saves explorer state to add debounce:
/*
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    // Early return if state hasn't been loaded yet (prevents overwriting with default values)
    if (!stateLoadedRef.current) return;
    
    // Clear any existing timeout
    if (explorerSaveTimeoutRef.current) {
      clearTimeout(explorerSaveTimeoutRef.current);
    }
    
    // Save the explorer state to IndexedDB with debounce
    explorerSaveTimeoutRef.current = setTimeout(() => {
      console.log(`Saving explorer state for window ${nodeId}:`, {
        selectedFile,
        expandedFolders,
        activeTab
      });
      
      saveExplorerState({
        id: nodeId,
        content: {
          selectedFile,
          expandedFolders,
          activeTab
        }
      }).catch(error => {
        console.error(`Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
      });
    }, 300); // 300ms debounce
    
    // Clear timeout on cleanup
    return () => {
      if (explorerSaveTimeoutRef.current) {
        clearTimeout(explorerSaveTimeoutRef.current);
      }
    };
  }, [selectedFile, expandedFolders, activeTab, nodeId]);
*/

// 5. Modify the initial directory loading code to ensure selected files have their parent folders expanded:
/*
  // Load initial directory contents
  useEffect(() => {
    // Load public files for all users
    fetchPublicDirectoryContents('/', true).then(() => {
      // After files are loaded, try to restore expanded state for the selected file
      if (selectedFile) {
        console.log('Ensuring parent folders for selected file are expanded:', selectedFile.path);
        expandParentFolders(selectedFile.path);
      }
    });
    
    // Load private files for admin users
    if (isAdmin) {
      fetchDirectoryContents('/', true).catch(error => {
        console.error('Failed to load private files:', error);
        // Set a specific error message for private files without affecting public files
        setFiles([]);
        if (activeTab === 'private') {
          setErrorMessage('Failed to load private files. Please ensure your admin directory exists.');
        }
      });
    }
  }, [isAdmin, activeTab]);
*/

// 6. Always set stateLoaded to true in loadExplorerState even if no state is found:
/*
  if (savedState && savedState.content) {
    // ... existing code ...
  } else {
    // Even if no state is loaded, mark as loaded to allow future saves
    stateLoadedRef.current = true;
  }
*/

================
File: src/components/windows/ExplorerWindow.css
================
/* Markdown content styling */
.markdown-content {
    color: #f0f9ff; /* Light blue-white for readability */
    line-height: 1;
    font-family: 'Oxygen Mono', monospace;
    padding: 1rem;
    white-space: pre-wrap; /* Preserve line breaks */
  }

  /* Bold text styling */
  .markdown-content strong {
    font-weight: 700;
    color: #2dd4bf; /* Teal accent color to make bold text stand out */
  }
  
  /* Italic text styling */
  .markdown-content em {
    font-style: italic;
    color: #a5f3fc; /* Light cyan for emphasis */
  }
  
  /* Header styles with clear size differences */
  .markdown-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    color: #2dd4bf; /* Teal accent color */
    border-bottom: 1px solid #44403c;
    padding-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h3 {
    font-size: 1.75rem;
    font-weight: 600;
    margin-top: 1.25rem;
    margin-bottom: 0.75rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h4 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content h6 {
    font-size: 1rem;
    font-weight: 600;
    margin-top: 1rem;
    margin-bottom: 0.5rem;
    color: #2dd4bf;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Paragraph styling */
  .markdown-content p {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    font-family: 'Oxygen Mono', monospace;
  }
  
  /* Make sure the code blocks stand out */
  .markdown-content pre {
    background-color: #1c1917; /* Darker background for code */
    border-radius: 0.25rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
    font-family: 'Oxygen Mono', monospace;
    font-size: 0.875rem;
    line-height: 1;
  }
  
  .markdown-content code {
    font-family: 'Oxygen Mono', monospace;
    background-color: #1c1917;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  
  /* Add some spacing between sections */
  .markdown-content br + h1,
  .markdown-content br + h2,
  .markdown-content br + h3,
  .markdown-content br + h4,
  .markdown-content br + h5,
  .markdown-content br + h6 {
    margin-top: 0.5rem;
  }
  
/* Lists */
.markdown-content ul, .markdown-content ol {
  margin-top: 0.5rem;
  margin-bottom: 1rem;
  padding-left: 2rem;
  font-family: 'Oxygen Mono', monospace;
  list-style-position: outside;
}

/* Bullet points */
.markdown-content ul {
  list-style-type: disc;
}

/* Numbered lists */
.markdown-content ol {
  list-style-type: decimal;
}

.markdown-content li {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
  padding-left: 0.5rem;
  display: list-item;
}

/* Make sure list items are clearly visible */
.markdown-content ul > li::marker {
  color: #2dd4bf; /* Teal color for bullet points */
}

.markdown-content ol > li::marker {
  color: #2dd4bf; /* Teal color for numbers */
  font-weight: bold;
}

/* Task lists (checkboxes) */
.markdown-content .task-list {
  list-style-type: none;
  padding-left: 0.5rem;
}

.markdown-content .task-list-item {
  display: flex;
  align-items: flex-start;
  margin-bottom: 0.5rem;
}

.markdown-content .task-list-item-checkbox {
  margin-right: 0.5rem;
  margin-top: 0.25rem;
  appearance: none;
  -webkit-appearance: none;
  width: 1rem;
  height: 1rem;
  border: 1px solid #2dd4bf;
  border-radius: 0.25rem;
  background-color: #1c1917;
  cursor: pointer;
  position: relative;
}

.markdown-content .task-list-item-checkbox:checked {
  background-color: #2dd4bf;
}

.markdown-content .task-list-item-checkbox:checked::after {
  content: '✓';
  position: absolute;
  color: #1c1917;
  font-size: 0.75rem;
  top: -0.125rem;
  left: 0.125rem;
}

/* Alternative styling for checklists as rendered by Showdown */
.markdown-content ul li input[type="checkbox"] {
  margin-right: 0.5rem;
  margin-top: 0.25rem;
  appearance: none;
  -webkit-appearance: none;
  width: 1rem;
  height: 1rem;
  border: 1px solid #2dd4bf;
  border-radius: 0.25rem;
  background-color: #1c1917;
  cursor: pointer;
  position: relative;
  vertical-align: middle;
}

.markdown-content ul li input[type="checkbox"]:checked {
  background-color: #2dd4bf;
}

.markdown-content ul li input[type="checkbox"]:checked::after {
  content: '✓';
  position: absolute;
  color: #1c1917;
  font-size: 0.75rem;
  top: -0.125rem;
  left: 0.125rem;
}

/* Remove default bullets for checklist items */
.markdown-content ul li:has(input[type="checkbox"]) {
  list-style-type: none;
  margin-left: -1.5rem;
}

/* Specific styling for Showdown's task list output */
.markdown-content ul.contains-task-list {
  list-style-type: none;
  padding-left: 1rem;
}

.markdown-content ul.contains-task-list li.task-list-item {
  list-style-type: none;
  padding-left: 0;
  display: flex;
  align-items: center;
}

/* Nested lists */
.markdown-content ul ul,
.markdown-content ol ol,
.markdown-content ul ol,
.markdown-content ol ul {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}
  
  /* Links */
  .markdown-content a {
    color: #14b8a6;
    text-decoration: underline;
    font-family: 'Oxygen Mono', monospace;
  }
  
  .markdown-content a:hover {
    color: #2dd4bf;
  }

/* Drag and drop styles */
[draggable] {
  cursor: grab;
}

[draggable]:active {
  cursor: grabbing;
}

/* Style for the drop target when dragging over */
.drop-target {
  background-color: rgba(20, 184, 166, 0.2) !important;
  border: 2px dashed rgb(20, 184, 166) !important;
  border-radius: 0.25rem;
}

/* Style for the item being dragged */
.dragging {
  opacity: 0.5;
  background-color: rgba(20, 184, 166, 0.1);
}

================
File: src/components/windows/ExplorerWindow.jsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { 
  FolderOpen, FileText, ChevronRight, ChevronDown, File, Coffee, Code, 
  BookOpen, Edit, Eye, Plus, FolderPlus, X, Globe, Lock, FileEdit, Trash2,
  List, ListOrdered, CheckSquare, Bold, Italic, Code as CodeIcon, Link, Heading
} from 'lucide-react';
import showdown from 'showdown';
import path from 'path-browserify';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import { useWindowState } from '../../context/WindowStateContext';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { saveExplorerState, getExplorerState } from '../../services/indexedDBService';
import './ExplorerWindow.css';

const ExplorerWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get auth context to check if user is admin
  const { user } = useAuth();
  const isAdmin = user?.is_admin || false;
  
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  
  // Use state from windowState or initialize with defaults
  const [files, setFiles] = useState([]);
  const [publicFiles, setPublicFiles] = useState([]);
  const [currentPath, setCurrentPath] = useState(windowState?.currentPath || '/');
  const [selectedFile, setSelectedFile] = useState(windowState?.selectedFile || null);
  const [expandedFolders, setExpandedFolders] = useState(windowState?.expandedFolders || {});
  const [isTreeLoading, setIsTreeLoading] = useState(true);
  const [isContentLoading, setIsContentLoading] = useState(false);
  const [fileContent, setFileContent] = useState(windowState?.fileContent || '');
  const [errorMessage, setErrorMessage] = useState('');
  const [showPreview, setShowPreview] = useState(windowState?.showPreview || false);
  const [activeTab, setActiveTab] = useState(windowState?.activeTab || 'public'); // 'public' or 'private'
  
  // Additional state for markdown editing
  const [editMode, setEditMode] = useState(windowState?.editMode || false);
  const [saveStatus, setSaveStatus] = useState('saved'); // 'saved', 'saving', 'error'
  
  // State for file/folder creation
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [createType, setCreateType] = useState('file'); // 'file' or 'directory'
  const [newItemName, setNewItemName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  
  // State for file/folder renaming
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [itemToRename, setItemToRename] = useState(null);
  const [newName, setNewName] = useState('');
  const [isRenaming, setIsRenaming] = useState(false);
  
  // State for file/folder deletion
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);
  
  // State for drag and drop
  const [draggedItem, setDraggedItem] = useState(null);
  const [dropTarget, setDropTarget] = useState(null);
  const [isMoving, setIsMoving] = useState(false);
  
  // For auto-save functionality and editor references
  const saveTimeoutRef = useRef(null);
  const createInputRef = useRef(null);
  const renameInputRef = useRef(null);
  const textareaRef = useRef(null);
  
  // Initialize Showdown converter for Markdown with enhanced options
  const converter = new showdown.Converter({
    tables: true,
    tasklists: true,
    strikethrough: true,
    emoji: true,
    breaks: true,  // Enable line breaks to be rendered as <br> tags
    simpleLineBreaks: true,
    openLinksInNewWindow: true,
    backslashEscapesHTMLTags: true,
    ghCodeBlocks: true,
    ghCompatibleHeaderId: true,
    ghMentions: true,
    smoothLivePreview: true
  });
  
  // Enable additional extensions
  converter.setFlavor('github');

  // Helper function to expand all parent folders of a path
  const expandParentFolders = (filePath) => {
    const parts = filePath.split('/').filter(Boolean);
    let currentPath = '';
    
    // Create a new expanded folders object
    const newExpandedFolders = { ...expandedFolders };
    
    // Expand each parent folder
    for (let i = 0; i < parts.length; i++) {
      currentPath += '/' + parts[i];
      newExpandedFolders[currentPath] = true;
    }
    
    setExpandedFolders(newExpandedFolders);
  };

  // Function to fetch public directory contents
  const fetchPublicDirectoryContents = async (publicPath = '/', refreshAll = false) => {
    try {
      setIsTreeLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsTreeLoading(false);
        return;
      }
      
      // If refreshAll is true, start from the root
      const pathToFetch = refreshAll ? '/' : publicPath;
      
      // Fetch public directory contents from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        setErrorMessage(`Failed to load public files: ${response.statusText}`);
        setIsTreeLoading(false);
        return;
      }
      
      const data = await response.json();
      
      // Transform the data to match our expected format
      const transformedFiles = data.items.map(item => ({
        name: item.name,
        type: item.type,
        path: item.path,
        children: item.children || [],
        isPublic: true
      }));
      
      setPublicFiles(transformedFiles);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(publicPath);
      }
      
      setIsTreeLoading(false);
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        expandParentFolders(currentPath);
      }
    } catch (error) {
      console.error('Error fetching public directory contents:', error);
      setErrorMessage('Failed to load public files. Please try again.');
      setIsTreeLoading(false);
    }
  };

  // Function to fetch public file content
  const fetchPublicFileContent = async (filePath) => {
    try {
      setIsContentLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsContentLoading(false);
        return;
      }
      
      // Fetch public file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PUBLIC_FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        setErrorMessage(`Failed to load file content: ${response.statusText}`);
        setIsContentLoading(false);
        return;
      }
      
      const data = await response.json();
      setFileContent(data.content);
      setIsContentLoading(false);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Error fetching public file content:', error);
      setErrorMessage(`Error loading file: ${error.message}`);
      setSaveStatus('error');
      setIsContentLoading(false);
    }
  };

  // Function to fetch private directory contents from the server (admin only)
  const fetchDirectoryContents = async (path = '/', refreshAll = false) => {
    try {
      setIsTreeLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsTreeLoading(false);
        return;
      }
      
      // If refreshAll is true, start from the root
      const pathToFetch = refreshAll ? '/' : path;
      
      // Fetch directory contents from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILES_LIST}?path=${encodeURIComponent(pathToFetch)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view files.');
        } else {
          setErrorMessage(`Failed to load files: ${response.statusText}`);
        }
        setIsTreeLoading(false);
        return;
      }
      
      const data = await response.json();
      
      // Transform the data to match our expected format
      const transformedFiles = data.items.map(item => ({
        name: item.name,
        type: item.type,
        path: item.path,
        children: item.children || []
      }));
      
      setFiles(transformedFiles);
      
      // Only update the current path if we're not refreshing the entire tree
      if (!refreshAll) {
        setCurrentPath(path);
      }
      
      setIsTreeLoading(false);
      
      // If we refreshed the entire tree, make sure the current path's parent folders are expanded
      if (refreshAll && currentPath !== '/') {
        expandParentFolders(currentPath);
      }
    } catch (error) {
      console.error('Error fetching directory contents:', error);
      setErrorMessage('Failed to load files. Please try again.');
      setIsTreeLoading(false);
    }
  };

  // Function to fetch file content
  const fetchFileContent = async (filePath) => {
    try {
      setIsContentLoading(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsContentLoading(false);
        return;
      }
      
      // Fetch file content from the server
      const response = await fetch(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CONTENT}?path=${encodeURIComponent(filePath)}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (!response.ok) {
        // If response is 403, it means the user doesn't have admin access
        if (response.status === 403) {
          setErrorMessage('Admin access required to view file content.');
        } else {
          setErrorMessage(`Failed to load file content: ${response.statusText}`);
        }
        setIsContentLoading(false);
        return;
      }
      
      const data = await response.json();
      setFileContent(data.content);
      setIsContentLoading(false);
      setSaveStatus('saved');
    } catch (error) {
      console.error('Error fetching file content:', error);
      setErrorMessage(`Error loading file: ${error.message}`);
      setSaveStatus('error');
      setIsContentLoading(false);
    }
  };
  
  // Function to save file content
  const saveFileContent = async () => {
    try {
      // Check if filePath is valid
      if (!selectedFile || !selectedFile.path || selectedFile.path.trim() === '') {
        setErrorMessage('No file selected. Please select a file first.');
        setSaveStatus('error');
        return;
      }
      
      setSaveStatus('saving');
      
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_SAVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          path: selectedFile.path,
          content: fileContent
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to save file: ${response.statusText}`);
      }
      
      setSaveStatus('saved');
      setErrorMessage('');
    } catch (error) {
      console.error('Error saving file:', error);
      setErrorMessage(`Error saving file: ${error.message}`);
      setSaveStatus('error');
    }
  };
  
  // Insert markdown syntax at cursor position
  const insertMarkdown = (prefix, suffix = '') => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, wrap it with prefix and suffix
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const newContent = text.substring(0, start) + prefix + selectedText + suffix + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start + prefix.length;
        textarea.selectionEnd = end + prefix.length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + prefix + suffix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor between prefix and suffix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + prefix.length;
        textarea.focus();
      }, 0);
    }
  };
  
  // Insert list items
  const insertList = (listPrefix) => {
    const textarea = textareaRef.current;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = fileContent;
    
    // If text is selected, apply list formatting to each line
    if (start !== end) {
      const selectedText = text.substring(start, end);
      const lines = selectedText.split('\n');
      
      // Format each line as a list item
      const formattedLines = lines.map(line => {
        // Skip empty lines
        if (line.trim() === '') return line;
        
        // For numbered lists, increment the number for each line
        if (listPrefix === '1. ') {
          const index = lines.indexOf(line) + 1;
          return `${index}. ${line}`;
        }
        
        return `${listPrefix}${line}`;
      });
      
      const newContent = text.substring(0, start) + formattedLines.join('\n') + text.substring(end);
      setFileContent(newContent);
      
      // Set cursor position after the inserted text
      setTimeout(() => {
        textarea.selectionStart = start;
        textarea.selectionEnd = start + formattedLines.join('\n').length;
        textarea.focus();
      }, 0);
    } else {
      // No selection, just insert at cursor
      const newContent = text.substring(0, start) + listPrefix + text.substring(start);
      setFileContent(newContent);
      
      // Move cursor after the inserted prefix
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + listPrefix.length;
        textarea.focus();
      }, 0);
    }
  };
  
  // Get the current line of text at cursor position
  const getCurrentLine = (text, cursorPos) => {
    const textBeforeCursor = text.substring(0, cursorPos);
    const lineStartPos = textBeforeCursor.lastIndexOf('\n') + 1;
    const lineEndPos = text.indexOf('\n', cursorPos);
    const actualLineEndPos = lineEndPos !== -1 ? lineEndPos : text.length;
    return text.substring(lineStartPos, actualLineEndPos);
  };
  
  // Handle keyboard events in the editor
  const handleEditorKeyDown = (e) => {
    // Handle keyboard shortcuts
    if (e.ctrlKey || e.metaKey) {
      // Ctrl+B or Cmd+B for bold
      if (e.key === 'b') {
        e.preventDefault();
        insertMarkdown('**', '**');
        return;
      }
      
      // Ctrl+I or Cmd+I for italic
      if (e.key === 'i') {
        e.preventDefault();
        insertMarkdown('*', '*');
        return;
      }
      
      // Ctrl+Shift+L for unordered list
      if (e.shiftKey && e.key === 'L') {
        e.preventDefault();
        insertList('- ');
        return;
      }
      
      // Ctrl+Shift+O for ordered list
      if (e.shiftKey && e.key === 'O') {
        e.preventDefault();
        insertList('1. ');
        return;
      }
      
      // Ctrl+Shift+C for checklist
      if (e.shiftKey && e.key === 'C') {
        e.preventDefault();
        insertList('- [ ] ');
        return;
      }
    }
    
    // Auto-continue lists on Enter
    if (e.key === 'Enter' && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
      const textarea = textareaRef.current;
      if (!textarea) return;
      
      const cursorPos = textarea.selectionStart;
      const text = fileContent;
      const currentLine = getCurrentLine(text, cursorPos);
      
      // Check for list patterns
      const bulletListMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+(.*)/);
      const numberedListMatch = currentLine.match(/^(\s*)(\d+)\.?\s+(.*)/);
      const checklistMatch = currentLine.match(/^(\s*)(-|\*|\+)\s+\[([ xX])\]\s+(.*)/);
      
      if (bulletListMatch || numberedListMatch || checklistMatch) {
        // Get the indentation and list marker
        let indentation, marker, content;
        
        if (checklistMatch) {
          indentation = checklistMatch[1];
          marker = checklistMatch[2];
          const checkState = checklistMatch[3];
          content = checklistMatch[4];
          
          // If the checklist item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the checklist with an unchecked box
          e.preventDefault();
          const newListItem = `\n${indentation}${marker} [ ] `;
          insertMarkdown(newListItem);
          return;
        } else if (bulletListMatch) {
          indentation = bulletListMatch[1];
          marker = bulletListMatch[2];
          content = bulletListMatch[3];
          
          // If the list item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the bullet list
          e.preventDefault();
          const newListItem = `\n${indentation}${marker} `;
          insertMarkdown(newListItem);
          return;
        } else if (numberedListMatch) {
          indentation = numberedListMatch[1];
          const number = parseInt(numberedListMatch[2], 10);
          content = numberedListMatch[3];
          
          // If the list item is empty, remove the list marker
          if (content.trim() === '') {
            e.preventDefault();
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const newContent = text.substring(0, lineStart) + text.substring(cursorPos);
            setFileContent(newContent);
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = lineStart;
              textarea.focus();
            }, 0);
            return;
          }
          
          // Continue the numbered list with incremented number
          e.preventDefault();
          const newListItem = `\n${indentation}${number + 1}. `;
          insertMarkdown(newListItem);
          return;
        }
      }
    }
    
    // Handle tab for indentation in lists
    if (e.key === 'Tab') {
      const textarea = textareaRef.current;
      if (!textarea) return;
      
      const cursorPos = textarea.selectionStart;
      const text = fileContent;
      const currentLine = getCurrentLine(text, cursorPos);
      
      // Check if we're in a list item
      const listMatch = currentLine.match(/^(\s*)(-|\*|\+|\d+\.|\[[ xX]\])\s+/);
      if (listMatch) {
        e.preventDefault();
        
        // Add or remove indentation based on shift key
        if (e.shiftKey) {
          // Outdent: remove 2 spaces from the beginning if they exist
          if (currentLine.startsWith('  ')) {
            const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
            const lineEnd = text.indexOf('\n', cursorPos);
            const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
            
            const newContent = text.substring(0, lineStart) + currentLine.substring(2) + text.substring(actualLineEnd);
            setFileContent(newContent);
            
            // Adjust cursor position
            const newCursorPos = cursorPos - 2;
            setTimeout(() => {
              textarea.selectionStart = textarea.selectionEnd = newCursorPos > lineStart ? newCursorPos : lineStart;
              textarea.focus();
            }, 0);
          }
        } else {
          // Indent: add 2 spaces at the beginning
          const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
          const lineEnd = text.indexOf('\n', cursorPos);
          const actualLineEnd = lineEnd !== -1 ? lineEnd : text.length;
          
          const newContent = text.substring(0, lineStart) + '  ' + currentLine + text.substring(actualLineEnd);
          setFileContent(newContent);
          
          // Adjust cursor position
          const newCursorPos = cursorPos + 2;
          setTimeout(() => {
            textarea.selectionStart = textarea.selectionEnd = newCursorPos;
            textarea.focus();
          }, 0);
        }
      }
    }
  };
  
  // Handle markdown content change
  const handleMarkdownChange = (e) => {
    setFileContent(e.target.value);
  };

  // Load explorer state from IndexedDB on mount
  useEffect(() => {
    const loadExplorerState = async () => {
      try {
        // Try to load explorer state from IndexedDB
        const savedState = await getExplorerState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded explorer state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          let restoredFile = null;
          
          // Update state with saved values
          if (savedState.content.selectedFile) {
            restoredFile = savedState.content.selectedFile;
            setSelectedFile(restoredFile);
          }
          
          if (savedState.content.expandedFolders) {
            setExpandedFolders(savedState.content.expandedFolders);
          }
          
          if (savedState.content.activeTab) {
            setActiveTab(savedState.content.activeTab);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
          
          // If a file was restored and it's a markdown file, load its content
          if (restoredFile && restoredFile.type === 'file' && restoredFile.name.endsWith('.md')) {
            // Set the preview mode for markdown files
            setShowPreview(true);
            
            // Load the file content based on whether it's a public or private file
            if (restoredFile.isPublic) {
              // Fetch public file content
              fetchPublicFileContent(restoredFile.path);
            } else if (isAdmin) {
              // Fetch private file content (admin only)
              fetchFileContent(restoredFile.path);
            }
          }
        }
      } catch (error) {
        console.error(`Failed to load explorer state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadExplorerState();
  }, [nodeId, isAdmin]);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Save this as the active explorer window
      setActiveWindow(nodeId, WINDOW_TYPES.EXPLORER);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Save explorer state to IndexedDB when it changes
  useEffect(() => {
    if (!stateLoadedRef.current) return;
    
    // Save the explorer state to IndexedDB
    saveExplorerState({
      id: nodeId,
      content: {
        selectedFile,
        expandedFolders,
        activeTab
      }
    }).catch(error => {
      console.error(`Failed to save explorer state for window ${nodeId} to IndexedDB:`, error);
    });
    
  }, [selectedFile, expandedFolders, activeTab, nodeId]);

  // Load initial directory contents
  useEffect(() => {
    // Load public files for all users
    fetchPublicDirectoryContents();
    
    // Load private files for admin users
    if (isAdmin) {
      fetchDirectoryContents().catch(error => {
        console.error('Failed to load private files:', error);
        // Set a specific error message for private files without affecting public files
        setFiles([]);
        if (activeTab === 'private') {
          setErrorMessage('Failed to load private files. Please ensure your admin directory exists.');
        }
      });
    }
  }, [isAdmin]);

  // Reset content states when switching tabs
  useEffect(() => {
    // Clear file content and reset view states when changing tabs
    setSelectedFile(null);
    setFileContent('');
    setShowPreview(false);
    setEditMode(false);
    setSaveStatus('saved');
    setErrorMessage('');
    
    // Reset current path to root for the selected tab
    setCurrentPath('/');
  }, [activeTab]);

  // Auto-save functionality with debounce
  useEffect(() => {
    // Only auto-save if in edit mode, user is admin, and we have a markdown file selected
    if (editMode && isAdmin && selectedFile && selectedFile.name.endsWith('.md') && fileContent) {
      // Clear any existing timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
      
      // Set status to saving
      setSaveStatus('saving');
      
      // Set a new timeout for auto-save
      saveTimeoutRef.current = setTimeout(() => {
        saveFileContent();
      }, 1000); // 1 second debounce
    }
    
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [fileContent, editMode, isAdmin, selectedFile]);

  // Update window state when relevant state changes
  useEffect(() => {
    if (updateWindowState) {
      updateWindowState({
        currentPath,
        selectedFile,
        expandedFolders,
        fileContent,
        showPreview,
        editMode,
        saveStatus,
        activeTab
      });
    }
  }, [currentPath, selectedFile, expandedFolders, fileContent, showPreview, editMode, saveStatus, activeTab, updateWindowState]);
  
  // Focus the input field when the create or rename dialog is shown
  useEffect(() => {
    if (showCreateDialog && createInputRef.current) {
      createInputRef.current.focus();
    }
    if (showRenameDialog && renameInputRef.current) {
      renameInputRef.current.focus();
    }
  }, [showCreateDialog, showRenameDialog]);

  // Toggle folder expansion
  const toggleFolder = (folderPath, folder) => {
    const isExpanding = !expandedFolders[folderPath];
    
    setExpandedFolders(prev => ({
      ...prev,
      [folderPath]: isExpanding
    }));
    
    // If we're expanding the folder, also set it as the current path
    if (isExpanding) {
      setCurrentPath(folderPath);
      setSelectedFile(folder);
    }
  };
  
  // Helper function to get the active folder path based on selected item and current path
  const getActiveFolderPath = () => {
    if (selectedFile) {
      // If selected item is a directory, use its path
      if (selectedFile.type === 'directory') {
        return selectedFile.path;
      }
      // If selected item is a file, use its parent directory
      return getParentDirectoryPath(selectedFile.path);
    }
    // Fall back to current path if no file is selected
    return currentPath;
  };
  
  // Create a new file or folder
  const createNewItem = async () => {
    if (!newItemName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    try {
      setIsCreating(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsCreating(false);
        return;
      }
      
      // Determine if we're creating in the public folder or private folder
      const isPublicFolder = activeTab === 'public';
      
      // Get the active folder path where the new item should be created
      const activeFolderPath = getActiveFolderPath();
      
      // Construct the full path for the new item
      let newItemPath;
      if (isPublicFolder) {
        // For public folder, prefix with /public if not already included
        const publicPrefix = activeFolderPath.startsWith('/public') ? '' : '/public';
        newItemPath = path.join(publicPrefix, activeFolderPath, newItemName.trim()).replace(/\\/g, '/');
      } else {
        // For private folder (admin only)
        newItemPath = path.join(activeFolderPath, newItemName.trim()).replace(/\\/g, '/');
      }
      
      // Create the new file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_CREATE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          path: newItemPath,
          type: createType,
          content: createType === 'file' ? '' : undefined
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to create ${createType}: ${response.statusText}`);
      }
      
      // Close the dialog and reset the form
      setShowCreateDialog(false);
      setNewItemName('');
      
      // Refresh the entire file tree from the root
      if (isPublicFolder) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // If it's a directory, expand it
      if (createType === 'directory') {
        setExpandedFolders(prev => ({
          ...prev,
          [newItemPath]: true
        }));
      }
      
      setIsCreating(false);
    } catch (error) {
      console.error(`Error creating ${createType}:`, error);
      setErrorMessage(`Failed to create ${createType}: ${error.message}`);
      setIsCreating(false);
    }
  };
  
  // Open the create dialog
  const openCreateDialog = (type) => {
    setCreateType(type);
    setNewItemName('');
    setErrorMessage('');
    setShowCreateDialog(true);
  };
  
  // Close the create dialog
  const closeCreateDialog = () => {
    setShowCreateDialog(false);
    setNewItemName('');
    setErrorMessage('');
  };
  
  // Handle key press in the create dialog
  const handleCreateKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      createNewItem();
    } else if (e.key === 'Escape') {
      closeCreateDialog();
    }
  };

  // Open the rename dialog for a file or folder
  const openRenameDialog = (item) => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to rename files.');
      return;
    }
    
    setItemToRename(item);
    setNewName(item.name);
    setErrorMessage('');
    setShowRenameDialog(true);
  };
  
  // Close the rename dialog
  const closeRenameDialog = () => {
    setShowRenameDialog(false);
    setItemToRename(null);
    setNewName('');
    setErrorMessage('');
  };
  
  // Open the delete dialog for a file or folder
  const openDeleteDialog = (item) => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to delete files.');
      return;
    }
    
    setItemToDelete(item);
    setErrorMessage('');
    setShowDeleteDialog(true);
  };
  
  // Close the delete dialog
  const closeDeleteDialog = () => {
    setShowDeleteDialog(false);
    setItemToDelete(null);
    setErrorMessage('');
  };
  
  // Handle drag start event
  const handleDragStart = (e, item) => {
    if (!isAdmin) return;
    
    setDraggedItem(item);
    e.dataTransfer.setData('text/plain', item.path);
    e.dataTransfer.effectAllowed = 'move';
    
    // Add dragging class to the element
    e.currentTarget.classList.add('dragging');
    
    // Remove the class after a short delay to ensure it's applied
    setTimeout(() => {
      if (e.currentTarget) {
        e.currentTarget.classList.remove('dragging');
      }
    }, 100);
  };
  
  // Handle drag over event
  const handleDragOver = (e, folder) => {
    if (!isAdmin || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Only allow dropping into directories
    if (folder.type === 'directory') {
      setDropTarget(folder);
      e.dataTransfer.dropEffect = 'move';
      
      // Add drop-target class to the element
      e.currentTarget.classList.add('drop-target');
    }
  };
  
  // Handle drag over for the file tree container (to allow dropping to root)
  const handleContainerDragOver = (e) => {
    if (!isAdmin || !draggedItem) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Set root as the drop target
    const rootFolder = {
      type: 'directory',
      path: draggedItem.isPublic ? '/public' : '/',
      name: 'Root'
    };
    setDropTarget(rootFolder);
    e.dataTransfer.dropEffect = 'move';
  };
  
  // Handle drag leave event
  const handleDragLeave = (e) => {
    if (!isAdmin) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
  };
  
  // Handle drag leave for the container
  const handleContainerDragLeave = (e) => {
    if (!isAdmin) return;
    
    e.preventDefault();
    e.stopPropagation();
    setDropTarget(null);
  };
  
  // Handle drop event
  const handleDrop = async (e, targetFolder) => {
    if (!isAdmin || !draggedItem || !targetFolder) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Reset drop target
    setDropTarget(null);
    
    // Remove drop-target class from the element
    e.currentTarget.classList.remove('drop-target');
    
    // Only allow dropping into directories
    if (targetFolder.type !== 'directory') {
      return;
    }
    
    // Check if dropping on itself
    if (draggedItem.path === targetFolder.path) {
      return;
    }
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    try {
      setIsMoving(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsMoving(false);
        return;
      }
      
      // Call the API to move the file
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          sourcePath: draggedItem.path,
          destinationPath: targetFolder.path
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to move ${draggedItem.type}: ${response.statusText}`);
      }
      
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // Clear drag state
      setDraggedItem(null);
      setIsMoving(false);
    } catch (error) {
      console.error(`Error moving ${draggedItem.type}:`, error);
      setErrorMessage(`Failed to move ${draggedItem.type}: ${error.message}`);
      setDraggedItem(null);
      setIsMoving(false);
    }
  };
  
  // Handle drop event for the container (moving to root)
  const handleContainerDrop = async (e) => {
    if (!isAdmin || !draggedItem || !dropTarget) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // Process the drop using the dropTarget which was set in handleContainerDragOver
    const targetFolder = dropTarget;
    
    // Reset drop target
    setDropTarget(null);
    
    // Check if dropping in current location (parent folder is the same)
    const draggedParent = getParentDirectoryPath(draggedItem.path);
    if (draggedParent === targetFolder.path) {
      return;
    }
    
    try {
      setIsMoving(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsMoving(false);
        return;
      }
      
      // Call the API to move the file
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_MOVE}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          sourcePath: draggedItem.path,
          destinationPath: targetFolder.path
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to move ${draggedItem.type}: ${response.statusText}`);
      }
      
      // If the moved item was selected, clear the selection
      if (selectedFile && selectedFile.path === draggedItem.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (draggedItem.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      // Clear drag state
      setDraggedItem(null);
      setIsMoving(false);
    } catch (error) {
      console.error(`Error moving ${draggedItem.type} to root:`, error);
      setErrorMessage(`Failed to move ${draggedItem.type} to root: ${error.message}`);
      setDraggedItem(null);
      setIsMoving(false);
    }
  };
  
  // Delete a file or folder
  const deleteItem = async () => {
    if (!itemToDelete) {
      setErrorMessage('No item selected for deletion');
      return;
    }
    
    try {
      setIsDeleting(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsDeleting(false);
        return;
      }
      
      // Delete the file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_DELETE}?path=${encodeURIComponent(itemToDelete.path)}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to delete ${itemToDelete.type}: ${response.statusText}`);
      }
      
      // Close the dialog
      setShowDeleteDialog(false);
      setItemToDelete(null);
      
      // If the deleted item was selected, clear the selection
      if (selectedFile && selectedFile.path === itemToDelete.path) {
        setSelectedFile(null);
        setFileContent('');
        setShowPreview(false);
        if (editMode) {
          setEditMode(false);
        }
      }
      
      // Refresh the appropriate file list
      if (itemToDelete.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      setIsDeleting(false);
    } catch (error) {
      console.error(`Error deleting ${itemToDelete.type}:`, error);
      setErrorMessage(`Failed to delete ${itemToDelete.type}: ${error.message}`);
      setIsDeleting(false);
    }
  };
  
  // Handle key press in the rename dialog
  const handleRenameKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      renameItem();
    } else if (e.key === 'Escape') {
      closeRenameDialog();
    }
  };
  
  // Rename a file or folder
  const renameItem = async () => {
    if (!newName.trim()) {
      setErrorMessage('Name cannot be empty');
      return;
    }
    
    if (!itemToRename) {
      setErrorMessage('No item selected for renaming');
      return;
    }
    
    try {
      setIsRenaming(true);
      setErrorMessage('');
      
      // Get the authentication token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setErrorMessage('Authentication required. Please log in.');
        setIsRenaming(false);
        return;
      }
      
      // Rename the file or folder
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.FILE_RENAME}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          oldPath: itemToRename.path,
          newName: newName.trim()
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Failed to rename ${itemToRename.type}: ${response.statusText}`);
      }
      
      // Close the dialog and reset the form
      setShowRenameDialog(false);
      setItemToRename(null);
      setNewName('');
      
      // If the renamed item was selected, update the selected file
      if (selectedFile && selectedFile.path === itemToRename.path) {
        setSelectedFile(null);
      }
      
      // Refresh the appropriate file list
      if (itemToRename.isPublic) {
        fetchPublicDirectoryContents('/', true);
      } else {
        fetchDirectoryContents('/', true);
      }
      
      setIsRenaming(false);
    } catch (error) {
      console.error(`Error renaming ${itemToRename.type}:`, error);
      setErrorMessage(`Failed to rename ${itemToRename.type}: ${error.message}`);
      setIsRenaming(false);
    }
  };
  
  // Handle folder selection
  const handleFolderSelect = (folder) => {
    // Update the current path to the selected folder's path
    setCurrentPath(folder.path);
    
    // Set the selected folder
    setSelectedFile(folder);
    
    // Expand the folder
    setExpandedFolders(prev => ({
      ...prev,
      [folder.path]: true
    }));
    
    // Reset content and preview
    setFileContent('');
    setShowPreview(false);
    
    // Reset edit mode
    if (editMode) {
      setEditMode(false);
    }
  };
  
  // Helper function to get parent directory path
  const getParentDirectoryPath = (filePath) => {
    // Remove trailing slash if present
    const normalizedPath = filePath.endsWith('/') ? filePath.slice(0, -1) : filePath;
    // Find the last slash in the path
    const lastSlashIndex = normalizedPath.lastIndexOf('/');
    
    if (lastSlashIndex === -1) {
      // No slash found, return root
      return '/';
    }
    
    // Return everything up to the last slash
    return normalizedPath.substring(0, lastSlashIndex) || '/';
  };
  
  // Handle file selection
  const handleFileSelect = (file) => {
    // If it's a directory, handle it differently
    if (file.type === 'directory') {
      handleFolderSelect(file);
      return;
    }
    
    setSelectedFile(file);
    
    // We don't change the current path when selecting a file
    // This prevents the file tree from reloading unnecessarily
    
    // Reset edit mode when selecting a new file
    if (editMode) {
      setEditMode(false);
    }
    
    // If it's a markdown file, fetch its content and show preview
    if (file.name.endsWith('.md')) {
      if (file.isPublic) {
        // Fetch public file content
        fetchPublicFileContent(file.path);
      } else {
        // Fetch private file content (admin only)
        fetchFileContent(file.path);
      }
      setShowPreview(true);
    } else {
      setFileContent('');
      setShowPreview(false);
    }
  };

  // Get file icon based on file extension
  const getFileIcon = (fileName) => {
    if (fileName.endsWith('.md')) return <FileText size={16} className="mr-2" />;
    if (fileName.endsWith('.jsx') || fileName.endsWith('.js')) return <Code size={16} className="mr-2" />;
    if (fileName.endsWith('.json')) return <Coffee size={16} className="mr-2" />;
    if (fileName.endsWith('.css')) return <BookOpen size={16} className="mr-2" />;
    return <File size={16} className="mr-2" />;
  };
  
  // Render the file tree recursively
  const renderFileTree = (items) => {
    // Keep track of the path to the currently selected file to highlight its parent folder
    const selectedFilePath = selectedFile?.path || '';
    const selectedFileParentPath = selectedFile && selectedFile.type !== 'directory' ? 
      getParentDirectoryPath(selectedFilePath) : '';
    
    return items.map(item => {
      if (item.type === 'directory') {
        const isExpanded = expandedFolders[item.path];
        // A folder is considered active if it's the current path OR if it's the parent of the selected file
        const isActive = currentPath === item.path || (selectedFileParentPath === item.path);
        return (
          <div key={item.path} className="ml-2">
            <div 
              className={`flex items-center justify-between py-1 px-1 rounded hover:bg-stone-700 cursor-pointer group ${
                isActive ? 'bg-stone-800 text-teal-300 font-bold' : 
                isExpanded ? 'text-teal-300' : 'text-teal-400'
              } ${dropTarget && dropTarget.path === item.path ? 'bg-teal-900 border border-teal-500' : ''}`}
              onClick={() => toggleFolder(item.path, item)}
              draggable={isAdmin}
              onDragStart={(e) => handleDragStart(e, item)}
              onDragOver={(e) => handleDragOver(e, item)}
              onDragLeave={(e) => handleDragLeave(e)}
              onDrop={(e) => handleDrop(e, item)}
            >
              <div className="flex items-center">
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                <FolderOpen size={16} className="ml-1 mr-2" />
                <span className="text-sm">{item.name}</span>
              </div>
              
              {/* Admin-only buttons */}
              {isAdmin && (
                <div className="flex">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openRenameDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                    title="Rename folder"
                  >
                    <FileEdit size={14} />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      openDeleteDialog(item);
                    }}
                    className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                    title="Delete folder"
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              )}
            </div>
            
            {isExpanded && item.children && (
              <div className="ml-2 border-l border-stone-700">
                {renderFileTree(item.children)}
              </div>
            )}
          </div>
        );
      } else {
        const isSelected = selectedFile && selectedFile.path === item.path;
        return (
          <div 
            key={item.path} 
            className={`flex items-center justify-between py-1 px-1 ml-4 rounded cursor-pointer hover:bg-stone-700 group ${isSelected ? 'bg-stone-700 text-teal-300' : 'text-teal-50'}`}
            onClick={() => handleFileSelect(item)}
            draggable={isAdmin}
            onDragStart={(e) => handleDragStart(e, item)}
          >
            <div className="flex items-center">
              {getFileIcon(item.name)}
              <span className="text-sm">{item.name}</span>
            </div>
            
            {/* Admin-only buttons */}
            {isAdmin && (
              <div className="flex">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openRenameDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-teal-300 opacity-0 group-hover:opacity-100"
                  title="Rename file"
                >
                  <FileEdit size={14} />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    openDeleteDialog(item);
                  }}
                  className="p-1 rounded hover:bg-stone-600 text-stone-400 hover:text-red-400 opacity-0 group-hover:opacity-100"
                  title="Delete file"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            )}
          </div>
        );
      }
    });
  };

  // Toggle edit mode
  const toggleEditMode = () => {
    if (!isAdmin) {
      setErrorMessage('Admin access required to edit files.');
      return;
    }
    
    if (!selectedFile || !selectedFile.name.endsWith('.md')) {
      setErrorMessage('Only markdown files can be edited.');
      return;
    }
    
    setEditMode(!editMode);
    // When switching to preview mode, ensure preview is shown
    if (editMode) {
      setShowPreview(true);
    }
  };

  // Handle command input
  const handleCommand = (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      const cmd = e.target.value.trim();
      onCommand(cmd);
      e.target.value = '';
      
      // Commands:
      // - refresh: refresh file list
      // - preview: toggle markdown preview
      // - edit: toggle edit mode (admin only)
      // - save: manually save the current file
      // - new-file: create a new file (admin only)
      // - new-folder: create a new folder (admin only)
      // - rename: rename selected file or folder (admin only)
      // - delete: delete selected file or folder (admin only)
      // - public: switch to public files tab
      // - private: switch to private files tab (admin only)
      if (cmd === 'refresh') {
        // Refresh the appropriate file list based on the active tab
        if (activeTab === 'public') {
          fetchPublicDirectoryContents('/', true);
        } else {
          fetchDirectoryContents('/', true);
        }
      } else if (cmd === 'preview' && selectedFile?.name.endsWith('.md')) {
        setShowPreview(!showPreview);
        if (editMode) {
          setEditMode(false); // Exit edit mode when switching to preview
        }
      } else if (cmd === 'edit' && selectedFile?.name.endsWith('.md')) {
        toggleEditMode();
      } else if (cmd === 'save' && editMode && selectedFile?.name.endsWith('.md')) {
        saveFileContent();
      } else if (cmd === 'new-file' && isAdmin) {
        openCreateDialog('file');
      } else if (cmd === 'new-folder' && isAdmin) {
        openCreateDialog('directory');
      } else if (cmd === 'rename' && isAdmin && selectedFile) {
        openRenameDialog(selectedFile);
      } else if (cmd === 'delete' && isAdmin && selectedFile) {
        openDeleteDialog(selectedFile);
      } else if (cmd === 'public') {
        setActiveTab('public');
      } else if (cmd === 'private' && isAdmin) {
        setActiveTab('private');
      }
    }
  };

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400 overflow-hidden">
      <div className="flex flex-1 overflow-hidden">
        {/* File tree panel */}
        <div className="w-1/3 border-r border-stone-700 flex flex-col overflow-hidden">
          <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
            <div className="flex items-center">
              <span>FILES</span>
              
              {/* Tabs for switching between public and private files */}
              <div className="flex ml-4">
                <button
                  onClick={() => setActiveTab('public')}
                  className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ${
                    activeTab === 'public' 
                      ? 'bg-stone-700 text-teal-300' 
                      : 'bg-stone-800 hover:bg-stone-700'
                  }`}
                  title="Public files (readable by all users)"
                >
                  <Globe size={14} />
                  <span>Public</span>
                </button>
                
                {isAdmin && (
                  <button
                    onClick={() => setActiveTab('private')}
                    className={`px-2 py-1 rounded-t text-xs flex items-center gap-1 ml-1 ${
                      activeTab === 'private' 
                        ? 'bg-stone-700 text-teal-300' 
                        : 'bg-stone-800 hover:bg-stone-700'
                    }`}
                    title="Private files (admin only)"
                  >
                    <Lock size={14} />
                    <span>Private</span>
                  </button>
                )}
              </div>
            </div>
            
            {/* Admin-only file creation buttons */}
            {isAdmin && (
              <div className="flex gap-2">
                <button
                  onClick={() => openCreateDialog('file')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Create new file"
                >
                  <Plus size={16} />
                </button>
                <button
                  onClick={() => openCreateDialog('directory')}
                  className="p-1 rounded hover:bg-stone-700 text-teal-400"
                  title="Create new folder"
                >
                  <FolderPlus size={16} />
                </button>
              </div>
            )}
          </div>
          
          <div 
            className="flex-1 overflow-auto"
            onDragOver={handleContainerDragOver}
            onDragLeave={handleContainerDragLeave}
            onDrop={handleContainerDrop}
          >
            {isTreeLoading ? (
              <div className="flex items-center justify-center h-full">
                <span className="text-teal-300">Loading files...</span>
              </div>
            ) : errorMessage ? (
              <div className="p-2 text-red-400">{errorMessage}</div>
            ) : (
              <div className="p-2 font-mono">
                {activeTab === 'public' ? (
                  // Show public files to all users
                  <>
                    <div className="flex items-center py-1 px-1 text-teal-300">
                      <Globe size={16} className="mr-2" />
                      <span className="text-sm font-bold">Public Files</span>
                    </div>
                    {publicFiles.length > 0 ? (
                      renderFileTree(publicFiles)
                    ) : (
                      <div className="ml-4 text-stone-500 text-sm">No public files available</div>
                    )}
                  </>
                ) : (
                  // Show private files to admin users
                  <>
                    <div className="flex items-center py-1 px-1 text-teal-300">
                      <Lock size={16} className="mr-2" />
                      <span className="text-sm font-bold">Private Files (Admin Only)</span>
                    </div>
                    {files.length > 0 ? (
                      renderFileTree(files)
                    ) : (
                      <div className="ml-4 text-stone-500 text-sm">No private files available</div>
                    )}
                  </>
                )}
              </div>
            )}
          </div>
          
          {/* Create file/folder dialog */}
          {showCreateDialog && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  {createType === 'file' ? 'New File' : 'New Folder'}
                </span>
                <button
                  onClick={closeCreateDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="flex gap-2">
                <input
                  ref={createInputRef}
                  type="text"
                  value={newItemName}
                  onChange={(e) => setNewItemName(e.target.value)}
                  onKeyDown={handleCreateKeyPress}
                  placeholder={createType === 'file' ? 'filename.ext' : 'folder name'}
                  className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                  disabled={isCreating}
                />
                <button
                  onClick={createNewItem}
                  disabled={isCreating || !newItemName.trim()}
                  className={`px-2 py-1 rounded text-xs ${
                    isCreating || !newItemName.trim()
                      ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
                      : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                  }`}
                >
                  {isCreating ? 'Creating...' : 'Create'}
                </button>
              </div>
            </div>
          )}
          
          {/* Rename file/folder dialog */}
          {showRenameDialog && itemToRename && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  Rename {itemToRename.type === 'directory' ? 'Folder' : 'File'}
                </span>
                <button
                  onClick={closeRenameDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="flex gap-2">
                <input
                  ref={renameInputRef}
                  type="text"
                  value={newName}
                  onChange={(e) => setNewName(e.target.value)}
                  onKeyDown={handleRenameKeyPress}
                  placeholder="New name"
                  className="flex-1 bg-stone-700 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
                  disabled={isRenaming}
                />
                <button
                  onClick={renameItem}
                  disabled={isRenaming || !newName.trim() || newName === itemToRename.name}
                  className={`px-2 py-1 rounded text-xs ${
                    isRenaming || !newName.trim() || newName === itemToRename.name
                      ? 'bg-stone-700 text-stone-500 cursor-not-allowed'
                      : 'bg-teal-700 text-teal-100 hover:bg-teal-600'
                  }`}
                >
                  {isRenaming ? 'Renaming...' : 'Rename'}
                </button>
              </div>
            </div>
          )}
          
          {/* Delete file/folder confirmation dialog */}
          {showDeleteDialog && itemToDelete && (
            <div className="p-2 border-t border-stone-700 bg-stone-800">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm font-bold">
                  Delete {itemToDelete.type === 'directory' ? 'Folder' : 'File'}
                </span>
                <button
                  onClick={closeDeleteDialog}
                  className="p-1 rounded hover:bg-stone-700 text-stone-400"
                >
                  <X size={14} />
                </button>
              </div>
              <div className="mb-2 text-sm">
                <p>Are you sure you want to delete <span className="text-red-400 font-bold">{itemToDelete.name}</span>?</p>
                {itemToDelete.type === 'directory' && (
                  <p className="text-red-400 text-xs mt-1">This will delete all files and folders inside it!</p>
                )}
              </div>
              <div className="flex gap-2 justify-end">
                <button
                  onClick={closeDeleteDialog}
                  className="px-2 py-1 rounded text-xs bg-stone-700 hover:bg-stone-600"
                >
                  Cancel
                </button>
                <button
                  onClick={deleteItem}
                  disabled={isDeleting}
                  className={`px-2 py-1 rounded text-xs ${
                    isDeleting
                      ? 'bg-red-900 text-red-300 cursor-not-allowed'
                      : 'bg-red-700 text-red-100 hover:bg-red-600'
                  }`}
                >
                  {isDeleting ? 'Deleting...' : 'Delete'}
                </button>
              </div>
            </div>
          )}
          
          <div className="p-2 border-t border-stone-700 text-xs">
            {selectedFile ? selectedFile.path : currentPath}
          </div>
        </div>
        
        {/* File content panel (preview or edit) */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {selectedFile ? (
            <>
              {/* Header with file name, status, and controls */}
              <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
                <div className="flex items-center">
                  <span className="mr-2">{selectedFile.name}</span>
                  {saveStatus === 'saving' && <span className="text-yellow-400 text-xs ml-2">Saving...</span>}
                  {saveStatus === 'saved' && <span className="text-green-400 text-xs ml-2">Saved</span>}
                  {saveStatus === 'error' && <span className="text-red-400 text-xs ml-2">Error!</span>}
                </div>
                
                {/* Only show edit/preview toggle for markdown files and admin users */}
                {selectedFile.name.endsWith('.md') && isAdmin && (
                  <div className="flex gap-2">
                    <button 
                      onClick={toggleEditMode}
                      className={`px-2 py-1 rounded text-xs flex items-center gap-1 ${editMode ? 'bg-teal-700 text-teal-100' : 'bg-stone-800 hover:bg-stone-700'}`}
                      title={editMode ? "Switch to preview mode" : "Switch to edit mode"}
                    >
                      {editMode ? <Eye size={14} /> : <Edit size={14} />}
                      {editMode ? 'Preview' : 'Edit'}
                    </button>
                    
                    {editMode && (
                      <button 
                        onClick={saveFileContent}
                        className="px-2 py-1 bg-stone-800 hover:bg-stone-700 rounded text-xs"
                        title="Save file"
                      >
                        Save
                      </button>
                    )}
                  </div>
                )}
              </div>
              
              {/* Error message */}
              {errorMessage && (
                <div className="p-2 bg-red-900 text-red-200 text-sm">
                  {errorMessage}
                </div>
              )}
              
              {/* Content area - either editor or preview */}
              {isContentLoading ? (
                <div className="flex-1 flex items-center justify-center">
                  <span className="text-teal-300">Loading content...</span>
                </div>
              ) : editMode && selectedFile.name.endsWith('.md') && isAdmin ? (
                // Editor mode - only for markdown files and admin users
                <div className="flex-1 flex flex-col">
                  {/* Markdown toolbar */}
                  <div className="p-2 border-b border-stone-700 bg-stone-800 flex flex-wrap gap-2">
                    <button 
                      onClick={() => insertMarkdown('### ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Heading"
                    >
                      <Heading size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('**', '**')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Bold"
                    >
                      <Bold size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('*', '*')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Italic"
                    >
                      <Italic size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('`', '`')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Inline Code"
                    >
                      <CodeIcon size={16} />
                    </button>
                    <button 
                      onClick={() => insertMarkdown('[', '](url)')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Link"
                    >
                      <Link size={16} />
                    </button>
                    <span className="border-r border-stone-700 h-6"></span>
                    <button 
                      onClick={() => insertList('- ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Bullet List"
                    >
                      <List size={16} />
                    </button>
                    <button 
                      onClick={() => insertList('1. ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Numbered List"
                    >
                      <ListOrdered size={16} />
                    </button>
                    <button 
                      onClick={() => insertList('- [ ] ')}
                      className="p-1 rounded hover:bg-stone-700 text-teal-400"
                      title="Checklist"
                    >
                      <CheckSquare size={16} />
                    </button>
                  </div>
                  
                  <div className="flex-1 p-2">
                    <textarea
                      ref={textareaRef}
                      className="w-full h-full bg-stone-800 text-teal-50 p-4 resize-none focus:outline-none font-mono"
                      value={fileContent}
                      onChange={handleMarkdownChange}
                      onKeyDown={handleEditorKeyDown}
                      placeholder="# Start typing your markdown here..."
                    />
                  </div>
                </div>
              ) : showPreview ? (
                // Preview mode
                <div className="flex-1 overflow-auto p-4">
                  <div className="markdown-preview text-teal-50">
                    {selectedFile.name.endsWith('.md') ? (
                      <div 
                        dangerouslySetInnerHTML={{ 
                          __html: converter.makeHtml(fileContent) 
                        }} 
                        className="markdown-content"
                      />
                    ) : (
                      <pre className="font-mono text-sm whitespace-pre-wrap">
                        {fileContent}
                      </pre>
                    )}
                  </div>
                </div>
              ) : null}
            </>
          ) : (
            // No file selected
            <div className="flex items-center justify-center h-full text-stone-600">
              <div className="text-center">
                <FileText size={48} className="mx-auto mb-4" />
                <p>Select a markdown file to preview</p>
                <p className="text-xs mt-2">Use the 'preview' command to toggle preview mode</p>
                {isAdmin && <p className="text-xs mt-1">Admin users can use the 'edit' command to edit markdown files</p>}
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Command input */}
      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="text-teal-400">$</span>
        <input
          ref={focusRef}
          type="text"
          onKeyDown={handleCommand}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
        />
      </div>
    </div>
  );
};

export default ExplorerWindow;

================
File: src/components/windows/GameWindow.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import { Users } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';
import { useSocket } from '../../context/SocketContext';
import MapCanvas from './mapeditor/MapCanvas';
import MapToolbar from './mapeditor/MapToolbar';
import API_CONFIG from '../../config/api';

const GameWindow = ({ isActive, nodeId, onCommand, transformWindow, windowState, updateWindowState, focusRef }) => {
  const { user } = useAuth();
  const { socket } = useSocket();
  const [mapData, setMapData] = useState(null);
  const [showGrid, setShowGrid] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [partyInfo, setPartyInfo] = useState(null);
  const [playerPositions, setPlayerPositions] = useState([]);
  const [currentPlayerPosition, setCurrentPlayerPosition] = useState({ x: 0, y: 0 });
  const [mapLoadNotification, setMapLoadNotification] = useState(null);
  const resetViewRef = useRef();

  // Load player positions for the party
  const loadPlayerPositions = async (partyId) => {
    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${API_CONFIG.BASE_URL}/parties/${partyId}/player-positions`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const positions = await response.json();
        setPlayerPositions(positions);
        
        // Find current user's position
        const userPosition = positions.find(p => p.user_id === user.id);
        if (userPosition) {
          setCurrentPlayerPosition({ x: userPosition.x, y: userPosition.y });
        }

        console.log('Loaded player positions:', positions);
      }
    } catch (error) {
      console.error('Error loading player positions:', error);
    }
  };

  // Load current party and map data - extracted as reusable function
  const loadGameData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Get JWT token from localStorage
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setError('Authentication required. Please log in.');
        return;
      }

      // First, get user's current party
      const partyResponse = await fetch(`${API_CONFIG.BASE_URL}/auth/current-party`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!partyResponse.ok) {
        if (partyResponse.status === 404) {
          setError('You are not currently in a party. Join a party to view the game.');
          return;
        }
        throw new Error('Failed to fetch party information');
      }

      const party = await partyResponse.json();
      setPartyInfo(party);

      // Then get the party's current map
      const mapResponse = await fetch(`${API_CONFIG.BASE_URL}/parties/${party.id}/current-map`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!mapResponse.ok) {
        if (mapResponse.status === 404) {
          setError('No map is currently loaded for this party. The DM needs to load a map from the explorer.');
          return;
        }
        throw new Error('Failed to fetch current map');
      }

      const mapInfo = await mapResponse.json();
      
      if (mapInfo.mapData) {
        setMapData(mapInfo.mapData);
        
        // Load player positions after map is loaded
        loadPlayerPositions(party.id);
      } else {
        setError('No map is currently loaded for this party.');
      }

    } catch (err) {
      console.error('Error loading game data:', err);
      setError(err.message || 'Failed to load game data');
    } finally {
      setIsLoading(false);
    }
  };

  // Load initial game data
  useEffect(() => {
    if (user) {
      loadGameData();
    }
  }, [user]);

  // Socket event listeners for map loading and real-time updates
  useEffect(() => {
    if (!socket || !partyInfo) return;

    // Listen for new map being loaded by DM
    const handleMapLoaded = (data) => {
      const { mapFilePath, loadedBy } = data;
      
      // Extract filename from path for display
      const filename = mapFilePath.split('/').pop() || mapFilePath;
      
      // Show notification
      setMapLoadNotification(`${loadedBy} loaded new map: ${filename}`);
      
      // Auto-hide notification after 5 seconds
      setTimeout(() => {
        setMapLoadNotification(null);
      }, 5000);
      
      // Reload the game data to get the new map
      console.log(`New map loaded by ${loadedBy}: ${filename} - reloading game data`);
      loadGameData();
    };

    socket.on('party_map_loaded', handleMapLoaded);

    return () => {
      socket.off('party_map_loaded', handleMapLoaded);
    };
  }, [socket, partyInfo]);

  // Socket event listeners for real-time player updates
  useEffect(() => {
    if (!socket || !partyInfo) return;

    // Request current player positions when joining
    socket.emit('request_player_positions', partyInfo.id);

    // Listen for player position updates
    const handlePlayerPositionUpdate = (data) => {
      const { userId, username, x, y } = data;
      
      setPlayerPositions(prev => {
        const updated = prev.filter(p => p.user_id !== userId);
        return [...updated, { user_id: userId, username, x, y }];
      });

      // Update current user position if it's our movement
      if (userId === user.id) {
        setCurrentPlayerPosition({ x, y });
      }

      console.log(`Player ${username} moved to (${x}, ${y})`);
    };

    // Listen for initial position sync
    const handlePlayerPositionsSync = (positions) => {
      setPlayerPositions(positions);
      
      // Find current user's position
      const userPosition = positions.find(p => p.user_id === user.id);
      if (userPosition) {
        setCurrentPlayerPosition({ x: userPosition.x, y: userPosition.y });
      }

      console.log('Synced player positions:', positions);
    };

    socket.on('player_position_update', handlePlayerPositionUpdate);
    socket.on('player_positions_sync', handlePlayerPositionsSync);

    return () => {
      socket.off('player_position_update', handlePlayerPositionUpdate);
      socket.off('player_positions_sync', handlePlayerPositionsSync);
    };
  }, [socket, partyInfo, user]);

  // Move player to new position
  const movePlayer = (newX, newY) => {
    if (!partyInfo || !mapData) return;

    // Validate movement within map boundaries
    if (newX < 0 || newX >= mapData.width || newY < 0 || newY >= mapData.height) {
      console.log('Movement blocked: outside map boundaries');
      return;
    }

    // Update local position immediately for responsiveness
    setCurrentPlayerPosition({ x: newX, y: newY });

    // Send movement to server via socket
    socket.emit('player_move', {
      partyId: partyInfo.id,
      x: newX,
      y: newY
    });

    console.log(`Moving to (${newX}, ${newY})`);
  };

  // Arrow key movement handler
  useEffect(() => {
    if (!isActive || !mapData || !partyInfo) return;

    const handleKeyDown = (e) => {
      // Only handle arrow keys if this window is active and focused
      if (!isActive) return;

      const { x, y } = currentPlayerPosition;
      let newX = x;
      let newY = y;

      switch (e.key) {
        case 'ArrowUp':
          newY = Math.max(0, y - 1);
          break;
        case 'ArrowLeft':
          newX = Math.max(0, x - 1);
          break;
        case 'ArrowDown':
          newY = Math.min(mapData.height - 1, y + 1);
          break;
        case 'ArrowRight':
          newX = Math.min(mapData.width - 1, x + 1);
          break;
        default:
          return; // Not a movement key
      }

      // Prevent browser default behavior for these keys
      e.preventDefault();
      
      // Only move if position actually changed
      if (newX !== x || newY !== y) {
        movePlayer(newX, newY);
      }
    };

    // Add event listener
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [isActive, mapData, partyInfo, currentPlayerPosition, socket]);

  // Handle grid toggle
  const toggleGrid = () => {
    setShowGrid(!showGrid);
  };

  // Handle reset view to origin
  const resetView = () => {
    if (resetViewRef.current) {
      resetViewRef.current();
    }
  };

  // No-op function for map editing (game window is read-only)
  const handleMapEdit = () => {
    // Do nothing - game window is read-only
  };

  if (isLoading) {
    return (
      <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-400 mx-auto mb-4"></div>
            <p>Loading game...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <Users size={48} className="mx-auto mb-4 text-stone-600" />
            <p className="text-red-400 mb-2">Game Not Available</p>
            <p className="text-sm text-stone-400 max-w-md">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full w-full flex flex-col bg-stone-900 text-teal-400">
      {/* Map Load Notification */}
      {mapLoadNotification && (
        <div className="absolute top-2 left-1/2 transform -translate-x-1/2 bg-teal-600 text-white px-4 py-2 rounded shadow-lg z-50">
          <div className="text-sm font-medium">{mapLoadNotification}</div>
        </div>
      )}

      {/* Header with party info and window title */}
      <div className="flex-shrink-0 p-2 border-b border-stone-700 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Users size={16} />
          <span className="text-sm font-mono">
            {partyInfo ? `${partyInfo.name} - Game View` : 'Game View'}
          </span>
          {partyInfo && user && partyInfo.creator_id === user.id && (
            <span className="text-xs bg-amber-800 text-amber-200 px-2 py-1 rounded">DM</span>
          )}
        </div>
        <div className="text-xs text-stone-400">
          Use arrow keys to move
        </div>
      </div>

      {/* MapToolbar in Game Mode - simplified */}
      <MapToolbar
        mode="game"
        onToggleGrid={toggleGrid}
        onResetView={resetView}
        showGrid={showGrid}
      />

      {/* Map Canvas */}
      {mapData ? (
        <MapCanvas
          mapData={mapData}
          currentLayer={0} // Default to first layer
          currentTool="select" // Read-only mode
          selectedTileId={0}
          selectedTilesetId={null}
          selectedRotation={0}
          onEdit={handleMapEdit} // No-op for read-only
          showGrid={showGrid}
          resetViewRef={resetViewRef}
          brushSize={1}
          hideEditorUI={true} // Hide editor UI elements for streamlined game view
          playerPositions={playerPositions} // Pass player positions for rendering
          currentUserId={user?.id} // Pass current user ID to distinguish own token
        />
      ) : (
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <Users size={48} className="mx-auto mb-4 text-stone-600" />
            <p>No map loaded</p>
            <p className="text-xs mt-2 text-stone-400">
              The DM needs to load a map from the explorer
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default GameWindow;

================
File: src/components/windows/index.js
================
import TerminalWindow from './TerminalWindow';
import ExplorerWindow from './explorer/ExplorerWindow';
import withCommandHandling from '../../hocs/withCommandHandling';
import withWindowState from '../../hocs/withWindowState';
import withCommandInput from '../../hocs/withCommandInput';
import ChatWindow from './ChatWindow';
import AdminWindow from './AdminWindow';
import CanvasWindow from './CanvasWindow';
import MarketplaceWindow from './MarketplaceWindow';
import { WINDOW_TYPES } from '../../utils/constants';

// Create enhanced versions of each window component by wrapping them with HOCs
export const EnhancedTerminalWindow = withWindowState(withCommandHandling(TerminalWindow), WINDOW_TYPES.TERMINAL);
export const EnhancedExplorerWindow = withWindowState(withCommandHandling(withCommandInput(ExplorerWindow)), WINDOW_TYPES.EXPLORER);

// For other windows, add the command input
export const EnhancedChatWindow = withWindowState(withCommandHandling(withCommandInput(ChatWindow)), WINDOW_TYPES.CHAT);
export const EnhancedAdminWindow = withWindowState(withCommandHandling(withCommandInput(AdminWindow)), WINDOW_TYPES.ADMIN);
export const EnhancedCanvasWindow = withWindowState(withCommandHandling(CanvasWindow), WINDOW_TYPES.CANVAS);
export const EnhancedMarketplaceWindow = withWindowState(withCommandHandling(withCommandInput(MarketplaceWindow)), WINDOW_TYPES.MARKETPLACE);

// Also export the base components in case they're needed
export { TerminalWindow, ExplorerWindow, ChatWindow, AdminWindow, CanvasWindow, MarketplaceWindow };

================
File: src/components/windows/mapeditor/components/OpacitySlider.jsx
================
import React, { useState, useRef, useEffect } from 'react';
import '../styles/RangeSlider.css';

/**
 * Custom OpacitySlider component that provides better interaction handling
 * than the standard HTML range input in complex UI scenarios.
 */
const OpacitySlider = ({ value, onChange, className = '' }) => {
  // Refs for DOM elements
  const trackRef = useRef(null);
  const thumbRef = useRef(null);
  const containerRef = useRef(null);
  
  // State to track dragging status
  const [isDragging, setIsDragging] = useState(false);
  const [displayValue, setDisplayValue] = useState(value || 1.0);
  
  // Update display value when prop changes
  useEffect(() => {
    setDisplayValue(value || 1.0);
  }, [value]);
  
  // Calculate position based on value (0-1)
  const getThumbPosition = (val) => {
    return `${val * 100}%`;
  };
  
  // Calculate value from mouse/touch position
  const calculateValueFromPosition = (clientX) => {
    if (!trackRef.current) return 0;
    
    const rect = trackRef.current.getBoundingClientRect();
    const trackWidth = rect.width;
    const offset = clientX - rect.left;
    
    // Calculate value (0-1) based on position
    let newValue = offset / trackWidth;
    
    // Clamp value between 0 and 1
    newValue = Math.max(0, Math.min(1, newValue));
    
    // Round to nearest 0.05
    return Math.round(newValue * 20) / 20;
  };
  
  // Handle mouse/touch down
  const handleStart = (clientX) => {
    setIsDragging(true);
    const newValue = calculateValueFromPosition(clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
    
    // Add document-level event listeners
    document.addEventListener('mousemove', handleMove);
    document.addEventListener('mouseup', handleEnd);
    document.addEventListener('touchmove', handleTouchMove);
    document.addEventListener('touchend', handleEnd);
  };
  
  // Handle mouse/touch move
  const handleMove = (e) => {
    if (!isDragging) return;
    const newValue = calculateValueFromPosition(e.clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
  };
  
  // Handle touch move with proper event handling
  const handleTouchMove = (e) => {
    if (!isDragging || !e.touches[0]) return;
    const newValue = calculateValueFromPosition(e.touches[0].clientX);
    setDisplayValue(newValue);
    if (onChange) onChange(newValue);
  };
  
  // Handle mouse/touch up - end dragging
  const handleEnd = () => {
    setIsDragging(false);
    
    // Remove document-level event listeners
    document.removeEventListener('mousemove', handleMove);
    document.removeEventListener('mouseup', handleEnd);
    document.removeEventListener('touchmove', handleTouchMove);
    document.removeEventListener('touchend', handleEnd);
  };
  
  // Handle mouse down on track/thumb
  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    handleStart(e.clientX);
  };
  
  // Handle touch start on track/thumb
  const handleTouchStart = (e) => {
    e.stopPropagation();
    if (e.touches[0]) {
      handleStart(e.touches[0].clientX);
    }
  };

  return (
    <div 
      className={`custom-slider-container ${className}`}
      ref={containerRef}
      onClick={e => e.stopPropagation()}
    >
      {/* Display percentage value */}
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs text-stone-400" title="Adjust layer transparency">
          Opacity:
        </span>
        <span className="text-xs font-medium text-teal-300">
          {Math.round(displayValue * 100)}%
        </span>
      </div>
      
      {/* Slider track and thumb */}
      <div 
        className="custom-slider-track"
        ref={trackRef}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
        onClick={e => e.stopPropagation()}
        style={{
          background: `linear-gradient(to right, #14b8a6 0%, #14b8a6 ${displayValue * 100}%, #44403c ${displayValue * 100}%, #44403c 100%)`
        }}
      >
        {/* Draggable thumb */}
        <div
          className="custom-slider-thumb"
          ref={thumbRef}
          style={{ left: getThumbPosition(displayValue) }}
          onMouseDown={handleMouseDown}
          onTouchStart={handleTouchStart}
        />
      </div>
    </div>
  );
};

export default OpacitySlider;

================
File: src/components/windows/mapeditor/jsdoc.json
================
{
  "source": {
    "include": [
      "./",
      "./utils/",
      "./components/"
    ],
    "includePattern": "\\.(js|jsx)$",
    "exclude": [
      "node_modules/"
    ]
  },
  "opts": {
    "destination": "./docs/",
    "recurse": true,
    "readme": "./README.md"
  },
  "plugins": [
    "plugins/markdown"
  ],
  "templates": {
    "cleverLinks": false,
    "monospaceLinks": false
  },
  "tags": {
    "allowUnknownTags": true,
    "dictionaries": ["jsdoc", "closure"]
  },
  "markdown": {
    "parser": "gfm"
  }
}

================
File: src/components/windows/mapeditor/LayerPanel.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Eye, EyeOff, Layers, Plus, Trash2, ArrowUp, ArrowDown, Edit2, ChevronDown, ChevronUp } from 'lucide-react';
import TilePalette from './TilePalette';
import OpacitySlider from './components/OpacitySlider';

/**
 * LayerPanel - Layer management and tile selection interface
 * 
 * @component
 * @description Provides comprehensive layer management functionality including:
 * - Layer visibility controls
 * - Layer opacity adjustment
 * - Layer reordering (up/down)
 * - Layer renaming with inline editing
 * - Layer addition and removal
 * - Brush size control
 * - Integrated tile palette
 * 
 * @param {Object} props - Component props
 * @param {Array} props.layers - Array of layer objects with name, visible, cells, opacity properties
 * @param {number} props.currentLayer - Index of the currently selected layer
 * @param {function} props.setCurrentLayer - Callback to change the current layer
 * @param {function} props.onToggleLayerVisibility - Callback to toggle layer visibility
 * @param {function} props.onAddLayer - Callback to add a new layer
 * @param {function} props.onRemoveLayer - Callback to remove a layer
 * @param {function} props.onMoveLayerUp - Callback to move layer up in render order
 * @param {function} props.onMoveLayerDown - Callback to move layer down in render order
 * @param {function} props.onRenameLayer - Callback to rename a layer
 * @param {function} props.onUpdateLayerOpacity - Callback to update layer opacity
 * @param {number} [props.selectedTileId=0] - Currently selected tile ID
 * @param {function} props.onSelectTile - Callback when a tile is selected
 * @param {number} props.selectedRotation - Current tile rotation in degrees
 * @param {function} props.onRotateTile - Callback to rotate tiles
 * @param {string} props.currentTool - Currently selected editing tool
 * @param {function} props.setCurrentTool - Callback to change the current tool
 * @param {number} [props.brushSize=1] - Current brush size for painting
 * @param {function} props.setBrushSize - Callback to change brush size
 * 
 * @example
 * <LayerPanel
 *   layers={mapData.layers}
 *   currentLayer={0}
 *   setCurrentLayer={setCurrentLayer}
 *   onToggleLayerVisibility={handleToggleVisibility}
 *   onAddLayer={handleAddLayer}
 *   onRemoveLayer={handleRemoveLayer}
 *   // ... other props
 * />
 */
const LayerPanel = ({ 
  layers, 
  currentLayer, 
  setCurrentLayer, 
  onToggleLayerVisibility, 
  onAddLayer, 
  onRemoveLayer, 
  onMoveLayerUp, 
  onMoveLayerDown, 
  onRenameLayer,
  onUpdateLayerOpacity,
  selectedTileId = 0,
  selectedTilesetId = null,
  onSelectTile,
  selectedRotation, // Add prop for receiving rotation state
  onRotateTile,     // Add prop for passing rotation handler
  currentTool,
  setCurrentTool,
  brushSize = 1,
  setBrushSize
}) => {
  // State for tracking which layer is being edited and the current edited name
  const [editingLayerIndex, setEditingLayerIndex] = useState(null);
  const [editedLayerName, setEditedLayerName] = useState('');
  const [expandedOpacityLayers, setExpandedOpacityLayers] = useState({});
  const layerNameInputRef = useRef(null);
  
  /**
   * Toggles opacity control visibility for a specific layer
   * @param {number} layerIndex - Index of the layer to toggle opacity controls for
   * @param {Event} e - Click event object
   * @returns {void}
   */
  const toggleOpacityControls = (layerIndex, e) => {
    e.stopPropagation();
    setExpandedOpacityLayers(prev => ({
      ...prev,
      [layerIndex]: !prev[layerIndex]
    }));
  };
  
  /**
   * Effect to focus the layer name input when editing mode is activated
   * @listens editingLayerIndex
   */
  useEffect(() => {
    if (editingLayerIndex !== null && layerNameInputRef.current) {
      layerNameInputRef.current.focus();
    }
  }, [editingLayerIndex]);
  
  /**
   * Initiates layer name editing mode
   * @param {Event} e - Click event object
   * @param {number} layerIndex - Index of the layer to edit
   * @returns {void}
   */
  const handleStartEditing = (e, layerIndex) => {
    e.stopPropagation();
    setEditingLayerIndex(layerIndex);
    setEditedLayerName(layers[layerIndex].name);
  };
  
  /**
   * Saves the edited layer name and exits editing mode
   * @param {number} layerIndex - Index of the layer being edited
   * @returns {void}
   */
  const handleSaveLayerName = (layerIndex) => {
    if (editedLayerName.trim()) {
      onRenameLayer(layerIndex, editedLayerName);
    }
    setEditingLayerIndex(null);
  };
  
  /**
   * Handles keyboard events in the layer name input field
   * @param {KeyboardEvent} e - Keyboard event object
   * @param {number} layerIndex - Index of the layer being edited
   * @returns {void}
   */
  const handleInputKeyDown = (e, layerIndex) => {
    if (e.key === 'Enter') {
      handleSaveLayerName(layerIndex);
    } else if (e.key === 'Escape') {
      setEditingLayerIndex(null);
    }
  };

  return (
    <div className="w-64 bg-stone-800 border-l border-stone-700 flex flex-col overflow-hidden">
      {/* Brush Size Control */}
      <div className="p-2 border-b border-stone-700">
        <div className="flex items-center justify-between">
          <span className="text-sm text-teal-400">BRUSH SIZE:</span>
          <div className="flex items-center">
            <button
              onClick={() => setBrushSize(Math.max(1, brushSize - 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-l text-teal-300 text-xs focus:outline-none"
            >
              -
            </button>
            <input
                type="number"
                value={brushSize}
                onChange={(e) => {
                  const value = parseInt(e.target.value, 10);
                  if (!isNaN(value) && value > 0) setBrushSize(value);
                }}
                className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 border-x-0 focus:outline-none text-center
                          [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                min="1"
                max="10"
              />
            <button
              onClick={() => setBrushSize(Math.min(10, brushSize + 1))}
              className="px-2 py-0.5 bg-stone-700 hover:bg-stone-600 rounded-r text-teal-300 text-xs focus:outline-none"
            >
              +
            </button>
          </div>
        </div>
        <div className="text-xs text-stone-400 mt-1">
          {brushSize}×{brushSize}
        </div>
      </div>
      
      {/* Tile Type and Palette Section */}
      <div className="border-b border-stone-700">
        <TilePalette 
          selectedTileId={selectedTileId}
          selectedTilesetId={selectedTilesetId} // ← ADD THIS LINE!
          onSelectTile={onSelectTile}
          selectedRotation={selectedRotation}
          onRotateTile={onRotateTile}         
          tileType={currentTool}
          onChangeTileType={setCurrentTool}
          createWindow={() => console.log('Marketplace not available in LayerPanel mode')}
        />
      </div>

      <div className="p-2 border-b border-stone-700 font-mono text-sm flex items-center justify-between">
        <div className="flex items-center">
          <Layers size={14} className="mr-2" />
          <span>LAYERS</span>
        </div>
        <button
          onClick={onAddLayer}
          className="p-1 rounded hover:bg-stone-700 text-teal-400"
          title="Add new layer"
        >
          <Plus size={16} />
        </button>
      </div>
      
      <div className="flex-1 overflow-auto">
        {layers && layers.length > 0 ? (
          <div className="p-2">
            {/* Show layers in reverse order so top layer is shown first */}
            {[...layers].reverse().map((layer, idx) => {
              // Calculate the actual index
              const actualIndex = layers.length - 1 - idx;
              const isActive = currentLayer === actualIndex;
              
              return (
                <div 
                  key={`layer-${actualIndex}`}
                  className={`mb-2 p-2 rounded border ${
                    isActive 
                      ? 'bg-stone-700 border-teal-500 text-teal-300' 
                      : 'bg-stone-800 border-stone-700 text-teal-50 hover:bg-stone-700'
                  }`}
                  onClick={() => setCurrentLayer(actualIndex)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      {/* Layer visibility toggle */}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onToggleLayerVisibility(actualIndex);
                        }}
                        className="mr-2 hover:bg-stone-600 p-1 rounded"
                        title={layer.visible ? "Hide layer" : "Show layer"}
                      >
                        {layer.visible ? <Eye size={14} /> : <EyeOff size={14} />}
                      </button>
                      
                      {/* Layer name - either editable or static */}
                      {editingLayerIndex === actualIndex ? (
                        <input
                          ref={layerNameInputRef}
                          className="bg-stone-600 text-sm text-teal-100 px-1 py-0.5 rounded border border-teal-500 focus:outline-none"
                          value={editedLayerName}
                          onChange={(e) => setEditedLayerName(e.target.value)}
                          onKeyDown={(e) => handleInputKeyDown(e, actualIndex)}
                          onBlur={() => handleSaveLayerName(actualIndex)}
                          onClick={(e) => e.stopPropagation()}
                          size={15}
                        />
                      ) : (
                        <span className="text-sm">{layer.name}</span>
                      )}
                    </div>
                    
                    {/* Layer operations */}
                    <div className="flex">
                      {/* Toggle opacity controls button */}
                      <button
                        onClick={(e) => toggleOpacityControls(actualIndex, e)}
                        className={`p-1 hover:bg-stone-600 rounded ${expandedOpacityLayers[actualIndex] ? 'bg-stone-600' : ''}`}
                        title="Toggle opacity controls"
                      >
                        {expandedOpacityLayers[actualIndex] ? 
                          <ChevronUp size={14} /> : 
                          <ChevronDown size={14} />
                        }
                      </button>
                      <button
                        onClick={(e) => handleStartEditing(e, actualIndex)}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Rename layer"
                      >
                        <Edit2 size={14} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerUp(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer up"
                        disabled={actualIndex === layers.length - 1}
                      >
                        <ArrowUp size={14} className={actualIndex === layers.length - 1 ? "opacity-30" : ""} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onMoveLayerDown(actualIndex);
                        }}
                        className="p-1 hover:bg-stone-600 rounded"
                        title="Move layer down"
                        disabled={actualIndex === 0}
                      >
                        <ArrowDown size={14} className={actualIndex === 0 ? "opacity-30" : ""} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveLayer(actualIndex);
                        }}
                        className="p-1 hover:bg-red-900 rounded text-red-400 hover:text-red-300"
                        title="Delete layer"
                        disabled={layers.length <= 1}
                      >
                        <Trash2 size={14} className={layers.length <= 1 ? "opacity-30" : ""} />
                      </button>
                    </div>
                  </div>
                  
                  {/* Opacity controls - only shown when expanded */}
                  {expandedOpacityLayers[actualIndex] && (
                    <div 
                      className="mt-2 px-1 pt-2 border-t border-stone-600" 
                      onClick={e => e.stopPropagation()}
                    >
                      <div className="flex items-center">
                        <div className="text-xs text-stone-400 mr-2 w-14">Opacity:</div>
                        
                        {/* Numeric input */}
                        <div className="flex items-center">
                          <input
                            type="text"
                            value={Math.round((layer.opacity || 1.0) * 100)}
                            onChange={(e) => {
                              // Get the value as a number
                              let value = parseInt(e.target.value, 10);
                              
                              // Validate: ensure it's a number between 0-100
                              if (isNaN(value)) value = 100;
                              value = Math.max(0, Math.min(100, value));
                              
                              // Convert percentage to decimal (0-1 range) and update
                              const opacityValue = value / 100;
                              if (onUpdateLayerOpacity) {
                                onUpdateLayerOpacity(actualIndex, opacityValue);
                              }
                            }}
                            className="w-10 bg-stone-700 text-xs text-teal-100 px-1 py-0.5 rounded border border-stone-600 focus:border-teal-500 focus:outline-none text-center"
                            title="Layer opacity (0-100%)"
                          />
                          <span className="text-xs text-stone-400 ml-1">%</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        ) : (
          <div className="flex items-center justify-center h-full">
            <span className="text-stone-500">No layers defined</span>
          </div>
        )}
      </div>
      
      {/* Layer information */}
      <div className="p-2 border-t border-stone-700 text-xs">
        {layers && currentLayer !== undefined && layers[currentLayer] ? (
          <div>
            <div className="text-stone-400">Selected: {layers[currentLayer].name}</div>
            <div className="text-stone-400">Total cells: {layers[currentLayer].cells?.length || 0}</div>
          </div>
        ) : (
          <div className="text-stone-500">No layer selected</div>
        )}
      </div>
    </div>
  );
};

export default LayerPanel;

================
File: src/components/windows/mapeditor/MAP_EDITOR_DOCUMENTATION.md
================
# Map Editor Complete Documentation

## Table of Contents
1. [Overview](#overview)
2. [Architecture](#architecture)
3. [Component Hierarchy](#component-hierarchy)
4. [Data Structures](#data-structures)
5. [Core Components](#core-components)
6. [Utility Modules](#utility-modules)
7. [Features & Functionality](#features--functionality)
8. [State Management](#state-management)
9. [Event Handling](#event-handling)
10. [Integration Points](#integration-points)
11. [Known Issues & Improvements](#known-issues--improvements)

## Overview

The Map Editor is a grid-based map creation tool for the SlumTerm virtual tabletop system. It allows users to create, edit, and save tile-based maps with multiple layers, dynamic tilesets, and various tile types.

### Key Features
- Multi-layer map editing
- Dynamic tileset loading from marketplace
- Tile rotation support
- Pan and zoom functionality
- Brush size support for efficient editing
- Real-time preview
- JSON-based map file format (.map)

## Architecture

The Map Editor follows a hierarchical component structure with clear separation of concerns:

```
MapEditorWindow (State Management & Orchestration)
├── MapToolbar (Tool Selection & Operations)
├── MapCanvas (Rendering & User Interaction)
├── LayerPanel (Layer Management)
└── TilePalette (Tile Selection)
    └── TilesetSelector (Tileset Management)
```

### Data Flow
1. **User Input** → MapCanvas → MapEditorWindow (via callbacks)
2. **State Updates** → MapEditorWindow → All child components (via props)
3. **Tile Selection** → TilePalette → MapEditorWindow → MapCanvas

## Component Hierarchy

### 1. MapEditorWindow (Main Container)
- **Location**: `MapEditorWindow.jsx`
- **Purpose**: Main orchestrator that manages all state and coordinates sub-components
- **Key Responsibilities**:
  - Map data state management
  - Tool and tile selection state
  - File loading/saving
  - Coordinating updates between components

### 2. MapCanvas (Rendering Engine)
- **Location**: `mapeditor/MapCanvas.jsx`
- **Purpose**: Handles all canvas rendering and user interactions
- **Key Responsibilities**:
  - Grid rendering
  - Tile rendering with tileset support
  - Mouse/keyboard event handling
  - Viewport management (pan/zoom)
  - Brush size support

### 3. MapToolbar (Tool Interface)
- **Location**: `mapeditor/MapToolbar.jsx`
- **Purpose**: Provides tool selection and map operations
- **Key Responsibilities**:
  - Tool selection UI
  - Save/load operations
  - Undo/redo (planned)
  - Clear map function

### 4. LayerPanel (Layer Management)
- **Location**: `mapeditor/LayerPanel.jsx`
- **Purpose**: Manages map layers
- **Key Responsibilities**:
  - Layer visibility toggle
  - Layer opacity control
  - Add/remove layers
  - Reorder layers
  - Rename layers

### 5. TilePalette (Tile Selection)
- **Location**: `mapeditor/TilePalette.jsx`
- **Purpose**: Tile selection and marketplace integration
- **Key Responsibilities**:
  - Display available tiles
  - Tile type selection
  - Rotation controls
  - Marketplace window creation

### 6. TilesetSelector (Tileset Management)
- **Location**: `mapeditor/TilesetSelector.jsx`
- **Purpose**: Dynamic tileset loading and selection
- **Key Responsibilities**:
  - Load tilesets from API
  - Display tileset grid
  - Handle tile selection

## Data Structures

### Map File Format (.map)

```json
{
  "version": "1.0",
  "name": "Map Name",
  "gridSize": 32,
  "width": 20,
  "height": 15,
  "defaultTile": "floor",
  "layers": [
    {
      "name": "terrain",
      "visible": true,
      "opacity": 1.0,
      "cells": [
        {
          "x": 0,
          "y": 0,
          "type": "wall",
          "tileId": 5,
          "tilesetId": "tileset-123",
          "rotation": 0
        }
      ]
    }
  ],
  "viewport": {
    "x": 0,
    "y": 0,
    "scale": 1
  },
  "tokenPositions": [],
  "metadata": {
    "author": "username",
    "created": "2024-01-01T00:00:00Z",
    "modified": "2024-01-01T00:00:00Z"
  }
}
```

### Cell Data Structure
```javascript
{
  x: number,          // Grid X coordinate
  y: number,          // Grid Y coordinate
  type: string,       // 'floor', 'wall', 'door', 'shadow', etc.
  tileId: number,     // Tile index in tileset (optional)
  tilesetId: string,  // Tileset identifier (optional)
  rotation: number    // Rotation in degrees (0, 90, 180, 270)
}
```

### Layer Data Structure
```javascript
{
  name: string,       // Layer name
  visible: boolean,   // Layer visibility
  opacity: number,    // Layer opacity (0-1)
  cells: Cell[]       // Array of cells in this layer
}
```

## Core Components

### MapEditorWindow State Variables

```javascript
// Map data and editing state
mapData              // Complete map data object
currentLayer         // Index of active layer
currentTool          // Selected tool ('select', 'floor', 'wall', etc.)
isDirty              // Unsaved changes flag
error                // Error message display

// Tile selection state
selectedTileId       // Currently selected tile ID
selectedTilesetId    // Currently selected tileset ID
selectedTileType     // Tile type category
selectedRotation     // Tile rotation (0, 90, 180, 270)
```

### MapCanvas Features

1. **Rendering Pipeline**
   - Clear canvas
   - Draw background
   - Draw grid cells
   - Render each visible layer
   - Apply layer opacity
   - Draw hover indicator
   - Show tool preview

2. **Interaction Modes**
   - Left Click: Apply current tool
   - Right Click: Erase
   - Middle Click: Pan
   - Spacebar + Drag: Pan
   - Scroll: Zoom

3. **Coordinate Systems**
   - Screen coordinates (pixels)
   - Grid coordinates (cells)
   - Viewport offset for panning

## Utility Modules

### mapUtils.js

Key functions:
- `createEmptyMap()` - Create new map with defaults
- `parseMapFile()` - Parse JSON map data
- `serializeMap()` - Convert map to JSON string
- `setCellInLayer()` - Add/update cell in layer
- `removeCellFromLayer()` - Remove cell from layer
- `screenToGridCoordinates()` - Convert mouse position to grid
- `gridToScreenCoordinates()` - Convert grid to screen position

### dynamicTileRegistry.js

Manages dynamic tileset loading:
- Fetches tileset data from API
- Caches tileset images
- Provides tile selection interface
- Handles tileset categories

### tileRegistry.js

Static tile definitions (legacy):
- Predefined tile types
- Default tile appearances
- Fallback rendering

## Features & Functionality

### 1. Multi-Layer Editing
- Create multiple layers
- Toggle layer visibility
- Adjust layer opacity
- Reorder layers
- Current layer highlighting

### 2. Tile System
- Dynamic tileset loading
- Tile rotation (0°, 90°, 180°, 270°)
- Multiple tile types (floor, wall, door, shadow)
- Tileset marketplace integration

### 3. Tools
- **Select**: No editing
- **Floor**: Place floor tiles
- **Wall**: Place wall tiles
- **Door**: Place door tiles
- **Shadow**: Place shadow tiles
- **Erase**: Remove tiles

### 4. Viewport Control
- Pan: Middle mouse or spacebar + drag
- Zoom: Mouse wheel
- Viewport persistence in save file
- Reset view function

### 5. Brush Support
- Variable brush sizes
- Centered on cursor
- Visual preview
- Boundary checking

## State Management

### State Flow
1. **User Action** → Event Handler → State Update → Re-render
2. **File Load** → Parse → Update State → Render
3. **Tool Change** → Update Tool State → Update Canvas Cursor
4. **Tile Selection** → Update Selection State → Ready for Placement

### Key State Updates

```javascript
// Tile placement
handleEdit(x, y, tool, rotation, tileId, tilesetId)
  → setCellInLayer()
  → setMapData()
  → setIsDirty(true)

// Tile selection
handleSelectTile(tileId, tilesetId)
  → setSelectedTileId()
  → setSelectedTilesetId()
  → setCurrentTool()

// Layer management
handleToggleLayerVisibility(layerIndex)
  → Update layer.visible
  → setMapData()
  → setIsDirty(true)
```

## Event Handling

### Mouse Events
- `onMouseDown` - Start drawing/panning
- `onMouseMove` - Continue drawing/panning, update hover
- `onMouseUp` - End drawing/panning
- `onWheel` - Zoom in/out
- `onContextMenu` - Prevent right-click menu

### Keyboard Events
- `Space` - Hold for pan mode
- Future: Hotkeys for tools

### Canvas Interaction Logic
```javascript
if (spacebar pressed || middle mouse) {
  // Pan mode
} else if (right mouse) {
  // Erase mode
} else if (left mouse) {
  // Apply current tool
}
```

## Integration Points

### 1. File System Integration
- Loads .map files from file explorer
- Saves to localStorage (demo)
- Future: Server-side file operations

### 2. Marketplace Integration
- Dynamic tileset loading
- User tileset selection
- Tileset caching

### 3. Window System Integration
- Window state management
- Command handling
- Focus management

## Known Issues & Improvements

### Current Issues

1. **Shadow Tile Handling**
   - Complex logic to ensure tileId is always present
   - Multiple validation points in code

2. **Rotation State**
   - Uses global `window.currentMapRotation`
   - Should be refactored to proper state management

3. **Debug Code**
   - Console.log statements throughout
   - Debug UI elements visible
   - Should use proper debug system

4. **Performance**
   - Full canvas redraw on every change
   - Could optimize with dirty rectangle tracking

### Suggested Improvements

1. **Code Quality**
   - Remove debug code
   - Extract magic numbers to constants
   - Improve error handling
   - Add proper TypeScript types

2. **Features**
   - Implement undo/redo
   - Add copy/paste functionality
   - Grid snapping options
   - Keyboard shortcuts

3. **UI/UX**
   - Better tool icons
   - Keyboard shortcut hints
   - Status bar with coordinates
   - Mini-map overview

4. **Architecture**
   - Move state to context/reducer
   - Separate rendering logic
   - Create custom hooks
   - Improve component composition

## Development Guidelines

### Adding New Tile Types
1. Add type to tool selection in MapToolbar
2. Add rendering logic in MapCanvas.drawTile()
3. Update tile palette categories
4. Add to mapUtils cell type validation

### Adding New Tools
1. Add tool to MapToolbar
2. Implement tool logic in MapCanvas.handleCellEdit()
3. Update cursor/preview rendering
4. Add tool state to MapEditorWindow

### Extending Tilesets
1. Upload tileset through marketplace
2. Define tileset sections/categories
3. Tileset auto-loads in map editor
4. Tiles available in palette

## Next Steps

1. **Clean up debug code and console logs**
2. **Add proper JSDoc comments to all functions**
3. **Create TypeScript type definitions**
4. **Implement proper error boundaries**
5. **Add unit tests for utility functions**
6. **Optimize rendering performance**
7. **Improve state management architecture**

================
File: src/components/windows/mapeditor/MapCanvas.jsx
================
import React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';
import { Grid } from 'lucide-react';
import { screenToGridCoordinates, gridToScreenCoordinates } from './utils/mapUtils';
import dynamicTileRegistry from './utils/dynamicTileRegistry';
import API_CONFIG from '../../../config/api';

/**
 * The main canvas component for the Grid Map Editor
 * Handles rendering and interaction with the grid map
 */
const MapCanvas = ({ 
  mapData, 
  currentLayer, 
  currentTool, 
  selectedTileId = 0,
  selectedTilesetId = null,
  selectedRotation = 0,
  onEdit, 
  showGrid = true, 
  resetViewRef,
  brushSize = 1,
  // Add the onViewportChange prop to save viewport changes
  onViewportChange = null,
  // Add prop to hide editor UI elements for game mode
  hideEditorUI = false,
  // Player positions for game mode
  playerPositions = [],
  currentUserId = null
}) => {
  const containerRef = useRef(null);
  const canvasRef = useRef(null);
  // Initialize with default values, will be overridden if mapData contains viewport info
  const [gridSize, setGridSize] = useState(32);
  const [viewportOffset, setViewportOffset] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [activeMouseButton, setActiveMouseButton] = useState(null);
  const [hoverCell, setHoverCell] = useState(null);
  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
  const [isSpacePressed, setIsSpacePressed] = useState(false);
  const [tilesetImages, setTilesetImages] = useState({});
  const [tilesetColumns, setTilesetColumns] = useState({});
  const [isRegistryInitialized, setIsRegistryInitialized] = useState(false);

    // Function to save viewport changes
    const saveViewport = useCallback(() => {
      if (onViewportChange) {
        onViewportChange({
          x: viewportOffset.x,
          y: viewportOffset.y,
          scale: gridSize / 32 // Store scale as a ratio of the default grid size
        });
      }
    }, [viewportOffset, gridSize, onViewportChange]);
  
  // Reset view to origin (0,0) function
  const resetViewToOrigin = useCallback(() => {
    setViewportOffset({ x: 0, y: 0 });
  }, []);

  // Store the reset function in the provided ref
  useEffect(() => {
    if (resetViewRef) {
      resetViewRef.current = resetViewToOrigin;
    }
  }, [resetViewToOrigin, resetViewRef]);
  
  // ENHANCED DEBUG: Track when critical props change
  useEffect(() => {
    console.log('🔄 [MapCanvas] Props Changed - selectedTilesetId:', {
      selectedTilesetId: { value: selectedTilesetId, type: typeof selectedTilesetId },
      selectedTileId: { value: selectedTileId, type: typeof selectedTileId },
      selectedRotation: { value: selectedRotation, type: typeof selectedRotation },
      currentTool,
      timestamp: new Date().toLocaleTimeString()
    });
  }, [selectedTilesetId, selectedTileId, selectedRotation, currentTool]);
  
  // Initialize dynamic tile registry on component mount
  useEffect(() => {
    const initializeTilesets = async () => {
      console.log('MapCanvas: Initializing dynamic tile registry...');
      
      // Initialize the registry (now loads ALL available tilesets for rendering)
      const success = await dynamicTileRegistry.initializeTileRegistry();
      
      if (success) {
        // Get ALL available tilesets (for rendering any tile)
        const allTilesets = dynamicTileRegistry.getAllTilesets();
        console.log(`MapCanvas: Found ${allTilesets.length} total tilesets for rendering`);
        
        // Load tileset images for ALL tilesets (so any tile can be rendered)
        const loadedImages = {};
        const loadedColumns = {};
        
        for (const tileset of allTilesets) {
          if (tileset.sections && tileset.sections.length > 0) {
            // Get the pre-loaded image from the registry
            const img = dynamicTileRegistry.getTilesetImageById(tileset.id);
            
            if (img) {
              // Calculate columns based on image width
              const cols = Math.floor(img.width / dynamicTileRegistry.TILE_SIZE);
              loadedColumns[tileset.id] = cols;
              loadedImages[tileset.id] = img;
              console.log(`MapCanvas: Loaded tileset ${tileset.name} with ${cols} columns`);
            } else {
              console.warn(`MapCanvas: Could not load image for tileset ${tileset.name}`);
            }
          }
        }
        
        setTilesetImages(loadedImages);
        setTilesetColumns(loadedColumns);
        setIsRegistryInitialized(true);
        
        console.log(`MapCanvas: Initialization complete - ${Object.keys(loadedImages).length} tileset images loaded for rendering`);
      } else {
        console.log('MapCanvas: No tilesets available or initialization failed');
        setIsRegistryInitialized(true);
      }
    };
    
    initializeTilesets();
  }, []);

  /**
   * Draw a tile on the canvas based on its type and tile ID
   * @param {CanvasRenderingContext2D} ctx - Canvas context
   * @param {number} x - X position on canvas
   * @param {number} y - Y position on canvas
   * @param {number} size - Size of the tile
   * @param {Object} cell - The cell data including type and tileId
   */
  const drawTile = (ctx, x, y, size, cell) => {
    const { type, tileId, rotation = 0, tilesetId } = cell;
    
    // console.log('🎨 RENDERING TILE:', {
    //   position: `(${cell.x}, ${cell.y})`,
    //   type,
    //   tileId,
    //   tilesetId,
    //   rotation,
    //   hasRegistryInit: isRegistryInitialized,
    //   availableTilesets: Object.keys(tilesetImages)
    // }
    ;
    
    // If registry is not initialized or no tilesets are loaded, use fallback rendering
    if (!isRegistryInitialized || Object.keys(tilesetImages).length === 0) {
      console.log('🔴 FALLBACK RENDERING: Registry not initialized or no tilesets loaded');
      // Fall back to color-based rendering
      switch(type) {
        case 'wall':
          ctx.fillStyle = '#6b7280'; // Gray
          ctx.fillRect(x, y, size, size);
          break;
        case 'floor':
          ctx.fillStyle = '#1e293b'; // Slate-800
          ctx.fillRect(x, y, size, size);
          break;
        case 'shadow':
          ctx.fillStyle = '#BF40BF'; // Purple
          ctx.fillRect(x, y, size, size);
          break;
        case 'door':
          if (rotation !== 0) {
            ctx.save();
            ctx.translate(x + size/2, y + size/2);
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            ctx.fillStyle = '#1e293b';
            ctx.fillRect(-size/2, -size/2, size, size);
            ctx.fillStyle = '#b45309';
            ctx.fillRect(-size/4, -size/4, size/2, size/2);
            ctx.restore();
          } else {
            ctx.fillStyle = '#1e293b';
            ctx.fillRect(x, y, size, size);
            ctx.fillStyle = '#b45309';
            ctx.fillRect(x + size/4, y + size/4, size/2, size/2);
          }
          break;
        default:
          ctx.fillStyle = '#ef4444'; // Red-500
          ctx.fillRect(x, y, size, size);
      }
      
      if (showGrid) {
        ctx.strokeStyle = '#44403c';
        ctx.strokeRect(x, y, size, size);
      }
      return;
    }
    
    // Get the appropriate tileset image for this tile
    let tilesetImage = null;
    let columns = dynamicTileRegistry.DEFAULT_TILESET_COLS;
    
    // First try to use the specific tileset ID if provided
    if (tilesetId && tilesetImages[tilesetId]) {
      tilesetImage = tilesetImages[tilesetId];
      columns = tilesetColumns[tilesetId] || columns;
    } else {
      // Otherwise, find the first tileset that has sections for this category
      const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
      for (const tileset of selectedTilesets) {
        if (tileset.sections && tileset.sections.some(s => s.category === type)) {
          if (tilesetImages[tileset.id]) {
            tilesetImage = tilesetImages[tileset.id];
            columns = tilesetColumns[tileset.id] || columns;
            break;
          }
        }
      }
    }
    
    // If we have a tileset image and a valid tile ID, draw from the tileset
    if (tilesetImage && tileId !== undefined && ['floor', 'wall', 'shadow'].includes(type)) {
      // Calculate coordinates based on the tileset's column count
      const col = tileId % columns;
      const row = Math.floor(tileId / columns);
      const sourceX = col * dynamicTileRegistry.TILE_SIZE;
      const sourceY = row * dynamicTileRegistry.TILE_SIZE;
      
      // Handle rotation
      if (rotation !== 0) {
        ctx.save();
        ctx.translate(x + size/2, y + size/2);
        const angleInRadians = (rotation * Math.PI) / 180;
        ctx.rotate(angleInRadians);
        
        ctx.drawImage(
          tilesetImage,
          sourceX, sourceY, dynamicTileRegistry.TILE_SIZE, dynamicTileRegistry.TILE_SIZE,
          -size/2, -size/2, size, size
        );
        
        ctx.restore();
      } else {
        ctx.drawImage(
          tilesetImage,
          sourceX, sourceY, dynamicTileRegistry.TILE_SIZE, dynamicTileRegistry.TILE_SIZE,
          x, y, size, size
        );
      }
      
      // Draw grid lines on top only if showGrid is true
      if (showGrid) {
        ctx.strokeStyle = '#44403c'; // Stone-700
        ctx.strokeRect(x, y, size, size);
      }
      return;
    }
    
    // Fall back to original color-based rendering for other types
    switch(type) {
      case 'wall':
        // Fallback if wall tileset image failed to load or tileId is undefined
        ctx.fillStyle = '#6b7280'; // Gray
        ctx.fillRect(x, y, size, size);
        break;
      case 'floor':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#1e293b'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'shadow':
        // Default floor if no tileId or image failed to load
        ctx.fillStyle = '#BF40BF'; // Slate-800
        ctx.fillRect(x, y, size, size);
        break;
      case 'door':
        // For doors, apply rotation to the whole door element
        if (rotation !== 0) {
          // Save the current context state
          ctx.save();
          
          // Move to the center of the tile position
          ctx.translate(x + size/2, y + size/2);
          
          // Rotate the context by the specified angle (convert degrees to radians)
          const angleInRadians = (rotation * Math.PI) / 180;
          ctx.rotate(angleInRadians);
          
          // Draw floor background
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(-size/2, -size/2, size, size);
          
          // Draw door centered
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(-size/4, -size/4, size/2, size/2);
          
          // Restore the context to its original state
          ctx.restore();
        } else {
          // Draw floor first (no rotation)
          ctx.fillStyle = '#1e293b'; // Slate background
          ctx.fillRect(x, y, size, size);
          // Then draw door
          ctx.fillStyle = '#b45309'; // Amber-700
          ctx.fillRect(x + size/4, y + size/4, size/2, size/2);
        }
        break;
      // Add more tile types as needed
      default:
        // Unknown tile type, draw placeholder
        ctx.fillStyle = '#ef4444'; // Red-500
        ctx.fillRect(x, y, size, size);
    }
    
    // Draw grid lines on top only if showGrid is true
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700
      ctx.strokeRect(x, y, size, size);
    }
  };

  /**
   * Draw a player token on the canvas
   * @param {CanvasRenderingContext2D} ctx - Canvas context
   * @param {number} x - X position on canvas
   * @param {number} y - Y position on canvas
   * @param {number} size - Size of the tile
   * @param {Object} player - Player data including userId, username
   * @param {boolean} isCurrentUser - Whether this is the current user's token
   */
  const drawPlayerToken = (ctx, x, y, size, player, isCurrentUser) => {
    const { userId, username } = player;
    
    // Calculate token size and position (centered in the grid cell)
    const tokenSize = size * 0.6; // Token is 60% of grid size
    const tokenX = x + (size - tokenSize) / 2;
    const tokenY = y + (size - tokenSize) / 2;
    
    // Choose colors based on whether it's the current user
    const tokenColor = isCurrentUser ? '#10b981' : '#3b82f6'; // Green for current user, blue for others
    const borderColor = isCurrentUser ? '#059669' : '#1d4ed8';
    const textColor = '#ffffff';
    
    // Draw token circle
    ctx.beginPath();
    ctx.arc(tokenX + tokenSize/2, tokenY + tokenSize/2, tokenSize/2, 0, 2 * Math.PI);
    ctx.fillStyle = tokenColor;
    ctx.fill();
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // Draw username above the token
    ctx.fillStyle = textColor;
    ctx.font = `${Math.max(10, size * 0.25)}px monospace`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'bottom';
    
    // Add text shadow for better visibility
    ctx.shadowColor = '#000000';
    ctx.shadowBlur = 2;
    ctx.shadowOffsetX = 1;
    ctx.shadowOffsetY = 1;
    
    ctx.fillText(username, x + size/2, tokenY - 5);
    
    // Reset shadow
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
  };

  /**
   * Handle cell editing with a specific tool or the current selected tool
   */
  const handleCellEdit = (e, overrideTool) => {
    if (!canvasRef.current || !mapData || !onEdit) return;
    
    // ENHANCED DEBUG: Log current props at the moment of editing
    console.log('🎯 [MapCanvas] handleCellEdit ENTRY - Current Props State:', {
      selectedTileId: { value: selectedTileId, type: typeof selectedTileId },
      selectedTilesetId: { value: selectedTilesetId, type: typeof selectedTilesetId },
      selectedRotation: { value: selectedRotation, type: typeof selectedRotation },
      currentTool,
      overrideTool,
      propsReceived: {
        selectedTileIdFromProps: selectedTileId,
        selectedTilesetIdFromProps: selectedTilesetId,
        selectedRotationFromProps: selectedRotation
      },
      isUndefined: {
        selectedTileId: selectedTileId === undefined,
        selectedTilesetId: selectedTilesetId === undefined,
        selectedRotation: selectedRotation === undefined
      },
      isNull: {
        selectedTileId: selectedTileId === null,
        selectedTilesetId: selectedTilesetId === null,
        selectedRotation: selectedRotation === null
      }
    });
    
    // Get mouse position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Convert to grid coordinates
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
        
    // Basic validation if the center point is outside map boundaries
    if (gridCoords.x < 0 || gridCoords.x >= mapData.width || 
        gridCoords.y < 0 || gridCoords.y >= mapData.height) {
      // Coordinates outside map boundary - do nothing
      return;
    }
    
    // Use the override tool if provided, otherwise use the current tool
    const toolToUse = overrideTool || currentTool;
    
    // Only edit if using a tool other than select
    if (toolToUse === 'select') return;
    
    // For brush size of 1, just edit the single cell
    if (brushSize === 1) {
  
      // Use the selectedRotation prop directly
      const rotation = parseInt(selectedRotation, 10) || 0;
      
      // CRITICAL DEBUG: Log the exact tileId being sent from MapCanvas
      console.log(`MapCanvas EDIT: At (${gridCoords.x}, ${gridCoords.y}) using tool=${toolToUse}, passing tileId=${selectedTileId}, rotation=${rotation}`);
      
      // This is especially important for shadow tiles
      if (toolToUse === 'shadow') {
        console.log(`SHADOW TILE EDIT: At (${gridCoords.x}, ${gridCoords.y}) tileId=${selectedTileId} - IMPORTANT! Verify this ID is preserved!`);
      }
      
      // Pass rotation, selectedTileId, and selectedTilesetId
      onEdit(gridCoords.x, gridCoords.y, toolToUse, rotation, selectedTileId, selectedTilesetId);
  
      return;
    }
    
    // For larger brushes, always center around the hover cell
    // This matches the hover indicator logic for consistent behavior
    const halfBrush = Math.floor(brushSize / 2);
    
    // Calculate how to position the brush so the cursor is in the center
    // For even sizes, there's no true center cell, so we offset by half a cell
    const offset = brushSize % 2 === 0 ? 0.5 : 0;
    
    // Apply to all cells in the brush area
    for (let dy = -halfBrush + offset; dy < brushSize - halfBrush + offset; dy++) {
      for (let dx = -halfBrush + offset; dx < brushSize - halfBrush + offset; dx++) {
        const cellX = Math.floor(gridCoords.x + dx);
        const cellY = Math.floor(gridCoords.y + dy);
        
        // Skip if outside map boundaries
        if (cellX < 0 || cellX >= mapData.width || 
            cellY < 0 || cellY >= mapData.height) {
          continue;
        }
        
        // Edit this cell with the current rotation value from props
        const rotation = parseInt(selectedRotation, 10) || 0;
        
        // CRITICAL: For brush operations, also add logging for shadow tiles
        if (toolToUse === 'shadow') {
          console.log(`BRUSH: Shadow tile at (${cellX}, ${cellY}) with tileId=${selectedTileId}`);
        }
        
        onEdit(cellX, cellY, toolToUse, rotation, selectedTileId, selectedTilesetId);
      }
    }
  };

  // Set up ResizeObserver to update canvas dimensions
  useLayoutEffect(() => {
    if (!containerRef.current) return;
    
    const updateCanvasSize = () => {
      if (containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        setCanvasSize({ width, height });
      }
    };
    
    // Initial size update
    updateCanvasSize();
    
    // Set up ResizeObserver
    const resizeObserver = new ResizeObserver(entries => {
      if (entries.length > 0) {
        updateCanvasSize();
      }
    });
    
    resizeObserver.observe(containerRef.current);
    
    // Clean up
    return () => {
      resizeObserver.disconnect();
    };
  }, []);
  
  // Update hover cell when mouse moves
  const updateHoverCell = (e) => {
    if (!canvasRef.current || !mapData) return;
    
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    const gridCoords = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Only set hover cell if it's within map boundaries
    if (gridCoords.x >= 0 && gridCoords.x < mapData.width && 
        gridCoords.y >= 0 && gridCoords.y < mapData.height) {
      setHoverCell(gridCoords);
    } else {
      // Clear hover cell when outside map boundaries
      setHoverCell(null);
    }
  };

  // Handle keyboard events for spacebar
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(true);
      }
    };

    const handleKeyUp = (e) => {
      // Space key
      if (e.key === ' ' || e.keyCode === 32) {
        setIsSpacePressed(false);
        setIsDragging(false);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  // Reference to the canvas context
  const ctxRef = useRef(null);
  
  // Function to draw the canvas contents
  const drawCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !mapData) return;
    
    const ctx = canvas.getContext('2d');
    ctxRef.current = ctx;
    
    const width = canvas.width;
    const height = canvas.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Background color
    ctx.fillStyle = '#1c1917'; // Stone-900 from Tailwind
    ctx.fillRect(0, 0, width, height);
    
    // Adjust for viewport offset
    const offsetX = viewportOffset.x;
    const offsetY = viewportOffset.y;
    
    // Draw default grid background - useful for visualizing empty spaces (hidden in game mode)
    if (!hideEditorUI) {
      for (let x = 0; x < mapData.width; x++) {
        for (let y = 0; y < mapData.height; y++) {
          const screenX = Math.floor(x * gridSize + offsetX);
          const screenY = Math.floor(y * gridSize + offsetY);
          
          // Only draw if visible on screen
          if (screenX > -gridSize && screenX < width && 
              screenY > -gridSize && screenY < height) {
            // Draw a subtle background for all cells
            // ctx.fillStyle = '#0f172a'; // Very dark slate blue
            ctx.fillStyle = '#042f2e'; // Very dark slate blue
            ctx.fillRect(screenX, screenY, gridSize, gridSize);
          }
        }
      }
    }
    
    // Draw a clear boundary around the map area (hidden in game mode)
    if (!hideEditorUI) {
      const mapWidthPx = mapData.width * gridSize;
      const mapHeightPx = mapData.height * gridSize;
      const mapStartX = offsetX;
      const mapStartY = offsetY;
      
      // Draw boundary with more visible color
      ctx.strokeStyle = '#5eead4'; // Orange-500
      ctx.lineWidth = 2;
      ctx.strokeRect(mapStartX, mapStartY, mapWidthPx, mapHeightPx);
      
      // Add small corner markers for extra visibility
      const cornerSize = 8;
      ctx.fillStyle = '#5eead4'; // Orange-500
      
      // Top-left corner
      ctx.fillRect(mapStartX - 1, mapStartY - 1, cornerSize, cornerSize);
      
      // Top-right corner
      ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY - 1, cornerSize, cornerSize);
      
      // Bottom-left corner
      ctx.fillRect(mapStartX - 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
      
      // Bottom-right corner
      ctx.fillRect(mapStartX + mapWidthPx - cornerSize + 1, mapStartY + mapHeightPx - cornerSize + 1, cornerSize, cornerSize);
    }
    
    // Draw map data (cells from each layer)
    if (mapData && mapData.layers && mapData.layers.length > 0) {
      // Render each visible layer from bottom to top
      mapData.layers.forEach((layer, layerIndex) => {
        if (!layer.visible) return;
        
        // Set layer opacity if defined, default to 1.0 (fully opaque)
        const layerOpacity = layer.opacity !== undefined ? layer.opacity : 1.0;
        ctx.globalAlpha = layerOpacity;
        
        // Draw cells
        layer.cells.forEach(cell => {
          // Calculate screen position for this cell
          const screenX = Math.floor(cell.x * gridSize + offsetX);
          const screenY = Math.floor(cell.y * gridSize + offsetY);
          
          // Draw the tile if it's visible on screen
          if (screenX > -gridSize && screenX < width && 
              screenY > -gridSize && screenY < height) {
            drawTile(ctx, screenX, screenY, gridSize, cell);
          }
        });
        
        // Highlight current layer with a subtle border if it matches the currentLayer (only if showGrid is true)
        if (layerIndex === currentLayer && showGrid) {
          // Make sure we use full opacity for the highlight, regardless of layer opacity
          ctx.globalAlpha = 1.0;
          ctx.strokeStyle = 'rgba(20, 184, 166, 0.5)'; // Teal with opacity
          ctx.lineWidth = 2;
          
          layer.cells.forEach(cell => {
            const screenX = Math.floor(cell.x * gridSize + offsetX);
            const screenY = Math.floor(cell.y * gridSize + offsetY);
            
            if (screenX > -gridSize && screenX < width && 
                screenY > -gridSize && screenY < height) {
              ctx.strokeRect(screenX, screenY, gridSize, gridSize);
            }
          });
        }
        
        // Reset global alpha to default (1.0) after drawing this layer
        ctx.globalAlpha = 1.0;
      });
    }
    
    // Draw grid on top (only if showGrid is true)
    if (showGrid) {
      ctx.strokeStyle = '#44403c'; // Stone-700 from Tailwind
      ctx.lineWidth = 1;
      
      // Calculate grid line positioning
      const gridOffsetX = offsetX % gridSize;
      const gridOffsetY = offsetY % gridSize;
      
      // Draw vertical lines
      for (let x = gridOffsetX; x < width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
      }
      
      // Draw horizontal lines
      for (let y = gridOffsetY; y < height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
      }
    }
    
    // Draw hover highlight (always show, but hide tool text in game mode)
    if (hoverCell) {
      // For brush size of 1, just highlight the single cell
      if (brushSize === 1) {
        const screenX = Math.floor(hoverCell.x * gridSize + offsetX);
        const screenY = Math.floor(hoverCell.y * gridSize + offsetY);
        
        ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
        ctx.fillRect(screenX, screenY, gridSize, gridSize);
        
        // Show tool indicator only in editor mode
        if (!hideEditorUI) {
          ctx.fillStyle = '#14b8a6';
          ctx.font = '12px monospace';
          
          // If right mouse button is pressed, show "erase" as the tool
          const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
          ctx.fillText(displayTool, screenX + 5, screenY + 15);
        }
      } else {
        // For larger brushes, always center around the hoverCell
        const halfBrush = Math.floor(brushSize / 2);
        
        // Calculate how to position the brush so the cursor is in the center
        // For even sizes, there's no true center cell, so we need to offset by half a cell
        const offset = brushSize % 2 === 0 ? 0.5 : 0;
        
        // Generate all cell positions that should be part of the brush
        for (let dy = -halfBrush + offset; dy < brushSize - halfBrush + offset; dy++) {
          for (let dx = -halfBrush + offset; dx < brushSize - halfBrush + offset; dx++) {
            const cellX = Math.floor(hoverCell.x + dx);
            const cellY = Math.floor(hoverCell.y + dy);
            
            // Skip if outside map boundaries
            if (cellX < 0 || cellX >= mapData.width || 
                cellY < 0 || cellY >= mapData.height) {
              continue;
            }
            
            // Calculate screen position (fixed to separate gridSize multiplication from offset)
            const screenX = Math.floor(cellX * gridSize) + offsetX;
            const screenY = Math.floor(cellY * gridSize) + offsetY;
            
            ctx.fillStyle = 'rgba(20, 184, 166, 0.3)'; // Teal with opacity
            ctx.fillRect(screenX, screenY, gridSize, gridSize);
          }
        }
        
        // Show tool indicator only in editor mode
        if (!hideEditorUI) {
          const indicatorX = Math.floor(hoverCell.x * gridSize) + offsetX;
          const indicatorY = Math.floor(hoverCell.y * gridSize) + offsetY;
          
          ctx.fillStyle = '#14b8a6';
          ctx.font = '12px monospace';
          
          // If right mouse button is pressed, show "erase" as the tool
          const displayTool = activeMouseButton === 2 ? 'erase' : currentTool;
          ctx.fillText(`${displayTool} (${brushSize}×${brushSize})`, indicatorX + 5, indicatorY + 15);
        }
      }
    }

    // Draw player tokens on top of everything (only in game mode)
    if (hideEditorUI && playerPositions && playerPositions.length > 0) {
      playerPositions.forEach(player => {
        const { x, y } = player;
        
        // Calculate screen position for this player
        const screenX = Math.floor(x * gridSize + offsetX);
        const screenY = Math.floor(y * gridSize + offsetY);
        
        // Only draw if visible on screen
        if (screenX > -gridSize && screenX < width && 
            screenY > -gridSize && screenY < height) {
          const isCurrentUser = currentUserId && player.user_id === currentUserId;
          drawPlayerToken(ctx, screenX, screenY, gridSize, player, isCurrentUser);
        }
      });
    }
  }, [
    gridSize, 
    viewportOffset, 
    mapData, 
    currentLayer, 
    hoverCell, 
    currentTool, 
    activeMouseButton, 
    showGrid, 
    tilesetImages,
    tilesetColumns,
    isRegistryInitialized,
    hideEditorUI, // Add hideEditorUI to trigger re-render when UI mode changes
    playerPositions, // Add player positions for game mode
    currentUserId, // Add current user ID to distinguish own token
    // selectedRotation, // Removed: Toolbar rotation shouldn't trigger full canvas redraw
    brushSize  // Add brushSize as a dependency too for completeness
  ]);
  
  // Call drawCanvas whenever relevant dependencies change
  useEffect(() => {
    if (canvasRef.current && mapData) {
      drawCanvas();
    }
  }, [drawCanvas]);
  
  // Update canvas size when container size changes
  useEffect(() => {
    if (canvasRef.current && canvasSize.width > 0 && canvasSize.height > 0) {
      drawCanvas();
    }
  }, [canvasSize, drawCanvas]);

  // Manually trigger a redraw whenever tileset images are loaded
  useEffect(() => {
    if (isRegistryInitialized && Object.keys(tilesetImages).length > 0 && canvasRef.current && mapData) {
      // Call drawCanvas without adding it to dependency array
      drawCanvas();
    }
  }, [isRegistryInitialized, tilesetImages, mapData]); // Trigger redraw when tilesets are loaded

  // Handle canvas mouse events
  const handleMouseDown = (e) => {
    // Prevent context menu on right click
    if (e.button === 2) {
      e.preventDefault();
    }
    
    setActiveMouseButton(e.button);
    
    // Middle mouse button (1) for panning
    if (e.button === 1) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
      e.preventDefault(); // Prevent default scrolling behavior for middle mouse button
    } 
    // Right mouse button (2) for erasing
    else if (e.button === 2 && !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
    // Left mouse button (0) for drawing with current tool
    else if (e.button === 0 && !isSpacePressed) {
      handleCellEdit(e);
    }
    // If space is pressed, start dragging regardless of which mouse button
    else if (isSpacePressed) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseMove = (e) => {
    // Always update hover cell
    updateHoverCell(e);
    
    // Handle dragging for pan with middle mouse button (1),
    // or spacebar + any mouse button
    if (isDragging && (activeMouseButton === 1 || isSpacePressed)) {
      const dx = e.clientX - dragStart.x;
      const dy = e.clientY - dragStart.y;
      
      setViewportOffset({
        x: viewportOffset.x + dx,
        y: viewportOffset.y + dy
      });
      
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle spacebar + mouse move (even without button press)
    else if (isSpacePressed && !isDragging) {
      // Start dragging when space is pressed and mouse moves
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
    }
    // Handle continuous drawing while left mouse button is down
    else if (activeMouseButton === 0 && !isSpacePressed) {
      handleCellEdit(e);
    }
    // Handle continuous erasing while right mouse button is down
    else if (activeMouseButton === 2 && !isSpacePressed) {
      handleCellEdit(e, 'erase');
    }
  };

  const handleMouseUp = () => {
    // Only stop dragging if we're not using spacebar navigation
    if (!isSpacePressed) {
      setIsDragging(false);
    }
    setActiveMouseButton(null);
  };

  const handleWheel = (e) => {
    // Get cursor position relative to canvas
    const rect = canvasRef.current.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;
    
    // Get grid coordinates under cursor before zoom
    const gridCoordsBefore = screenToGridCoordinates(mouseX, mouseY, gridSize, viewportOffset);
    
    // Calculate new grid size
    let newGridSize;
    if (e.deltaY < 0) {
      // Zoom in - increase grid size
      newGridSize = Math.min(gridSize + 4, 64);
    } else {
      // Zoom out - decrease grid size
      newGridSize = Math.max(gridSize - 4, 16);
    }
    
    // Calculate screen coordinates after zoom with the current viewport offset
    const screenCoordsAfter = {
      x: gridCoordsBefore.x * newGridSize + viewportOffset.x,
      y: gridCoordsBefore.y * newGridSize + viewportOffset.y
    };
    
    // Calculate the difference to maintain cursor position
    const dx = mouseX - screenCoordsAfter.x;
    const dy = mouseY - screenCoordsAfter.y;
    
    // Update grid size and adjust viewport offset
    setGridSize(newGridSize);
    setViewportOffset(prev => ({
      x: prev.x + dx,
      y: prev.y + dy
    }));
  };

  return (
    <div 
      ref={containerRef}
      className="flex-1 relative flex overflow-hidden bg-stone-900"
    >
      {/* Grid size info box - hidden in game mode */}
      {!hideEditorUI && (
        <div className="absolute top-2 left-2 bg-stone-800 p-2 rounded text-xs text-teal-400 flex items-center z-10">
          <Grid size={14} className="mr-1" />
          <span>Grid Size: {gridSize}px</span>
          {!showGrid && <span className="ml-2">(Grid Hidden)</span>}
        </div>
      )}
      
      <canvas 
        ref={canvasRef}
        width={canvasSize.width}
        height={canvasSize.height}
        className={`w-full h-full ${hideEditorUI ? '' : 'border border-stone-700'}`}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onContextMenu={(e) => e.preventDefault()} // Prevent context menu on right click
      />
      
      {/* Tool and position info - hidden in game mode */}
      {!hideEditorUI && (
        <div className="absolute bottom-2 right-2 bg-stone-800 p-2 rounded text-xs text-teal-400 z-10">
          {currentTool && <span>Tool: {activeMouseButton === 2 ? 'erase' : currentTool}</span>}
          {hoverCell && <span className="ml-2">Position: ({hoverCell.x}, {hoverCell.y})</span>}
        </div>
      )}
    </div>
  );
};

export default MapCanvas;

================
File: src/components/windows/mapeditor/MapPropertiesPanel.jsx
================
import React, { useState } from 'react';
import { Grid, Save, Settings, X } from 'lucide-react';

/**
 * Panel for editing map properties
 */
const MapPropertiesPanel = ({ mapData, onApply, onCancel }) => {
  const [width, setWidth] = useState(mapData ? mapData.width : 20);
  const [height, setHeight] = useState(mapData ? mapData.height : 15);
  const [gridSize, setGridSize] = useState(mapData ? mapData.gridSize : 32);
  const [name, setName] = useState(mapData ? mapData.name : 'New Map');
  const [error, setError] = useState(null);

  // Validate input and apply changes
  const handleApply = () => {
    // Validate width and height
    if (width < 1 || width > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    
    if (height < 1 || height > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    
    if (gridSize < 16 || gridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }
    
    // Apply changes
    onApply({
      width: Number(width),
      height: Number(height),
      gridSize: Number(gridSize),
      name
    });
  };

  // Handle input changes
  const handleInputChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  return (
    <div className="bg-stone-800 border border-stone-700 rounded-lg p-4 w-64">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-teal-400 text-sm font-semibold flex items-center">
          <Settings size={16} className="mr-1" />
          Map Properties
        </h2>
        <button
          onClick={onCancel}
          className="text-stone-500 hover:text-stone-300"
        >
          <X size={16} />
        </button>
      </div>
      
      {error && (
        <div className="bg-red-900/30 text-red-400 p-2 rounded mb-3 text-xs">
          {error}
        </div>
      )}
      
      <div className="space-y-3">
        <div>
          <label className="block text-xs text-stone-400 mb-1">Map Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Width (cells)</label>
          <input
            type="text"
            value={width}
            onChange={handleInputChange(setWidth)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Height (cells)</label>
          <input
            type="text"
            value={height}
            onChange={handleInputChange(setHeight)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div>
          <label className="block text-xs text-stone-400 mb-1">Grid Size (pixels)</label>
          <input
            type="text"
            value={gridSize}
            onChange={handleInputChange(setGridSize)}
            className="w-full bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
          />
        </div>
        
        <div className="pt-2 flex justify-end">
          <button
            onClick={handleApply}
            className="bg-teal-700 hover:bg-teal-600 text-teal-100 px-3 py-1 rounded text-xs flex items-center"
          >
            <Save size={14} className="mr-1" />
            Apply Changes
          </button>
        </div>
      </div>
    </div>
  );
};

export default MapPropertiesPanel;

================
File: src/components/windows/mapeditor/MapToolbar.jsx
================
import React, { useState, useEffect } from 'react';
import { 
  Save, Undo, Redo, Trash2, Copy, Square, Circle, 
  Grid, ZoomIn, ZoomOut, Download, Upload, Plus, Minus,
  Layers, MousePointer, Hammer, Wand2, FileText, Settings,
  Home
} from 'lucide-react';

/**
 * Toolbar component for the Map Editor and Game Window
 */
const MapToolbar = ({ 
  mode = 'edit', // 'edit' or 'game'
  onSave, 
  onUndo, 
  onRedo, 
  onClear, 
  onExportAscii, 
  onImportAscii,
  onToggleGrid,
  onResetView,
  showGrid = true,
  saveStatus = 'saved', // default to 'saved'
  mapData,
  onApplyProperties,
  // Game mode specific props
  gameTitle,
  gameSubtitle,
  isDM = false
}) => {
  const [showProperties, setShowProperties] = useState(false);
  const [mapName, setMapName] = useState(mapData?.name || 'New Map');
  const [mapWidth, setMapWidth] = useState(mapData?.width || 20);
  const [mapHeight, setMapHeight] = useState(mapData?.height || 15);
  const [mapGridSize, setMapGridSize] = useState(mapData?.gridSize || 32);
  const [error, setError] = useState(null);

  // Update state when mapData changes
  useEffect(() => {
    if (mapData) {
      setMapName(mapData.name || 'New Map');
      setMapWidth(mapData.width || 20);
      setMapHeight(mapData.height || 15);
      setMapGridSize(mapData.gridSize || 32);
    }
  }, [mapData]);

  // Handle applying property changes
  const handleApplyProperties = () => {
    // Validate inputs
    if (mapWidth < 1 || mapWidth > 100) {
      setError('Width must be between 1 and 100');
      return;
    }
    if (mapHeight < 1 || mapHeight > 100) {
      setError('Height must be between 1 and 100');
      return;
    }
    if (mapGridSize < 16 || mapGridSize > 64) {
      setError('Grid size must be between 16 and 64');
      return;
    }

    // Clear any errors
    setError(null);

    // Apply changes
    onApplyProperties({
      name: mapName,
      width: Number(mapWidth),
      height: Number(mapHeight),
      gridSize: Number(mapGridSize)
    });
  };

  // Handle number input changes with validation
  const handleNumberChange = (setter) => (e) => {
    const value = e.target.value;
    if (value === '' || /^\d+$/.test(value)) {
      setter(value === '' ? '' : Number(value));
    }
  };

  // Toggle properties panel
  const toggleProperties = () => {
    setShowProperties(!showProperties);
  };

  return (
    <>
      <div className="flex justify-between items-center p-2 bg-stone-800 border-b border-stone-700">
        {mode === 'edit' ? (
          /* File operations - Edit Mode */
          <div className="flex space-x-1 items-center">
            <button 
              onClick={onSave}
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Save map"
            >
              <Save size={18} />
            </button>
            <button 
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Clear map"
              onClick={onClear}
            >
              <Trash2 size={18} />
            </button>
            <button 
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Export as PNG"
            >
              <Download size={18} />
            </button>
            <button 
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Import tileset"
            >
              <Upload size={18} />
            </button>
            <div className="h-6 border-r border-stone-700 mx-1"></div>
            <button 
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Export as ASCII"
              onClick={onExportAscii}
            >
              <FileText size={18} />
            </button>
            <button 
              className="p-2 hover:bg-stone-700 rounded text-teal-400"
              title="Import from ASCII"
              onClick={onImportAscii}
            >
              <Upload size={18} />
            </button>
          </div>
        ) : (
          /* Empty space in Game Mode - party info is in header above */
          <div></div>
        )}

        {/* Empty space in the middle to maintain layout */}
        <div className="flex-1"></div>

        {/* View options */}
        <div className="flex space-x-1">
          <button
            onClick={onToggleGrid}
            className={`p-2 hover:bg-stone-700 rounded ${
              showGrid ? 'text-teal-400' : 'text-stone-500'
            }`}
            title={showGrid ? "Hide grid" : "Show grid"}
          >
            <Grid size={18} />
          </button>
          <button
            onClick={onResetView}
            className="p-2 hover:bg-stone-700 rounded text-teal-400"
            title="Return to origin (0,0)"
          >
            <Home size={18} />
          </button>
          {mode === 'edit' && (
            <button 
              className={`p-2 hover:bg-stone-700 rounded ${showProperties ? 'bg-stone-700 text-teal-300' : 'text-teal-400'}`}
              title="Map Properties"
              onClick={toggleProperties}
            >
              <Settings size={18} />
            </button>
          )}
        </div>
      </div>
      
      {/* Properties Panel - Expandable - Edit Mode Only */}
      {mode === 'edit' && showProperties && (
        <div className="bg-stone-800 border-b border-stone-700 p-2 grid grid-cols-5 gap-2 items-center text-sm">
          {error && (
            <div className="col-span-5 bg-red-900/30 text-red-400 p-2 rounded mb-2 text-xs">
              {error}
            </div>
          )}
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Width:</label>
            <input
              type="text"
              value={mapWidth}
              onChange={handleNumberChange(setMapWidth)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Height:</label>
            <input
              type="text"
              value={mapHeight}
              onChange={handleNumberChange(setMapHeight)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex items-center">
            <label className="mr-2 text-stone-400">Grid Size:</label>
            <input
              type="text"
              value={mapGridSize}
              onChange={handleNumberChange(setMapGridSize)}
              className="w-16 bg-stone-900 border border-stone-700 rounded px-2 py-1 text-sm text-teal-100 focus:outline-none focus:border-teal-600"
            />
          </div>
          
          <div className="flex justify-end">
            <button
              onClick={handleApplyProperties}
              className="bg-teal-700 hover:bg-teal-600 text-white px-3 py-1 rounded text-xs flex items-center"
            >
              <Save size={14} className="mr-1" />
              Apply
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default MapToolbar;

================
File: src/components/windows/mapeditor/README.md
================
# Gridmap Editor for SlumTerm

This directory contains the implementation of the Gridmap Editor for the SlumTerm virtual tabletop system. The editor allows users to create and edit grid-based maps for tabletop role-playing games.

## Components

- **MapEditorWindow.jsx**: Main window component that integrates all subcomponents
- **MapCanvas.jsx**: Canvas component for rendering and interacting with the grid map
- **MapToolbar.jsx**: Toolbar with editing tools and file operations
- **LayerPanel.jsx**: Panel for managing layers (create, toggle visibility, reorder)
- **utils/mapUtils.js**: Utility functions for map operations

## Integration with SlumTerm

The Gridmap Editor is integrated with the SlumTerm system in a similar way to the Markdown Editor:

1. When a user clicks on a file with the `.map` extension in the file explorer, the MapEditorWindow will open
2. The MapEditorWindow loads the map data from the file and displays it in the grid view
3. Users can edit the map using various tools and save the changes back to the file

## Map File Format (.map)

Map files use a JSON format to store the grid data:

```json
{
  "version": "1.0",
  "name": "Map Name",
  "gridSize": 32,
  "width": 20,
  "height": 15,
  "defaultTile": "floor",
  "layers": [
    {
      "name": "terrain",
      "visible": true,
      "cells": [
        { "x": 0, "y": 0, "type": "wall" },
        { "x": 1, "y": 0, "type": "wall" }
      ]
    },
    {
      "name": "objects",
      "visible": true,
      "cells": [
        { "x": 2, "y": 1, "type": "door" }
      ]
    }
  ],
  "tokenPositions": [],
  "metadata": {
    "author": "username",
    "created": "ISO date",
    "modified": "ISO date"
  }
}
```

## Features

- **Grid-based editing**: Place walls, floors, doors, and other map elements on a grid
- **Layer management**: Create, rename, reorder, and toggle visibility of layers
- **Zoom and pan**: Adjust the view to focus on different parts of the map
- **File operations**: Create new maps, open existing maps, save changes

## Future Plans

- **Multiplayer support**: Allow multiple players to view and interact with the map
- **Token placement**: Add player and monster tokens to the map
- **Line of sight**: Implement fog of war and dynamic lighting
- **Map scripting**: Add interactivity to map elements

## Usage

1. Create a new `.map` file in the file explorer
2. Click on the file to open it in the Gridmap Editor
3. Use the toolbar to select tools for editing the map
4. Save your changes

## Development Notes

- The grid map editor uses the HTML Canvas API for rendering
- Map data is stored in JSON format compatible with the server's file system
- Map editing operations use immutable data patterns to avoid direct state mutation

================
File: src/components/windows/mapeditor/styles/RangeSlider.css
================
/* Original Input Slider styling */
.opacity-slider {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 6px;
  background: #44403c;
  border-radius: 5px;
  outline: none;
  margin: 10px 0;
  cursor: pointer;
}

.opacity-slider::-webkit-slider-runnable-track {
  -webkit-appearance: none;
  appearance: none;
  height: 6px;
  border-radius: 5px;
}

.opacity-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #14b8a6;
  cursor: pointer;
  border: 2px solid #f8fafc;
  margin-top: -6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.opacity-slider::-moz-range-thumb {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #14b8a6;
  cursor: pointer;
  border: 2px solid #f8fafc;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.opacity-slider::-moz-range-track {
  height: 6px;
  background: #44403c;
  border-radius: 5px;
}

.opacity-slider:focus {
  outline: none;
}

/* Custom Slider Component Styling */
.custom-slider-container {
  position: relative;
  width: 100%;
  padding: 6px 0;
  user-select: none;
  touch-action: none;
}

.custom-slider-track {
  position: relative;
  height: 6px;
  width: 100%;
  background: #44403c;
  border-radius: 4px;
  cursor: pointer;
  margin: 8px 0;
}

.custom-slider-thumb {
  position: absolute;
  top: 50%;
  width: 18px;
  height: 18px;
  background-color: #14b8a6;
  border-radius: 50%;
  border: 2px solid #f8fafc;
  transform: translate(-50%, -50%);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  cursor: grab;
  z-index: 2;
  transition: transform 0.1s, background-color 0.2s;
}

.custom-slider-thumb:hover {
  background-color: #0d9488;
  transform: translate(-50%, -50%) scale(1.1);
}

.custom-slider-thumb:active {
  background-color: #0f766e;
  cursor: grabbing;
  transform: translate(-50%, -50%) scale(1.15);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.4);
}

================
File: src/components/windows/mapeditor/TilePalette.jsx
================
import React, { useEffect, useState, useMemo, useRef, useCallback } from 'react';
import { Heart, RotateCw, CheckCircle, XCircle, Store } from 'lucide-react';
import axios from 'axios';
import API_CONFIG from '../../../config/api';
import { 
  TILE_SIZE,
  getTileName,
  getTileCoordinates
} from './utils/tileRegistry';

// Import the dynamic tile registry
import dynamicTileRegistry from './utils/dynamicTileRegistry';

// Debug helper to log API requests and responses
const logApiCall = (method, url, status, data) => {
  console.log(`API ${method} ${url} - Status: ${status}`);
  console.log('Data:', data);
};

/**
 * Enhanced TilePalette component with marketplace integration
 */
const TilePalette = ({ 
  onSelectTile, 
  selectedTileId = 0, 
  selectedTilesetId = null,
  tileType = 'floor',
  onChangeTileType,
  selectedRotation = 0,
  onRotateTile,
  createWindow
}) => {
  // CRITICAL DEBUG: Check if onSelectTile is a function
  console.log('🚨 TilePalette props check:', {
    onSelectTile: typeof onSelectTile,
    onSelectTileExists: !!onSelectTile,
    isFunction: typeof onSelectTile === 'function'
  });

  // NEW DEBUG: Check render state
  console.log('🎯 TilePalette render state:', {
    selectedTileId,
    selectedTilesetId,
    tileType,
    propsReceived: {
      selectedTileId: typeof selectedTileId,
      selectedTilesetId: typeof selectedTilesetId,
      tileType: typeof tileType
    }
  });

  // Local state to track rotation, will sync back to parent
  const [localRotation, setLocalRotation] = useState(selectedRotation);
  
  // Sync with parent's rotation when it changes
  useEffect(() => {
    setLocalRotation(selectedRotation);
  }, [selectedRotation]);
  
  const [favoriteTiles, setFavoriteTiles] = useState([]);
  const [isAddingToFavorites, setIsAddingToFavorites] = useState(false);
  const [addFavoriteError, setAddFavoriteError] = useState(null);
  const [isFavorited, setIsFavorited] = useState(false);
  const [tilesetImages, setTilesetImages] = useState({});
  const [loading, setLoading] = useState(true);
  const [currentSection, setCurrentSection] = useState(null); // Filter by section for floor
  const [currentWallSection, setCurrentWallSection] = useState(null); // Filter by section for wall
  const [currentShadowSection, setCurrentShadowSection] = useState(null);
  const [sections, setSections] = useState({});
  const [isInitialized, setIsInitialized] = useState(false);
  const initialTileTypeRef = useRef(tileType);
  const [showFavoritesSection, setShowFavoritesSection] = useState(true);
  const [marketplaceStatus, setMarketplaceStatus] = useState('idle'); // 'idle', 'loading', 'success', 'error'
  
  // Available tile types
  const tileTypes = [
    { id: 'floor', name: 'Floor' },
    { id: 'wall', name: 'Wall' },
    { id: 'shadow', name: 'Shadow' },
    { id: 'door', name: 'Door' }
  ];
  
  // Store the initial tile type to handle first render properly
  useEffect(() => {
    initialTileTypeRef.current = tileType;
  }, []);

  // Initialize dynamic tile registry
  useEffect(() => {
    const initRegistry = async () => {
      setLoading(true);
      try {
        await dynamicTileRegistry.initializeTileRegistry();
        
        // Get all sections
        const allSections = dynamicTileRegistry.getAllSections();
        setSections(allSections);
        
        // Get selected tilesets to load individual images
        const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
        const images = {};
        
        // Load each tileset image individually by ID
        for (const tileset of selectedTilesets) {
          images[tileset.id] = dynamicTileRegistry.getTilesetImageForCategory(tileType, tileset.id);
        }
        
        setTilesetImages(images);
        setIsInitialized(true);
      } catch (error) {
        console.error('Error initializing dynamic tile registry:', error);
      } finally {
        setLoading(false);
      }
    };
    
    initRegistry();
  }, []);

  // Load favorite tiles when component mounts
  useEffect(() => {
    loadFavoriteTiles();
  }, []);

  // Check if the currently selected tile is a favorite
  useEffect(() => {
    checkIsFavorite();
  }, [selectedTileId, tileType, selectedTilesetId]);

  // Function to load favorite tiles
  const loadFavoriteTiles = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;

      console.log('Fetching favorite tiles from:', `${API_CONFIG.BASE_URL}/favorite-tiles`);
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', '/favorite-tiles', response.status, response.data);
      
      // Ensure we have an array, even if the response is unexpected
      if (Array.isArray(response.data)) {
        setFavoriteTiles(response.data);
      } else if (response.data && Array.isArray(response.data.favorites)) {
        setFavoriteTiles(response.data.favorites);
      } else {
        console.error('Unexpected response format for favorite tiles:', response.data);
        setFavoriteTiles([]);
      }
    } catch (error) {
      console.error('Error loading favorite tiles from server:', error);
      setFavoriteTiles([]);
    }
  };

  // Function to check if selected tile is a favorite
  const checkIsFavorite = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token || !selectedTilesetId) {
        setIsFavorited(false);
        return;
      }

      const response = await axios.get(
        `${API_CONFIG.BASE_URL}/favorite-tiles/check/${selectedTileId}/${tileType}/${selectedTilesetId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      logApiCall('GET', `/favorite-tiles/check/${selectedTileId}/${tileType}/${selectedTilesetId}`, response.status, response.data);
      setIsFavorited(response.data.isFavorite);
    } catch (error) {
      console.error('Error checking favorite status from server:', error);
      setIsFavorited(false);
    }
  };

  // Function to add a tile to favorites
  const addToFavorites = async () => {
    setIsAddingToFavorites(true);
    setAddFavoriteError(null);
    
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        setAddFavoriteError('Authentication required');
        setIsAddingToFavorites(false);
        return;
      }

      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/favorite-tiles`,
        { 
          tileIndex: selectedTileId, 
          tileType,
          tilesetId: selectedTilesetId // Include tileset ID for favorites
        },
        { headers: { 
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}` 
          } 
        }
      );
      
      logApiCall('POST', '/favorite-tiles', response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(true);
    } catch (error) {
      console.error('Error adding tile to favorites:', error);
      setAddFavoriteError(error.response?.data?.message || 'Failed to add to favorites');
    } finally {
      setIsAddingToFavorites(false);
    }
  };

  // Function to remove a tile from favorites
  const removeFromFavorites = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token || !selectedTilesetId) return;

      const response = await axios.delete(
        `${API_CONFIG.BASE_URL}/favorite-tiles/${selectedTileId}/${tileType}/${selectedTilesetId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      logApiCall('DELETE', `/favorite-tiles/${selectedTileId}/${tileType}/${selectedTilesetId}`, response.status, response.data);
      
      // Reload favorite tiles
      await loadFavoriteTiles();
      setIsFavorited(false);
    } catch (error) {
      console.error('Error removing tile from favorites:', error);
    }
  };

  // Function to open the marketplace window
  const openMarketplace = () => {
    if (createWindow) {
      setMarketplaceStatus('loading');
      
      try {
        // Create the marketplace window
        createWindow({
          type: 'marketplace',
          title: 'Tileset Marketplace',
          width: 900,
          height: 700
        });
        
        setMarketplaceStatus('success');
      } catch (error) {
        console.error('Error opening marketplace window:', error);
        setMarketplaceStatus('error');
      }
    } else {
      console.warn('createWindow function not provided');
      setMarketplaceStatus('error');
    }
  };

  // Function to refresh tilesets after marketplace changes
  const refreshTilesets = async () => {
    setLoading(true);
    try {
      await dynamicTileRegistry.refreshTileRegistry();
      
      // Get all sections
      const allSections = dynamicTileRegistry.getAllSections();
      setSections(allSections);
      
      // Get selected tilesets to load individual images
      const selectedTilesets = dynamicTileRegistry.getSelectedTilesets();
      const images = {};
      
      // Load each tileset image individually by ID
      for (const tileset of selectedTilesets) {
        images[tileset.id] = dynamicTileRegistry.getTilesetImageForCategory(tileType, tileset.id);
      }
      
      setTilesetImages(images);
      setMarketplaceStatus('success');
    } catch (error) {
      console.error('Error refreshing tilesets:', error);
      setMarketplaceStatus('error');
    } finally {
      setLoading(false);
    }
  };

  // Render a tile canvas with specific tileset
  const renderTileCanvas = (tileIndex, tilesetId, size = 40, rotation = 0) => {
    const image = tilesetImages[tilesetId];
    
    if (!image) return null;
    
    return (
      <canvas
        ref={canvas => {
          if (canvas && image) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, size, size);
            
            // Calculate coordinates
            const { sourceX, sourceY } = getTileCoordinates(tileIndex);
            
            // Save the context state before transformations
            ctx.save();
            
            // Move to the center of the canvas for rotation
            ctx.translate(size/2, size/2);
            
            // Convert degrees to radians and rotate
            const angleInRadians = (rotation * Math.PI) / 180;
            ctx.rotate(angleInRadians);
            
            // Draw the image centered and rotated
            ctx.drawImage(
              image,
              sourceX, // sourceX
              sourceY, // sourceY
              TILE_SIZE, // sourceWidth
              TILE_SIZE, // sourceHeight
              -size/2, // destX (negative half-size to center)
              -size/2, // destY (negative half-size to center)
              size, // destWidth
              size  // destHeight
            );
            
            // Restore the context to its original state
            ctx.restore();
          }
        }}
        width={size}
        height={size}
        className="mx-auto"
        style={{ display: 'block' }}
      />
    );
  };

  // Get tiles to display based on current section filter and tile type
  // UPDATED: Now returns objects with both tilesetId and tileId
  const displayTiles = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    let sectionFilter = null;
    if (tileType === 'floor') sectionFilter = currentSection;
    else if (tileType === 'wall') sectionFilter = currentWallSection;
    else if (tileType === 'shadow') sectionFilter = currentShadowSection;
    
    let result = [];
    
    // If no section filter, show all tiles for this category
    if (!sectionFilter) {
      // Collect all tiles from all sections with tileset information
      for (const [sectionKey, section] of Object.entries(categorySections)) {
        const { startIndex, count, tilesetId } = section;
        for (let i = 0; i < count; i++) {
          result.push({
            tileIndex: startIndex + i,
            tilesetId: tilesetId,
            sectionKey: sectionKey,
            sectionName: section.name,
            tilesetName: section.tilesetName
          });
        }
      }
    } else {
      // Show only tiles from the selected section
      const section = categorySections[sectionFilter];
      if (section) {
        const { startIndex, count, tilesetId } = section;
        result = Array.from({ length: count }, (_, i) => ({
          tileIndex: startIndex + i,
          tilesetId: tilesetId,
          sectionKey: sectionFilter,
          sectionName: section.name,
          tilesetName: section.tilesetName
        }));
      }
    }
    
    return result;
  }, [isInitialized, sections, tileType, currentSection, currentWallSection, currentShadowSection]);

  // Get section options for the dropdown
  const sectionOptions = useMemo(() => {
    if (!isInitialized) return [];
    
    const categorySections = sections[tileType] || {};
    
    return Object.entries(categorySections).map(([key, section]) => ({
      value: key,
      label: `${section.name} (${section.tilesetName})`
    }));
  }, [isInitialized, sections, tileType]);

  // Enhanced tile selection handler with comprehensive debugging
  const handleTileSelection = (tileId, tilesetId, source = 'unknown') => {
    console.log('🚀 [TilePalette] handleTileSelection called:', {
      source,
      tileId: { value: tileId, type: typeof tileId },
      tilesetId: { value: tilesetId, type: typeof tilesetId },
      tilesetIdIsNull: tilesetId === null,
      tilesetIdIsUndefined: tilesetId === undefined,
      onSelectTileType: typeof onSelectTile,
      onSelectTileExists: !!onSelectTile
    });

    if (typeof onSelectTile === 'function') {
      console.log('🟢 [TilePalette] Calling onSelectTile with params:', tileId, tilesetId);
      onSelectTile(tileId, tilesetId);
      
      // Verify the call was made by checking if parameters were passed correctly
      setTimeout(() => {
        console.log('🔍 [TilePalette] Post-call verification - parameters sent:', {
          tileId,
          tilesetId,
          bothDefined: tileId !== undefined && tilesetId !== undefined
        });
      }, 0);
    } else {
      console.error('🔴 [TilePalette] onSelectTile is not a function!', {
        receivedType: typeof onSelectTile,
        receivedValue: onSelectTile
      });
    }
  };

  return (
    <div className="bg-stone-800 border-t border-stone-700 p-2 max-h-64 overflow-y-auto">
      {/* Tile Type Selector with Marketplace Button */}
      <div className="flex flex-col space-y-2 mb-4">
        <div className="flex justify-between items-center">
          <h3 className="text-sm font-mono text-teal-400">TILE TYPE</h3>
          
          {/* Buttons for Selected Tile */}
          <div className="flex items-center">
            {/* Refresh Button */}
            <button 
              className="text-green-400 hover:text-green-300 flex items-center mr-2"
              onClick={refreshTilesets}
              disabled={loading}
              title="Refresh Tilesets"
            >
              <RotateCw size={16} className={`mr-1 ${loading ? 'animate-spin' : ''}`} />
              <span className="text-xs">{loading ? '' : ''}</span>
            </button>
            
            {/* Rotate Button */}
            <button 
              className="text-blue-400 hover:text-blue-300 flex items-center mr-2"
              onClick={() => {
                // Calculate the new rotation value
                const newRotation = (localRotation + 90) % 360;
                
                // Update local state immediately for visual feedback
                setLocalRotation(newRotation);
                
                // Then notify parent (if callback exists) 
                if (typeof onRotateTile === 'function') {
                  onRotateTile(newRotation);
                }
              }}
              title="Rotate tile"
            >
              <RotateCw size={16} className="mr-1" />
              <span className="text-xs" id="tile-rotation-display">{localRotation}°</span>
            </button>
            
            {/* Favorite Button */}
            {isFavorited ? (
              <button 
                className="text-pink-500 hover:text-pink-400 flex items-center mr-2"
                onClick={removeFromFavorites}
                title="Remove from favorites"
              >
                <Heart size={16} fill="currentColor" className="mr-1" />
                <span className="text-xs"></span>
              </button>
            ) : (
              <button 
                className="text-gray-400 hover:text-pink-500 flex items-center mr-2"
                onClick={addToFavorites}
                title="Add to favorites"
                disabled={isAddingToFavorites}
              >
                <Heart size={16} className="mr-1" />
                <span className="text-xs">{isAddingToFavorites ? '' : ''}</span>
              </button>
            )}
          </div>
        </div>
        
        {addFavoriteError && (
          <div className="text-red-500 text-xs mb-2">{addFavoriteError}</div>
        )}
        
        {/* Tile Type Select */}
        <select
          className="bg-stone-700 text-teal-300 text-sm rounded p-2 w-full border-none"
          value={tileType}
          onChange={(e) => onChangeTileType(e.target.value)}
        >
          {tileTypes.map(type => (
            <option key={type.id} value={type.id}>{type.name}</option>
          ))}
        </select>
      </div>
      
      {/* Favorite Tiles Section */}
      {Array.isArray(favoriteTiles) && favoriteTiles.length > 0 && (
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-mono text-stone-400">FAVORITE TILES</h3>
            <button 
              className="text-xs text-stone-400 hover:text-stone-300"
              onClick={() => setShowFavoritesSection(!showFavoritesSection)}
            >
              {showFavoritesSection ? 'Hide' : 'Show'}
            </button>
          </div>
          
          {showFavoritesSection && (
            <div className="grid grid-cols-5 gap-1 justify-items-center mb-3">
              {Array.isArray(favoriteTiles) && favoriteTiles.map((tile) => (
                <div
                  key={`fav-${tile.tileset_id || 'unknown'}-${tile.tile_type}-${tile.tile_index}`}
                  className={`rounded cursor-pointer border ${
                    selectedTileId === tile.tile_index && 
                    tileType === tile.tile_type &&
                    selectedTilesetId === (tile.tileset_id || null)
                      ? 'bg-teal-900 border-teal-500' 
                      : 'hover:bg-stone-700 border-transparent'
                  }`}
                  onClick={() => {
                    console.log('🎯 [TilePalette] FAVORITE TILE CLICKED:', {
                      tileIndex: tile.tile_index,
                      tilesetId: tile.tileset_id,
                      tileType: tile.tile_type,
                      currentSelected: { selectedTileId, selectedTilesetId, tileType },
                      rawTileData: tile
                    });
                    
                    // Use the enhanced handler
                    handleTileSelection(tile.tile_index, tile.tileset_id || null, 'favorite');
                    
                    // Change tile type if needed
                    if (tile.tile_type !== tileType) {
                      console.log('🔄 [TilePalette] Changing tile type from', tileType, 'to', tile.tile_type);
                      onChangeTileType(tile.tile_type);
                    }
                  }}
                  title={getTileName(tile.tile_index, tile.tile_type)}
                >
                  <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                    {tile.tileset_id && tilesetImages[tile.tileset_id]
                      ? renderTileCanvas(
                          tile.tile_index, 
                          tile.tileset_id, 
                          40, 
                          selectedTileId === tile.tile_index && 
                          tileType === tile.tile_type && 
                          selectedTilesetId === tile.tileset_id ? selectedRotation : 0
                        )
                      : <div className="w-full h-full flex items-center justify-center text-xs text-stone-500">Loading</div>
                    }
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
      
      {/* Section filter dropdown */}
      <div className="flex justify-between items-center mb-2">
        <h3 className="text-sm font-mono text-teal-400">
          {tileType === 'floor' ? 'FLOORS' : 
          tileType === 'wall' ? 'WALLS' : 
          tileType === 'shadow' ? 'SHADOWS' : 
          tileType === 'door' ? 'DOORS' : 'TILES'}
        </h3>
        
        {/* Section filter dropdown */}
        {tileType !== 'door' && (
          <select 
            className="bg-stone-700 text-teal-300 text-xs rounded p-1 border-none"
            value={
              tileType === 'floor' ? currentSection || "" : 
              tileType === 'wall' ? currentWallSection || "" : 
              tileType === 'shadow' ? currentShadowSection || "" : ""
            }
            onChange={(e) => {
              const value = e.target.value || null;
              if (tileType === 'floor') setCurrentSection(value);
              else if (tileType === 'wall') setCurrentWallSection(value);
              else if (tileType === 'shadow') setCurrentShadowSection(value);
            }}
          >
            <option value="">All Tiles</option>
            {sectionOptions.map(option => (
              <option key={option.value} value={option.value}>{option.label}</option>
            ))}
          </select>
        )}
      </div>
      
      {/* Door tile simple selector */}
      {tileType === 'door' && (
        <div className="mb-2">
          <div className="grid grid-cols-2 gap-2">
            <div 
              className="bg-stone-700 p-3 rounded cursor-pointer border-2 border-teal-500 text-center"
              onClick={() => {
                console.log('🚪 [TilePalette] DOOR TILE CLICKED');
                handleTileSelection(0, null, 'door');
              }}
            >
              <div className="bg-slate-900 h-10 w-full flex items-center justify-center">
                <div className="bg-amber-700 h-5 w-8"></div>
              </div>
              <div className="mt-1 text-xs text-teal-300">Basic Door</div>
            </div>
          </div>
        </div>
      )}
      
      {/* Tiles grid - shown for all tile types except door */}
      {tileType !== 'door' && (
        loading ? (
          <div className="text-center p-4 text-stone-400">Loading...</div>
        ) : displayTiles.length === 0 ? (
          <div className="text-center p-6 text-stone-400 bg-stone-900 rounded-lg border border-stone-700">
            <div className="mb-4">
              <Store size={48} className="mx-auto text-stone-500 mb-3" />
              <h3 className="text-lg font-semibold text-teal-400 mb-2">No Tilesets Available</h3>
              <p className="text-sm mb-4">
                You haven't selected any tilesets for {tileType} tiles yet. 
                Visit the marketplace to browse and select tilesets to use in your maps.
              </p>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-5 gap-1 justify-items-center">
            {displayTiles.map(tile => (
              <div
                key={`${tile.tilesetId}-${tile.tileIndex}`}
                className={`rounded cursor-pointer border ${
                  selectedTileId === tile.tileIndex && selectedTilesetId === tile.tilesetId
                    ? 'bg-teal-900 border-teal-500' 
                    : 'hover:bg-stone-700 border-transparent'
                }`}
                onClick={() => {
                  // NEW DEBUG: Add selection check before existing logs
                  console.log('🔍 TILE SELECTION CHECK:', {
                    clickedTile: { tileIndex: tile.tileIndex, tilesetId: tile.tilesetId },
                    currentSelection: { selectedTileId, selectedTilesetId },
                    matches: {
                      tileIdMatch: selectedTileId === tile.tileIndex,
                      tilesetIdMatch: selectedTilesetId === tile.tilesetId,
                      bothMatch: selectedTileId === tile.tileIndex && selectedTilesetId === tile.tilesetId
                    },
                    types: {
                      selectedTileIdType: typeof selectedTileId,
                      selectedTilesetIdType: typeof selectedTilesetId,
                      tileTileIndexType: typeof tile.tileIndex,
                      tileTilesetIdType: typeof tile.tilesetId
                    }
                  });

                  console.log('🟢 [TilePalette] REGULAR TILE CLICKED:', {
                    tileIndex: tile.tileIndex,
                    tilesetId: tile.tilesetId,
                    sectionName: tile.sectionName,
                    tilesetName: tile.tilesetName,
                    currentSelected: { selectedTileId, selectedTilesetId, tileType },
                    rawTileData: tile
                  });
                  
                  // Use the enhanced handler
                  handleTileSelection(tile.tileIndex, tile.tilesetId, 'regular');
                }}
                title={`${tile.sectionName} - ${dynamicTileRegistry.getTileName(tile.tileIndex, tileType)} (${tile.tilesetName})`}
              >
                <div className="w-10 h-10 bg-stone-900 relative overflow-hidden flex items-center justify-center">
                  {renderTileCanvas(
                    tile.tileIndex, 
                    tile.tilesetId, 
                    40, 
                    selectedTileId === tile.tileIndex && selectedTilesetId === tile.tilesetId ? selectedRotation : 0
                  )}
                </div>
              </div>
            ))}
          </div>
        )
      )}
    </div>
  );
};

export default TilePalette;

================
File: src/components/windows/mapeditor/utils/dynamicTileRegistry.js
================
/**
 * Dynamic tile registry and helper functions for managing tileset images
 * This version supports loading tilesets from the server
 */
import axios from 'axios';
import API_CONFIG from '../../../../config/api';

// Tile dimensions and sprite sheet configuration
export const TILE_SIZE = 48; // Size of each tile in pixels
export const DEFAULT_TILESET_COLS = 16; // Default number of columns in the sprite sheet

// Import default tilesets for fallback
import defaultFloorTilesetImage from '../../../../assets/sheets/floors/uf_terrain_sheet.png';
import defaultWallTilesetImage from '/sheets/walls/uf_terrain_sheet_walls.png';
import defaultShadowTilesetImage from '/sheets/shadows/uf_terrain_shadows.png';

// Dynamic tileset registry
let allTilesets = []; // All available tilesets (for rendering)
let selectedTilesets = []; // User-selected tilesets (for palette)
let sections = {
  floor: {},
  wall: {},
  shadow: {},
  door: {},
  object: {}
};
let selectedSections = { // Only sections from selected tilesets (for palette)
  floor: {},
  wall: {},
  shadow: {},
  door: {},
  object: {}
};
let tilesetImages = {}; // All tileset images (for rendering)
let initialized = false;

// Default sections (same as original tileRegistry)
export const DEFAULT_FLOOR_SECTIONS = {
  BLUE_FLOORS: { startIndex: 0, count: 5, name: "Blue Stone Floors" },
  GRAY_FLOORS: { startIndex: 16, count: 5, name: "Gray Stone Floors" },
  DARK_FLOORS: { startIndex: 32, count: 5, name: "Dark Stone Floors" },
  DIRT: { startIndex: 48, count: 2, name: "Dirt" },
  GRASS: { startIndex: 64, count: 2, name: "Grass" },
  SAND: { startIndex: 80, count: 2, name: "Sand" },
  STONE_PATTERN: { startIndex: 96, count: 3, name: "Stone Pattern" },
  CHECKERED: { startIndex: 112, count: 3, name: "Checkered" },
};

export const DEFAULT_WALL_SECTIONS = {
  STONE_WALLS: { startIndex: 0, count: 8, name: "Stone Walls" },
  BRICK_WALLS: { startIndex: 16, count: 8, name: "Brick Walls" },
  WOOD_WALLS: { startIndex: 32, count: 4, name: "Wooden Walls" },
};

export const DEFAULT_SHADOW_SECTIONS = {
  SHADOWS: { startIndex: 0, count: 4, name: "Shadows" }
};

/**
 * Initialize the tile registry - loads ALL available tilesets for rendering,
 * and tracks which ones are selected for the palette
 * @returns {Promise<boolean>} True if initialization succeeded
 */
export const initializeTileRegistry = async () => {
  if (initialized) return true;
  
  try {
    const token = localStorage.getItem('auth_token');
    if (!token) {
      console.log('No auth token found, initializing with empty state');
      selectedTilesets = [];
      allTilesets = [];
      initialized = true;
      return true;
    }
    
    // Fetch ALL available tilesets (for rendering)
    console.log('Fetching all available tilesets for rendering...');
    const allTilesetsResponse = await axios.get(
      `${API_CONFIG.BASE_URL}/tilesets`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    
    // Fetch user-selected tilesets (for palette)
    console.log('Fetching user-selected tilesets for palette...');
    const selectedResponse = await axios.get(
      `${API_CONFIG.BASE_URL}/tilesets/user/selected`,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    
    // Store all tilesets and selected tilesets
    allTilesets = Array.isArray(allTilesetsResponse.data) ? allTilesetsResponse.data : [];
    selectedTilesets = Array.isArray(selectedResponse.data) ? selectedResponse.data : [];
    
    console.log(`Found ${allTilesets.length} total tilesets, ${selectedTilesets.length} selected`);
    
    // Load images for ALL available tilesets (so any tile can be rendered)
    for (const tileset of allTilesets) {
      if (!tileset.sections || !Array.isArray(tileset.sections)) {
        console.warn(`Tileset ${tileset.id} has no sections`);
        continue;
      }
      
      // Preload tileset image using the API endpoint
      const tilesetImage = new Image();
      tilesetImage.src = `${API_CONFIG.BASE_URL}/tilesets/${tileset.id}/image`;
      
      // Wait for image to load
      await new Promise((resolve) => {
        tilesetImage.onload = resolve;
        tilesetImage.onerror = () => {
          console.error(`Failed to load tileset image for ${tileset.name}`);
          resolve();
        };
      });
      
      // Store the image reference
      tilesetImages[tileset.id] = tilesetImage;
      
      // Organize ALL sections by category (for tile name lookups and rendering)
      for (const section of tileset.sections) {
        if (!sections[section.category]) {
          sections[section.category] = {};
        }
        
        const sectionKey = `${tileset.id}_${section.id}`;
        sections[section.category][sectionKey] = {
          tilesetId: tileset.id,
          sectionId: section.id,
          startIndex: section.start_index,
          count: section.count,
          name: section.section_name,
          tilesetName: tileset.name
        };
      }
    }
    
    // Organize SELECTED sections by category (for palette display) ah
    for (const tileset of selectedTilesets) {
      if (!tileset.sections || !Array.isArray(tileset.sections)) {
        continue;
      }
      
      for (const section of tileset.sections) {
        if (!selectedSections[section.category]) {
          selectedSections[section.category] = {};
        }
        
        const sectionKey = `${tileset.id}_${section.id}`;
        selectedSections[section.category][sectionKey] = {
          tilesetId: tileset.id,
          sectionId: section.id,
          startIndex: section.start_index,
          count: section.count,
          name: section.section_name,
          tilesetName: tileset.name
        };
      }
    }
    
    console.log('Tile registry initialized - all tilesets loaded for rendering, selected tilesets tracked for palette');
    initialized = true;
    
    return true;
  } catch (error) {
    console.error('Failed to initialize tile registry:', error);
    // Initialize with empty state instead of falling back to defaults
    selectedTilesets = [];
    allTilesets = [];
    initialized = true;
    return false;
  }
};

/**
 * Initialize with default tilesets
 */
const initializeWithDefaults = () => {
  // Create default floor sections
  Object.entries(DEFAULT_FLOOR_SECTIONS).forEach(([key, section]) => {
    sections.floor[key] = {
      tilesetId: 'default_floor',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Floor Tileset'
    };
  });
  
  // Create default wall sections
  Object.entries(DEFAULT_WALL_SECTIONS).forEach(([key, section]) => {
    sections.wall[key] = {
      tilesetId: 'default_wall',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Wall Tileset'
    };
  });
  
  // Create default shadow sections
  Object.entries(DEFAULT_SHADOW_SECTIONS).forEach(([key, section]) => {
    sections.shadow[key] = {
      tilesetId: 'default_shadow',
      sectionId: key,
      startIndex: section.startIndex,
      count: section.count,
      name: section.name,
      tilesetName: 'Default Shadow Tileset'
    };
  });
  
  // Add default images
  tilesetImages['default_floor'] = defaultFloorTilesetImage;
  tilesetImages['default_wall'] = defaultWallTilesetImage;
  tilesetImages['default_shadow'] = defaultShadowTilesetImage;
  
  initialized = true;
};

/**
 * Get a tileset image for a specific category
 * @param {string} category - The tile category (floor, wall, shadow, etc.)
 * @param {string|null} tilesetId - Optional specific tileset ID
 * @returns {HTMLImageElement|null} - The tileset image or null if not found
 */
export const getTilesetImageForCategory = (category, tilesetId = null) => {
  // If a specific tileset ID is provided and exists, return that
  if (tilesetId && tilesetImages[tilesetId]) {
    return tilesetImages[tilesetId];
  }
  
  // Otherwise, find the first tileset that has sections for this category
  // Use selectedTilesets for fallback (palette compatibility)
  for (const tileset of selectedTilesets) {
    if (tileset.sections && tileset.sections.some(s => s.category === category)) {
      if (tilesetImages[tileset.id]) {
        return tilesetImages[tileset.id];
      }
    }
  }
  
  // Return null if no user-selected tileset is available for this category
  return null;
};

/**
 * Get sections for a specific category (for palette display - only selected tilesets)
 * @param {string} category - The tile category (floor, wall, shadow, etc.)
 * @returns {Object} - Object of sections for the category
 */
export const getSectionsForCategory = (category) => {
  return selectedSections[category] || {};
};

/**
 * Get all sections from selected tilesets (for palette display)
 * @returns {Object} - Sections organized by category and tileset
 */
export const getAllSections = () => {
  return selectedSections;
};

/**
 * Get all sections from ALL tilesets (for rendering and tile name lookups)
 * @returns {Object} - All sections organized by category and tileset
 */
export const getAllAvailableSections = () => {
  return sections;
};

/**
 * Get a tileset image by ID (for rendering any tile from any tileset)
 * @param {string} tilesetId - The tileset ID
 * @returns {HTMLImageElement|null} - The tileset image or null if not found
 */
export const getTilesetImageById = (tilesetId) => {
  return tilesetImages[tilesetId] || null;
};

/**
 * Get all available tilesets (for rendering)
 * @returns {Array} - Array of all available tilesets
 */
export const getAllTilesets = () => {
  return allTilesets;
};

/**
 * Get all available categories
 * @returns {string[]} - Array of category names
 */
export const getCategories = () => {
  return Object.keys(sections).filter(category => 
    Object.keys(sections[category]).length > 0
  );
};

/**
 * Get tile coordinates in the sprite sheet
 * @param {number} tileIndex - The index of the tile
 * @param {number} cols - Number of columns in the sprite sheet
 * @returns {Object} - Object with source coordinates for the tile
 */
export const getTileCoordinates = (tileIndex, cols = DEFAULT_TILESET_COLS) => {
  const col = tileIndex % cols;
  const row = Math.floor(tileIndex / cols);
  
  return {
    sourceX: col * TILE_SIZE,
    sourceY: row * TILE_SIZE,
    sourceWidth: TILE_SIZE,
    sourceHeight: TILE_SIZE,
    col, 
    row
  };
};

/**
 * Gets a descriptive name for a tile based on its index
 * @param {number} tileIndex - The index of the tile
 * @param {string} tileType - The type of tile ('floor', 'wall', etc.)
 * @param {string|null} tilesetId - Optional specific tileset ID
 * @returns {string} A human-readable name for the tile
 */
export const getTileName = (tileIndex, tileType = 'floor', tilesetId = null) => {
  // Use ALL available sections (not just selected) for tile name lookups
  // This ensures tiles from deselected tilesets still get proper names
  const categorySections = sections[tileType] || {};
  
  for (const [sectionKey, section] of Object.entries(categorySections)) {
    // Skip sections from other tilesets if a specific tileset ID is provided
    if (tilesetId && section.tilesetId !== tilesetId) continue;
    
    if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
      const tileNumber = tileIndex - section.startIndex + 1;
      return `${section.name} ${tileNumber} (${section.tilesetName})`;
    }
  }
  
  // Fallback if no section matches
  return `${tileType.charAt(0).toUpperCase() + tileType.slice(1)} Tile ${tileIndex}`;
};

/**
 * Get tilesets that have been selected by the user
 * @returns {Array} - Array of selected tilesets
 */
export const getSelectedTilesets = () => {
  return selectedTilesets;
};

/**
 * Check if the registry has been initialized
 * @returns {boolean} - True if initialized
 */
export const isInitialized = () => {
  return initialized;
};

/**
 * Force re-initialization of the tile registry
 * Useful when user selects new tilesets in the marketplace
 */
export const refreshTileRegistry = async () => {
  initialized = false;
  allTilesets = [];
  selectedTilesets = [];
  sections = {
    floor: {},
    wall: {},
    shadow: {},
    door: {},
    object: {}
  };
  selectedSections = {
    floor: {},
    wall: {},
    shadow: {},
    door: {},
    object: {}
  };
  tilesetImages = {};
  
  // Re-initialize
  return await initializeTileRegistry();
};

export default {
  initializeTileRegistry,
  getTilesetImageForCategory,
  getTilesetImageById,
  getSectionsForCategory,
  getAllSections,
  getAllAvailableSections,
  getAllTilesets,
  getCategories,
  getTileCoordinates,
  getTileName,
  getSelectedTilesets,
  isInitialized,
  refreshTileRegistry,
  TILE_SIZE,
  DEFAULT_TILESET_COLS
};

================
File: src/components/windows/mapeditor/utils/mapUtils.js
================
/**
 * Map editor utility functions
 */

/**
 * Creates a new empty map with default settings
 * @param {string} name - Name of the map
 * @param {number} width - Width of the map in cells
 * @param {number} height - Height of the map in cells
 * @param {number} gridSize - Size of each grid cell in pixels
 * @returns {Object} A new map object
 */
export const createEmptyMap = (name = 'New Map', width = 20, height = 15, gridSize = 32) => {
  return {
    version: '1.0',
    name,
    gridSize,
    width,
    height,
    defaultTile: 'floor',
    layers: [
      {
        name: 'terrain',
        visible: true,
        cells: []
      }
    ],
    tokenPositions: [],
    // Add viewport property with default values
    viewport: {
      x: 0,
      y: 0,
      scale: 1 // For zoom level
    },
    metadata: {
      author: 'user',
      created: new Date().toISOString(),
      modified: new Date().toISOString()
    }
  };
};

/**
 * Updates the viewport data in the map
 * @param {Object} mapData - The map data
 * @param {number} x - The viewport x position
 * @param {number} y - The viewport y position
 * @param {number} scale - The viewport scale/zoom level
 * @returns {Object} The updated map data
 */
export const updateViewport = (mapData, x, y, scale) => {
  if (!mapData) return mapData;
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  
  // Create or update viewport property
  newMapData.viewport = {
    x: x !== undefined ? x : (mapData.viewport?.x || 0),
    y: y !== undefined ? y : (mapData.viewport?.y || 0),
    scale: scale !== undefined ? scale : (mapData.viewport?.scale || 1)
  };
  
  return newMapData;
};

/**
 * Parses a map file string into a map object
 * @param {string} mapContent - The string content of the map file
 * @returns {Object} The parsed map object
 * @throws {Error} If the map file is invalid
 */
export const parseMapFile = (mapContent) => {
  try {
    const mapData = JSON.parse(mapContent);
    
    // Validate the map structure
    if (!mapData.version || !mapData.layers || !Array.isArray(mapData.layers)) {
      throw new Error('Invalid map file format');
    }
    
    // Ensure viewport property exists
    if (!mapData.viewport) {
      console.log("Adding missing viewport data during loading");
      mapData.viewport = { x: 0, y: 0, scale: 1 };
    }
    
    // Ensure all cells have a rotation property and shadow cells have tileId
    mapData.layers.forEach(layer => {
      if (layer.cells && Array.isArray(layer.cells)) {
        layer.cells.forEach(cell => {
          // If rotation doesn't exist, add it with default value of 0
          if (cell.rotation === undefined) {
            cell.rotation = 0;
          } else {
            // Ensure rotation is a number
            cell.rotation = Number(cell.rotation);
          }
          
          // If it's a shadow type but missing tileId, add default tileId
          if (cell.type === 'shadow' && cell.tileId === undefined) {
            cell.tileId = 0;
            console.log("Added missing tileId to shadow cell during loading:", cell);
          }
        });
      }
    });
    
    console.log("Parsed map data with proper rotation values:", mapData);
    return mapData;
  } catch (err) {
    console.error('Error parsing map file:', err);
    throw new Error('Failed to parse map file. It may be corrupted or in an invalid format.');
  }
};

/**
 * Serializes a map object to a string
 * @param {Object} mapData - The map object to serialize
 * @returns {string} The serialized map as a JSON string
 */
export const serializeMap = (mapData) => {
  try {
    // Update the modified timestamp
    const updatedMapData = {
      ...mapData,
      metadata: {
        ...mapData.metadata,
        modified: new Date().toISOString()
      }
    };
    
      // CRITICAL FIX: Process all cells to ensure they have rotation property and shadow cells have tileId
      if (updatedMapData.layers && Array.isArray(updatedMapData.layers)) {
        updatedMapData.layers = updatedMapData.layers.map(layer => {
          if (layer.cells && Array.isArray(layer.cells)) {
            layer.cells = layer.cells.map(cell => {
              let updatedCell = { ...cell };
              
              // Get the most current rotation value - prioritize global state
              const globalRotation = window.currentMapRotation;
              
              // If rotation doesn't exist, add it with current global value or default to 0
              if (updatedCell.rotation === undefined) {
                updatedCell.rotation = globalRotation !== undefined ? Number(globalRotation) : 0;
              }
              // If global rotation is set, use it to update existing cells
              else if (globalRotation !== undefined) {
                updatedCell.rotation = Number(globalRotation);
              }
              // Otherwise ensure rotation is a number (not string)
              else if (typeof updatedCell.rotation !== 'number') {
                updatedCell.rotation = Number(updatedCell.rotation);
              }
              
              // Debug shadow tile tileId values before serialization
              if (updatedCell.type === 'shadow') {
                console.log(`SERIALIZE: Shadow cell at (${updatedCell.x}, ${updatedCell.y}) has tileId: ${updatedCell.tileId}, tilesetId: ${updatedCell.tilesetId}`);
                
                // Ensure shadow tiles always have a tileId property
                if (updatedCell.tileId === undefined) {
                  updatedCell.tileId = 0;
                  console.log(`WARNING: Missing tileId for shadow tile at (${updatedCell.x}, ${updatedCell.y}), defaulting to 0`);
                }
              }
              
              return updatedCell;
            });
          }
          return layer;
        });
      }
    
    // Ensure all shadow tiles have a valid tileId before serialization
    console.log("=== ENSURING SHADOW TILES HAVE TILEID BEFORE SERIALIZATION ===");
    let shadowTileCount = 0;
    updatedMapData.layers.forEach(layer => {
      if (layer.cells && Array.isArray(layer.cells)) {
        layer.cells.forEach(cell => {
          if (cell.type === 'shadow') {
            shadowTileCount++;
            // Make sure tileId is present and is a number
            if (cell.tileId === undefined || cell.tileId === null) {
              console.log(`FIXING: Shadow Cell (${cell.x}, ${cell.y}) missing tileId, setting to 0`);
              cell.tileId = 0;
            } else if (typeof cell.tileId !== 'number') {
              console.log(`FIXING: Shadow Cell (${cell.x}, ${cell.y}) has non-number tileId: ${cell.tileId}, converting to number`);
              cell.tileId = Number(cell.tileId);
            } else {
              console.log(`OK: Shadow Cell (${cell.x}, ${cell.y}) has tileId=${cell.tileId}, tilesetId=${cell.tilesetId}`);
            }
          }
        });
      }
    });
    console.log(`Total shadow tiles processed: ${shadowTileCount}`);
    
    // Use a replacer function to ensure values are properly serialized
    const serialized = JSON.stringify(updatedMapData, (key, value) => {
      // Handle rotation to ensure it's always saved as a number
      if (key === 'rotation') {
        return value === undefined ? 0 : Number(value);
      }
      
      // No need for special tileId handling here since we've already 
      // ensured all shadow cells have a proper tileId value above
      return value;
    }, 2);
    
    // Debug the serialized output for shadow cells
    try {
      const parsed = JSON.parse(serialized);
      console.log("=== SHADOW CELLS AFTER SERIALIZATION (parsed back) ===");
      parsed.layers.forEach(layer => {
        layer.cells.forEach(cell => {
          if (cell.type === 'shadow') {
            console.log(`Serialized Shadow Cell (${cell.x}, ${cell.y}): tileId=${cell.tileId}, tilesetId=${cell.tilesetId}, type=${typeof cell.tileId}`);
          }
        });
      });
    } catch (err) {
      console.error("Failed to parse serialized map for debug:", err);
    }
    
    return serialized;
  } catch (err) {
    console.error('Error serializing map:', err);
    throw new Error('Failed to serialize map data.');
  }
};

/**
 * Applies the saved viewport position to the canvas
 * @param {Object} mapData - The map data containing viewport information
 * @param {Object} canvas - The canvas element or rendering context
 * @param {Function} setViewportState - Optional callback to update viewport state in React/Vue
 * @returns {void}
 */
export const applyViewport = (mapData, canvas, setViewportState = null) => {
  if (!mapData || !mapData.viewport) return;
  
  const { x, y, scale } = mapData.viewport;
  
  // If you're using a canvas directly
  if (canvas && canvas.getContext) {
    const ctx = canvas.getContext('2d');
    // Reset any existing transformations
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    // Apply the saved viewport transformation
    ctx.setTransform(scale, 0, 0, scale, x, y);
  }
  
  // If you're using a state-based approach (React/Vue)
  if (setViewportState) {
    setViewportState({ x, y, scale });
  }
  
  console.log(`Applied viewport from map: x=${x}, y=${y}, scale=${scale}`);
};

/**
 * Finds a cell in a specific layer at the given coordinates
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to search in
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Object|null} The cell object if found, null otherwise
 */
export const findCellInLayer = (mapData, layerIndex, x, y) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return null;
  
  const layer = mapData.layers[layerIndex];
  return layer.cells.find(cell => cell.x === x && cell.y === y) || null;
};

/**
 * Adds or updates a cell in a layer
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to update
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @param {string} type - The type of the cell
 * @param {number} tileId - The ID of the tile (optional)
 * @param {number} rotation - The rotation angle in degrees (0, 90, 180, 270) (optional)
 * @param {string} tilesetId - The ID of the tileset (optional)
 * @returns {Object} The updated map data
 */
export const setCellInLayer = (mapData, layerIndex, x, y, type, tileId, rotation = 0, tilesetId = null) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return mapData;
  
  // Use global rotation state as fallback if available
  const rotationValue = rotation !== undefined ? rotation : (window.currentMapRotation || 0);
  
  // Ensure rotation is a number with explicit conversion
  const numRotation = parseInt(rotationValue, 10) || 0;
  
  console.log(`setCellInLayer called with: x=${x}, y=${y}, type=${type}, tileId=${tileId}, tilesetId=${tilesetId}`);
  console.log(`Using rotation: ${numRotation} (converted from ${rotation}, global=${window.currentMapRotation})`);
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  const layerData = { ...newMapData.layers[layerIndex] };
  
  // Clone the cells array
  layerData.cells = [...layerData.cells];
  
  // Find if the cell already exists in this layer
  const existingCellIndex = layerData.cells.findIndex(cell => cell.x === x && cell.y === y);
  
  // Create cell data with required properties
  const cellData = { x, y, type };
  
  // For shadow tiles, always include tileId (using the provided tileId or defaulting to 0)
  // For other types, include tileId only if explicitly provided
  if (type === 'shadow') {
    // DEBUG: Log the incoming tileId value to track exactly what's being passed
    console.log(`EDIT: Shadow tile at (${x}, ${y}) - Incoming tileId: ${tileId}, tilesetId: ${tilesetId}, type: ${typeof tileId}`);
    
    // CRITICAL FIX: Always explicitly set tileId for shadow tiles
    // Never default to 0 if tileId is provided
    cellData.tileId = tileId;
    
    // Debug the actual tileId value that was set
    console.log(`EDIT: Shadow tile tileId set to: ${cellData.tileId}`);
  } else if (tileId !== undefined) {
    // For non-shadow tiles, only include tileId if explicitly provided
    cellData.tileId = tileId;
  }
  
  // Include tilesetId if provided
  if (tilesetId !== null && tilesetId !== undefined) {
    cellData.tilesetId = tilesetId;
  }
  
  // Always include rotation in the cell data, even if it's 0
  // This ensures rotation is explicitly stored in the map file
  cellData.rotation = numRotation;
  
  if (existingCellIndex !== -1) {
    console.log(`Updating existing cell at (${x}, ${y}) with rotation=${rotation}, tilesetId=${tilesetId}`);
    // Update existing cell, preserving any properties not explicitly changed
    let updatedCell = { 
      ...layerData.cells[existingCellIndex], 
      ...cellData 
    };
    
    // CRITICAL FIX: Double-check if this is a shadow cell and ensure tileId is defined
    if (updatedCell.type === 'shadow' && updatedCell.tileId === undefined) {
      updatedCell.tileId = tileId;
      console.log(`FIX: Shadow cell at (${x}, ${y}) missing tileId in update operation, explicitly setting to ${tileId}`);
    }
    
    // Update the cell in the array
    layerData.cells[existingCellIndex] = updatedCell;
    
    // Log the updated cell to verify all properties are properly set
    console.log("Updated cell:", layerData.cells[existingCellIndex]);
  } else {
    console.log(`Adding new cell at (${x}, ${y}) with rotation=${rotation}, tilesetId=${tilesetId}`);
    // Add new cell
    layerData.cells.push(cellData);
    
    // Log the added cell to verify rotation was properly set
    console.log("Added cell:", cellData);
  }
  
  // Update the layer in the map data
  newMapData.layers[layerIndex] = layerData;
  
  return newMapData;
};

/**
 * Removes a cell from a layer
 * @param {Object} mapData - The map data
 * @param {number} layerIndex - The index of the layer to update
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Object} The updated map data
 */
export const removeCellFromLayer = (mapData, layerIndex, x, y) => {
  if (!mapData || !mapData.layers || !mapData.layers[layerIndex]) return mapData;
  
  // Clone the map data to avoid direct state mutation
  const newMapData = { ...mapData };
  const layerData = { ...newMapData.layers[layerIndex] };
  
  // Remove the cell if it exists
  layerData.cells = layerData.cells.filter(cell => !(cell.x === x && cell.y === y));
  
  // Update the layer in the map data
  newMapData.layers[layerIndex] = layerData;
  
  return newMapData;
};

/**
 * Gets all visible cells at a specific coordinate across all layers
 * @param {Object} mapData - The map data
 * @param {number} x - The x coordinate
 * @param {number} y - The y coordinate
 * @returns {Array} Array of cells at the coordinate, from bottom to top layer
 */
export const getCellsAtCoordinate = (mapData, x, y) => {
  if (!mapData || !mapData.layers) return [];
  
  const cells = [];
  
  mapData.layers.forEach((layer, index) => {
    if (layer.visible) {
      const cell = findCellInLayer(mapData, index, x, y);
      if (cell) {
        cells.push({ ...cell, layerIndex: index });
      }
    }
  });
  
  return cells;
};

/**
 * Converts screen coordinates to grid coordinates
 * @param {number} screenX - The x screen coordinate
 * @param {number} screenY - The y screen coordinate
 * @param {number} gridSize - The size of each grid cell
 * @param {Object} viewportOffset - The viewport offset { x, y }
 * @returns {Object} The grid coordinates { x, y }
 */
export const screenToGridCoordinates = (screenX, screenY, gridSize, viewportOffset) => {
  const gridX = Math.floor((screenX - viewportOffset.x) / gridSize);
  const gridY = Math.floor((screenY - viewportOffset.y) / gridSize);
  return { x: gridX, y: gridY };
};

/**
 * Converts grid coordinates to screen coordinates
 * @param {number} gridX - The x grid coordinate
 * @param {number} gridY - The y grid coordinate
 * @param {number} gridSize - The size of each grid cell
 * @param {Object} viewportOffset - The viewport offset { x, y }
 * @returns {Object} The screen coordinates { x, y }
 */
export const gridToScreenCoordinates = (gridX, gridY, gridSize, viewportOffset) => {
  const screenX = gridX * gridSize + viewportOffset.x;
  const screenY = gridY * gridSize + viewportOffset.y;
  return { x: screenX, y: screenY };
};

/**
 * Converts JSON map data to ASCII format for the roguelike game engine
 * @param {Object} mapData - The map data in JSON format
 * @returns {string} The map data in ASCII format
 */
export const convertMapToAscii = (mapData) => {
  // Create a 2D array filled with void spaces
  const width = mapData.width;
  const height = mapData.height;
  const asciiMap = Array(height).fill().map(() => Array(width).fill(' ')); // ' ' for void
  
  // Process each layer from bottom to top
  mapData.layers.forEach(layer => {
    if (!layer.visible) return;
    
    // Process each cell in the layer
    layer.cells.forEach(cell => {
      // Skip cells outside the map bounds
      if (cell.x < 0 || cell.x >= width || cell.y < 0 || cell.y >= height) return;
      
      // Map cell types to ASCII characters
      let asciiChar;
      switch(cell.type) {
        case 'wall':
          asciiChar = '#';
          break;
        case 'floor':
          asciiChar = '.';
          break;
        case 'door':
          asciiChar = '+';
          break;
        case 'grass':
          asciiChar = '"';
          break;
        case 'ashes':
          asciiChar = "'";
          break;
        case 'stairs':
          asciiChar = '>';
          break;
        case 'spawn':
          asciiChar = '@';
          break;
        default:
          // For unknown types, use a default character
          asciiChar = '?';
      }
      
      // Place the character in the grid
      asciiMap[cell.y][cell.x] = asciiChar;
    });
  });
  
  // Convert 2D array to string with newlines
  return asciiMap.map(row => row.join('')).join('\n');
};

/**
 * Converts ASCII map to JSON format
 * @param {string} asciiMap - The map data in ASCII format
 * @param {string} name - Optional name for the map
 * @returns {Object} The map data in JSON format
 */
export const convertAsciiToMap = (asciiMap, name = 'Imported Map') => {
  const lines = asciiMap.trim().split('\n');
  const height = lines.length;
  const width = lines.reduce((max, line) => Math.max(max, line.length), 0);
  
  // Create a basic map structure
  const mapData = createEmptyMap(name, width, height);
  
  // Create a terrain layer
  const terrainCells = [];
  
  // Process each character in the ASCII map
  for (let y = 0; y < lines.length; y++) {
    const line = lines[y];
    for (let x = 0; x < line.length; x++) {
      const char = line[x];
      let cellType;
      
      // Map ASCII characters to cell types
      switch(char) {
        case '#':
          cellType = 'wall';
          break;
        case '.':
          cellType = 'floor';
          break;
        case '+':
          cellType = 'door';
          break;
        case '"':
          cellType = 'grass';
          break;
        case "'":
          cellType = 'ashes';
          break;
        case '>':
          cellType = 'stairs';
          break;
        case '@':
          cellType = 'spawn';
          // Could also mark this as a player spawn point
          break;
        case ' ':
          // Void/empty space, skip
          continue;
        default:
          // Unknown character, interpret as custom type
          cellType = `custom-${char}`;
      }
      
      // Add the cell to the terrain layer
      terrainCells.push({ x, y, type: cellType });
    }
  }
  
  // Update the terrain layer with the cells
  mapData.layers[0].cells = terrainCells;
  
  return mapData;
};

================
File: src/components/windows/mapeditor/utils/tileRegistry.js
================
/**
 * Tile registry and helper functions for managing sprite sheet tiles
 */

// Import the tilesets directly
import terrainTilesetImage from '../../../../assets/sheets/floors/uf_terrain_sheet.png';
import wallTilesetImage from '/sheets/walls/uf_terrain_sheet_walls.png'; // Using absolute path from public folder
import shadowTilesetImage from '/sheets/shadows/uf_terrain_shadows.png'

// Tile dimensions and sprite sheet configuration
export const TILE_SIZE = 48; // Size of each tile in pixels
export const TILESET_COLS = 16; // Number of columns in the sprite sheet (adjust based on actual width)

// Path to the tilesets (using imported images)
export const FLOOR_TILESET_PATH = terrainTilesetImage;
export const WALL_TILESET_PATH = wallTilesetImage;
export const SHADOW_TILESET_PATH = shadowTilesetImage;

// Named sections for better organization
export const TILE_SECTIONS = {
  BLUE_FLOORS: { startIndex: 0, count: 5, name: "Blue Stone Floors" },
  GRAY_FLOORS: { startIndex: 16, count: 5, name: "Gray Stone Floors" },
  DARK_FLOORS: { startIndex: 32, count: 5, name: "Dark Stone Floors" },
  DIRT: { startIndex: 48, count: 2, name: "Dirt" },
  GRASS: { startIndex: 64, count: 2, name: "Grass" },
  SAND: { startIndex: 80, count: 2, name: "Sand" },
  STONE_PATTERN: { startIndex: 96, count: 3, name: "Stone Pattern" },
  CHECKERED: { startIndex: 112, count: 3, name: "Checkered" },
  // Add more sections as needed
};

// Wall tile sections
export const WALL_TILE_SECTIONS = {
  STONE_WALLS: { startIndex: 0, count: 8, name: "Stone Walls" },
  BRICK_WALLS: { startIndex: 16, count: 8, name: "Brick Walls" },
  WOOD_WALLS: { startIndex: 32, count: 4, name: "Wooden Walls" },
  // Add more wall sections as needed
};

export const SHADOW_TILE_SECTIONS = {
  SHADOWS: { startIndex: 0, count: 4, name: "Shadows" }
};

/**
 * Calculates pixel coordinates in the sprite sheet for a given tile index
 * @param {number} tileIndex - The index of the tile
 * @returns {Object} Object with source coordinates for the tile
 */
export const getTileCoordinates = (tileIndex) => {
  const col = tileIndex % TILESET_COLS;
  const row = Math.floor(tileIndex / TILESET_COLS);
  
  return {
    sourceX: col * TILE_SIZE,
    sourceY: row * TILE_SIZE,
    sourceWidth: TILE_SIZE,
    sourceHeight: TILE_SIZE,
    // Include calculated positions for easier debugging
    col, row
  };
};

/**
 * Gets a descriptive name for a tile based on its index
 * @param {number} tileIndex - The index of the tile
 * @param {string} tileType - The type of tile ('floor', 'wall', etc.)
 * @returns {string} A human-readable name for the tile
 */
export const getTileName = (tileIndex, tileType = 'floor') => {
  // Find which section this tile belongs to
  if (tileType === 'floor') {
    for (const [sectionKey, section] of Object.entries(TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Floor Tile ${tileIndex}`;
  } else if (tileType === 'wall') {
    for (const [sectionKey, section] of Object.entries(WALL_TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Wall Tile ${tileIndex}`;
  } else if (tileType === 'shadow') {
    for (const [sectionKey, section] of Object.entries(SHADOW_TILE_SECTIONS)) {
      if (tileIndex >= section.startIndex && tileIndex < section.startIndex + section.count) {
        const tileNumber = tileIndex - section.startIndex + 1;
        return `${section.name} ${tileNumber}`;
      }
    }
    return `Shadow Tile ${tileIndex}`;
  } else if (tileType === 'door') {
    return `Door`;
  }
  
  // Fallback if not in a named section or unknown type
  return `Tile ${tileIndex}`;
};

================
File: src/components/windows/MarketplaceWindow.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { X, Check, Upload, Info, AlertTriangle, RotateCw, Trash2 } from 'lucide-react';
import API_CONFIG from '../../config/api';
import { useAuth } from '../../context/AuthContext';
import placeholderImage from '../../assets/images/tileset-placeholder.png';

/**
 * Marketplace window component for browsing and selecting tilesets
 */
const MarketplaceWindow = ({ windowId }) => {
  const [tilesets, setTilesets] = useState([]);
  const [selectedTilesets, setSelectedTilesets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth();
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [debugInfo, setDebugInfo] = useState(null);

  // Fetch all tilesets and user-selected tilesets with enhanced debugging
  const fetchTilesets = useCallback(async () => {
    setLoading(true);
    setError(null);
    setDebugInfo(null);
    
    // Debug: Log API configuration
    const authToken = localStorage.getItem('auth_token');
    const debugData = {
      baseUrl: API_CONFIG.BASE_URL,
      tilesetsEndpoint: `${API_CONFIG.BASE_URL}/tilesets`,
      auth: authToken ? 'Token exists' : 'No token',
      tokenLength: authToken ? authToken.length : 0,
      userInfo: user ? `User: ${user.username}, Admin: ${user.is_admin}` : 'No user'
    };
    
    console.log('Marketplace API Config:', debugData);
    setDebugInfo(debugData);
    
    try {
      console.log('Attempting to fetch tilesets from:', `${API_CONFIG.BASE_URL}/tilesets`);
      
      // First try the main endpoint, then fall back to the simple endpoint if it fails
      try {
        console.log('Trying main tilesets endpoint');
        // Fetch all available tilesets
        const [tilesetsResponse, selectedResponse] = await Promise.all([
          axios.get(`${API_CONFIG.BASE_URL}/tilesets`),
          axios.get(`${API_CONFIG.BASE_URL}/tilesets/user/selected`, {
            headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
          })
        ]);

        console.log('Tilesets response:', tilesetsResponse);
        console.log('Selected tilesets response:', selectedResponse);

        setTilesets(tilesetsResponse.data || []);
        setSelectedTilesets(selectedResponse.data || []);
      } catch (mainError) {
        console.error('Main endpoint failed, trying fallback:', mainError);
        
        // Try the debug/simple endpoint as fallback
        console.log('Trying simple fallback endpoint');
        const fallbackResponse = await axios.get(`${API_CONFIG.BASE_URL}/tilesets/simple`);
        console.log('Fallback response:', fallbackResponse);
        
        if (fallbackResponse.data && Array.isArray(fallbackResponse.data)) {
          setTilesets(fallbackResponse.data);
          // We don't have selected tilesets in fallback mode
          setSelectedTilesets([]);
          
          // Still set a warning about using fallback mode
          setDebugInfo(prevDebug => ({ 
            ...prevDebug, 
            warning: 'Using fallback tileset data. Some features may be limited.',
            fallbackMode: true
          }));
        } else {
          // If even the fallback fails, re-throw the original error
          throw mainError;
        }
      }
    } catch (err) {
      console.error('Error fetching tilesets (all attempts failed):', err);
      
      // Enhanced error reporting
      const errorDetails = {
        message: err.message,
        status: err.response?.status,
        statusText: err.response?.statusText,
        responseData: err.response?.data,
        config: {
          url: err.config?.url,
          method: err.config?.method,
          headers: err.config?.headers ? 'Headers present' : 'No headers'
        }
      };
      
      console.error('Error details:', errorDetails);
      setDebugInfo(prevDebug => ({ ...prevDebug, error: errorDetails }));
      
      // Set a more informative error message
      setError(`Failed to load tilesets: ${err.message}. ${err.response ? `Server responded with ${err.response.status} ${err.response.statusText}` : 'Server unreachable'}`);
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Load tilesets on component mount
  useEffect(() => {
    fetchTilesets();
  }, [fetchTilesets]);

  // Toggle tileset selection
  const toggleTilesetSelection = async (tilesetId) => {
    try {
      const isSelected = selectedTilesets.some(t => t.id === tilesetId);
      
      if (isSelected) {
        // Deselect the tileset
        await axios.delete(`${API_CONFIG.BASE_URL}/tilesets/user/select/${tilesetId}`, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
        });
        setSelectedTilesets(prev => prev.filter(t => t.id !== tilesetId));
      } else {
        // Select the tileset
        await axios.post(`${API_CONFIG.BASE_URL}/tilesets/user/select/${tilesetId}`, {}, {
          headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
        });
        const tilesetToAdd = tilesets.find(t => t.id === tilesetId);
        if (tilesetToAdd) {
          setSelectedTilesets(prev => [...prev, tilesetToAdd]);
        }
      }
    } catch (err) {
      console.error('Error toggling tileset selection:', err);
      setError('Failed to update tileset selection. Please try again.');
    }
  };

  // Delete a tileset (admin only)
  const deleteTileset = async (tilesetId, tilesetName) => {
    // Show confirmation dialog
    const confirmed = window.confirm(`Are you sure you want to delete the tileset "${tilesetName}"? This action cannot be undone.`);
    
    if (!confirmed) {
      return;
    }
    
    try {
      await axios.delete(`${API_CONFIG.BASE_URL}/tilesets/${tilesetId}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem('auth_token')}` }
      });
      
      // Remove from local state
      setTilesets(prev => prev.filter(t => t.id !== tilesetId));
      setSelectedTilesets(prev => prev.filter(t => t.id !== tilesetId));
      
      // Success notification (could be a toast in the future)
      console.log(`Tileset "${tilesetName}" deleted successfully`);
    } catch (err) {
      console.error('Error deleting tileset:', err);
      alert(`Failed to delete tileset: ${err.response?.data?.message || err.message}`);
    }
  };

  // Check if a tileset is selected
  const isTilesetSelected = (tilesetId) => {
    return selectedTilesets.some(t => t.id === tilesetId);
  };

  // Render the tileset preview image
  const renderTilesetPreview = (tileset) => {
    return (
      <div className="w-full h-32 bg-stone-900 overflow-hidden relative">
        <img 
          src={tileset.image_path} 
          alt={`Preview of ${tileset.name}`}
          className="object-cover w-full h-full"
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = placeholderImage;
          }}
        />
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full bg-stone-800 text-stone-200 overflow-hidden">
      {/* Header */}
      <div className="p-2 border-b bg-stone-900 border-stone-700 flex justify-between items-center">
        <div>
          <h2 className="mr-2 text-teal-400">Tileset Marketplace</h2>
        </div>
        
        <div className="flex gap-2">
          <button 
            className="px-2 py-1 bg-stone-800 hover:bg-stone-700 text-teal-300 rounded text-xs flex items-center gap-1"
            onClick={fetchTilesets}
            disabled={loading}
            title="Refresh tilesets"
          >
            <RotateCw size={14} className={loading ? 'animate-spin' : ''} />
            Refresh
          </button>
          
          {user?.is_admin && (
            <button
              className="px-2 py-1 bg-stone-800 hover:bg-stone-700 text-teal-300 rounded text-xs flex items-center gap-1"
              onClick={() => setShowUploadForm(!showUploadForm)}
              title={showUploadForm ? 'Hide upload form' : 'Upload new tileset'}
            >
              <Upload size={14} />
              {showUploadForm ? 'Hide Form' : 'Upload New'}
            </button>
          )}
        </div>
      </div>

      {/* Show either the upload form OR the marketplace content */}
      {user?.is_admin && showUploadForm ? (
        // Full-window upload form
        <div className="flex-1 bg-stone-900 flex flex-col min-h-0">
          {/* Form header with close button */}
          
          {/* Scrollable form content - using absolute positioning */}
          <div className="flex-1 relative min-h-0">
            <div className="absolute inset-0 overflow-y-auto">
              <div className="p-4">
                <TilesetUploadForm 
                  onUploadComplete={() => {
                    fetchTilesets();
                    setShowUploadForm(false); // Close form after successful upload
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      ) : (
        // Marketplace content
        <div className="flex-1 overflow-auto p-4 bg-stone-900">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <div className="animate-pulse text-stone-400">Loading tilesets...</div>
          </div>
        ) : error ? (
          <div className="bg-red-900/30 text-red-300 p-4 rounded">
            <div className="flex items-center mb-2">
              <AlertTriangle size={20} className="mr-2" />
              <span className="font-semibold">API Connection Error</span>
            </div>
            <p className="mb-2">{error}</p>
            {debugInfo && (
              <div className="text-xs bg-red-900/50 p-2 rounded mt-2">
                <p className="font-semibold mb-1">Debugging Information:</p>
                <p>API URL: {debugInfo.tilesetsEndpoint}</p>
                <p>Auth Status: {debugInfo.auth}</p>
                <p>Token Length: {debugInfo.tokenLength} characters</p>
                <p>Admin Status: {user?.is_admin ? 'Admin' : 'Not admin'}</p>
                {debugInfo.error && (
                  <>
                    <p className="mt-1 font-semibold">Error Details:</p>
                    <p>Status: {debugInfo.error.status || 'None'}</p>
                    <p>Status Text: {debugInfo.error.statusText || 'None'}</p>
                    <p>URL: {debugInfo.error.config?.url || 'Unknown'}</p>
                  </>
                )}
                <div className="mt-3 flex space-x-2">
                  <button 
                    className="px-2 py-1 bg-red-800 hover:bg-red-700 rounded text-xs"
                    onClick={fetchTilesets}
                  >
                    Retry Connection
                  </button>
                  
                  <a 
                    href={`${API_CONFIG.BASE_URL}/tilesets/debug/check-paths`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="px-2 py-1 bg-blue-800 hover:bg-blue-700 rounded text-xs"
                  >
                    Check Server Paths
                  </a>
                </div>
                
                <div className="mt-2 text-amber-300 bg-amber-900/30 p-2 rounded">
                  <p className="font-semibold">Administrator Tip:</p>
                  <p>This error often occurs when the tilesets directory doesn't exist on the server.</p>
                  <p>Make sure to create the directory at: <code>windowmanager-files/tilesets</code></p>
                </div>
              </div>
            )}
          </div>
      ) : debugInfo?.warning ? (
        <div className="bg-amber-900/30 text-amber-300 p-4 rounded mb-4">
          <div className="flex items-center mb-2">
            <Info size={20} className="mr-2" />
            <span className="font-semibold">Using Fallback Data</span>
          </div>
          <p>{debugInfo.warning}</p>
          <button 
            className="mt-2 px-2 py-1 bg-amber-800 hover:bg-amber-700 rounded text-xs"
            onClick={fetchTilesets}
          >
            Try Normal Mode Again
          </button>
        </div>
      ) : tilesets.length === 0 ? (
          <div className="text-center py-10">
            <Info size={48} className="mx-auto text-stone-500 mb-4" />
            <p className="text-stone-400">No tilesets available yet.</p>
            {user?.is_admin && (
              <button
                className="mt-4 px-4 py-2 bg-teal-700 hover:bg-teal-600 rounded text-sm"
                onClick={() => setShowUploadForm(true)}
              >
                Upload a New Tileset
              </button>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {tilesets.map(tileset => (
              <div 
                key={tileset.id} 
                className={`bg-stone-800 rounded-sm overflow-hidden border ${
                  isTilesetSelected(tileset.id)
                    ? 'border-teal-500'
                    : 'border-stone-700'
                }`}
              >
                {renderTilesetPreview(tileset)}
                <div className="p-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-bold text-teal-400">{tileset.name}</h3>
                      <p className="text-xs text-stone-400">By {tileset.author}</p>
                    </div>
                    {isTilesetSelected(tileset.id) && (
                      <span className="bg-teal-800 text-teal-200 text-xs px-2 py-1 rounded-full flex items-center">
                        <Check size={12} className="mr-1" />
                        Selected
                      </span>
                    )}
                  </div>
                  
                  <p className="text-sm mt-2 text-stone-300">
                    {tileset.description || 'No description provided.'}
                  </p>
                  
                  {/* Display section summary */}
                  <div className="mt-3 flex flex-wrap gap-1">
                    {tileset.sections && tileset.sections.map(section => (
                      <span 
                        key={`${tileset.id}-${section.id}`}
                        className="text-xs px-2 py-1 rounded bg-stone-700 text-stone-300"
                      >
                        {section.section_name}
                      </span>
                    ))}
                  </div>
                  
                  <div className="mt-4 flex gap-2">
                    <button
                      className={`px-3 py-1 rounded text-sm ${
                        isTilesetSelected(tileset.id)
                          ? 'bg-red-900 hover:bg-red-800 text-stone-200'
                          : 'bg-teal-700 hover:bg-teal-600 text-stone-200'
                      }`}
                      onClick={() => toggleTilesetSelection(tileset.id)}
                    >
                      {isTilesetSelected(tileset.id) ? 'Remove from Editor' : 'Add to Editor'}
                    </button>
                    
                    {user?.is_admin && (
                      <button
                        className="px-3 py-1 bg-red-900 hover:bg-red-800 text-stone-200 rounded text-sm flex items-center gap-1"
                        onClick={() => deleteTileset(tileset.id, tileset.name)}
                        title="Delete this tileset"
                      >
                        <Trash2 size={14} />
                        Delete
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      )}
    </div>
  );
};

/**
 * Component for uploading a new tileset (admin only)
 */
const TilesetUploadForm = ({ onUploadComplete }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    author: '',
    columns: '16'
  });
  
  const [tilesetImage, setTilesetImage] = useState(null);
  const [imagePreview, setImagePreview] = useState('');
  const [sections, setSections] = useState([
    { category: 'floor', section_name: 'Floor Tiles', start_index: 0, count: 16 }
  ]);
  
  const [uploading, setUploading] = useState(false);
  const [uploadError, setUploadError] = useState(null);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [uploadDebugInfo, setUploadDebugInfo] = useState(null);
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  // Handle image file selection
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    console.log('Selected file:', file.name, file.type, `${file.size} bytes`);
    setTilesetImage(file);
    
    // Create preview
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
    };
    reader.readAsDataURL(file);
  };
  
  // Handle section changes
  const handleSectionChange = (index, field, value) => {
    const newSections = [...sections];
    
    // Convert numerical fields to integers
    if (field === 'start_index' || field === 'count') {
      value = parseInt(value, 10) || 0;
    }
    
    newSections[index] = { ...newSections[index], [field]: value };
    setSections(newSections);
  };
  
  // Add a new section
  const addSection = () => {
    setSections([...sections, { 
      category: 'floor', 
      section_name: 'New Section', 
      start_index: 0, 
      count: 8 
    }]);
  };
  
  // Remove a section
  const removeSection = (index) => {
    const newSections = [...sections];
    newSections.splice(index, 1);
    setSections(newSections);
  };
  
  // Submit the form
  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    setUploadError(null);
    setUploadSuccess(false);
    setUploadDebugInfo(null);
    
    if (!tilesetImage) {
      setUploadError('Please select a tileset image.');
      setUploading(false);
      return;
    }
    
    if (!formData.name) {
      setUploadError('Please provide a name for the tileset.');
      setUploading(false);
      return;
    }
    
    if (sections.length === 0) {
      setUploadError('Please define at least one section.');
      setUploading(false);
      return;
    }
    
    try {
      const formPayload = new FormData();
      formPayload.append('tilesetImage', tilesetImage);
      formPayload.append('name', formData.name);
      formPayload.append('description', formData.description);
      formPayload.append('author', formData.author);
      formPayload.append('columns', formData.columns);
      formPayload.append('sections', JSON.stringify(sections));
      
      // Log what we're uploading
      console.log('Uploading tileset:', {
        name: formData.name,
        description: formData.description,
        author: formData.author,
        columns: formData.columns,
        sections: sections,
        imageInfo: {
          name: tilesetImage.name,
          type: tilesetImage.type,
          size: tilesetImage.size
        }
      });
      
      const authToken = localStorage.getItem('auth_token');
      console.log('Using auth token:', authToken ? `${authToken.substring(0, 10)}...` : 'None');
      
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}/tilesets`,
        formPayload,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
            Authorization: `Bearer ${authToken}`
          }
        }
      );
      
      console.log('Upload response:', response);
      
      setUploadSuccess(true);
      
      // Reset form
      setFormData({
        name: '',
        description: '',
        author: '',
        columns: '16'
      });
      setTilesetImage(null);
      setImagePreview('');
      setSections([{ category: 'floor', section_name: 'Floor Tiles', start_index: 0, count: 16 }]);
      
      // Notify parent to refresh
      if (onUploadComplete) {
        onUploadComplete();
      }
    } catch (err) {
      console.error('Error uploading tileset:', err);
      
      const errorDetails = {
        message: err.message,
        status: err.response?.status,
        statusText: err.response?.statusText,
        responseData: err.response?.data,
        config: {
          url: err.config?.url,
          method: err.config?.method,
          headers: err.config?.headers ? 'Headers present' : 'No headers'
        }
      };
      
      console.error('Upload error details:', errorDetails);
      setUploadDebugInfo(errorDetails);
      
      setUploadError(err.response?.data?.message || 'Failed to upload tileset. Please try again.');
    } finally {
      setUploading(false);
    }
  };
  
  return (
    <div className="bg-stone-900">
      {uploadSuccess && (
        <div className="mb-4 bg-green-900/30 text-green-300 p-3 rounded flex items-center">
          <Check size={20} className="mr-2" />
          <span>Tileset uploaded successfully!</span>
        </div>
      )}
      
      {uploadError && (
        <div className="mb-4 bg-red-900/30 text-red-300 p-3 rounded">
          <div className="flex items-center mb-1">
            <AlertTriangle size={20} className="mr-2" />
            <span>{uploadError}</span>
          </div>
          
          {uploadDebugInfo && (
            <div className="mt-2 text-xs bg-red-900/50 p-2 rounded">
              <p>Error: {uploadDebugInfo.message}</p>
              <p>Status: {uploadDebugInfo.status || 'None'}</p>
              <p>Response: {uploadDebugInfo.responseData?.message || 'No message'}</p>
            </div>
          )}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Tileset metadata */}
          <div>
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Name*
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                required
              />
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Description
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200 min-h-[80px]"
                placeholder=""
              />
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Columns in Sprite Sheet
              </label>
              <input
                type="number"
                name="columns"
                value={formData.columns}
                onChange={handleInputChange}
                className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200"
                min="1"
                max="32"
              />
              <p className="text-xs text-stone-500 mt-1">
                Number of columns in the sprite sheet (default: 16)
              </p>
            </div>
            
            <div className="mb-3">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Image*
              </label>
              <div className="relative">
                <input
                  type="file"
                  accept="image/png,image/jpeg"
                  onChange={handleImageChange}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  required
                />
                <div className="w-full bg-stone-800 border border-stone-700 rounded p-2 text-stone-200 cursor-pointer hover:bg-stone-700 transition-colors">
                  Choose File
                </div>
              </div>
              <p className="text-xs text-stone-500 mt-1">
                Upload a PNG or JPG image (max 10MB)
              </p>
            </div>
          </div>
          
          {/* Image preview and sections */}
          <div>
            {imagePreview ? (
              <div className="mb-3">
                <label className="block text-sm font-medium text-stone-300 mb-1">
                  Preview
                </label>
                <div className="border border-stone-700 rounded overflow-hidden h-48">
                  <img
                    src={imagePreview}
                    alt="Tileset Preview"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
            ) : (
              <div className="mb-3 border border-stone-700 rounded h-48 flex items-center justify-center bg-stone-800 text-stone-500">
                No image selected
              </div>
            )}
            
            <div className="flex flex-col">
              <label className="block text-sm font-medium text-stone-300 mb-1">
                Tileset Sections*
              </label>
              <p className="text-xs text-stone-500 mb-2">
                Define sections for different types of tiles (floors, walls, etc.)
              </p>
              
              <div className="max-h-64 overflow-y-auto pr-2">
              {sections.map((section, index) => (
                <div key={index} className="mb-2 p-3 bg-stone-800 rounded border border-stone-700">
                  <div className="flex justify-between mb-2">
                    <span className="text-sm font-medium text-stone-300">Section {index + 1}</span>
                    {sections.length > 1 && (
                      <button
                        type="button"
                        onClick={() => removeSection(index)}
                        className="text-red-400 hover:text-red-300"
                      >
                        <X size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 mb-2">
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Category
                      </label>
                      <select
                        value={section.category}
                        onChange={(e) => handleSectionChange(index, 'category', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                      >
                        <option value="floor">Floor</option>
                        <option value="wall">Wall</option>
                        <option value="shadow">Shadow</option>
                        <option value="door">Door</option>
                        <option value="object">Object</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Section Name
                      </label>
                      <input
                        type="text"
                        value={section.section_name}
                        onChange={(e) => handleSectionChange(index, 'section_name', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Start Index
                      </label>
                      <input
                        type="number"
                        value={section.start_index}
                        onChange={(e) => handleSectionChange(index, 'start_index', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                        min="0"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-xs text-stone-400 mb-1">
                        Tile Count
                      </label>
                      <input
                        type="number"
                        value={section.count}
                        onChange={(e) => handleSectionChange(index, 'count', e.target.value)}
                        className="w-full bg-stone-700 border border-stone-600 rounded p-1 text-stone-200 text-sm"
                        min="1"
                      />
                    </div>
                  </div>
                </div>
              ))}
              </div>
              
              <button
                type="button"
                onClick={addSection}
                className="mt-2 px-3 py-1 bg-stone-700 hover:bg-stone-600 rounded text-sm"
              >
                + Add Section
              </button>
            </div>
          </div>
        </div>
        
        <div className="mt-4 flex justify-end">
          <button
            type="submit"
            disabled={uploading}
            className={`px-4 py-2 rounded text-sm flex items-center ${
              uploading
                ? 'bg-stone-600 cursor-not-allowed'
                : 'bg-teal-700 hover:bg-teal-600'
            }`}
          >
            {uploading ? 'Uploading...' : 'Upload Tileset'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default MarketplaceWindow;

================
File: src/components/windows/TerminalWindow.jsx
================
import React, { useState, useEffect, useRef, useReducer } from 'react';
import d20Gif from '../../assets/GIF/d20.gif';
import { WINDOW_TYPES } from '../../utils/windowTypes';
import { useAuth } from '../../context/AuthContext';
import { useAnnouncement } from '../../context/AnnouncementContext';
import { useWindowState } from '../../context/WindowStateContext';
import { useParty } from '../../context/PartyContext';
import { saveTerminalState, getTerminalState } from '../../services/indexedDBService';
import { parseDiceExpression, rollDice, formatRollResult, isValidDiceType } from '../../utils/diceUtils';
import DebugLogger from '../../utils/debugLogger';
import { executeCommand } from '../../utils/terminal/executor';
import { registerCommands } from '../../utils/terminal/commandLoader';

// Initialize the command system
registerCommands();

const TerminalWindow = ({ onCommand, isActive, nodeId, transformWindow, windowState, updateWindowState, focusRef }) => {
  // Get user authentication info
  const { user } = useAuth();
  // Get announcement context
  const { updateAnnouncement } = useAnnouncement();
  // Get window state context for additional persistence
  const { setActiveWindow } = useWindowState();
  // Get party context
  const { 
    currentParty, 
    parties, 
    joinParty, 
    leaveParty, 
    createParty, 
    refreshParty,
    refreshParties,
    deleteParty
  } = useParty();
  
  // Ref for managing scrolling
  const terminalRef = useRef(null);
  // Ref to track if state has been loaded from IndexedDB
  const stateLoadedRef = useRef(false);
  // Ref to store the dice roll animation timeout
  const diceTimeoutRef = useRef(null);

  // Terminal state - use windowState if available
  const [history, setHistory] = useState(
    windowState?.history || ['SLUMNET TERMINAL - Type "help" for available commands.']
  );
  const [commandHistory, setCommandHistory] = useState(windowState?.commandHistory || []);
  const [currentInput, setCurrentInput] = useState(windowState?.currentInput || '');
  const [historyIndex, setHistoryIndex] = useState(windowState?.historyIndex || -1);

  // Load terminal state from IndexedDB on mount if not already in windowState
  useEffect(() => {
    const loadTerminalState = async () => {
      // Skip if we already have state from the WindowStateContext
      if (windowState?.history && windowState?.commandHistory) {
        stateLoadedRef.current = true;
        return;
      }
      
      try {
        // Try to load terminal state from IndexedDB
        const savedState = await getTerminalState(nodeId);
        
        if (savedState && savedState.content && !stateLoadedRef.current) {
          console.log(`Loaded terminal state for window ${nodeId} from IndexedDB:`, savedState.content);
          
          // Update state with saved values
          if (savedState.content.history) {
            setHistory(savedState.content.history);
          }
          
          if (savedState.content.commandHistory) {
            setCommandHistory(savedState.content.commandHistory);
          }
          
          if (savedState.content.historyIndex !== undefined) {
            setHistoryIndex(savedState.content.historyIndex);
          }
          
          // Mark as loaded
          stateLoadedRef.current = true;
        }
      } catch (error) {
        console.error(`Failed to load terminal state for window ${nodeId} from IndexedDB:`, error);
      }
    };
    
    loadTerminalState();
  }, [nodeId, windowState]);

  // Auto-scroll to bottom when new output is added
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [history]);
  
  // Clear input when window becomes active or when transformed back to terminal
  useEffect(() => {
    // Always clear the input when the component mounts or is transformed back to terminal
    setCurrentInput('');
  }, []);
  
  // Handle window activation
  useEffect(() => {
    if (isActive) {
      // Clear input when window becomes active
      setCurrentInput('');
      
      // Save this as the active terminal window
      setActiveWindow(nodeId, WINDOW_TYPES.TERMINAL);
    }
  }, [isActive, nodeId, setActiveWindow]);
  
  // Cleanup dice animation timeout when component unmounts
  useEffect(() => {
    // Return cleanup function
    return () => {
      // Clear any pending dice roll timeouts when unmounting
      if (diceTimeoutRef.current) {
        clearTimeout(diceTimeoutRef.current);
        diceTimeoutRef.current = null;
      }
    };
  }, []);
  
  // Create a reducer for forced updates - useReducer guarantees a re-render
  const [updateCounter, forceUpdate] = useReducer(state => state + 1, 0);
  
  // Force re-render to check dice GIFs that need to be replaced with results
  // This ensures the transition happens even when the component was unmounted and remounted
  useEffect(() => {
    // This checks and processes all dice GIFs that have completed their display duration
    const processDiceGifs = () => {
      let needsUpdate = false;
      
      // Process the history array to find and update dice GIFs
      const updatedHistory = history.map(item => {
        // Only process dice-gif items that have completed their duration
        if (typeof item === 'object' && 
            item.type === 'dice-gif' && 
            Date.now() - item.timestamp >= item.displayDuration) {
          
          needsUpdate = true;
          // Return the result instead of the GIF
          return item.result;
        }
        return item;
      });
      
      // If we found and updated any completed dice GIFs, update the history
      if (needsUpdate) {
        setHistory(updatedHistory);
      }
      
      // Check if there are still any active dice GIFs
      return history.some(item => 
        typeof item === 'object' && 
        item.type === 'dice-gif' && 
        Date.now() - item.timestamp < item.displayDuration
      );
    };
    
    // Initial check and processing
    const hasActiveDiceGifs = processDiceGifs();
    
    // If we have active dice GIFs, set up an interval to keep checking
    let intervalId;
    if (hasActiveDiceGifs) {
      intervalId = setInterval(() => {
        const stillHasActiveDiceGifs = processDiceGifs();
        
        // Force a render update regardless of whether we processed any GIFs
        forceUpdate();
        
        // If no more active dice GIFs, clear the interval
        if (!stillHasActiveDiceGifs && intervalId) {
          clearInterval(intervalId);
        }
      }, 200); // Check more frequently (200ms) for smoother transitions
    }
    
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [history]);

  // Update window state when terminal state changes
  useEffect(() => {
    if (updateWindowState) {
      const newState = {
        history,
        commandHistory,
        currentInput,
        historyIndex
      };
      
      // Update window state in context
      updateWindowState(newState);
      
      // Also save directly to IndexedDB for redundancy
      if (stateLoadedRef.current) { // Only save after initial load to avoid overwriting with empty state
        saveTerminalState({
          id: nodeId,
          content: newState
        }).catch(error => {
          console.error(`Failed to save terminal state for window ${nodeId} to IndexedDB:`, error);
        });
      }
    }
  }, [history, commandHistory, currentInput, historyIndex, updateWindowState, nodeId]);

  const handleTerminalClick = () => {
    focusRef.current?.focus();
  };

  const processCommand = async (command) => {
    setHistory(prev => [...prev, `$ ${command}`]);
    setCommandHistory(prev => [...prev, command]);
    
    // Legacy window transformation handling (direct conversion)
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();
    
    if (Object.keys(WINDOW_TYPES).some(type => type.toLowerCase() === cmd)) {
      const requestedType = WINDOW_TYPES[cmd.toUpperCase()];
      transformWindow(nodeId, requestedType);
      return;
    }
    
    // Create recursive executeCommand function for legacy redirects
    const executeCommandFn = async (cmdStr) => {
      // Don't add the command to history since it's an internal redirect
      return await processCommand(cmdStr);
    };
    
    // Create the execution context with all necessary terminal state and functions
    const context = {
      // Original command text
      original: command,
      
      // User and authentication
      user,
      
      // Window management
      nodeId,
      transformWindow,
      
      // Announcement management
      updateAnnouncement,
      
      // Party system
      parties,
      currentParty,
      joinParty,
      leaveParty,
      createParty,
      refreshParty,
      refreshParties,
      deleteParty,
      
      // Dice utilities
      parseDiceExpression,
      rollDice,
      formatRollResult,
      isValidDiceType,
      
      // Debug utilities
      debugLogger: DebugLogger,
      
      // Terminal management
      clearTerminal: () => setHistory(['']),
      
      // Recursive command execution (for legacy redirects)
      executeCommand: executeCommandFn
    };
    
    try {
      // Execute the command using our new command system
      const response = await executeCommand(command, context);
      
      // Handle special return values
      if (response === '__CLEAR_TERMINAL__') {
        setHistory(['']);
        return;
      }
      
      // Handle response based on its type
      if (response) {
        if (typeof response === 'object' && response.type === 'dice-roll') {
          // Add the GIF to history with timestamp and result data
          setHistory(prev => [...prev, { 
            type: 'dice-gif', 
            src: d20Gif,
            timestamp: Date.now(), // Add current timestamp
            displayDuration: 2000, // Display for 2 seconds
            result: response.content // Store the result with the GIF
          }]);
        } else {
          // Handle regular text responses
          setHistory(prev => [...prev, response]);
        }
      }
    } catch (error) {
      console.error('Error executing command:', error);
      setHistory(prev => [...prev, `Error: ${error.message}`]);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && currentInput.trim()) {
      processCommand(currentInput.trim());
      setCurrentInput('');
      setHistoryIndex(-1);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        const newIndex = historyIndex + 1;
        setHistoryIndex(newIndex);
        setCurrentInput(commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex > -1) {
        const newIndex = historyIndex - 1;
        setHistoryIndex(newIndex);
        setCurrentInput(newIndex === -1 ? '' : commandHistory[commandHistory.length - 1 - newIndex] || '');
      }
    }
  };

  return (
    <div 
      className="bg-stone-900 text-white font-mono text-sm h-full flex flex-col"
      onClick={handleTerminalClick}
    >
<div ref={terminalRef} className="p-2 flex-1 overflow-auto whitespace-pre-wrap">
  {history.map((item, i) => {
    // If the item is an object with a type of 'dice-gif', handle it specially
    if (typeof item === 'object' && item.type === 'dice-gif') {
      // Check if enough time has passed since creation (2 seconds)
      const timeElapsed = Date.now() - item.timestamp;
      
      if (timeElapsed < item.displayDuration) {
        // If not enough time has passed, show the GIF
        return (
          <div key={i} className="mb-2">
            <img src={item.src} alt="Rolling dice" className="inline-block max-w-full h-32" />
          </div>
        );
      } else {
        // If enough time has passed, show the result instead
        return (
          <div key={i} className="mb-2">
            {item.result}
          </div>
        );
      }
    }
    // Keep backward compatibility with any 'gif' type items
    else if (typeof item === 'object' && item.type === 'gif') {
      return (
        <div key={i} className="mb-2">
          <img src={item.src} alt="Rolling dice" className="inline-block max-w-full h-32" />
        </div>
      );
    }
    // Otherwise, render as before
    return (
      <div key={i} className={`mb-2 ${typeof item === 'string' && item.startsWith('$ ') ? 'text-teal-400' : ''}`}>
        {item}
      </div>
    );
  })}
</div>

      <div className="p-2 flex items-center gap-2 border-t border-stone-700">
        <span className="mr-2">$</span>
        <input
          ref={focusRef}
          type="text"
          value={currentInput}
          onChange={(e) => setCurrentInput(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          autoFocus
        />
      </div>
    </div>
  );
};

export default TerminalWindow;

================
File: src/config/api.js
================
// API configuration
const API_CONFIG = {
  // Use environment variable with fallback
  BASE_URL: import.meta.env.VITE_API_BASE_URL || '/api',
  
  // Endpoints
  ENDPOINTS: {
    LOGIN: '/login',
    REGISTER: '/register',
    PROFILE: '/profile',
    LOGOUT: '/logout',
    ANNOUNCEMENT: '/announcement',
    // Chat endpoints
    CHAT_ROOMS: '/chat/rooms',
    CHAT_MESSAGES: '/chat/rooms/:id/messages',
    CHAT_JOIN: '/chat/rooms/:id/join',
    CHAT_DELETE_MESSAGE: '/chat/messages/:id',
    CHAT_DELETE_ROOM: '/chat/rooms/:id',
    // Voice chat endpoints
    VOICE_CHANNELS: '/chat/rooms/:id/voice-channels',
    VOICE_CHANNEL: '/chat/voice-channels/:id',
    VOICE_PARTICIPANTS: '/chat/voice-channels/:id/participants',
    VOICE_DELETE_CHANNEL: '/chat/voice-channels/:id',
    // Admin endpoints
    USERS: '/users',
    // Window state endpoints
    WINDOW_STATES: '/window-states',
    // Workspace endpoints
    WORKSPACES: '/workspaces',
    // File endpoints
    FILES_LIST: '/files',
    FILE_CONTENT: '/files/content',
    FILE_SAVE: '/files/content',
    FILE_CREATE: '/files/create',
    FILE_DELETE: '/files/delete',
    FILE_RENAME: '/files/rename',
    FILE_MOVE: '/files/move',
    // Public file endpoints
    PUBLIC_FILES_LIST: '/public-files',
    PUBLIC_FILE_CONTENT: '/public-files/content',
    // Storage endpoints
    STORAGE_STATS: '/files/storage',
    // Party endpoints
    PARTIES: '/parties',
    PARTIES_CURRENT: '/parties/current',
    PARTY_JOIN: '/parties/:id/join',
    PARTY_LEAVE: '/parties/:id/leave',
    // Tileset and marketplace endpoints
    TILESETS: '/tilesets',
    TILESET_BY_ID: '/tilesets/:id',
    TILESET_SELECT: '/tilesets/user/select/:id',
    TILESET_DESELECT: '/tilesets/user/select/:id',
    TILESET_SELECTED: '/tilesets/user/selected',
    TILESET_CHECK: '/tilesets/check/:id',
    TILESET_BY_CATEGORY: '/tilesets/category/:category',
    // Favorite tiles endpoints
    FAVORITE_TILES: '/favorite-tiles',
    FAVORITE_TILE_CHECK: '/favorite-tiles/check/:tileIndex/:tileType',
    FAVORITE_TILE_DELETE: '/favorite-tiles/:tileIndex/:tileType'
  }
};

export default API_CONFIG;

================
File: src/context/ActiveUsersContext.jsx
================
import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import axios from 'axios';
import API_CONFIG from '../config/api';
import { useAuth } from './AuthContext';
import io from 'socket.io-client';

// Create the active users context
const ActiveUsersContext = createContext();

// Events that count as user activity
const ACTIVITY_EVENTS = [
  'click', 'keydown', 'mousemove', 'wheel', 'touchstart', 'touchmove'
];

export function ActiveUsersProvider({ children }) {
  const [activeUserCount, setActiveUserCount] = useState(0);
  const { isAuthenticated, user } = useAuth();
  const socketRef = useRef(null);
  
  useEffect(() => {
    if (!isAuthenticated) return;
    
    // Initial fetch of active user count
    const fetchActiveUsers = async () => {
      try {
        const response = await axios.get(`${API_CONFIG.BASE_URL}/active-users`);
        setActiveUserCount(response.data.count);
      } catch (error) {
        console.error('Failed to fetch active users:', error);
      }
    };
    
    fetchActiveUsers();
    
    // Extract the origin from the BASE_URL or use window.location.origin
    const getSocketUrl = () => {
      // If BASE_URL is a full URL (starts with http)
      if (API_CONFIG.BASE_URL.startsWith('http')) {
        try {
          const url = new URL(API_CONFIG.BASE_URL);
          console.log('ActiveUsers using Socket.IO URL from BASE_URL origin:', url.origin);
          return url.origin; // Just the protocol, hostname, and port
        } catch (e) {
          console.error('ActiveUsers invalid BASE_URL format:', e);
        }
      }
      // Otherwise use the current origin
      console.log('ActiveUsers using Socket.IO URL from window.location.origin:', window.location.origin);
      return window.location.origin;
    };
    
    // Improved Socket.IO connection with correct URL
    const socketUrl = getSocketUrl();
    console.log('ActiveUsers connecting Socket.IO to:', socketUrl);
    
    const socket = io(socketUrl, {
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      transports: ['websocket', 'polling'],
      path: '/socket.io' // Default Socket.IO path
    });
    
    // Store socket reference for external access
    socketRef.current = socket;
    
    socket.on('connect', () => {
      console.log('ActiveUsers Socket.IO connected, ID:', socket.id);
      
      // Send authentication token on connect
      const token = localStorage.getItem('auth_token');
      if (token) {
        console.log('Authenticating ActiveUsers socket connection');
        socket.emit('authenticate', token);
      } else {
        console.warn('No auth token available for socket authentication');
      }
    });
    
    socket.on('connect_error', (err) => {
      console.error('ActiveUsers Socket.IO connection error:', err);
      console.error('Connection details:', {
        url: socketUrl,
        transport: socket.io.engine?.transport?.name
      });
    });
    
    // Listen for active user count updates
    socket.on('active_users_update', (data) => {
      setActiveUserCount(data.count);
    });
    
    // Track user activity
    let activityTimeout;
    
  const reportActivity = () => {
    // Clear any pending timeout
    if (activityTimeout) {
      clearTimeout(activityTimeout);
    }
    
    // Set a new timeout to report activity
    activityTimeout = setTimeout(() => {
      // Report activity via socket only for more efficient, real-time updates
      if (socketRef.current && socketRef.current.connected) {
        console.log('Reporting user activity via socket');
        socketRef.current.emit('user_activity');
      } else {
        console.warn('Socket not connected when trying to report activity');
        
        // If socket is disconnected, try to reconnect and then emit
        if (socketRef.current) {
          console.log('Attempting to reconnect socket...');
          socketRef.current.connect();
          
          // After reconnection attempt, try to emit activity again
          setTimeout(() => {
            if (socketRef.current && socketRef.current.connected) {
              console.log('Socket reconnected, reporting activity');
              socketRef.current.emit('user_activity');
            } else {
              console.error('Socket reconnection failed, falling back to HTTP API');
              // Fallback to HTTP API if socket reconnection fails
              const token = localStorage.getItem('auth_token');
              if (token) {
                axios.post(`${API_CONFIG.BASE_URL}/activity`, {}, {
                  headers: { Authorization: `Bearer ${token}` }
                }).catch(error => {
                  console.error('Failed to report activity via HTTP:', error);
                });
              }
            }
          }, 1000); // Wait 1 second for reconnection attempt
        }
      }
    }, 30000); // Wait 30 seconds before reporting activity to avoid flooding
    
    // Also report activity immediately if returning to app after a long time
    // This helps with faster updates when a user returns from being inactive
    if (socketRef.current && socketRef.current.connected && isAuthenticated) {
      const lastActive = localStorage.getItem('lastActiveTimestamp');
      const now = Date.now();
      
      if (lastActive) {
        const inactiveDuration = now - parseInt(lastActive, 10);
        // If user was inactive for more than 5 minutes (but less than timeout)
        if (inactiveDuration > 5 * 60 * 1000) {
          console.log(`User returning after ${Math.round(inactiveDuration/1000)}s inactivity, reporting activity immediately`);
          socketRef.current.emit('user_activity');
        }
      }
      
      // Update last active timestamp
      localStorage.setItem('lastActiveTimestamp', now.toString());
    }
  };
    
    // Add event listeners for user activity
    ACTIVITY_EVENTS.forEach(eventType => {
      window.addEventListener(eventType, reportActivity, { passive: true });
    });
    
    // Initial activity report
    reportActivity();
    
    // Cleanup
    return () => {
      socket.disconnect();
      ACTIVITY_EVENTS.forEach(eventType => {
        window.removeEventListener(eventType, reportActivity);
      });
      if (activityTimeout) {
        clearTimeout(activityTimeout);
      }
    };
  }, [isAuthenticated, user]);
  
  return (
    <ActiveUsersContext.Provider value={{ activeUserCount }}>
      {children}
    </ActiveUsersContext.Provider>
  );
}

export function useActiveUsers() {
  return useContext(ActiveUsersContext);
}

================
File: src/context/AnnouncementContext.jsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import io from 'socket.io-client';
import API_CONFIG from '../config/api';

const AnnouncementContext = createContext();

export function AnnouncementProvider({ children }) {
  const [announcement, setAnnouncement] = useState('');
  
  // Fetch initial announcement when component mounts
  useEffect(() => {
    const fetchAnnouncement = async () => {
      try {
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ANNOUNCEMENT}`
        );
        setAnnouncement(response.data.announcement);
      } catch (error) {
        console.error('Failed to fetch announcement:', error);
      }
    };
    
    fetchAnnouncement();
    
    // Extract the origin from the BASE_URL or use window.location.origin
    const getSocketUrl = () => {
      // If BASE_URL is a full URL (starts with http)
      if (API_CONFIG.BASE_URL.startsWith('http')) {
        try {
          const url = new URL(API_CONFIG.BASE_URL);
          console.log('Using Socket.IO URL from BASE_URL origin:', url.origin);
          return url.origin; // Just the protocol, hostname, and port
        } catch (e) {
          console.error('Invalid BASE_URL format:', e);
        }
      }
      // Otherwise use the current origin
      console.log('Using Socket.IO URL from window.location.origin:', window.location.origin);
      return window.location.origin;
    };
    
    // Improved Socket.IO connection with correct URL
    const socketUrl = getSocketUrl();
    console.log('Connecting Socket.IO to:', socketUrl);
    
    const socket = io(socketUrl, {
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      transports: ['websocket', 'polling'],
      path: '/socket.io' // Default Socket.IO path
    });
    
    socket.on('connect', () => {
      console.log('Socket.IO connected, ID:', socket.id);
    });
    
    socket.on('connect_error', (err) => {
      console.error('Socket.IO connection error:', err);
      console.error('Connection details:', {
        url: socketUrl,
        transport: socket.io.engine.transport.name
      });
    });
    
    socket.on('announcement_update', (data) => {
      console.log('Received announcement update:', data);
      setAnnouncement(data.announcement);
      
      // Send acknowledgment back to server
      socket.emit('announcement_received', { 
        received: true, 
        announcement: data.announcement,
        timestamp: new Date().toISOString()
      });
    });
    
    return () => {
      console.log('Disconnecting Socket.IO');
      socket.off('announcement_update');
      socket.disconnect();
    };
  }, []);
  
  // Function to set a new announcement (admin only)
  const updateAnnouncement = async (text) => {
    try {
      const token = localStorage.getItem('auth_token');
      await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ANNOUNCEMENT}`,
        { announcement: text },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      return true;
    } catch (error) {
      console.error('Failed to update announcement:', error);
      return false;
    }
  };

  return (
    <AnnouncementContext.Provider value={{ announcement, updateAnnouncement }}>
      {children}
    </AnnouncementContext.Provider>
  );
}

export function useAnnouncement() {
  return useContext(AnnouncementContext);
}

================
File: src/context/AuthContext.jsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import API_CONFIG from '../config/api';
import { useWindowState } from './WindowStateContext';
import { useWorkspace } from './WorkspaceContext';

// Create the authentication context
const AuthContext = createContext();

// Internal context for window state access
const InternalAuthContext = createContext();

// Main Auth Provider that doesn't depend on WindowStateContext
export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Check if user is already logged in on component mount
  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      fetchUserProfile(token);
    } else {
      setLoading(false);
    }
  }, []);

  // Fetch user profile using the token
  const fetchUserProfile = async (token) => {
    try {
      const response = await axios.get(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PROFILE}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      // If is_admin is not present in the response, default to false
      const userData = {
        ...response.data,
        is_admin: response.data.is_admin || false
      };
      
      setUser(userData);
      setError(null);
    } catch (err) {
      console.error('Failed to fetch user profile:', err);
      localStorage.removeItem('auth_token');
      setError('Session expired. Please login again.');
    } finally {
      setLoading(false);
    }
  };

  // Login function
  const login = async (username, password) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGIN}`, {
        username,
        password
      });
      
      const { token } = response.data;
      localStorage.setItem('auth_token', token);
      
      await fetchUserProfile(token);
      return { success: true };
    } catch (err) {
      setLoading(false);
      const message = err.response?.data?.message || 'Login failed';
      setError(message);
      return { success: false, message };
    }
  };

  // Logout function (without window state clearing)
  const logout = async () => {
    const token = localStorage.getItem('auth_token');
    
    if (token) {
      try {
        // Call server logout endpoint to remove user from active users
        await axios.post(
          `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.LOGOUT}`, 
          {}, 
          { headers: { Authorization: `Bearer ${token}` } }
        );
        console.log('Logged out on server');
      } catch (err) {
        console.error('Error logging out on server:', err);
      }
    }
    
    localStorage.removeItem('auth_token');
    setUser(null);
    setError(null);
  };

  // Clear any authentication errors
  const clearError = () => {
    setError(null);
  };

  // Context value
  const value = {
    user,
    loading,
    error,
    login,
    logout,
    clearError,
    isAuthenticated: !!user
  };

  return (
    <InternalAuthContext.Provider value={value}>
      {children}
    </InternalAuthContext.Provider>
  );
}

// Wrapper component that connects AuthContext with WindowStateContext
export function AuthProviderWithWindowState({ children }) {
  // Get the window state context
  const { clearWindowStates, reloadWindowStates } = useWindowState();
  
  // Get the workspace context
  const { setWorkspaces, loadWorkspaces } = useWorkspace();
  
  // Initial workspaces state
  const initialWorkspaces = [
    { id: 1, name: 'Main', root: null, activeNodeId: null, terminalStates: {} },
    { id: 2, name: 'Code', root: null, activeNodeId: null, terminalStates: {} },
    { id: 3, name: 'Terminal', root: null, activeNodeId: null, terminalStates: {} },
    { id: 4, name: 'Preview', root: null, activeNodeId: null, terminalStates: {} }
  ];
  
  // Get the internal auth context
  const auth = useContext(InternalAuthContext);
  
  // Create a new logout function that also clears window states and workspaces
  const logoutWithClear = async () => {
    // First call the enhanced logout that includes API call
    await auth.logout();
    clearWindowStates();
    
    // Reset workspaces to initial state
    setWorkspaces(initialWorkspaces);
    
    // Force a refresh of the active users count
    // This will ensure the UI updates immediately
    setTimeout(() => {
      // After a small delay, force a refresh of the active users count via API
      axios.get(`${API_CONFIG.BASE_URL}/active-users`)
        .then(response => {
          // We don't need to do anything with the response
          // The ActiveUsersContext will handle the socket event
          console.log('Forced refresh of active users count after logout');
        })
        .catch(error => {
          console.error('Error refreshing active users after logout:', error);
        });
    }, 500);
  };
  
  // Create a new login function that also reloads window states and workspaces
  const loginWithReload = async (username, password) => {
    const result = await auth.login(username, password);
    
    if (result.success) {
      // Reload window states and workspaces after successful login
      console.log('Login successful, reloading window states and workspaces');
      await Promise.all([
        reloadWindowStates(),
        loadWorkspaces()
      ]);
    }
    
    return result;
  };
  
  // Create a new context value with the enhanced functions
  const enhancedValue = {
    ...auth,
    logout: logoutWithClear,
    login: loginWithReload
  };
  
  return (
    <AuthContext.Provider value={enhancedValue}>
      {children}
    </AuthContext.Provider>
  );
}

// Custom hook to use the auth context
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProviderWithWindowState');
  }
  return context;
}

================
File: src/context/PartyContext.jsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext';
import API_CONFIG from '../config/api';

const PartyContext = createContext();

export const useParty = () => useContext(PartyContext);

export const PartyProvider = ({ children }) => {
  const { user, socket } = useAuth();
  const [currentParty, setCurrentParty] = useState(null);
  const [partyMembers, setPartyMembers] = useState([]);
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch current party on mount or when user changes
  useEffect(() => {
    if (user) {
      fetchCurrentParty();
      fetchParties();
    } else {
      setCurrentParty(null);
      setPartyMembers([]);
    }
  }, [user]);

  // Listen for socket events
  useEffect(() => {
    if (socket) {
      // Listen for party member joins
      socket.on('party_member_joined', (data) => {
        if (currentParty && data.partyId === currentParty.id) {
          fetchPartyMembers(currentParty.id);
        }
      });

      // Listen for party member leaves
      socket.on('party_member_left', (data) => {
        if (currentParty && data.partyId === currentParty.id) {
          fetchPartyMembers(currentParty.id);
        }
      });

      // Listen for new parties being created
      socket.on('party_created', (party) => {
        setParties(prev => [party, ...prev]);
      });

      return () => {
        socket.off('party_member_joined');
        socket.off('party_member_left');
        socket.off('party_created');
      };
    }
  }, [socket, currentParty]);

  const fetchCurrentParty = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTIES_CURRENT}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (response.data && !response.data.message) {
        setCurrentParty(response.data);
        setPartyMembers(response.data.members || []);
        
        // Join the party's socket room
        if (socket) {
          socket.emit('join_party', response.data.id);
        }
      } else {
        setCurrentParty(null);
        setPartyMembers([]);
      }
    } catch (err) {
      console.error('Error fetching current party:', err);
      setError('Failed to fetch current party');
      setCurrentParty(null);
    } finally {
      setLoading(false);
    }
  };

  const fetchParties = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTIES}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setParties(response.data);
    } catch (err) {
      console.error('Error fetching parties:', err);
      setError('Failed to fetch parties');
    }
  };

  const fetchPartyMembers = async (partyId) => {
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTIES}/${partyId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      if (currentParty && currentParty.id === partyId) {
        setPartyMembers(response.data.members || []);
      }
    } catch (err) {
      console.error('Error fetching party members:', err);
    }
  };

  const joinParty = async (partyId) => {
    try {
      const token = localStorage.getItem('auth_token');
      const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTY_JOIN.replace(':id', partyId)}`;
      const response = await axios.post(url, {}, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      fetchCurrentParty();
      return response.data;
    } catch (err) {
      console.error('Error joining party:', err);
      setError('Failed to join party');
      throw err;
    }
  };

  const leaveParty = async () => {
    if (!currentParty) return;
    
    try {
      const token = localStorage.getItem('auth_token');
      const url = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTY_LEAVE.replace(':id', currentParty.id)}`;
      await axios.post(url, {}, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Leave the party's socket room
      if (socket) {
        socket.emit('leave_party', currentParty.id);
      }
      
      setCurrentParty(null);
      setPartyMembers([]);
    } catch (err) {
      console.error('Error leaving party:', err);
      setError('Failed to leave party');
      throw err;
    }
  };

  const createParty = async (name) => {
    try {
      const token = localStorage.getItem('auth_token');
      const response = await axios.post(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTIES}`,
        { name },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      fetchParties();
      return response.data;
    } catch (err) {
      console.error('Error creating party:', err);
      setError('Failed to create party');
      throw err;
    }
  };

  const deleteParty = async (partyId) => {
    try {
      const token = localStorage.getItem('auth_token');
      await axios.delete(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.PARTIES}/${partyId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      // Remove the party from the local state
      setParties(prev => prev.filter(party => party.id !== partyId));
      
      // If user is in this party, clear the current party
      if (currentParty && currentParty.id === partyId) {
        setCurrentParty(null);
        setPartyMembers([]);
      }
      
      return { success: true };
    } catch (err) {
      console.error('Error deleting party:', err);
      const errorMessage = err.response?.data?.message || 'Failed to delete party';
      setError(errorMessage);
      return { success: false, message: errorMessage };
    }
  };

  // Listen for party deleted events
  useEffect(() => {
    if (socket) {
      socket.on('party_deleted', (data) => {
        // Update parties list
        setParties(prev => prev.filter(party => party.id !== data.id));
        
        // If user was in this party, clear current party
        if (currentParty && currentParty.id === data.id) {
          setCurrentParty(null);
          setPartyMembers([]);
        }
      });
      
      return () => {
        socket.off('party_deleted');
      };
    }
  }, [socket, currentParty]);

  const value = {
    currentParty,
    partyMembers,
    parties,
    loading,
    error,
    joinParty,
    leaveParty,
    createParty,
    deleteParty,
    refreshParty: fetchCurrentParty,
    refreshParties: fetchParties
  };

  return (
    <PartyContext.Provider value={value}>
      {children}
    </PartyContext.Provider>
  );
};

export default PartyProvider;

================
File: src/context/SocketContext.jsx
================
import React, { createContext, useContext, useEffect, useRef, useState } from 'react';
import { io } from 'socket.io-client';
import { useAuth } from './AuthContext';
import API_CONFIG from '../config/api';

const SocketContext = createContext();

// Utility function to get the correct socket URL
const getSocketUrl = () => {
  if (API_CONFIG.BASE_URL.includes('localhost')) {
    return API_CONFIG.BASE_URL.replace('/api', '');
  }
  return API_CONFIG.BASE_URL.replace('/api', '');
};

export const SocketProvider = ({ children }) => {
  const { isAuthenticated, user } = useAuth();
  const socketRef = useRef(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    if (!isAuthenticated || !user) {
      // Disconnect socket if user is not authenticated
      if (socketRef.current) {
        console.log('User not authenticated, disconnecting socket');
        socketRef.current.disconnect();
        socketRef.current = null;
        setIsConnected(false);
      }
      return;
    }

    // Create socket connection for authenticated users
    const socketUrl = getSocketUrl();
    console.log('SocketContext connecting to:', socketUrl);

    const socket = io(socketUrl, {
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      maxReconnectionAttempts: 5,
      timeout: 20000,
      forceNew: false,
      transports: ['websocket', 'polling'],
      path: '/socket.io'
    });

    socketRef.current = socket;

    // Handle connection events
    socket.on('connect', () => {
      console.log('SocketContext connected, ID:', socket.id);
      setIsConnected(true);

      // Authenticate the socket connection
      const token = localStorage.getItem('auth_token');
      if (token) {
        console.log('Authenticating socket connection');
        socket.emit('authenticate', token);
        
        // Also emit auth_user for backward compatibility
        socket.emit('auth_user', user);
      }
    });

    socket.on('disconnect', (reason) => {
      console.log('SocketContext disconnected:', reason);
      setIsConnected(false);
    });

    socket.on('connect_error', (err) => {
      console.error('SocketContext connection error:', err);
      setIsConnected(false);
    });

    socket.on('reconnect', (attemptNumber) => {
      console.log('SocketContext reconnected after', attemptNumber, 'attempts');
      setIsConnected(true);
    });

    socket.on('reconnect_error', (err) => {
      console.error('SocketContext reconnection error:', err);
    });

    socket.on('reconnect_failed', () => {
      console.error('SocketContext failed to reconnect');
      setIsConnected(false);
    });

    // Handle forced logout
    socket.on('logout', () => {
      console.log('Received logout event from server');
      // This can be handled by individual components if needed
    });

    // Cleanup on unmount or auth change
    return () => {
      console.log('SocketContext cleanup: disconnecting socket');
      socket.disconnect();
      socketRef.current = null;
      setIsConnected(false);
    };
  }, [isAuthenticated, user]);

  const value = {
    socket: socketRef.current,
    isConnected
  };

  return (
    <SocketContext.Provider value={value}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocket = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};

export default SocketContext;

================
File: src/context/WindowStateContext.jsx
================
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';
import axios from 'axios';
import API_CONFIG from '../config/api';
import { WINDOW_TYPES } from '../utils/windowTypes';
import {
  saveWindowState as saveWindowStateToIndexedDB,
  getWindowState as getWindowStateFromIndexedDB,
  getAllWindowStates as getAllWindowStatesFromIndexedDB,
  deleteWindowState as deleteWindowStateFromIndexedDB,
  saveTerminalState,
  getTerminalState,
  saveChatState,
  getChatState,
  saveExplorerState,
  getExplorerState,
  saveActiveWindow,
  getActiveWindow as getActiveWindowFromIndexedDB,
  deleteActiveWindow
} from '../services/indexedDBService';

// Create context
const WindowStateContext = createContext();

// Initial state with different content types
const initialState = {
  windowStates: {}
};

// Context provider component
export function WindowStateProvider({ children }) {
  // Use a ref to store the state to avoid re-renders
  const stateRef = useRef(initialState);
  
  // Use useState just to trigger re-renders when needed
  const [, forceUpdate] = useState({});
  
  // Add a ref to track if we should update API
  const isInitialMount = useRef(true);
  const saveTimeoutRef = useRef(null);
  const indexedDBTimeoutRef = useRef(null);

  // Load initial state from IndexedDB and API once on mount
  useEffect(() => {
    const loadWindowStates = async () => {
      try {
        console.log('Loading window states from IndexedDB and API...');
        
        // First try to load from IndexedDB (works even when offline)
        const indexedDBStates = await getAllWindowStatesFromIndexedDB();
        if (indexedDBStates && indexedDBStates.length > 0) {
          console.log('Loaded window states from IndexedDB:', indexedDBStates);
          
          // Convert array to object with windowId as key
          const windowStatesObj = {};
          indexedDBStates.forEach(state => {
            windowStatesObj[state.id] = {
              type: state.type,
              content: state.content
            };
          });
          
          // Update the state ref
          stateRef.current = {
            windowStates: windowStatesObj
          };
          
          // Force a re-render
          forceUpdate({});
        }
        
        // Then try to load from API (if authenticated)
        const token = localStorage.getItem('auth_token');
        if (!token) {
          isInitialMount.current = false;
          return; // No token, use IndexedDB state
        }
        
        const response = await axios.get(
          `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WINDOW_STATES}`, 
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        if (response.data.windowStates) {
          console.log('Loaded window states from API:', response.data.windowStates);
          
          // Update the state ref directly
          stateRef.current = {
            windowStates: response.data.windowStates
          };
          
          // Force a re-render
          forceUpdate({});
          
          // Also update IndexedDB with the API data
          Object.entries(response.data.windowStates).forEach(([windowId, state]) => {
            saveWindowStateToIndexedDB({
              id: windowId,
              type: state.type,
              content: state.content
            });
            
            // Also save to type-specific stores
            saveTypeSpecificState(windowId, state.type, state.content);
          });
        }
      } catch (error) {
        console.error('Failed to load window states:', error);
      } finally {
        // Mark initial load as complete
        isInitialMount.current = false;
      }
    };
    
    loadWindowStates();
  }, []); // Empty dependency array means this runs once on mount

  // Helper function to save state to type-specific IndexedDB stores
  const saveTypeSpecificState = useCallback(async (windowId, windowType, content) => {
    try {
      switch (windowType) {
        case WINDOW_TYPES.TERMINAL:
          await saveTerminalState({
            id: windowId,
            content
          });
          break;
        case WINDOW_TYPES.CHAT:
          await saveChatState({
            id: windowId,
            content
          });
          break;
        case WINDOW_TYPES.EXPLORER:
          await saveExplorerState({
            id: windowId,
            content
          });
          break;
        default:
          // No type-specific handling needed
          break;
      }
    } catch (error) {
      console.error(`Failed to save ${windowType} state to IndexedDB:`, error);
    }
  }, []);

  // Save to IndexedDB with debounce
  const saveToIndexedDB = useCallback((windowId, windowType, content) => {
    // Clear any existing timeout
    if (indexedDBTimeoutRef.current) {
      clearTimeout(indexedDBTimeoutRef.current);
    }
    
    // Set a new timeout to save the state after a delay
    indexedDBTimeoutRef.current = setTimeout(async () => {
      try {
        // Save to general window states store
        await saveWindowStateToIndexedDB({
          id: windowId,
          type: windowType,
          content
        });
        
        // Save to type-specific store
        await saveTypeSpecificState(windowId, windowType, content);
        
        console.log(`Saved ${windowType} state to IndexedDB for window ${windowId}`);
      } catch (error) {
        console.error('Failed to save window state to IndexedDB:', error);
      }
    }, 300); // 300ms debounce
  }, [saveTypeSpecificState]);

  // Save to API with debounce
  const saveToAPI = useCallback(() => {
    // Skip saving on initial load
    if (isInitialMount.current) {
      return;
    }
    
    // Clear any existing timeout
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    // Set a new timeout to save the state after a delay
    saveTimeoutRef.current = setTimeout(async () => {
      try {
        const token = localStorage.getItem('auth_token');
        if (!token) return; // No token, don't save to API
        
        await axios.post(
          `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WINDOW_STATES}`, 
          { windowStates: stateRef.current.windowStates },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        console.log('Saved window states to API');
      } catch (error) {
        console.error('Failed to save window states to API:', error);
      }
    }, 500); // 500ms debounce
  }, []);

  // Clear window states (used during logout)
  const clearWindowStates = useCallback(() => {
    stateRef.current = initialState;
    forceUpdate({});
  }, []);

  // Reload window states from API (used after login)
  const reloadWindowStates = useCallback(async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) {
        return; // No token, use default empty state
      }
      
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WINDOW_STATES}`, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      if (response.data.windowStates) {
        // Update the state ref directly
        stateRef.current = {
          windowStates: response.data.windowStates
        };
        
        // Force a re-render
        forceUpdate({});
        
        // Also update IndexedDB with the API data
        Object.entries(response.data.windowStates).forEach(([windowId, state]) => {
          saveWindowStateToIndexedDB({
            id: windowId,
            type: state.type,
            content: state.content
          });
          
          // Also save to type-specific stores
          saveTypeSpecificState(windowId, state.type, state.content);
        });
        
        console.log('Window states reloaded after login');
      }
    } catch (error) {
      console.error('Failed to reload window states from API:', error);
    }
  }, [saveTypeSpecificState]);

  // Action creators
  const setWindowState = useCallback((windowId, windowType, content) => {
    // Update the state ref directly
    stateRef.current = {
      ...stateRef.current,
      windowStates: {
        ...stateRef.current.windowStates,
        [windowId]: {
          type: windowType,
          content
        }
      }
    };
    
    // Save to IndexedDB
    saveToIndexedDB(windowId, windowType, content);
    
    // Save to API
    saveToAPI();
    
    // Force a re-render
    forceUpdate({});
  }, [saveToAPI, saveToIndexedDB]);

  const removeWindowState = useCallback((windowId) => {
    // Create a new state object
    const newState = {
      ...stateRef.current,
      windowStates: { ...stateRef.current.windowStates }
    };
    
    // Get the window type before deleting
    const windowType = newState.windowStates[windowId]?.type;
    
    // Delete the window state
    delete newState.windowStates[windowId];
    
    // Update the state ref
    stateRef.current = newState;
    
    // Delete from IndexedDB
    deleteWindowStateFromIndexedDB(windowId);
    
    // Delete active window reference if it exists
    deleteActiveWindow(windowId);
    
    // Save to API
    saveToAPI();
    
    // Force a re-render
    forceUpdate({});
    
    console.log(`Removed window state for window ${windowId}`);
  }, [saveToAPI]);

  const getWindowState = useCallback(async (windowId) => {
    // First check in-memory state
    const memoryState = stateRef.current.windowStates[windowId];
    if (memoryState) {
      return memoryState;
    }
    
    // If not in memory, try to get from IndexedDB
    try {
      const dbState = await getWindowStateFromIndexedDB(windowId);
      if (dbState) {
        // Update in-memory state
        stateRef.current = {
          ...stateRef.current,
          windowStates: {
            ...stateRef.current.windowStates,
            [windowId]: {
              type: dbState.type,
              content: dbState.content
            }
          }
        };
        
        // Force a re-render
        forceUpdate({});
        
        return {
          type: dbState.type,
          content: dbState.content
        };
      }
    } catch (error) {
      console.error(`Failed to get window state for window ${windowId} from IndexedDB:`, error);
    }
    
    return null;
  }, []);

  // Function to save active window reference
  const setActiveWindow = useCallback(async (windowId, windowType) => {
    try {
      await saveActiveWindow({
        id: windowType,
        activeWindowId: windowId
      });
      
      console.log(`Saved active window reference for ${windowType}: ${windowId}`);
    } catch (error) {
      console.error(`Failed to save active window reference for ${windowType}:`, error);
    }
  }, []);

  // Function to get active window reference
  const getActiveWindow = useCallback(async (windowType) => {
    try {
      const activeWindow = await getActiveWindowFromIndexedDB(windowType);
      return activeWindow?.activeWindowId || null;
    } catch (error) {
      console.error(`Failed to get active window reference for ${windowType}:`, error);
      return null;
    }
  }, []);

  // Create a stable context value
  const contextValue = useMemo(() => ({
    windowStates: stateRef.current.windowStates,
    setWindowState,
    removeWindowState,
    getWindowState,
    clearWindowStates,
    reloadWindowStates,
    setActiveWindow,
    getActiveWindow
  }), [
    setWindowState, 
    removeWindowState, 
    getWindowState, 
    clearWindowStates, 
    reloadWindowStates,
    setActiveWindow,
    getActiveWindow
  ]);

  return (
    <WindowStateContext.Provider value={contextValue}>
      {children}
    </WindowStateContext.Provider>
  );
}

// Custom hook to use the window state context
export function useWindowState() {
  const context = useContext(WindowStateContext);
  if (!context) {
    throw new Error('useWindowState must be used within a WindowStateProvider');
  }
  return context;
}

================
File: src/context/WorkspaceContext.jsx
================
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';
import axios from 'axios';
import API_CONFIG from '../config/api';

// Create context
const WorkspaceContext = createContext();

// Initial workspaces
const initialWorkspaces = [
  { id: 1, name: 'Main', root: null, activeNodeId: null, terminalStates: {} },
  { id: 2, name: 'Code', root: null, activeNodeId: null, terminalStates: {} },
  { id: 3, name: 'Terminal', root: null, activeNodeId: null, terminalStates: {} },
  { id: 4, name: 'Preview', root: null, activeNodeId: null, terminalStates: {} }
];

/**
 * WorkspaceProvider component for managing workspace state
 * This handles the persistence of window layouts across page refreshes
 */
export function WorkspaceProvider({ children }) {
  const [workspaces, setWorkspaces] = useState(initialWorkspaces);
  const [currentWorkspaceIndex, setCurrentWorkspaceIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  
  // Function to load workspaces from server
  const loadWorkspaces = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Get auth token
      const token = localStorage.getItem('auth_token');
      if (!token) {
        console.log('No auth token found, using initial workspaces');
        setIsLoading(false);
        return;
      }
      
      // Fetch workspaces from server
      const response = await axios.get(
        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WORKSPACES}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      if (response.data && response.data.workspaces) {
        console.log('Loaded workspaces from server:', response.data.workspaces);
        setWorkspaces(response.data.workspaces);
      } else {
        console.log('No saved workspaces found, using initial workspaces');
      }
    } catch (error) {
      console.error('Failed to load workspaces from server:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);
  
  // Load workspaces from server API on mount
  useEffect(() => {
    loadWorkspaces();
  }, [loadWorkspaces]);
  
  // Save workspaces to server API whenever they change
  useEffect(() => {
    if (isLoading) return; // Skip saving during initial load
    
    const saveWorkspaces = async () => {
      try {
        // Get auth token
        const token = localStorage.getItem('auth_token');
        if (!token) return; // Don't save if not authenticated
        
        // Ensure we're only saving the array of workspaces
        // Create a clean copy without any non-array properties
        const workspacesToSave = [...workspaces].map(workspace => ({
          id: workspace.id,
          name: workspace.name,
          root: workspace.root,
          activeNodeId: workspace.activeNodeId,
          terminalStates: workspace.terminalStates || {}
        }));
        
        console.log('Saving workspaces to server:', workspacesToSave);
        
        // Save workspaces to server
        await axios.post(
          `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.WORKSPACES}`,
          { workspaces: workspacesToSave },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      } catch (error) {
        console.error('Failed to save workspaces to server:', error);
      }
    };
    
    const timeoutId = setTimeout(saveWorkspaces, 500); // Debounce
    return () => clearTimeout(timeoutId);
  }, [workspaces, isLoading]);
  
  // Update a specific workspace
  const updateWorkspace = useCallback((index, updater) => {
    setWorkspaces(prev => {
      const updated = [...prev];
      if (typeof updater === 'function') {
        updated[index] = {
          ...updated[index],
          ...updater(updated[index])
        };
      } else {
        updated[index] = {
          ...updated[index],
          ...updater
        };
      }
      return updated;
    });
  }, []);
  
  // Switch to a different workspace
  const switchWorkspace = useCallback((target) => {
    if (typeof target === 'number' && target >= 0 && target < workspaces.length) {
      setCurrentWorkspaceIndex(target);
    } else if (target === 'right' || target === 'left') {
      setCurrentWorkspaceIndex(prev => {
        const newIndex = target === 'right' 
          ? (prev + 1) % workspaces.length 
          : prev - 1 < 0 ? workspaces.length - 1 : prev - 1;
        return newIndex;
      });
    }
  }, [workspaces.length]);
  
  // Context value
  const value = useMemo(() => ({
    workspaces,
    setWorkspaces,
    currentWorkspaceIndex,
    currentWorkspace: workspaces[currentWorkspaceIndex],
    updateWorkspace,
    switchWorkspace,
    isLoading,
    loadWorkspaces
  }), [workspaces, setWorkspaces, currentWorkspaceIndex, updateWorkspace, switchWorkspace, isLoading, loadWorkspaces]);
  
  return (
    <WorkspaceContext.Provider value={value}>
      {children}
    </WorkspaceContext.Provider>
  );
}

// Custom hook to use the workspace context
export function useWorkspace() {
  const context = useContext(WorkspaceContext);
  if (!context) {
    throw new Error('useWorkspace must be used within a WorkspaceProvider');
  }
  return context;
}

================
File: src/db/db-config.js
================
/**
 * IndexedDB configuration for the window manager
 */

const DB_NAME = 'WindowManagerDB';
const DB_VERSION = 3; // Increment version to trigger database upgrade
const STORES = {
  WORKSPACES: 'workspaces',
  WINDOW_STATES: 'windowStates',
  TERMINAL_STATES: 'terminalStates',
  CHAT_STATES: 'chatStates',
  EXPLORER_STATES: 'explorerStates',
  CANVAS_STATES: 'canvasStates', // Add canvas states store
  ACTIVE_WINDOWS: 'activeWindows'
};

export { DB_NAME, DB_VERSION, STORES };

================
File: src/db/db-operations.js
================
/**
 * Basic CRUD operations for IndexedDB
 */
import { getDB } from './db';

/**
 * Save data to a store
 * @param {string} storeName - The name of the object store
 * @param {Object} data - The data to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveData = async (storeName, data) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.put(data);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(event.target.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

/**
 * Get data from a store
 * @param {string} storeName - The name of the object store
 * @param {string|number} id - The ID of the data to retrieve
 * @returns {Promise<any>} A promise that resolves to the retrieved data
 */
export const getData = async (storeName, id) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.get(id);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(request.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

/**
 * Delete data from a store
 * @param {string} storeName - The name of the object store
 * @param {string|number} id - The ID of the data to delete
 * @returns {Promise<void>} A promise that resolves when the data is deleted
 */
export const deleteData = async (storeName, id) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.delete(id);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve();
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

/**
 * Get all data from a store
 * @param {string} storeName - The name of the object store
 * @returns {Promise<Array>} A promise that resolves to an array of all data in the store
 */
export const getAllData = async (storeName) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.getAll();
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(request.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

/**
 * Clear all data from a store
 * @param {string} storeName - The name of the object store
 * @returns {Promise<void>} A promise that resolves when the store is cleared
 */
export const clearStore = async (storeName) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.clear();
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve();
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

================
File: src/db/db.js
================
/**
 * IndexedDB initialization and core functionality
 */
import { DB_NAME, DB_VERSION, STORES } from './db-config';

/**
 * Initialize the IndexedDB database
 * @returns {Promise<IDBDatabase>} A promise that resolves to the database instance
 */
export const initDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = (event) => {
      console.error('IndexedDB error:', event.target.error);
      reject('Error opening IndexedDB');
    };
    
    request.onsuccess = (event) => {
      const db = event.target.result;
      console.log('IndexedDB opened successfully');
      resolve(db);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      const oldVersion = event.oldVersion;
      
      console.log(`Upgrading IndexedDB from version ${oldVersion} to ${DB_VERSION}`);
      
      // Create object stores if they don't exist
      if (oldVersion < 1) {
        // Initial stores from version 1
        if (!db.objectStoreNames.contains(STORES.WORKSPACES)) {
          db.createObjectStore(STORES.WORKSPACES, { keyPath: 'id' });
          console.log(`Created ${STORES.WORKSPACES} object store`);
        }
        
        if (!db.objectStoreNames.contains(STORES.WINDOW_STATES)) {
          db.createObjectStore(STORES.WINDOW_STATES, { keyPath: 'id' });
          console.log(`Created ${STORES.WINDOW_STATES} object store`);
        }
      }
      
      if (oldVersion < 2) {
        // New stores added in version 2
        if (!db.objectStoreNames.contains(STORES.TERMINAL_STATES)) {
          db.createObjectStore(STORES.TERMINAL_STATES, { keyPath: 'id' });
          console.log(`Created ${STORES.TERMINAL_STATES} object store`);
        }
        
        if (!db.objectStoreNames.contains(STORES.CHAT_STATES)) {
          db.createObjectStore(STORES.CHAT_STATES, { keyPath: 'id' });
          console.log(`Created ${STORES.CHAT_STATES} object store`);
        }
        
        if (!db.objectStoreNames.contains(STORES.EXPLORER_STATES)) {
          db.createObjectStore(STORES.EXPLORER_STATES, { keyPath: 'id' });
          console.log(`Created ${STORES.EXPLORER_STATES} object store`);
        }
        
        if (!db.objectStoreNames.contains(STORES.ACTIVE_WINDOWS)) {
          db.createObjectStore(STORES.ACTIVE_WINDOWS, { keyPath: 'id' });
          console.log(`Created ${STORES.ACTIVE_WINDOWS} object store`);
        }
      }
      
      if (oldVersion < 3) {
        // New stores added in version 3
        if (!db.objectStoreNames.contains(STORES.CANVAS_STATES)) {
          db.createObjectStore(STORES.CANVAS_STATES, { keyPath: 'id' });
          console.log(`Created ${STORES.CANVAS_STATES} object store`);
        }
      }
    };
  });
};

/**
 * Get a database connection
 * @returns {Promise<IDBDatabase>} A promise that resolves to the database instance
 */
export const getDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(event.target.result);
  });
};

================
File: src/hocs/withCommandHandling.jsx
================
import React from 'react';
import { WINDOW_TYPES } from '../utils/windowTypes';
import { COMMAND_ALIASES } from '../utils/commandAliases';

/**
 * Higher-Order Component that adds command handling capabilities to window components.
 * This HOC provides a standardized way to handle commands across different window types,
 * particularly focusing on window transformation commands.
 *
 * @param {React.Component} WrappedComponent - The window component to enhance with command handling
 * @returns {React.Component} - A new component with command handling capabilities
 */
const withCommandHandling = (WrappedComponent) => {
  // Return a new component that includes the command handling functionality
  return function WithCommandHandling({ 
    transformWindow, // Function to change window type
    nodeId,         // Unique identifier for the window
    ...props        // All other props passed to the window
  }) {
    /**
     * Handles commands entered in the window.
     * Currently supports window transformation commands (e.g., 'terminal', 'editor', etc.)
     * Can be extended to handle other command types in the future.
     *
     * @param {string} command - The command string to process
     * @returns {boolean} - Whether the command was handled
     */
    const handleCommand = (command) => {
      // Convert command to lowercase for case-insensitive comparison
      const cmdParts = command.toLowerCase().split(' ');
      let cmd = cmdParts[0];
      
      // Check if the command is an alias and replace it
      if (COMMAND_ALIASES[cmd]) {
        cmd = COMMAND_ALIASES[cmd];
        // If this was the first word of a multi-word command, replace it
        if (cmdParts.length > 1) {
          cmdParts[0] = cmd;
          command = cmdParts.join(' ');
        }
      }
      
      // Check if the command matches any window type
      // This allows commands like 'terminal', 'editor', 'explorer', 'preview'
      const isWindowTypeCommand = Object.keys(WINDOW_TYPES).some(
        type => type.toLowerCase() === cmd
      );

      if (isWindowTypeCommand) {
        // Get the actual window type constant from our types enum
        const requestedType = WINDOW_TYPES[cmd.toUpperCase()];
        
        // Log the transformation request for debugging
        console.log(`Transforming window ${nodeId} to ${requestedType}`);
        
        // Execute the transformation
        transformWindow(nodeId, requestedType);
        
        // Return true to indicate the command was handled
        return true;
      }
      
      // Return false if the command wasn't handled by this HOC
      // This allows the wrapped component to handle other commands if needed
      return false;
    };
    
    // Render the wrapped component with both the original props
    // and our new command handler
    return (
      <WrappedComponent 
        {...props} 
        transformWindow={transformWindow}
        nodeId={nodeId}
        onCommand={handleCommand}
      />
    );
  };
};

export default withCommandHandling;

================
File: src/hocs/withCommandInput.jsx
================
import React, { useState, useRef } from 'react';

/**
 * Higher-Order Component that adds a command input field to any window component.
 * This HOC provides a standardized way to input commands across different window types.
 * The command input is added at the bottom of the window, after any existing content.
 *
 * @param {React.Component} WrappedComponent - The window component to enhance with a command input
 * @returns {React.Component} - A new component with a command input field
 */
const withCommandInput = (WrappedComponent) => {
  return function WithCommandInput({
    onCommand,
    focusRef,
    ...props
  }) {
    const [command, setCommand] = useState('');
    const commandInputRef = useRef(null);

    // Use the provided focusRef for the command input
    const combinedRef = (el) => {
      commandInputRef.current = el;
      if (focusRef) {
        focusRef.current = el;
      }
    };

    const handleKeyDown = (e) => {
      if (e.key === 'Enter' && command.trim()) {
        onCommand(command.trim());
        setCommand('');
      }
    };

    return (
      <div className="h-full flex flex-col">
        {/* Original component takes most of the space */}
        <div className="flex-1 overflow-auto">
          <WrappedComponent
            {...props}
            onCommand={onCommand}
          />
        </div>
        
        {/* Command input - always at the bottom */}
        <div className="p-2 flex items-center gap-2 border-t border-stone-700 bg-stone-900">
          <span className="text-teal-400 mr-2">$</span>
          <input
            ref={combinedRef}
            type="text"
            value={command}
            onChange={(e) => setCommand(e.target.value)}
            onKeyDown={handleKeyDown}
            className="flex-1 bg-stone-800 text-teal-400 px-2 py-1 rounded font-mono text-sm focus:outline-none"
          />
        </div>
      </div>
    );
  };
};

export default withCommandInput;

================
File: src/hocs/withWindowState.jsx
================
import React, { useCallback, useMemo, useRef, useEffect } from 'react';
import { useWindowState } from '../context/WindowStateContext';

/**
 * Higher-Order Component that adds state management capabilities to window components.
 * This HOC provides a standardized way to manage window state across different window types.
 *
 * @param {React.Component} WrappedComponent - The window component to enhance with state management
 * @param {string} windowType - The type of window from WINDOW_TYPES
 * @returns {React.Component} - A new component with state management capabilities
 */
const withWindowState = (WrappedComponent, windowType) => {
  return function WithWindowState({ 
    nodeId,
    isActive,
    ...props
  }) {
    // Create a ref for auto-focusing input elements
    const focusRef = useRef(null);
    
    // Auto-focus when window becomes active
    useEffect(() => {
      if (isActive && focusRef.current) {
        focusRef.current.focus();
      }
    }, [isActive]);
    // Access the window state context
    const { getWindowState, setWindowState } = useWindowState();
    
    // Get the current state or use an empty object if none exists
    // Use useMemo to avoid recreating the object on every render
    const currentState = useMemo(() => {
      return getWindowState(nodeId)?.content || {};
    }, [getWindowState, nodeId]);
    
    // Create an updater function for the component to use
    // Use useCallback to avoid recreating the function on every render
    const updateWindowState = useCallback((updates) => {
      // Get the latest state to ensure we're working with current data
      const latestState = getWindowState(nodeId)?.content || {};
      
      // Allow both object and function updaters
      const newContent = typeof updates === 'function'
        ? updates(latestState)
        : { ...latestState, ...updates };
        
      setWindowState(nodeId, windowType, newContent);
    }, [getWindowState, setWindowState, nodeId, windowType]);
    
    return (
      <WrappedComponent
        {...props}
        nodeId={nodeId}
        windowState={currentState}
        updateWindowState={updateWindowState}
        isActive={isActive}
        focusRef={focusRef}
      />
    );
  };
};

export default withWindowState;

================
File: src/hooks/swapWindows.js
================
// Function to swap two windows in the tree
const swapWindows = useCallback((sourceId, targetId) => {
  if (!sourceId || !targetId || sourceId === targetId) return;

  console.log('Swapping windows:', sourceId, targetId);

  updateWorkspace(workspace => {
    const newRoot = JSON.parse(JSON.stringify(workspace.root));
    
    // Find the nodes to swap
    const sourceNode = findNodeById(newRoot, sourceId);
    const targetNode = findNodeById(newRoot, targetId);
    
    if (!sourceNode || !targetNode) {
      console.log('Could not find one or both nodes to swap');
      return workspace;
    }
    
    // Swap the window types and states
    const tempWindowType = sourceNode.windowType;
    const tempState = sourceNode.state;
    
    sourceNode.windowType = targetNode.windowType;
    sourceNode.state = targetNode.state;
    
    targetNode.windowType = tempWindowType;
    targetNode.state = tempState;
    
    return { ...workspace, root: newRoot };
  });
  
  // Exit move mode after swapping
  setIsMoveMode(false);
  setMoveSourceWindowId(null);
}, [updateWorkspace]);

// Add direct keyboard event listener for move mode
useEffect(() => {
  const handleMoveKeyDown = (e) => {
    // Handle move mode toggle
    if (e.ctrlKey && e.key === 'm') {
      e.preventDefault();
      e.stopPropagation(); // Stop event propagation to prevent multiple handlers
      console.log('Move mode toggle pressed directly in useWindowManager');
      console.log('Current isMoveMode:', isMoveMode);
      
      // Toggle move mode
      setIsMoveMode(!isMoveMode);
      
      // Reset source window when toggling off
      if (isMoveMode) {
        setMoveSourceWindowId(null);
      }
    }
    
    // Handle move mode Enter key
    if (isMoveMode && e.key === 'Enter') {
      e.preventDefault();
      e.stopPropagation();
      console.log('Enter key pressed in move mode');
      
      if (!moveSourceWindowId) {
        // First window selection
        console.log('Selected first window for move:', activeNodeId);
        setMoveSourceWindowId(activeNodeId);
      } else {
        // Second window selection - perform the swap
        console.log('Selected second window for move:', activeNodeId);
        swapWindows(moveSourceWindowId, activeNodeId);
      }
    }
  };
  
  // Add the event listener with capture: true to ensure it runs before other listeners
  window.addEventListener('keydown', handleMoveKeyDown, { capture: true });
  return () => window.removeEventListener('keydown', handleMoveKeyDown, { capture: true });
}, [isMoveMode, moveSourceWindowId, activeNodeId, setIsMoveMode, setMoveSourceWindowId, swapWindows]);

// Debug checks for modes
useEffect(() => {
  console.log('Resize mode:', isResizeMode);
}, [isResizeMode]);

useEffect(() => {
  console.log('Move mode:', isMoveMode);
  if (!isMoveMode) {
    setMoveSourceWindowId(null);
  }
}, [isMoveMode]);

// Function to update terminal state
const updateTerminalState = useCallback((terminalId, newState) => {
  updateWorkspace(workspace => ({
    ...workspace,
    terminalStates: {
      ...workspace.terminalStates,
      [terminalId]: newState
    }
  }));
}, [updateWorkspace]);

return {
  rootNode,
  activeNodeId,
  setActiveNodeId,
  terminalStates,
  updateTerminalState,
  createNewWindow,
  splitWindow,
  closeWindow,
  transformWindow,
  handleCommand,
  navigateToWindow,
  hasActiveWindow: Boolean(activeNodeId),
  hasRootNode: Boolean(rootNode),
  currentWorkspaceIndex,
  workspaceCount: 4,
  switchWorkspace,
  isResizeMode,
  setIsResizeMode,
  resizeActiveWindow,
  isMoveMode,
  setIsMoveMode,
  moveSourceWindowId,
  setMoveSourceWindowId,
  swapWindows
};

================
File: src/hooks/useForceUpdate.js
================
import { useState } from 'react';

export function useForceUpdate() {
    const [state, setState] = useState(0);
    return () => setState((state) => state + 1);
  }

================
File: src/hooks/useKeyboardShortcuts.js
================
import { useEffect } from 'react';
import { WINDOW_TYPES } from '../utils/windowTypes';

/**
 * A custom hook that manages keyboard shortcuts for window operations.
 * This hook centralizes all keyboard-related logic for the window manager.
 * 
 * @param {Object} handlers - Object containing callback functions for various window operations
 * @param {Function} handlers.onSplitVertical - Handler for vertical split command
 * @param {Function} handlers.onSplitHorizontal - Handler for horizontal split command
 * @param {Function} handlers.onClose - Handler for window close command
 * @param {Function} handlers.createNewWindow - Handler for creating new windows
 * @param {boolean} hasActiveWindow - Whether there is currently an active window
 * @param {boolean} hasRootNode - Whether there is a root node in the tree
 */
export const useKeyboardShortcuts = ({
  onSplitVertical,
  onSplitHorizontal,
  onClose,
  createNewWindow,
  hasActiveWindow,
  hasRootNode,
  isResizeMode = false,
  setIsResizeMode = () => console.warn('setIsResizeMode not provided'),
  resizeActiveWindow = () => console.warn('resizeActiveWindow not provided'),
  isMoveMode = false,
  setIsMoveMode = () => console.warn('setIsMoveMode not provided'),
  moveSourceWindowId = null,
  setMoveSourceWindowId = () => console.warn('setMoveSourceWindowId not provided'),
  swapWindows = () => console.warn('swapWindows not provided'),
  activeNodeId = null
}) => {
  // Log the props for debugging
  console.log('useKeyboardShortcuts props:', {
    isResizeMode,
    isMoveMode,
    moveSourceWindowId,
    activeNodeId,
    hasSetIsResizeMode: typeof setIsResizeMode === 'function',
    hasSetIsMoveMode: typeof setIsMoveMode === 'function',
    hasSetMoveSourceWindowId: typeof setMoveSourceWindowId === 'function',
    hasSwapWindows: typeof swapWindows === 'function'
  });
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Handle resize mode toggle
      if (e.ctrlKey && e.key === 'q') {
        e.preventDefault();
        setIsResizeMode(!isResizeMode);
        // Exit move mode if it's active
        if (isMoveMode) {
          setIsMoveMode(false);
          setMoveSourceWindowId(null);
        }
        return;
      }

      // Handle move mode toggle
      if (e.ctrlKey && e.key === 'm') {
        e.preventDefault();
        e.stopPropagation(); // Stop event propagation to prevent multiple handlers
        console.log('Move mode toggle pressed in useKeyboardShortcuts');
        console.log('setIsMoveMode type:', typeof setIsMoveMode);
        console.log('Current isMoveMode:', isMoveMode);
        console.log('Component ID:', Math.random()); // Add a random ID to identify which instance is handling the event
        
        // Check if setIsMoveMode is a function before calling it
        if (typeof setIsMoveMode === 'function') {
          // Toggle move mode with a direct call to ensure it works
          const newMoveMode = !isMoveMode;
          console.log('Setting move mode to:', newMoveMode);
          setIsMoveMode(newMoveMode);
          
          // Reset source window when toggling off
          if (isMoveMode && typeof setMoveSourceWindowId === 'function') {
            setMoveSourceWindowId(null);
          }
          
          // Exit resize mode if it's active
          if (isResizeMode && typeof setIsResizeMode === 'function') {
            setIsResizeMode(false);
          }
        } else {
          console.error('setIsMoveMode is not a function');
        }
        return;
      }

      // Handle move mode Enter key
      if (isMoveMode && e.key === 'Enter') {
        e.preventDefault();
        console.log('Enter key pressed in move mode');
        
        if (!moveSourceWindowId) {
          // First window selection
          console.log('Selected first window for move:', activeNodeId);
          if (typeof setMoveSourceWindowId === 'function') {
            setMoveSourceWindowId(activeNodeId);
          } else {
            console.error('setMoveSourceWindowId is not a function');
          }
        } else {
          // Second window selection - perform the swap
          console.log('Selected second window for move:', activeNodeId);
          if (typeof swapWindows === 'function') {
            swapWindows(moveSourceWindowId, activeNodeId);
          } else {
            console.error('swapWindows is not a function');
          }
        }
        return;
      }

      // Handle resize mode arrow keys
      if (isResizeMode && !e.ctrlKey) {
        switch (e.key) {
          case 'ArrowLeft':
            e.preventDefault();
            resizeActiveWindow('left');
            break;
          case 'ArrowRight':
            e.preventDefault();
            resizeActiveWindow('right');
            break;
          case 'ArrowUp':
            e.preventDefault();
            resizeActiveWindow('up');
            break;
          case 'ArrowDown':
            e.preventDefault();
            resizeActiveWindow('down');
            break;
        }
        return;
      }

      // Handle other keyboard shortcuts...
      if (e.ctrlKey) {
        if (e.key === 'Enter') {
          e.preventDefault();
          if (e.shiftKey) {
            hasActiveWindow ? onSplitVertical() : createNewWindow();
          } else {
            hasActiveWindow ? onSplitHorizontal() : createNewWindow();
          }
        } else if ((e.key === 'Backspace' || e.key === 'Delete') && hasActiveWindow && hasRootNode) {
          e.preventDefault();
          onClose();
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [
    onSplitVertical,
    onSplitHorizontal,
    onClose,
    createNewWindow,
    hasActiveWindow,
    hasRootNode,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows,
    activeNodeId
  ]);
};

================
File: src/hooks/useWindowManager.js
================
import { useState, useCallback, useEffect, useRef } from 'react';
import { Node } from '../models/Node';
import { WINDOW_TYPES } from '../utils/windowTypes';
import { 
  splitNodeById, 
  removeNodeById, 
  findNodeById, 
  findAllWindowIds,
  updateSplitRatio,
  findSiblingWindowId,
  findFirstWindowId
} from '../utils/treeUtils';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowState } from '../context/WindowStateContext';
import { useWorkspace } from '../context/WorkspaceContext';
import { 
  MIN_WINDOW_WIDTH_PX, 
  MIN_WINDOW_HEIGHT_PX 
} from '../utils/windowSizeConstants';
import { 
  saveActiveWindow, 
  getActiveWindow,
  // Include these imports for easier access in our swapWindows function
  getWindowState
} from '../services/indexedDBService';

export const useWindowManager = ({ defaultLayout = null, onFlashBorder = null } = {}) => {
  // Use workspace context instead of internal state
  const { 
    workspaces,
    currentWorkspaceIndex,
    currentWorkspace,
    updateWorkspace,
    switchWorkspace
  } = useWorkspace();
  
  // Get current workspace data
  const rootNode = currentWorkspace.root;
  const activeNodeId = currentWorkspace.activeNodeId;
  const terminalStates = currentWorkspace.terminalStates;
  
  const [isResizeMode, setIsResizeMode] = useState(false);
  const [isMoveMode, setIsMoveMode] = useState(false);
  const [moveSourceWindowId, setMoveSourceWindowId] = useState(null);

  // Create setActiveNodeId function that updates the workspace
  const setActiveNodeId = useCallback((nodeId) => {
    updateWorkspace(currentWorkspaceIndex, workspace => ({
      ...workspace,
      activeNodeId: nodeId
    }));
    
    // Save the active window ID to IndexedDB for persistence across refreshes
    if (nodeId) {
      // Get the window type from the node
      const node = findNodeById(rootNode, nodeId);
      if (node && node.windowType) {
        // Save the active window ID for this window type
        saveActiveWindow({
          id: 'activeWindow',
          activeNodeId: nodeId,
          windowType: node.windowType
        }).catch(error => {
          console.error('Failed to save active window ID to IndexedDB:', error);
        });
      }
    }
  }, [updateWorkspace, currentWorkspaceIndex, rootNode]);
  
  // Load the active window ID from IndexedDB on mount
  useEffect(() => {
    const loadActiveWindow = async () => {
      try {
        // Try to load the active window ID from IndexedDB
        const savedActiveWindow = await getActiveWindow('activeWindow');
        
        if (savedActiveWindow && savedActiveWindow.activeNodeId) {
          console.log('Loaded active window ID from IndexedDB:', savedActiveWindow.activeNodeId);
          
          // Check if the window still exists in the current workspace
          if (rootNode && findNodeById(rootNode, savedActiveWindow.activeNodeId)) {
            // Update the active window ID
            setActiveNodeId(savedActiveWindow.activeNodeId);
          }
        }
      } catch (error) {
        console.error('Failed to load active window ID from IndexedDB:', error);
      }
    };
    
    // Only load if we have a root node but no active node
    if (rootNode && !activeNodeId) {
      loadActiveWindow();
    }
  }, [rootNode, activeNodeId, setActiveNodeId]);

  useEffect(() => {
    const handleWorkspaceKeys = (e) => {
      if (e.ctrlKey && e.altKey) {
        switch (e.key) {
          case 'ArrowRight':
            e.preventDefault();
            switchWorkspace('right');
            break;
          case 'ArrowLeft':
            e.preventDefault();
            switchWorkspace('left');
            break;
          // Removed 'n' key handler for creating new workspaces
        }
      }
    };

    window.addEventListener('keydown', handleWorkspaceKeys);
    return () => window.removeEventListener('keydown', handleWorkspaceKeys);
  }, [switchWorkspace]);

  // Window navigation functions
  const navigateToWindow = useCallback((direction) => {
    if (!activeNodeId || !rootNode) return;
  
    const allWindows = getWindowBounds(rootNode);
    const activeWindow = allWindows.find(w => w.id === activeNodeId);
    if (!activeWindow) return;
  
    // Filter out the active window
    const otherWindows = allWindows.filter(w => w.id !== activeNodeId);
    
    // If no other windows, nothing to navigate to
    if (otherWindows.length === 0) return;
    
    // Calculate the active window's center
    const activeBounds = activeWindow.bounds;
    
    // Helper function to calculate overlap percentage between windows
    const calculateOverlap = (window1, window2, isHorizontal) => {
      if (isHorizontal) {
        // Calculate horizontal overlap
        const overlapStart = Math.max(window1.left, window2.left);
        const overlapEnd = Math.min(window1.right, window2.right);
        if (overlapEnd <= overlapStart) return 0; // No overlap
        
        const overlapWidth = overlapEnd - overlapStart;
        const window1Width = window1.right - window1.left;
        
        return overlapWidth / window1Width;
      } else {
        // Calculate vertical overlap
        const overlapStart = Math.max(window1.top, window2.top);
        const overlapEnd = Math.min(window1.bottom, window2.bottom);
        if (overlapEnd <= overlapStart) return 0; // No overlap
        
        const overlapHeight = overlapEnd - overlapStart;
        const window1Height = window1.bottom - window1.top;
        
        return overlapHeight / window1Height;
      }
    };
    
    // Find windows in the specified direction with a more relaxed approach
    let candidateWindows = [];
    const tolerance = 0.1; // 10% tolerance for adjacency
    
    switch (direction) {
      case 'up':
        // Windows that are above the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be above the active window
          if (bounds.bottom > activeBounds.top) return false;
          
          // Calculate horizontal overlap
          const overlap = calculateOverlap(activeBounds, bounds, true);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'down':
        // Windows that are below the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be below the active window
          if (bounds.top < activeBounds.bottom) return false;
          
          // Calculate horizontal overlap
          const overlap = calculateOverlap(activeBounds, bounds, true);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'left':
        // Windows that are to the left of the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be to the left of the active window
          if (bounds.right > activeBounds.left) return false;
          
          // Calculate vertical overlap
          const overlap = calculateOverlap(activeBounds, bounds, false);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
        
      case 'right':
        // Windows that are to the right of the active window
        candidateWindows = otherWindows.filter(w => {
          const bounds = w.bounds;
          // Window must be to the right of the active window
          if (bounds.left < activeBounds.right) return false;
          
          // Calculate vertical overlap
          const overlap = calculateOverlap(activeBounds, bounds, false);
          return overlap > 0; // Any overlap makes it a candidate
        });
        break;
    }
    
    // If no candidates found, return
    if (candidateWindows.length === 0) return;
    
    // Calculate scores for each candidate window based on:
    // 1. Overlap percentage (higher is better)
    // 2. Distance from active window (lower is better)
    const scoredWindows = candidateWindows.map(window => {
      const bounds = window.bounds;
      let overlapScore = 0;
      let distanceScore = 0;
      
      switch (direction) {
        case 'up':
          overlapScore = calculateOverlap(activeBounds, bounds, true);
          distanceScore = activeBounds.top - bounds.bottom;
          break;
          
        case 'down':
          overlapScore = calculateOverlap(activeBounds, bounds, true);
          distanceScore = bounds.top - activeBounds.bottom;
          break;
          
        case 'left':
          overlapScore = calculateOverlap(activeBounds, bounds, false);
          distanceScore = activeBounds.left - bounds.right;
          break;
          
        case 'right':
          overlapScore = calculateOverlap(activeBounds, bounds, false);
          distanceScore = bounds.left - activeBounds.right;
          break;
      }
      
      // Normalize distance score (closer is better)
      const normalizedDistanceScore = 1 / (1 + distanceScore);
      
      // Calculate final score with higher weight on overlap
      const finalScore = (overlapScore * 0.7) + (normalizedDistanceScore * 0.3);
      
      return {
        window,
        overlapScore,
        distanceScore,
        finalScore
      };
    });
    
    // Sort by final score (higher is better)
    scoredWindows.sort((a, b) => b.finalScore - a.finalScore);
    
    // Select the window with the highest score
    const nextWindow = scoredWindows[0].window;
    
    if (nextWindow) {
      setActiveNodeId(nextWindow.id);
    }
  }, [activeNodeId, rootNode, setActiveNodeId]);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (!e.ctrlKey) return;
  
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          navigateToWindow('left');
          break;
        case 'ArrowRight':
          e.preventDefault();
          navigateToWindow('right');
          break;
        case 'ArrowUp':
          e.preventDefault();
          navigateToWindow('up');
          break;
        case 'ArrowDown':
          e.preventDefault();
          navigateToWindow('down');
          break;
      }
    };
  
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [navigateToWindow]);

  // Get window state management functions
  const { getWindowState, setWindowState, removeWindowState } = useWindowState();

  // Helper function to convert percentage-based bounds to pixel dimensions
  const calculatePixelDimensions = useCallback((bounds) => {
    const windowWidth = window.innerWidth;
    const windowHeight = window.innerHeight;
    
    const pixelDimensions = {
      width: (bounds.width / 100) * windowWidth,
      height: (bounds.height / 100) * windowHeight
    };
    
    console.log('Window dimensions (percentage):', bounds);
    console.log('Window dimensions (pixels):', pixelDimensions);
    console.log('Minimum required:', MIN_WINDOW_WIDTH_PX, 'x', MIN_WINDOW_HEIGHT_PX);
    console.log('Is too small:', 
      pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
      pixelDimensions.height < MIN_WINDOW_HEIGHT_PX
    );
    
    return pixelDimensions;
  }, []);

  // Helper function to check if a resize operation would result in windows that are too small
  const wouldViolateMinSize = useCallback((root, direction, affectedSplits, resizeStep) => {
    console.log('Checking if resize would violate minimum size...');
    console.log('Direction:', direction);
    console.log('Affected splits:', affectedSplits.length);
    console.log('Browser window size:', window.innerWidth, 'x', window.innerHeight);
    
    // Create a deep copy of the root to simulate the resize
    const simulatedRoot = JSON.parse(JSON.stringify(root));
    
    // Apply the resize to the simulated root
    affectedSplits.forEach(({ node: originalNode, targetInFirst, isRightSide, isBottomSide }) => {
      // Find the corresponding node in the simulated root
      const simulatedNode = findNodeById(simulatedRoot, originalNode.id);
      if (!simulatedNode) return;
      
      console.log('Simulating resize on node:', simulatedNode.id);
      console.log('Original split ratio:', simulatedNode.splitRatio);
      
      // Determine effective direction
      let effectiveDirection = direction;
      if (isRightSide && (direction === 'left' || direction === 'right')) {
        effectiveDirection = direction === 'left' ? 'right' : 'left';
      }
      if (isBottomSide && (direction === 'up' || direction === 'down')) {
        effectiveDirection = direction === 'up' ? 'down' : 'up';
      }
      
      console.log('Effective direction:', effectiveDirection);
      
      // Apply the resize
      switch (effectiveDirection) {
        case 'left': // Shrink width
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          } else {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          }
          break;
          
        case 'right': // Grow width
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          } else {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          }
          break;
          
        case 'up': // Shrink height
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          } else {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          }
          break;
          
        case 'down': // Grow height
          if (targetInFirst) {
            simulatedNode.splitRatio = Math.min(0.9, simulatedNode.splitRatio + resizeStep);
          } else {
            simulatedNode.splitRatio = Math.max(0.1, simulatedNode.splitRatio - resizeStep);
          }
          break;
      }
      
      console.log('New split ratio:', simulatedNode.splitRatio);
    });
    
    // Calculate the bounds of all windows after the simulated resize
    const simulatedWindows = getWindowBounds(simulatedRoot);
    console.log('Number of windows to check:', simulatedWindows.length);
    
    // Check if any window would be smaller than the minimum size
    const tooSmallWindows = simulatedWindows.filter(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
             pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
    });
    
    const wouldViolate = tooSmallWindows.length > 0;
    console.log('Windows that would be too small:', tooSmallWindows.length);
    console.log('Would violate minimum size:', wouldViolate);
    
    return wouldViolate;
  }, [calculatePixelDimensions]);

  // Define splitWindow before createNewWindow since createNewWindow depends on it
  const splitWindow = useCallback((nodeId, direction, newWindow = null) => {
    // Create a new terminal window if one wasn't provided
    if (!newWindow) {
      newWindow = Node.createWindow(Date.now(), WINDOW_TYPES.TERMINAL);
      
      // Initialize terminal state with default content
      const initialContent = {
        history: ['Welcome to the Terminal! Type "help" for available commands.'],
        commandHistory: []
      };
      
      // Set the initial window state for the terminal
      setWindowState(newWindow.id, WINDOW_TYPES.TERMINAL, initialContent);
      
      // Also update the workspace terminal states
      updateWorkspace(currentWorkspaceIndex, workspace => ({
        ...workspace,
        terminalStates: {
          ...workspace.terminalStates,
          [newWindow.id]: {
            history: initialContent.history,
            commandHistory: initialContent.commandHistory
          }
        }
      }));
    }
    
    // Check if splitting would result in windows that are too small
    const simulatedRoot = JSON.parse(JSON.stringify(rootNode));
    const simulatedSplitRoot = splitNodeById(simulatedRoot, nodeId, direction, JSON.parse(JSON.stringify(newWindow)));
    
    // Calculate the bounds of all windows after the simulated split
    const simulatedWindows = getWindowBounds(simulatedSplitRoot);
    console.log('Simulating split - number of windows:', simulatedWindows.length);
    
    // Check if any window would be smaller than the minimum size
    const tooSmallWindows = simulatedWindows.filter(window => {
      const pixelDimensions = calculatePixelDimensions(window.bounds);
      return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
             pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
    });
    
    const wouldViolate = tooSmallWindows.length > 0;
    console.log('Split would create windows that are too small:', wouldViolate);
    
    if (wouldViolate) {
      console.log('Split blocked: would result in windows smaller than minimum size');
      // Flash the window being split to indicate we've hit the minimum size
      if (onFlashBorder && nodeId) {
        onFlashBorder(nodeId);
      }
      return;
    }
  
  // Update workspace with the new split and set the new window as active
  updateWorkspace(currentWorkspaceIndex, workspace => ({
    ...workspace,
    root: splitNodeById(workspace.root, nodeId, direction, newWindow),
    activeNodeId: newWindow.id // Automatically make the new window active
  }));
  }, [updateWorkspace, getWindowState, setWindowState, rootNode, calculatePixelDimensions, currentWorkspaceIndex]);

  const createNewWindow = useCallback((windowType) => {
    const newNode = Node.createWindow(Date.now(), windowType || WINDOW_TYPES.TERMINAL);
    
    // Initialize window state based on window type
    const initialContent = {};
    
    if (windowType === WINDOW_TYPES.TERMINAL) {
      // Initialize terminal state
      initialContent.history = ['Welcome to the Terminal! Type "help" for available commands.'];
      initialContent.commandHistory = [];
      
      updateWorkspace(currentWorkspaceIndex, workspace => ({
        ...workspace,
        terminalStates: {
          ...workspace.terminalStates,
          [newNode.id]: {
            history: initialContent.history,
            commandHistory: initialContent.commandHistory
          }
        }
      }));
    } else if (windowType === WINDOW_TYPES.EDITOR) {
      // Initialize editor state with default content
      initialContent.text = `function hello() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhello();`;
    } else if (windowType === WINDOW_TYPES.EXPLORER) {
      // Initialize explorer state
      initialContent.currentPath = '/';
      initialContent.selectedItem = null;
    }
    
    // Set the initial window state
    setWindowState(newNode.id, newNode.windowType, initialContent);
    
    if (!rootNode) {
      // First window, always allowed
      updateWorkspace(currentWorkspaceIndex, {
        root: newNode,
        activeNodeId: newNode.id
      });
      return;
    }
    
    if (!activeNodeId) {
      // No active window, but we have a root - this is unusual
      // Let's check if we can add a window without violating minimum size
      const simulatedRoot = JSON.parse(JSON.stringify(rootNode));
      const simulatedWindows = getWindowBounds(simulatedRoot);
      
      // Check if existing windows are already too small
      const tooSmallWindows = simulatedWindows.filter(window => {
        const pixelDimensions = calculatePixelDimensions(window.bounds);
        return pixelDimensions.width < MIN_WINDOW_WIDTH_PX || 
               pixelDimensions.height < MIN_WINDOW_HEIGHT_PX;
      });
      
      if (tooSmallWindows.length > 0) {
        console.log('Cannot create new window: existing windows are already too small');
        // Flash the window that would be affected
        if (onFlashBorder && rootNode) {
          // If there's no active window but there's a root node, flash the root node
          const nodeToFlash = rootNode.type === 'window' ? rootNode.id : null;
          if (nodeToFlash) {
            onFlashBorder(nodeToFlash);
          }
        }
        return;
      }
      
      updateWorkspace(currentWorkspaceIndex, {
        root: newNode,
        activeNodeId: newNode.id
      });
      return;
    }
    
    // Use splitWindow which already has minimum size checks and now automatically sets the new window as active
    splitWindow(activeNodeId, 'vertical', newNode);
    // setActiveNodeId call is removed as splitWindow now handles this automatically
  }, [rootNode, activeNodeId, updateWorkspace, setActiveNodeId, setWindowState, calculatePixelDimensions, splitWindow, currentWorkspaceIndex]);

  const closeWindow = useCallback((nodeId) => {
    // Clean up window state when closing a window
    removeWindowState(nodeId);
    
    // Special case: If closing the only window in the workspace
    if (rootNode.type === 'window' && rootNode.id === nodeId) {
      updateWorkspace(currentWorkspaceIndex, {
        root: null,
        activeNodeId: null
      });
      return;
    }

    // Before removing the node, try to find its sibling for activating it later
    const siblingWindowId = findSiblingWindowId(rootNode, nodeId);
    console.log(`Found sibling window ID for ${nodeId}: ${siblingWindowId}`);
    
    const newRoot = JSON.parse(JSON.stringify(rootNode));
    const result = removeNodeById(newRoot, nodeId);
    
    if (activeNodeId === nodeId && result) {
      // If the closed window was active, activate its sibling if possible
      // Otherwise fall back to the first window in the tree
      const nextWindowId = siblingWindowId || findAllWindowIds(result)[0] || null;
      updateWorkspace(currentWorkspaceIndex, {
        root: result,
        activeNodeId: nextWindowId
      });
    } else {
      updateWorkspace(currentWorkspaceIndex, {
        root: result
      });
    }
  }, [rootNode, activeNodeId, updateWorkspace, removeWindowState, currentWorkspaceIndex]);

  const transformWindow = useCallback((nodeId, newType) => {
    const newRoot = JSON.parse(JSON.stringify(rootNode));
    
    // Get the current window state before transformation
    const currentWindowState = getWindowState(nodeId);
    
    const updateNodeInTree = (node) => {
      if (!node) return null;
      
      if (node.type === 'window' && node.id === nodeId) {
        // Update the window type
        node.windowType = newType;
        
        // Update the window state with the new type but preserve content
        if (currentWindowState) {
          // If transforming to a terminal window, clear the currentInput field
          if (newType === WINDOW_TYPES.TERMINAL) {
            const updatedContent = { 
              ...currentWindowState.content,
              currentInput: '' // Clear the input field
            };
            setWindowState(nodeId, newType, updatedContent);
          } else {
            setWindowState(nodeId, newType, currentWindowState.content);
          }
        }
        
        return true;
      }
      
      if (node.type === 'split') {
        return updateNodeInTree(node.first) || updateNodeInTree(node.second);
      }
      
      return false;
    };
    
    const updated = updateNodeInTree(newRoot);
    if (updated) {
      updateWorkspace(currentWorkspaceIndex, {
        root: newRoot
      });
    }
  }, [rootNode, updateWorkspace, getWindowState, setWindowState, currentWorkspaceIndex]);

  const handleCommand = useCallback((command) => {
    const parts = command.split(' ');
    const cmd = parts[0].toLowerCase();

    switch (cmd) {
      case 'split':
        if (activeNodeId) {
          const direction = parts[1] === 'vertical' ? 'vertical' : 'horizontal';
          // splitWindow automatically makes the new window active
          splitWindow(activeNodeId, direction);
        }
        break;
      case 'close':
        if (activeNodeId) {
          closeWindow(activeNodeId);
        }
        break;
    }
  }, [activeNodeId, splitWindow, closeWindow, currentWorkspaceIndex]);

  const resizeActiveWindow = useCallback((direction) => {
    if (!activeNodeId || !rootNode || !isResizeMode) return;
  
    updateWorkspace(currentWorkspaceIndex, workspace => {
      const newRoot = JSON.parse(JSON.stringify(workspace.root));
      
      // Helper function to find all affected splits and determine if window is in second child
      const findAffectedSplits = (node, targetId) => {
        if (!node) return [];
        
        const splits = [];
        if (node.type === 'split') {
          const targetInFirst = findNodeById(node.first, targetId);
          const targetInSecond = findNodeById(node.second, targetId);
          
          if (targetInFirst || targetInSecond) {
            // Add this split if it matches our resize direction
            if ((direction === 'left' || direction === 'right') && node.direction === 'horizontal') {
              splits.push({ 
                node, 
                targetInFirst: !!targetInFirst,
                // If this is a horizontal split and window is in second child, it's on the right side
                isRightSide: !!targetInSecond && node.direction === 'horizontal'
              });
            }
            if ((direction === 'up' || direction === 'down') && node.direction === 'vertical') {
              splits.push({ 
                node, 
                targetInFirst: !!targetInFirst,
                isRightSide: !!targetInSecond && node.direction === 'horizontal',
                isBottomSide: !!targetInSecond && node.direction === 'vertical'
              });
            }
          }
          
          splits.push(...findAffectedSplits(node.first, targetId));
          splits.push(...findAffectedSplits(node.second, targetId));
        }
        
        return splits;
      };
  
      const affectedSplits = findAffectedSplits(newRoot, activeNodeId);
      const resizeStep = 0.05;
      
      // We no longer block resize operations based on minimum size
      // Just log that windows will be below minimum size
      const willViolateMinSize = wouldViolateMinSize(newRoot, direction, affectedSplits, resizeStep);
      if (willViolateMinSize) {
        console.log('Windows will be below minimum size, but resize is allowed');
      }
  
      // Apply resize to all affected splits
      affectedSplits.forEach(({ node, targetInFirst, isRightSide, isBottomSide }) => {
        // Determine if we need to invert the direction based on window position
        let effectiveDirection = direction;
        if (isRightSide && (direction === 'left' || direction === 'right')) {
          effectiveDirection = direction === 'left' ? 'right' : 'left';
        }
        if (isBottomSide && (direction === 'up' || direction === 'down')) {
          effectiveDirection = direction === 'up' ? 'down' : 'up';
        }
        
        switch (effectiveDirection) {
          case 'left': // Shrink width
            if (targetInFirst) {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            } else {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            }
            break;
            
          case 'right': // Grow width
            if (targetInFirst) {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            } else {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            }
            break;
            
          case 'up': // Shrink height
            if (targetInFirst) {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            } else {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            }
            break;
            
          case 'down': // Grow height
            if (targetInFirst) {
              node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
            } else {
              node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
            }
            break;
        }
      });
  
      return { ...workspace, root: newRoot };
    });
  }, [activeNodeId, rootNode, isResizeMode, updateWorkspace, wouldViolateMinSize, currentWorkspaceIndex]);
  
  // Function to swap two windows in the tree
  const swapWindows = useCallback(async (sourceId, targetId) => {
    if (!sourceId || !targetId || sourceId === targetId) return;

    console.log('Swapping windows:', sourceId, targetId);

    // First, get the window types and existing IndexedDB states before we modify anything
    const sourceNode = findNodeById(rootNode, sourceId);
    const targetNode = findNodeById(rootNode, targetId);
    
    if (!sourceNode || !targetNode) {
      console.log('Could not find one or both nodes to swap');
      return;
    }
    
    const sourceWindowType = sourceNode.windowType;
    const targetWindowType = targetNode.windowType;
    
    // Create a map to store window states that will be preserved across swaps
    const stateMap = {};
    
    // Handle sessionStorage and localStorage swapping for chat windows
    if (sourceWindowType === WINDOW_TYPES.CHAT || targetWindowType === WINDOW_TYPES.CHAT) {
      console.log('Swapping chat window sessionStorage and localStorage entries');
      
      // Swap active room selections in sessionStorage
      const sourceActiveRoom = sessionStorage.getItem(`chat_active_room_${sourceId}`);
      const targetActiveRoom = sessionStorage.getItem(`chat_active_room_${targetId}`);
      
      console.log('Chat active rooms before swap:', { sourceActiveRoom, targetActiveRoom });
      
      if (sourceActiveRoom && targetWindowType === WINDOW_TYPES.CHAT) {
        sessionStorage.setItem(`chat_active_room_${targetId}`, sourceActiveRoom);
      }
      
      if (targetActiveRoom && sourceWindowType === WINDOW_TYPES.CHAT) {
        sessionStorage.setItem(`chat_active_room_${sourceId}`, targetActiveRoom);
      }
      
      // Get a list of all localStorage keys that might contain draft messages
      const allKeys = [];
      for (let i = 0; i < localStorage.length; i++) {
        allKeys.push(localStorage.key(i));
      }
      
      // Filter keys related to each window
      const sourceKeys = allKeys.filter(key => key.startsWith(`chat_draft_${sourceId}_`));
      const targetKeys = allKeys.filter(key => key.startsWith(`chat_draft_${targetId}_`));
      
      console.log('Draft message keys before swap:', { sourceKeys, targetKeys });
      
      // Swap draft messages in localStorage
      if (targetWindowType === WINDOW_TYPES.CHAT) {
        sourceKeys.forEach(key => {
          const value = localStorage.getItem(key);
          const roomId = key.split('_')[3]; // Extract room ID from key format "chat_draft_nodeId_roomId"
          localStorage.setItem(`chat_draft_${targetId}_${roomId}`, value);
        });
      }
      
      if (sourceWindowType === WINDOW_TYPES.CHAT) {
        targetKeys.forEach(key => {
          const value = localStorage.getItem(key);
          const roomId = key.split('_')[3]; // Extract room ID from key format "chat_draft_nodeId_roomId"
          localStorage.setItem(`chat_draft_${sourceId}_${roomId}`, value);
        });
      }
      
      console.log('Successfully swapped chat window storage entries');
    }
    
    // Wait for IndexedDB operations to complete before continuing
    try {
      console.log('Starting IndexedDB state swap, waiting for completion...');
      
      // Import necessary functions to handle specific window types
      const { 
        getExplorerState, saveExplorerState,
        getTerminalState, saveTerminalState,
        getChatState, saveChatState,
        getCanvasState, saveCanvasState,
        getWindowState, saveWindowState,
        deleteExplorerState, deleteWindowState
      } = await import('../services/indexedDBService');
      
      console.log('Swapping IndexedDB states for window types:', sourceWindowType, targetWindowType);
      
      // Get current states from IndexedDB and store in our state map
      // This ensures we don't lose state during the swap process
      
      // Get Explorer states if applicable
      if (sourceWindowType === WINDOW_TYPES.EXPLORER) {
        const state = await getExplorerState(sourceId);
        if (state && state.content) {
          stateMap[`explorer_${sourceId}`] = state.content;
          console.log('Saved source explorer state:', state.content);
        }
      }
      
      if (targetWindowType === WINDOW_TYPES.EXPLORER) {
        const state = await getExplorerState(targetId);
        if (state && state.content) {
          stateMap[`explorer_${targetId}`] = state.content;
          console.log('Saved target explorer state:', state.content);
        }
      }
      
      // Get Terminal states if applicable
      if (sourceWindowType === WINDOW_TYPES.TERMINAL) {
        const state = await getTerminalState(sourceId);
        if (state && state.content) {
          stateMap[`terminal_${sourceId}`] = state.content;
          console.log('Saved source terminal state:', state.content);
        }
      }
      
      if (targetWindowType === WINDOW_TYPES.TERMINAL) {
        const state = await getTerminalState(targetId);
        if (state && state.content) {
          stateMap[`terminal_${targetId}`] = state.content;
          console.log('Saved target terminal state:', state.content);
        }
      }
      
      // Get Chat states if applicable
      if (sourceWindowType === WINDOW_TYPES.CHAT) {
        const state = await getChatState(sourceId);
        if (state && state.content) {
          stateMap[`chat_${sourceId}`] = state.content;
          console.log('Saved source chat state:', state.content);
        }
      }
      
      if (targetWindowType === WINDOW_TYPES.CHAT) {
        const state = await getChatState(targetId);
        if (state && state.content) {
          stateMap[`chat_${targetId}`] = state.content;
          console.log('Saved target chat state:', state.content);
        }
      }
      
      // Get Canvas states if applicable
      if (sourceWindowType === WINDOW_TYPES.CANVAS) {
        const state = await getCanvasState(sourceId);
        if (state && state.content) {
          stateMap[`canvas_${sourceId}`] = state.content;
          console.log('Saved source canvas state:', state.content);
        }
      }
      
      if (targetWindowType === WINDOW_TYPES.CANVAS) {
        const state = await getCanvasState(targetId);
        if (state && state.content) {
          stateMap[`canvas_${targetId}`] = state.content;
          console.log('Saved target canvas state:', state.content);
        }
      }
      
      // Get generic window states
      const sourceGenericState = await getWindowState(sourceId);
      if (sourceGenericState && sourceGenericState.content) {
        stateMap[`generic_${sourceId}`] = sourceGenericState.content;
        console.log('Saved source generic state:', sourceGenericState.content);
      }
      
      const targetGenericState = await getWindowState(targetId);
      if (targetGenericState && targetGenericState.content) {
        stateMap[`generic_${targetId}`] = targetGenericState.content;
        console.log('Saved target generic state:', targetGenericState.content);
      }
      
      // We now have all states backed up in our stateMap
      // Next, we'll remove existing states to prepare for swapping
      
      // Remove explorer states
      if (sourceWindowType === WINDOW_TYPES.EXPLORER) {
        await deleteExplorerState(sourceId);
      }
      if (targetWindowType === WINDOW_TYPES.EXPLORER) {
        await deleteExplorerState(targetId);
      }
      
      // Remove generic states
      await deleteWindowState(sourceId);
      await deleteWindowState(targetId);
      
      // Now we'll write back the swapped states
      
      // Swap Explorer states
      if (sourceWindowType === WINDOW_TYPES.EXPLORER && stateMap[`explorer_${sourceId}`]) {
        await saveExplorerState({
          id: targetId,
          content: stateMap[`explorer_${sourceId}`]
        });
        console.log('Saved source explorer state to target');
      }
      
      if (targetWindowType === WINDOW_TYPES.EXPLORER && stateMap[`explorer_${targetId}`]) {
        await saveExplorerState({
          id: sourceId,
          content: stateMap[`explorer_${targetId}`]
        });
        console.log('Saved target explorer state to source');
      }
      
      // Swap Terminal states
      if (sourceWindowType === WINDOW_TYPES.TERMINAL && stateMap[`terminal_${sourceId}`]) {
        await saveTerminalState({
          id: targetId,
          content: stateMap[`terminal_${sourceId}`]
        });
        console.log('Saved source terminal state to target');
      }
      
      if (targetWindowType === WINDOW_TYPES.TERMINAL && stateMap[`terminal_${targetId}`]) {
        await saveTerminalState({
          id: sourceId,
          content: stateMap[`terminal_${targetId}`]
        });
        console.log('Saved target terminal state to source');
      }
      
      // Swap Chat states
      if (sourceWindowType === WINDOW_TYPES.CHAT && stateMap[`chat_${sourceId}`]) {
        await saveChatState({
          id: targetId,
          content: stateMap[`chat_${sourceId}`]
        });
        console.log('Saved source chat state to target');
      }
      
      if (targetWindowType === WINDOW_TYPES.CHAT && stateMap[`chat_${targetId}`]) {
        await saveChatState({
          id: sourceId,
          content: stateMap[`chat_${targetId}`]
        });
        console.log('Saved target chat state to source');
      }
      
      // Swap Canvas states
      if (sourceWindowType === WINDOW_TYPES.CANVAS && stateMap[`canvas_${sourceId}`]) {
        await saveCanvasState({
          id: targetId,
          content: stateMap[`canvas_${sourceId}`]
        });
        console.log('Saved source canvas state to target');
      }
      
      if (targetWindowType === WINDOW_TYPES.CANVAS && stateMap[`canvas_${targetId}`]) {
        await saveCanvasState({
          id: sourceId,
          content: stateMap[`canvas_${targetId}`]
        });
        console.log('Saved target canvas state to source');
      }
      
      // Swap generic window states
      if (stateMap[`generic_${sourceId}`]) {
        await saveWindowState({
          id: targetId,
          type: sourceWindowType,
          content: stateMap[`generic_${sourceId}`]
        });
        console.log('Saved source generic state to target');
      }
      
      if (stateMap[`generic_${targetId}`]) {
        await saveWindowState({
          id: sourceId,
          type: targetWindowType,
          content: stateMap[`generic_${targetId}`]
        });
        console.log('Saved target generic state to source');
      }
      
      console.log('Successfully swapped all IndexedDB states');
    } catch (error) {
      console.error('Error swapping IndexedDB states:', error);
    }

    // Update the in-memory workspace state
    updateWorkspace(currentWorkspaceIndex, workspace => {
      const newRoot = JSON.parse(JSON.stringify(workspace.root));
      
      // Find the nodes to swap again in the new root
      const sourceNode = findNodeById(newRoot, sourceId);
      const targetNode = findNodeById(newRoot, targetId);
      
      if (!sourceNode || !targetNode) {
        console.log('Could not find one or both nodes to swap in new root');
        return workspace;
      }
      
      // Swap the window types and states
      const tempWindowType = sourceNode.windowType;
      const tempState = sourceNode.state;
      
      sourceNode.windowType = targetNode.windowType;
      sourceNode.state = targetNode.state;
      
      targetNode.windowType = tempWindowType;
      targetNode.state = tempState;
      
      return { ...workspace, root: newRoot };
    });
    
    // Exit move mode after swapping
    setIsMoveMode(false);
    setMoveSourceWindowId(null);
    
    // Add small delay to ensure state changes propagate correctly
    await new Promise(resolve => setTimeout(resolve, 100));
    
    console.log('Window swap complete');
  }, [updateWorkspace, currentWorkspaceIndex, rootNode]);

  // Add direct keyboard event listener for move mode
  useEffect(() => {
    const handleMoveKeyDown = (e) => {
      // Handle move mode toggle
      if (e.ctrlKey && e.key === 'm') {
        e.preventDefault();
        e.stopPropagation(); // Stop event propagation to prevent multiple handlers
        console.log('Move mode toggle pressed directly in useWindowManager');
        console.log('Current isMoveMode:', isMoveMode);
        
        // Toggle move mode
        setIsMoveMode(!isMoveMode);
        
        // Reset source window when toggling off
        if (isMoveMode) {
          setMoveSourceWindowId(null);
        }
      }
      
      // Handle move mode Enter key
      if (isMoveMode && e.key === 'Enter') {
        e.preventDefault();
        e.stopPropagation();
        console.log('Enter key pressed in move mode');
        
        if (!moveSourceWindowId) {
          // First window selection
          console.log('Selected first window for move:', activeNodeId);
          setMoveSourceWindowId(activeNodeId);
        } else {
          // Second window selection - perform the swap
          console.log('Selected second window for move:', activeNodeId);
          swapWindows(moveSourceWindowId, activeNodeId);
        }
      }
    };
    
    // Add the event listener with capture: true to ensure it runs before other listeners
    window.addEventListener('keydown', handleMoveKeyDown, { capture: true });
    return () => window.removeEventListener('keydown', handleMoveKeyDown, { capture: true });
  }, [isMoveMode, moveSourceWindowId, activeNodeId, setIsMoveMode, setMoveSourceWindowId, swapWindows]);

  // Debug checks for modes
  useEffect(() => {
    console.log('Resize mode:', isResizeMode);
  }, [isResizeMode]);

  useEffect(() => {
    console.log('Move mode:', isMoveMode);
    if (!isMoveMode) {
      setMoveSourceWindowId(null);
    }
  }, [isMoveMode]);

  // Function to update terminal state
  const updateTerminalState = useCallback((terminalId, newState) => {
    updateWorkspace(currentWorkspaceIndex, workspace => ({
      ...workspace,
      terminalStates: {
        ...workspace.terminalStates,
        [terminalId]: newState
      }
    }));
  }, [updateWorkspace, currentWorkspaceIndex]);

  return {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    createNewWindow,
    splitWindow,
    closeWindow,
    transformWindow,
    handleCommand,
    navigateToWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    currentWorkspaceIndex,
    workspaceCount: 4,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  };
};

================
File: src/main.jsx
================
// Import polyfill for simple-peer library
import './utils/globalPolyfill.js'

// Import the cache manager utility
import cacheManager from './utils/cacheManager.js'

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles.css'
import './App.css'
import { WindowStateProvider } from './context/WindowStateContext'
import { WorkspaceProvider } from './context/WorkspaceContext'
import { AuthProvider, AuthProviderWithWindowState } from './context/AuthContext'
import { AnnouncementProvider } from './context/AnnouncementContext'
import PartyProvider from './context/PartyContext'
import DebugLogger from './utils/debugLogger'

// debug logger (disables logs by default)
DebugLogger.init();

// Check for application updates and clear cache if needed
const cacheCleared = cacheManager.checkAndUpdateVersion();
if (cacheCleared) {
  console.log('Cache cleared due to application update');
  // We don't force reload here to avoid infinite reload loops
}

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthProvider>
      <WindowStateProvider>
        <WorkspaceProvider>
          <AuthProviderWithWindowState>
            <AnnouncementProvider>
              <PartyProvider>
                <App />
              </PartyProvider>
            </AnnouncementProvider>
          </AuthProviderWithWindowState>
        </WorkspaceProvider>
      </WindowStateProvider>
    </AuthProvider>
  </React.StrictMode>,
)

================
File: src/models/Node.js
================
/**
 * Node class representing a window or split in the window management system.
 * Forms the foundation of our tree-based window layout structure.
 */
export class Node {
  constructor(id, type) {
    this.id = id;
    this.type = type;
    this.windowType = null;
    this.direction = null;
    this.first = null;
    this.second = null;
    this.splitRatio = 0.5;
    this.minimumSize = 20;
    this.state = null;
  }

  static createWindow(id, windowType, state = null) {
    const node = new Node(id, 'window');
    node.windowType = windowType;
    node.state = state;
    return node;
  }

  static createSplit(direction, first, second, ratio = 0.5) {
    const node = new Node(Date.now(), 'split');
    node.direction = direction;
    node.first = first;
    node.second = second;
    node.splitRatio = ratio;
    return node;
  }
}

================
File: src/services/indexedDBService.js
================
/**
 * IndexedDB service for the window manager
 * Provides specific functions for working with workspaces and window states
 */
import { initDB } from '../db/db';
import { saveData, getData, getAllData, deleteData, clearStore } from '../db/db-operations';
import { STORES } from '../db/db-config';

// Initialize the database when the service is first imported
let dbInitialized = false;
const ensureDBInitialized = async () => {
  if (!dbInitialized) {
    await initDB();
    dbInitialized = true;
  }
};

/**
 * Save a workspace to IndexedDB
 * @param {Object} workspace - The workspace to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveWorkspace = async (workspace) => {
  await ensureDBInitialized();
  return saveData(STORES.WORKSPACES, workspace);
};

/**
 * Get a workspace from IndexedDB
 * @param {string|number} id - The ID of the workspace to retrieve
 * @returns {Promise<Object>} A promise that resolves to the workspace
 */
export const getWorkspace = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.WORKSPACES, id);
};

/**
 * Get all workspaces from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all workspaces
 */
export const getAllWorkspaces = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.WORKSPACES);
};

/**
 * Delete a workspace from IndexedDB
 * @param {string|number} id - The ID of the workspace to delete
 * @returns {Promise<void>} A promise that resolves when the workspace is deleted
 */
export const deleteWorkspace = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.WORKSPACES, id);
};

/**
 * Save a window state to IndexedDB
 * @param {Object} windowState - The window state to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveWindowState = async (windowState) => {
  await ensureDBInitialized();
  return saveData(STORES.WINDOW_STATES, windowState);
};

/**
 * Get a window state from IndexedDB
 * @param {string|number} id - The ID of the window state to retrieve
 * @returns {Promise<Object>} A promise that resolves to the window state
 */
export const getWindowState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.WINDOW_STATES, id);
};

/**
 * Get all window states from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all window states
 */
export const getAllWindowStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.WINDOW_STATES);
};

/**
 * Delete a window state from IndexedDB
 * @param {string|number} id - The ID of the window state to delete
 * @returns {Promise<void>} A promise that resolves when the window state is deleted
 */
export const deleteWindowState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.WINDOW_STATES, id);
};

/**
 * Save all workspaces at once (for bulk operations)
 * @param {Array} workspaces - The workspaces to save
 * @returns {Promise<void>} A promise that resolves when all workspaces are saved
 */
export const saveAllWorkspaces = async (workspaces) => {
  await ensureDBInitialized();
  
  // Clear existing workspaces
  await clearStore(STORES.WORKSPACES);
  
  // Save each workspace
  for (const workspace of workspaces) {
    await saveWorkspace(workspace);
  }
};

/**
 * Save all window states at once (for bulk operations)
 * @param {Array} windowStates - The window states to save
 * @returns {Promise<void>} A promise that resolves when all window states are saved
 */
export const saveAllWindowStates = async (windowStates) => {
  await ensureDBInitialized();
  
  // Clear existing window states
  await clearStore(STORES.WINDOW_STATES);
  
  // Save each window state
  for (const state of windowStates) {
    await saveWindowState(state);
  }
};

// ========== Terminal State Functions ==========

/**
 * Save a terminal state to IndexedDB
 * @param {Object} terminalState - The terminal state to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveTerminalState = async (terminalState) => {
  await ensureDBInitialized();
  return saveData(STORES.TERMINAL_STATES, terminalState);
};

/**
 * Get a terminal state from IndexedDB
 * @param {string|number} id - The ID of the terminal state to retrieve
 * @returns {Promise<Object>} A promise that resolves to the terminal state
 */
export const getTerminalState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.TERMINAL_STATES, id);
};

/**
 * Get all terminal states from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all terminal states
 */
export const getAllTerminalStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.TERMINAL_STATES);
};

/**
 * Delete a terminal state from IndexedDB
 * @param {string|number} id - The ID of the terminal state to delete
 * @returns {Promise<void>} A promise that resolves when the terminal state is deleted
 */
export const deleteTerminalState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.TERMINAL_STATES, id);
};

// ========== Chat State Functions ==========

/**
 * Save a chat state to IndexedDB
 * @param {Object} chatState - The chat state to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveChatState = async (chatState) => {
  await ensureDBInitialized();
  return saveData(STORES.CHAT_STATES, chatState);
};

/**
 * Get a chat state from IndexedDB
 * @param {string|number} id - The ID of the chat state to retrieve
 * @returns {Promise<Object>} A promise that resolves to the chat state
 */
export const getChatState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.CHAT_STATES, id);
};

/**
 * Get all chat states from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all chat states
 */
export const getAllChatStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.CHAT_STATES);
};

/**
 * Delete a chat state from IndexedDB
 * @param {string|number} id - The ID of the chat state to delete
 * @returns {Promise<void>} A promise that resolves when the chat state is deleted
 */
export const deleteChatState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.CHAT_STATES, id);
};

// ========== Explorer State Functions ==========

/**
 * Save an explorer state to IndexedDB
 * @param {Object} explorerState - The explorer state to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveExplorerState = async (explorerState) => {
  await ensureDBInitialized();
  return saveData(STORES.EXPLORER_STATES, explorerState);
};

/**
 * Get an explorer state from IndexedDB
 * @param {string|number} id - The ID of the explorer state to retrieve
 * @returns {Promise<Object>} A promise that resolves to the explorer state
 */
export const getExplorerState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.EXPLORER_STATES, id);
};

/**
 * Get all explorer states from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all explorer states
 */
export const getAllExplorerStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.EXPLORER_STATES);
};

/**
 * Delete an explorer state from IndexedDB
 * @param {string|number} id - The ID of the explorer state to delete
 * @returns {Promise<void>} A promise that resolves when the explorer state is deleted
 */
export const deleteExplorerState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.EXPLORER_STATES, id);
};

// ========== Canvas State Functions ==========

/**
 * Save a canvas state to IndexedDB
 * @param {Object} canvasState - The canvas state to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveCanvasState = async (canvasState) => {
  await ensureDBInitialized();
  return saveData(STORES.CANVAS_STATES, canvasState);
};

/**
 * Get a canvas state from IndexedDB
 * @param {string|number} id - The ID of the canvas state to retrieve
 * @returns {Promise<Object>} A promise that resolves to the canvas state
 */
export const getCanvasState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.CANVAS_STATES, id);
};

/**
 * Get all canvas states from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all canvas states
 */
export const getAllCanvasStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.CANVAS_STATES);
};

/**
 * Delete a canvas state from IndexedDB
 * @param {string|number} id - The ID of the canvas state to delete
 * @returns {Promise<void>} A promise that resolves when the canvas state is deleted
 */
export const deleteCanvasState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.CANVAS_STATES, id);
};

// ========== Active Window Functions ==========

/**
 * Save an active window reference to IndexedDB
 * @param {Object} activeWindow - The active window reference to save
 * @returns {Promise<any>} A promise that resolves to the result of the operation
 */
export const saveActiveWindow = async (activeWindow) => {
  await ensureDBInitialized();
  return saveData(STORES.ACTIVE_WINDOWS, activeWindow);
};

/**
 * Get an active window reference from IndexedDB
 * @param {string|number} id - The ID of the active window reference to retrieve
 * @returns {Promise<Object>} A promise that resolves to the active window reference
 */
export const getActiveWindow = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.ACTIVE_WINDOWS, id);
};

/**
 * Get all active window references from IndexedDB
 * @returns {Promise<Array>} A promise that resolves to an array of all active window references
 */
export const getAllActiveWindows = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.ACTIVE_WINDOWS);
};

/**
 * Delete an active window reference from IndexedDB
 * @param {string|number} id - The ID of the active window reference to delete
 * @returns {Promise<void>} A promise that resolves when the active window reference is deleted
 */
export const deleteActiveWindow = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.ACTIVE_WINDOWS, id);
};

================
File: src/styles.css
================
@import "tailwindcss";

@tailwind base;

@layer base {
  html {
    font-family: 'Oxygen Mono', monospace;
  }
}
@tailwind components;
@tailwind utilities;

html, body, #root {
  width: 100%;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* Custom scrollbar styling to match the application theme */
::-webkit-scrollbar {
  width: 8px;  /* for vertical scrollbars */
  height: 8px; /* for horizontal scrollbars */
}

::-webkit-scrollbar-track {
  background: #292524; /* stone-800 */
}

::-webkit-scrollbar-thumb {
  background: #44403c; /* stone-700 */
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #14b8a6; /* teal-500 */
}

/* Firefox scrollbar styling */
* {
  scrollbar-width: thin;
  scrollbar-color: #44403c #292524; /* thumb and track color */
}

.window-container {
  position: absolute;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.window-content {
  flex: 1;
  overflow: auto;
}

.resize-handle {
  position: absolute;
  z-index: 10;
  background-color: transparent;
  transition: background-color 0.2s;
}

.resize-handle:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.resize-handle.horizontal {
  cursor: col-resize;
  width: 4px;
  height: 100%;
}

.resize-handle.vertical {
  cursor: row-resize;
  width: 100%;
  height: 4px;
}

/* Announcement carousel animation - simple and consistent */
@keyframes scroll-text {
  0% { transform: translateX(100%); }
  100% { transform: translateX(-100%); }
}

/* Container for announcement text */
.announcement-container {
  position: relative;
  overflow: hidden;
  width: 100%;
}

/* Wrapper for scrolling text with padding */
.announcement-text {
  display: inline-block;
  padding-right: 50px; /* Add space between end and beginning when looping */
  white-space: nowrap;
}

================
File: src/styles/main.css
================
/* This imports all of Tailwind's utility classes */
@import "tailwindcss";

/* You can add any custom CSS below this line */

================
File: src/utils/cacheManager.js
================
/**
 * Cache Manager Utility
 * 
 * This utility helps manage browser caching, especially to prevent issues
 * after application updates where users might see a white screen until 
 * they manually clear their cache.
 */

// Generate a unique version identifier based on build timestamp
// This should change with each new build/deployment
const APP_VERSION = Date.now().toString();
const VERSION_KEY = 'app_version';

/**
 * Checks the stored application version against the current version
 * and invalidates cache if there's a version mismatch.
 * 
 * @returns {boolean} True if the cache was cleared (version changed), false otherwise
 */
export const checkAndUpdateVersion = () => {
  try {
    // Get stored version from localStorage
    const storedVersion = localStorage.getItem(VERSION_KEY);
    
    // If no stored version or versions don't match, we have a new deployment
    if (!storedVersion || storedVersion !== APP_VERSION) {
      console.log('Application updated! Clearing cache...');
      
      // Store the new version
      localStorage.setItem(VERSION_KEY, APP_VERSION);
      
      // If service workers are supported, unregister them to clear cache
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(registrations => {
          registrations.forEach(registration => {
            registration.unregister();
            console.log('ServiceWorker unregistered');
          });
        });
      }
      
      // Clear browser caches if supported
      if ('caches' in window) {
        caches.keys().then(cacheNames => {
          cacheNames.forEach(cacheName => {
            caches.delete(cacheName);
            console.log(`Cache ${cacheName} deleted`);
          });
        });
      }
      
      // If there was a version mismatch and we cleared caches, return true
      return true;
    }
    
    // No version change detected
    return false;
  } catch (error) {
    // If we encounter errors during cache management, log them but don't break the app
    console.error('Error managing cache:', error);
    return false;
  }
};

/**
 * Forces a page reload to ensure clean state
 * This is useful after clearing caches to ensure all new assets are loaded
 */
export const forceReload = () => {
  window.location.reload(true);
};

export default {
  checkAndUpdateVersion,
  forceReload
};

================
File: src/utils/canvasNodeTypes.js
================
import React, { memo } from 'react';

// Text Node component
const TextNode = memo(({ data }) => {
  return (
    <div className="p-3 bg-stone-800 rounded-md border border-teal-600 text-stone-200 shadow-lg">
      <div className="text-sm whitespace-pre-wrap break-words">{data.text}</div>
    </div>
  );
});

// Group Node component
const GroupNode = memo(({ data }) => {
  return (
    <div 
      className="p-3 rounded-md border border-dashed shadow-inner"
      style={{ 
        borderColor: `rgba(${data.color || '20, 184, 166'}, 0.7)`,
        backgroundColor: `rgba(${data.color || '20, 184, 166'}, 0.1)`
      }}
    >
      <div 
        className="font-medium text-sm mb-1"
        style={{ color: `rgba(${data.color || '20, 184, 166'}, 1)` }}
      >
        {data.label || 'Group'}
      </div>
    </div>
  );
});

// Export a memoized object of node types to avoid recreation on each render
const nodeTypes = {
  text: TextNode,
  group: GroupNode
};

export default nodeTypes;

================
File: src/utils/commandAliases.js
================
// src/utils/commandAliases.js

/**
 * Command aliases mapping
 * Maps short commands to their full versions to provide shortcuts
 * for common terminal commands
 */
export const COMMAND_ALIASES = {
  // Window type aliases
  'ex': 'explorer',
  'ed': 'editor',
  'term': 'terminal',
  'aud': 'audio',
  'ch': 'chat',
  'adm': 'admin',
  'can': 'canvas',
  
  // Other command aliases
  'cl': 'clear',
  'h': 'help',
  'v': 'version',
  'ann': 'announcement',
  'r': 'roll',
  'd': 'roll',
  'dbg': 'debug',
  
  // Party command aliases (new style)
  'p': 'party',
  'pc': 'party create',
  'pj': 'party join',
  'pl': 'party leave',
  'pls': 'party list',
  'pi': 'party info',
  
  // Legacy party command aliases (for backwards compatibility)
  'cp': 'create-party',
  'jp': 'join-party',
  'lp': 'leave-party'
};

================
File: src/utils/constants.js
================
// src/utils/constants.js
export const WINDOW_TYPES = {
    EXPLORER: 'explorer',
    EDITOR: 'editor',
    TERMINAL: 'terminal',
    AUDIO: 'audio',
    CHAT: 'chat',  // Add chat window type
    ADMIN: 'admin', // Add admin window type
    CANVAS: 'canvas', // Add canvas window type
    DICE: 'dice', // Add dice window type
    MAP_EDITOR: 'map_editor', // Add map editor window type
    MARKETPLACE: 'marketplace', // Add marketplace window type
    GAME: 'game' // Add game window type
  };

================
File: src/utils/debugLogger.js
================
/**
 * Debug Logger Utility
 * Provides functionality to enable/disable console logging
 * for debugging purposes in the application.
 */

// Store original console methods
const originalConsole = {
  log: console.log,
  warn: console.warn,
  error: console.error,
  info: console.info,
  debug: console.debug
};

// Track debug state
let debugEnabled = false;

const DebugLogger = {
  /**
   * Toggle debug mode on or off
   * @param {boolean} [force] - Optional parameter to force a specific state
   * @returns {boolean} Current debug state after toggling
   */
  toggleDebug: (force) => {
    if (typeof force === 'boolean') {
      debugEnabled = force;
    } else {
      debugEnabled = !debugEnabled;
    }

    if (debugEnabled) {
      // Restore original console methods
      console.log = originalConsole.log;
      console.warn = originalConsole.warn;
      console.error = originalConsole.error;
      console.info = originalConsole.info;
      console.debug = originalConsole.debug;
      console.log('Debug mode enabled');
    } else {
      // Replace console methods with empty functions
      console.log = function() {};
      console.warn = function() {};
      console.info = function() {};
      console.debug = function() {};
      // Keep error logging enabled for critical errors
      // console.error = function() {};
    }

    return debugEnabled;
  },

  /**
   * Get current debug state
   * @returns {boolean} Current debug state
   */
  isDebugEnabled: () => {
    return debugEnabled;
  },

  /**
   * Initialize the debug logger (disables logging by default)
   */
  init: () => {
    // By default, disable logging when app starts
    if (!debugEnabled) {
      DebugLogger.toggleDebug(false);
    }
  }
};

export default DebugLogger;

================
File: src/utils/diceUtils.js
================
/**
 * Utility functions for dice rolling
 */

/**
 * Roll dice based on a dice expression
 * @param {number} diceType - The type of dice (e.g., 6, 20, 100)
 * @param {number} numDice - Number of dice to roll
 * @param {number} modifier - Modifier to add to the total
 * @returns {Object} Object containing results and total
 */
export const rollDice = (diceType, numDice, modifier = 0) => {
  const results = [];
  let total = 0;
  
  // Roll each die
  for (let i = 0; i < numDice; i++) {
    const result = Math.floor(Math.random() * diceType) + 1;
    results.push(result);
    total += result;
  }
  
  // Add modifier to total
  total += modifier;
  
  return {
    diceType,
    numDice,
    modifier,
    results,
    total,
    timestamp: new Date().toISOString(),
  };
};

/**
 * Parse a dice roll expression (e.g., "2d6+3")
 * @param {string} expression - The dice expression to parse
 * @returns {Object|null} Parsed dice roll parameters or null if invalid
 */
export const parseDiceExpression = (expression) => {
  // Basic regex to match dice roll syntax like "2d6+3"
  const diceRegex = /^(\d+)d(\d+)([+-]\d+)?$/i;
  const match = expression.match(diceRegex);
  
  if (!match) {
    return null;
  }
  
  return {
    numDice: parseInt(match[1], 10),
    diceType: parseInt(match[2], 10),
    modifier: match[3] ? parseInt(match[3], 10) : 0
  };
};

/**
 * Format the results of a dice roll for display
 * @param {Object} rollResult - The result of a dice roll
 * @returns {string} Formatted string for display
 */
export const formatRollResult = (rollResult) => {
  const { diceType, numDice, modifier, results, total } = rollResult;
  
  let output = [];
  
  // Format the expression
  let expression = `${numDice}d${diceType}`;
  if (modifier > 0) {
    expression += `+${modifier}`;
  } else if (modifier < 0) {
    expression += `${modifier}`;
  }
  
  output.push(`Roll: ${expression}`);
  
  // Format the individual results
  if (results.length > 1) {
    output.push(`Results: [${results.join(', ')}]`);
  } else {
    output.push(`Result: ${results[0]}`);
  }
  
  // Format the total with modifier calculation if needed
  if (modifier !== 0) {
    let calculation = `${results.reduce((a, b) => a + b, 0)}`;
    if (modifier > 0) {
      calculation += ` + ${modifier}`;
    } else if (modifier < 0) {
      calculation += ` - ${Math.abs(modifier)}`;
    }
    output.push(`Total: ${calculation} = ${total}`);
  } else {
    output.push(`Total: ${total}`);
  }
  
  return output.join('\n');
};

/**
 * Validate if a dice type is valid
 * @param {number} diceType - The dice type to validate
 * @returns {boolean} Whether the dice type is valid
 */
export const isValidDiceType = (diceType) => {
  // Allow any dice from d2 to d100
  return diceType >= 2 && diceType <= 100;
};

================
File: src/utils/globalPolyfill.js
================
// Import the actual process module
import process from 'process';

// Ensure global is defined as window
window.global = window;

// Use the actual process module instead of our basic polyfill
window.process = process;

// Ensure browser property is set (SimplePeer checks this)
window.process.browser = true;

================
File: src/utils/terminal/command-system-documentation.md
================
# SLUMNET Terminal Command System Documentation

## Overview

The SLUMNET Terminal Command System is a modular, extensible framework for handling terminal commands in a structured way. Inspired by bash and modern CLI parsers, it provides a robust foundation for command processing with features like argument validation, command aliases, quoted text extraction, and categorized help output.

```
                Command Input
                     │
                     ▼
┌────────────────────────────────────┐
│           Tokenization             │ ◀── Handles quotes, whitespace, etc.
└────────────────────────────────────┘
                     │
                     ▼
┌────────────────────────────────────┐
│        Command Resolution          │ ◀── Registry lookup, alias handling
└────────────────────────────────────┘
                     │
                     ▼
┌────────────────────────────────────┐
│        Argument Processing         │ ◀── Validation, defaults
└────────────────────────────────────┘
                     │
                     ▼
┌────────────────────────────────────┐
│         Command Execution          │ ◀── Context injection, error handling
└────────────────────────────────────┘
                     │
                     ▼
              Command Output
```

## Core Components

### Command Base Class (`Command.js`)

The foundation of the command system is the `Command` class, which provides a consistent interface for all commands. Each command extends this base class and implements the `execute` method.

```javascript
class Command {
  constructor() {
    this.name = '';            // Primary command name
    this.aliases = [];         // Alternative names
    this.description = '';     // Help text
    this.usage = '';           // Usage example
    this.category = 'General'; // Category for grouping in help
    this.args = [];            // Argument definitions
  }

  async execute(args, context) {
    // Command implementation
  }
}
```

### Command Registry (`registry.js`)

The registry is a central store for all commands, providing methods to register, find, and list commands.

Key responsibilities:
- Register new commands
- Look up commands by name or alias
- Provide lists of all registered commands or by category

### Parser (`parser.js` and `tokenizer.js`)

The parser consists of two main components:

1. **Tokenizer**: Converts input strings into tokens, handling quoted text and whitespace
2. **Parser**: Processes tokens into commands and arguments

Additional utilities:
- `extractQuotedText`: Extracts text enclosed in quotes (", ', or `)

### Command Executor (`executor.js`)

The executor is responsible for:
- Finding the appropriate command in the registry
- Validating command arguments
- Providing execution context
- Executing the command and handling errors

### Command Loader (`commandLoader.js`)

The loader imports all command classes and registers them with the registry during initialization.

## Command Structure

### Metadata

Each command provides metadata that describes its purpose and usage:

- `name`: The primary command identifier
- `aliases`: Alternative names for the command
- `description`: A brief description for help text
- `usage`: Usage example for help text 
- `category`: Grouping category for organized help output

### Arguments

Commands define their expected arguments with metadata:

```javascript
this.args = [
  {
    name: 'argName',
    description: 'Description of the argument',
    required: true|false
  }
];
```

This metadata is used for:
- Validating input
- Generating help text
- Providing context-aware error messages

### Execution Context

Commands receive a rich execution context with access to application state and functionality:

- User information (`user`)
- Window management (`nodeId`, `transformWindow`)
- Party system (`currentParty`, `createParty`, etc.)
- Utility functions (`debugLogger`, etc.)
- Original command text (`original`)

This context injection pattern allows commands to access needed functionality without tight coupling to implementation details.

## Categories of Commands

Commands are organized by category for better organization and discoverability:

1. **Core Commands**: Basic functionality like help, clear, version
   - `HelpCommand`: Display available commands
   - `ClearCommand`: Clear terminal output
   - `VersionCommand`: Show terminal version
   - `RollCommand`: Roll dice with specified parameters

2. **Window Commands**: Transform the current window
   - `WindowCommand`: Base class for window transformations
   - `TerminalCommand`: Transform to terminal
   - `ExplorerCommand`: Transform to file explorer
   - `ChatCommand`: Transform to chat window

3. **Admin Commands**: Administrative functionality
   - `AdminCommand`: Access admin panel
   - `DebugCommand`: Toggle debug mode
   - `AnnouncementCommand`: Set system-wide announcements

4. **Party Commands**: Manage D&D parties
   - `PartyCommand`: Main command with subcommands
     - create, join, leave, list, info, delete
   - Legacy party commands for backward compatibility

## Special Features

### Subcommand System

For complex commands with multiple operations, the system supports subcommands:

```javascript
// In PartyCommand
this.subcommands = {
  create: this.createParty,
  join: this.joinParty,
  // other subcommands...
};

async execute(args, context) {
  const subcommand = args[0]?.toLowerCase() || 'default';
  return this.subcommands[subcommand].call(this, args.slice(1), context);
}
```

### Legacy Command Support

The system provides backward compatibility for existing commands through redirection:

```javascript
// Legacy command example
async execute(args, context) {
  return context.executeCommand(`party join ${args.join(' ')}`);
}
```

### Admin-Only Command Restriction

Commands can implement access control:

```javascript
async execute(args, context) {
  if (!context.user?.is_admin) {
    return 'Access denied: Admin privileges required';
  }
  // Command implementation for admins...
}
```

## Creating New Commands

### Step 1: Create a Command Class

Start by creating a new file in the appropriate directory:
- `src/utils/terminal/commands/core/` - Basic commands
- `src/utils/terminal/commands/window/` - Window manipulation
- `src/utils/terminal/commands/admin/` - Admin functionality
- `src/utils/terminal/commands/party/` - Party-related commands
- Or create a new category directory

Example command class template:

```javascript
import { Command } from '../../Command.js';

export class ExampleCommand extends Command {
  constructor() {
    super();
    this.name = 'example';
    this.aliases = ['ex'];
    this.description = 'Example command description';
    this.usage = 'example [arg1] [arg2]';
    this.category = 'Custom';
    this.args = [
      {
        name: 'arg1',
        description: 'First argument',
        required: false
      }
    ];
  }

  async execute(args, context) {
    // Command implementation
    return `Executed example command with args: ${args.join(', ')}`;
  }
}
```

### Step 2: Register the Command

Import and register your command in `commandLoader.js`:

```javascript
import { ExampleCommand } from './commands/custom/ExampleCommand.js';

// In registerCommands function
const commands = [
  // existing commands...
  new ExampleCommand(),
];
```

### Step 3: Add Context Requirements

If your command needs access to specific functionality or state, ensure it's provided in the context object in `TerminalWindow.jsx`:

```javascript
// In TerminalWindow.jsx, processCommand function
const context = {
  // existing context...
  customFeature: customFeatureValue
};
```

## Command Context Reference

The following context properties are available to commands:

| Property | Type | Description |
|----------|------|-------------|
| `original` | string | Original command text |
| `user` | object | Current user information |
| `nodeId` | string | Current window node ID |
| `transformWindow` | function | Function to transform window type |
| `updateAnnouncement` | function | Function to set system announcements |
| `parties` | array | Available parties |
| `currentParty` | object | Current party information |
| `joinParty` | function | Function to join a party |
| `leaveParty` | function | Function to leave current party |
| `createParty` | function | Function to create new party |
| `refreshParty` | function | Function to refresh party data |
| `refreshParties` | function | Function to refresh all parties |
| `deleteParty` | function | Function to delete a party |
| `parseDiceExpression` | function | Function to parse dice notation |
| `rollDice` | function | Function to roll dice |
| `formatRollResult` | function | Function to format dice results |
| `isValidDiceType` | function | Function to validate dice type |
| `debugLogger` | object | Debug logging utilities |
| `clearTerminal` | function | Function to clear terminal output |
| `executeCommand` | function | Function to execute another command |

## Examples

### Simple Command

```javascript
import { Command } from '../../Command.js';

export class HelloCommand extends Command {
  constructor() {
    super();
    this.name = 'hello';
    this.aliases = ['hi'];
    this.description = 'Say hello to a user';
    this.usage = 'hello [username]';
    this.category = 'Greeting';
    this.args = [
      {
        name: 'username',
        description: 'Name to greet',
        required: false
      }
    ];
  }

  async execute(args, context) {
    const name = args[0] || context.user?.username || 'World';
    return `Hello, ${name}!`;
  }
}
```

### Command with Subcommands

```javascript
import { Command } from '../../Command.js';

export class TestCommand extends Command {
  constructor() {
    super();
    this.name = 'test';
    this.aliases = ['t'];
    this.description = 'Test various functions';
    this.usage = 'test <subcommand>';
    this.category = 'Utilities';
    this.args = [
      {
        name: 'subcommand',
        description: 'Subcommand to execute',
        required: true
      }
    ];
    
    this.subcommands = {
      echo: this.echoText,
      random: this.randomNumber
    };
  }

  async execute(args, context) {
    const subcommand = args[0]?.toLowerCase();
    
    if (!subcommand || !this.subcommands[subcommand]) {
      return `Unknown subcommand. Available: ${Object.keys(this.subcommands).join(', ')}`;
    }
    
    return this.subcommands[subcommand].call(this, args.slice(1), context);
  }
  
  async echoText(args, context) {
    return args.join(' ') || 'No text provided to echo';
  }
  
  async randomNumber(args, context) {
    const max = parseInt(args[0]) || 100;
    return `Random number: ${Math.floor(Math.random() * max)}`;
  }
}
```

## Best Practices

1. **Categorize Commands**
   - Place commands in appropriate category directories
   - Set descriptive category name in command metadata

2. **Provide Helpful Documentation**
   - Set clear description and usage examples
   - Include argument documentation

3. **Use Context Appropriately**
   - Validate context properties before use
   - Report clear errors when required context is missing

4. **Implement Access Control**
   - Check user permissions at the beginning of execution
   - Return clear access denied messages

5. **Handle Errors Gracefully**
   - Use try/catch to handle unexpected errors
   - Return user-friendly error messages

## Troubleshooting

### Command Not Found

If your command isn't being recognized:

1. Ensure it's properly imported and registered in `commandLoader.js`
2. Check that the class name matches the export name
3. Verify the command name and aliases don't conflict with existing commands

### Context Missing

If context properties are undefined:

1. Check that the property is being provided in the `processCommand` function in `TerminalWindow.jsx`
2. Add proper validation in your command to check context properties
3. Return clear error messages when required context is missing

### Command Execution Fails

If a command fails during execution:

1. Check browser console for JavaScript errors
2. Ensure all async operations have proper error handling
3. Verify that functions being called from context exist and work as expected

================
File: src/utils/terminal/Command.js
================
/**
 * Base Command class that all terminal commands will extend
 * Provides a consistent interface for command execution and metadata
 */
export class Command {
  constructor() {
    this.name = ''; // Primary command name
    this.aliases = []; // Command aliases
    this.description = ''; // Command description
    this.usage = ''; // Usage example
    this.args = []; // Argument definitions
  }

  /**
   * Execute the command with the given arguments and context
   * @param {Array} args - Parsed arguments array
   * @param {Object} context - Terminal context (user, state, etc.)
   * @returns {Promise<string|Array<string>>} - Command output
   */
  async execute(args, context) {
    throw new Error('Command implementation missing');
  }

  /**
   * Generate help text for this command
   * @returns {string} - Formatted help text
   */
  generateHelp() {
    let help = `${this.name} - ${this.description}\n`;
    help += `Usage: ${this.usage}\n`;
    
    if (this.aliases.length > 0) {
      help += `Aliases: ${this.aliases.join(', ')}\n`;
    }
    
    if (this.args.length > 0) {
      help += 'Arguments:\n';
      this.args.forEach(arg => {
        help += `  ${arg.name} - ${arg.description}${arg.required ? ' (required)' : ' (optional)'}\n`;
      });
    }
    
    return help;
  }

  /**
   * Check if a given name matches this command's name or aliases
   * @param {string} name - Command name to check
   * @returns {boolean} - True if name matches command name or aliases
   */
  matches(name) {
    return this.name === name || this.aliases.includes(name);
  }
}

================
File: src/utils/terminal/commandLoader.js
================
/**
 * Command Loader
 * Loads and registers all terminal commands
 */
import { registry } from './registry.js';

// Import core commands
import { HelpCommand } from './commands/core/HelpCommand.js';
import { ClearCommand } from './commands/core/ClearCommand.js';
import { VersionCommand } from './commands/core/VersionCommand.js';
import { RollCommand } from './commands/vtt/RollCommand.js';

// Import window commands
import { WindowCommand } from './commands/window/WindowCommand.js';
import { TerminalCommand } from './commands/window/TerminalCommand.js';
import { ExplorerCommand } from './commands/window/ExplorerCommand.js';
import { ChatCommand } from './commands/window/ChatCommand.js';
import { MarketplaceCommand } from './commands/window/MarketplaceCommand.js';
import { GameCommand } from './commands/window/GameCommand.js';

// Import admin commands
import { AdminCommand } from './commands/admin/AdminCommand.js';
import { DebugCommand } from './commands/admin/DebugCommand.js';
import { AnnouncementCommand } from './commands/admin/AnnouncementCommand.js';

// Import party commands
import { PartyCommand } from './commands/vtt/PartyCommand.js';
import { 
  CreatePartyCommand,
  JoinPartyCommand,
  LeavePartyCommand,
  PartiesCommand
} from './commands/vtt/LegacyPartyCommands.js';

/**
 * Register all terminal commands with the registry
 * Call this function to initialize the terminal command system
 */
export function registerCommands() {
  const commands = [
    // Core commands
    new HelpCommand(),
    new ClearCommand(),
    new VersionCommand(),
    new RollCommand(),
    
    // Window commands
    new WindowCommand(),
    new TerminalCommand(),
    new ExplorerCommand(),
    new ChatCommand(),
    new MarketplaceCommand(),
    new GameCommand(),
    
    // Admin commands
    new AdminCommand(),
    new DebugCommand(),
    new AnnouncementCommand(),
    
    // Party commands
    new PartyCommand(),
    
    // Legacy party commands
    // new CreatePartyCommand(),
    // new JoinPartyCommand(),
    // new LeavePartyCommand(),
    // new PartiesCommand(),
    
    // Additional commands will be added here as they are implemented
  ];
  
  registry.registerAll(commands);
  
  console.log(`Registered ${commands.length} terminal commands`);
  return commands.length;
}

/**
 * Check if a specific command exists in the registry
 * 
 * @param {string} commandName - Name of the command to check
 * @returns {boolean} - True if the command exists
 */
export function hasCommand(commandName) {
  return registry.findCommand(commandName) !== null;
}

/**
 * Get all registered commands
 * 
 * @returns {Array} - Array of all command instances
 */
export function getAllCommands() {
  return registry.getAllCommands();
}

================
File: src/utils/terminal/commands/admin/AdminCommand.js
================
/**
 * Admin Command
 * Transform window to Admin panel (admin only)
 */
import { Command } from '../../Command.js';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class AdminCommand extends Command {
  constructor() {
    super();
    this.name = 'admin';
    this.aliases = ['adm'];
    this.description = 'Access admin panel (admin only)';
    this.usage = 'admin';
    this.category = 'Admin';
    this.args = [];
  }

  async execute(args, context) {
    // Check if user is admin
    if (!context.user?.is_admin) {
      return 'Access denied: Admin privileges required';
    }

    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.ADMIN);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to admin panel...';
  }
}

================
File: src/utils/terminal/commands/admin/AnnouncementCommand.js
================
/**
 * Announcement Command
 * Sets a system-wide announcement (admin only)
 */
import { Command } from '../../Command.js';
import { extractQuotedText } from '../../parser/parser.js';

export class AnnouncementCommand extends Command {
  constructor() {
    super();
    this.name = 'announcement';
    this.aliases = ['ann'];
    this.description = 'Set a system-wide announcement (admin only)';
    this.usage = 'announcement "Your announcement text here"';
    this.category = 'Admin';
    this.args = [
      {
        name: 'text',
        description: 'The announcement text (must be in quotes)',
        required: true
      }
    ];
  }

  async execute(args, context) {
    // Check if user is admin
    if (!context.user?.is_admin) {
      return 'Access denied: Admin privileges required';
    }

    // Check if updateAnnouncement function is available
    if (!context || typeof context.updateAnnouncement !== 'function') {
      return 'Cannot set announcement: Missing updateAnnouncement function in context';
    }
    
    // Extract the quoted text from the original command
    const extractedText = extractQuotedText(context.original || args.join(' '));
    
    if (!extractedText) {
      return 'Usage: announcement "Your announcement text here" (text must be in quotes)';
    }
    
    const announcementText = extractedText.quoted;
    
    // Display setting message
    const settingMessage = `Setting announcement: "${announcementText}"...`;
    
    try {
      // Update the announcement via the context function
      const success = await context.updateAnnouncement(announcementText);
      
      if (success) {
        return [
          settingMessage,
          `Announcement set: "${announcementText}"`,
          'Announcement has been broadcast to all connected users.'
        ].join('\n');
      } else {
        return [
          settingMessage,
          'Failed to set announcement. Please try again.'
        ].join('\n');
      }
    } catch (error) {
      console.error('Error setting announcement:', error);
      return [
        settingMessage,
        'Error setting announcement. Please try again.'
      ].join('\n');
    }
  }
}

================
File: src/utils/terminal/commands/admin/DebugCommand.js
================
/**
 * Debug Command
 * Toggles debug mode (admin only)
 */
import { Command } from '../../Command.js';

export class DebugCommand extends Command {
  constructor() {
    super();
    this.name = 'debug';
    this.aliases = ['dbg'];
    this.description = 'Toggle debug mode - (admin only)';
    this.usage = 'debug';
    this.category = 'Admin';
    this.args = [];
  }

  async execute(args, context) {
    // Check if user is admin
    if (!context.user?.is_admin) {
      return 'Access denied: Admin privileges required';
    }

    // Check if DebugLogger is available
    if (!context || !context.debugLogger) {
      return 'Cannot toggle debug mode: Missing debug logger in context';
    }
    
    // Toggle debug mode
    const debugEnabled = context.debugLogger.toggleDebug();
    
    // Return appropriate message
    return debugEnabled 
      ? 'Debug mode enabled. Console logs are now visible.' 
      : 'Debug mode disabled. Console logs are now hidden.';
  }
}

================
File: src/utils/terminal/commands/core/ClearCommand.js
================
/**
 * Clear Command
 * Clears the terminal output
 */
import { Command } from '../../Command.js';

export class ClearCommand extends Command {
  constructor() {
    super();
    this.name = 'clear';
    this.aliases = ['cl'];
    this.description = 'Clear terminal output';
    this.usage = 'clear';
    this.category = 'Core';
    this.args = [];
  }

  async execute(args, context) {
    // Return an empty string which the terminal component will interpret as clearing the terminal
    // The terminal component will replace the history array with an empty array
    return '__CLEAR_TERMINAL__'; // Special flag that will be processed by the terminal
  }
}

================
File: src/utils/terminal/commands/core/HelpCommand.js
================
/**
 * Help Command
 * Provides help information for available commands
 */
import { Command } from '../../Command.js';
import { generateHelp } from '../../executor.js';

export class HelpCommand extends Command {
  constructor() {
    super();
    this.name = 'help';
    this.aliases = ['h'];
    this.description = 'Show help for available commands';
    this.usage = 'help [command]';
    this.category = 'Core';
    this.args = [
      {
        name: 'command',
        description: 'Command name to get help for',
        required: false
      }
    ];
  }

  async execute(args, context) {
    // If a specific command is requested, show help for that command
    if (args && args.length > 0) {
      return generateHelp(args[0]);
    }
    
    // Otherwise, show general help
    return generateHelp();
  }
}

================
File: src/utils/terminal/commands/core/VersionCommand.js
================
/**
 * Version Command
 * Displays the terminal version information
 */
import { Command } from '../../Command.js';

export class VersionCommand extends Command {
  constructor() {
    super();
    this.name = 'version';
    this.aliases = ['v'];
    this.description = 'Show terminal version information';
    this.usage = 'version';
    this.category = 'Core';
    this.args = [];
  }

  async execute(args, context) {
    return 'SLUMNET Terminal v1.0.0';
  }
}

================
File: src/utils/terminal/commands/vtt/LegacyPartyCommands.js
================
/**
 * Legacy Party Commands
 * Provides backward compatibility for old party command syntax
 */
import { Command } from '../../Command.js';

// Base class for legacy party commands
class LegacyPartyCommand extends Command {
  constructor(options) {
    super();
    Object.assign(this, options);
    this.category = 'Legacy';
  }

  // Redirect to the main party command
  async execute(args, context) {
    // Check if executeCommand is available in context
    if (!context || typeof context.executeCommand !== 'function') {
      return `Cannot execute ${this.name}: Missing executeCommand function in context`;
    }
    
    // Build the redirected command
    const redirectCommand = `party ${this.redirectSubcommand} ${args.join(' ')}`;
    
    // Execute the redirected command
    return context.executeCommand(redirectCommand);
  }
}

// Create Party Command (legacy)
export class CreatePartyCommand extends LegacyPartyCommand {
  constructor() {
    super({
      name: 'create-party',
      aliases: ['cp'],
      description: 'Create a new party (admin only) [Legacy Command]',
      usage: 'create-party "Party Name"',
      redirectSubcommand: 'create',
      args: [
        {
          name: 'party_name',
          description: 'Name of the party to create',
          required: true
        }
      ]
    });
  }
}

// Join Party Command (legacy)
export class JoinPartyCommand extends LegacyPartyCommand {
  constructor() {
    super({
      name: 'join-party',
      aliases: ['jp'],
      description: 'Join an existing party [Legacy Command]',
      usage: 'join-party <party_id or party_name>',
      redirectSubcommand: 'join',
      args: [
        {
          name: 'party_identifier',
          description: 'ID or name of the party to join',
          required: true
        }
      ]
    });
  }
}

// Leave Party Command (legacy)
export class LeavePartyCommand extends LegacyPartyCommand {
  constructor() {
    super({
      name: 'leave-party',
      aliases: ['lp'],
      description: 'Leave your current party [Legacy Command]',
      usage: 'leave-party',
      redirectSubcommand: 'leave',
      args: []
    });
  }
}

// Parties Command (legacy)
export class PartiesCommand extends LegacyPartyCommand {
  constructor() {
    super({
      name: 'parties',
      aliases: [],
      description: 'Show party information or list parties [Legacy Command]',
      usage: 'parties [list]',
      redirectSubcommand: '', // Will be determined in execute
      args: [
        {
          name: 'subcommand',
          description: 'Optional "list" to show all parties',
          required: false
        }
      ]
    });
  }
  
  // Override execute to handle the list subcommand
  async execute(args, context) {
    if (!context || typeof context.executeCommand !== 'function') {
      return `Cannot execute ${this.name}: Missing executeCommand function in context`;
    }
    
    // If first arg is "list", redirect to party list, otherwise to party info
    const redirectSubcommand = args.length > 0 && args[0].toLowerCase() === 'list' 
      ? 'list' 
      : '';
      
    // Build the redirected command
    const redirectCommand = `party ${redirectSubcommand}`;
    
    // Execute the redirected command
    return context.executeCommand(redirectCommand);
  }
}

================
File: src/utils/terminal/commands/vtt/PartyCommand.js
================
/**
 * Party Command
 * Manages D&D party functionality with subcommands
 */
import { Command } from '../../Command.js';
import { extractQuotedText } from '../../parser/parser.js';

export class PartyCommand extends Command {
  constructor() {
    super();
    this.name = 'party';
    this.aliases = ['p'];
    this.description = 'Party system commands';
    this.usage = 'party [subcommand] [arguments]';
    this.category = 'VTT';
    this.args = [
      {
        name: 'subcommand',
        description: 'Subcommand to execute (create, join, leave, list, info, delete)',
        required: false
      }
    ];
    
    // Available subcommands
    this.subcommands = {
      create: this.createParty,
      join: this.joinParty,
      leave: this.leaveParty,
      list: this.listParties,
      info: this.partyInfo,
      delete: this.deleteParty
    };
  }

  async execute(args, context) {
    // If no subcommand is provided, default to 'info'
    const subcommand = args[0]?.toLowerCase() || 'info';
    
    // Check if the subcommand exists
    if (!Object.keys(this.subcommands).includes(subcommand)) {
      return 'Unknown party subcommand. Available subcommands: create, join, leave, list, info, delete';
    }
    
    // Execute the appropriate subcommand
    return this.subcommands[subcommand].call(this, args.slice(1), context);
  }

  /* Subcommand handlers */

  async createParty(args, context) {
    // Check if user is admin
    if (!context.user?.is_admin) {
      return 'Access denied: Admin privileges required';
    }
    
    // Check party context availability
    if (!context.createParty) {
      return 'Cannot create party: Missing party context';
    }
    
    // Extract party name from quotes or just take the remaining arguments
    let partyName;
    const extractedText = extractQuotedText(args.join(' '));
    
    if (extractedText) {
      partyName = extractedText.quoted;
    } else {
      partyName = args.join(' ');
    }
    
    if (!partyName) {
      return 'Usage: party create "Party Name"';
    }
    
    const creatingMessage = `Creating party "${partyName}"...`;
    
    try {
      const result = await context.createParty(partyName);
      return `${creatingMessage}\nParty "${partyName}" created successfully with ID ${result.id}`;
    } catch (error) {
      if (error.response?.status === 400) {
        return `${creatingMessage}\nError: ${error.response.data.message}`;
      } else {
        console.error('Error creating party:', error);
        return `${creatingMessage}\nError creating party. Please try again.`;
      }
    }
  }

  async joinParty(args, context) {
    // Check party context availability
    if (!context.joinParty || !context.parties) {
      return 'Cannot join party: Missing party context';
    }
    
    if (args.length === 0) {
      return 'Usage: party join <party_id or party_name>';
    }
    
    const partyIdentifier = args.join(' ');
    const joiningMessage = `Joining party "${partyIdentifier}"...`;
    
    try {
      // Try to get the party by ID first
      let partyId = parseInt(partyIdentifier);
      
      if (isNaN(partyId)) {
        // If it's not a number, assume it's a name
        // Find the party by name
        const party = context.parties.find(p => 
          p.name.toLowerCase() === partyIdentifier.toLowerCase()
        );
        
        if (!party) {
          return `${joiningMessage}\nParty "${partyIdentifier}" not found`;
        }
        
        partyId = party.id;
      }
      
      // Try to join the party
      const joinResponse = await context.joinParty(partyId);
      
      if (joinResponse.message?.includes('Already a member')) {
        return `${joiningMessage}\nYou are already a member of this party`;
      } else {
        return `${joiningMessage}\nJoined party "${joinResponse.party.name}" successfully`;
      }
    } catch (error) {
      console.error('Error joining party:', error);
      if (error.response?.status === 404) {
        return `${joiningMessage}\nParty not found`;
      } else {
        return `${joiningMessage}\nError joining party. Please try again.`;
      }
    }
  }

  async leaveParty(args, context) {
    // Check party context availability
    if (!context.leaveParty || !context.currentParty) {
      return 'Cannot leave party: Missing party context';
    }
    
    const leavingMessage = 'Leaving current party...';
    
    try {
      if (!context.currentParty) {
        return `${leavingMessage}\nYou are not currently in a party`;
      }
      
      // Leave the party
      await context.leaveParty();
      return `${leavingMessage}\nLeft party "${context.currentParty.name}" successfully`;
    } catch (error) {
      console.error('Error leaving party:', error);
      return `${leavingMessage}\nError leaving party. Please try again.`;
    }
  }

  async listParties(args, context) {
    // Check party context availability
    if (!context.refreshParties || !context.parties) {
      return 'Cannot list parties: Missing party context';
    }
    
    const fetchingMessage = 'Fetching parties...';
    
    try {
      await context.refreshParties();
      if (context.parties.length === 0) {
        return `${fetchingMessage}\nNo parties available`;
      } else {
        return [
          fetchingMessage,
          'Available parties:',
          ...context.parties.map(party => 
            `ID: ${party.id} | Name: ${party.name} | Members: ${party.member_count} | Created by: ${party.creator_name}`
          )
        ].join('\n');
      }
    } catch (error) {
      console.error('Error fetching parties:', error);
      return `${fetchingMessage}\nError fetching parties. Please try again.`;
    }
  }

  async partyInfo(args, context) {
    // Check party context availability
    if (!context.refreshParty || !context.currentParty) {
      return 'Cannot show party info: Missing party context';
    }
    
    const fetchingMessage = 'Fetching current party...';
    
    try {
      await context.refreshParty();
      
      if (!context.currentParty) {
        return `${fetchingMessage}\nYou are not currently in a party. Use "party list" to see available parties or "party join <id>" to join one.`;
      } else {
        return [
          fetchingMessage,
          `Current party: ${context.currentParty.name} (ID: ${context.currentParty.id})`,
          `Created by: ${context.currentParty.creator_name}`,
          `Created at: ${new Date(context.currentParty.created_at).toLocaleString()}`,
          `Members (${context.currentParty.members?.length || 0}):`,
          ...(context.currentParty.members || []).map(member => 
            `- ${member.username}${member.is_admin ? ' (Admin)' : ''}${member.id === context.currentParty.creator_id ? ' (Creator)' : ''}`
          )
        ].join('\n');
      }
    } catch (error) {
      console.error('Error fetching current party:', error);
      return `${fetchingMessage}\nError fetching current party. Please try again.`;
    }
  }

  async deleteParty(args, context) {
    // Check if user is admin
    if (!context.user?.is_admin) {
      return 'Access denied: Admin privileges required';
    }
    
    // Check party context availability
    if (!context.deleteParty) {
      return 'Cannot delete party: Missing party context';
    }
    
    if (args.length === 0) {
      return 'Usage: party delete <party_id>';
    }
    
    const partyIdToDelete = parseInt(args[0]);
    if (isNaN(partyIdToDelete)) {
      return 'Invalid party ID. Please provide a valid numeric ID.';
    }
    
    const deletingMessage = `Deleting party with ID ${partyIdToDelete}...`;
    
    try {
      const result = await context.deleteParty(partyIdToDelete);
      if (result.success) {
        return `${deletingMessage}\nParty with ID ${partyIdToDelete} has been deleted successfully.`;
      } else {
        return `${deletingMessage}\nFailed to delete party: ${result.message || 'Unknown error'}`;
      }
    } catch (error) {
      console.error('Error deleting party:', error);
      return `${deletingMessage}\nError deleting party. Please try again.`;
    }
  }
}

================
File: src/utils/terminal/commands/vtt/RollCommand.js
================
/**
 * Roll Command
 * Rolls dice with specified parameters
 */
import { Command } from '../../Command.js';

export class RollCommand extends Command {
  constructor() {
    super();
    this.name = 'roll';
    this.aliases = ['r', 'd'];
    this.description = 'Roll dice (e.g., roll 2d6+3)';
    this.usage = 'roll <dice expression>';
    this.category = 'VTT';
    this.args = [
      {
        name: 'expression',
        description: 'Dice expression (e.g., 2d6+3)',
        required: true
      }
    ];
  }

  async execute(args, context) {
    // Check if the dice utilities are available
    if (!context.parseDiceExpression || !context.rollDice || !context.formatRollResult || !context.isValidDiceType) {
      return 'Cannot roll dice: Missing dice utilities in context';
    }
    
    // Get the dice expression
    const diceExpression = args.join('').trim();
    
    if (!diceExpression) {
      return 'Usage: roll <dice expression> (e.g., roll 2d6+3)';
    }
    
    // Parse the dice expression
    const parsedDice = context.parseDiceExpression(diceExpression);
    
    if (!parsedDice) {
      return 'Invalid dice expression. Use format: NdS+M (e.g., 2d6+3)';
    }
    
    const { numDice, diceType, modifier } = parsedDice;
    
    // Validate dice type
    if (!context.isValidDiceType(diceType)) {
      return 'Invalid dice type. Please use dice with 2-100 sides (e.g., d2, d6, d20, d37, d100)';
    }
    
    // Validate number of dice
    if (numDice < 1 || numDice > 20) {
      return 'Please use between 1 and 20 dice';
    }
    
    // Roll the dice
    const result = context.rollDice(diceType, numDice, modifier);
    
    // Format the results with a special marker to display the d20 GIF
    return {
      type: 'dice-roll',
      content: context.formatRollResult(result)
    };
  }
}

================
File: src/utils/terminal/commands/window/ChatCommand.js
================
/**
 * Chat Command
 * Transform window to Chat type
 */
import { Command } from '../../Command.js';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class ChatCommand extends Command {
  constructor() {
    super();
    this.name = 'chat';
    this.aliases = ['ch'];
    this.description = 'Transform window into chat window';
    this.usage = 'chat';
    this.category = 'Window';
    this.args = [];
  }

  async execute(args, context) {
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.CHAT);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to chat window...';
  }
}

================
File: src/utils/terminal/commands/window/ExplorerCommand.js
================
/**
 * Explorer Command
 * Transform window to Explorer type
 */
import { Command } from '../../Command.js';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class ExplorerCommand extends Command {
  constructor() {
    super();
    this.name = 'explorer';
    this.aliases = ['ex'];
    this.description = 'Transform window into file explorer';
    this.usage = 'explorer';
    this.category = 'Window';
    this.args = [];
  }

  async execute(args, context) {
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.EXPLORER);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to explorer window...';
  }
}

================
File: src/utils/terminal/commands/window/GameCommand.js
================
import { Command } from '../../Command';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class GameCommand extends Command {
  constructor() {
    super();
    this.name = 'game';
    this.aliases = ['g'];
    this.description = 'Transform window into game view';
    this.usage = 'game';
    this.category = 'Window';
    this.args = [];
  }

  async execute(args, context) {
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.GAME);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to game window...';
  }
}

================
File: src/utils/terminal/commands/window/MarketplaceCommand.js
================
import { Command } from '../../Command';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class MarketplaceCommand extends Command {
  constructor() {
    super();
    this.name = 'marketplace';
    this.aliases = ['market'];
    this.description = 'Transform window into tileset marketplace';
    this.usage = 'marketplace';
    this.category = 'Window';
    this.args = [];
  }

  async execute(args, context) {
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.MARKETPLACE);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to marketplace window...';
  }
}

================
File: src/utils/terminal/commands/window/TerminalCommand.js
================
/**
 * Terminal Command
 * Transform window to Terminal type
 */
import { Command } from '../../Command.js';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class TerminalCommand extends Command {
  constructor() {
    super();
    this.name = 'terminal';
    this.aliases = ['term'];
    this.description = 'Transform window into terminal';
    this.usage = 'terminal';
    this.category = 'Window';
    this.args = [];
  }

  async execute(args, context) {
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, WINDOW_TYPES.TERMINAL);
    
    // This will be displayed only momentarily before the window transforms
    return 'Transforming to terminal window...';
  }
}

================
File: src/utils/terminal/commands/window/WindowCommand.js
================
/**
 * Window Command
 * Handles transforming the current window to a different window type
 */
import { Command } from '../../Command.js';
import { WINDOW_TYPES } from '../../../windowTypes.js';

export class WindowCommand extends Command {
  constructor() {
    super();
    this.name = 'window';
    this.aliases = ['win'];
    this.description = 'Transform window to a specified window type';
    this.usage = 'window <type>';
    this.category = 'Window';
    this.args = [
      {
        name: 'type',
        description: 'Window type to transform to',
        required: true
      }
    ];
    
    // Valid window types that can be used with this command
    this.validTypes = Object.values(WINDOW_TYPES);
  }

  async execute(args, context) {
    if (!args || args.length === 0) {
      return this.listWindowTypes();
    }
    
    const requestedType = args[0].toUpperCase();
    
    // Check if the requested type is a valid window type
    if (!WINDOW_TYPES[requestedType] && !Object.values(WINDOW_TYPES).includes(requestedType)) {
      return `Unknown window type: ${args[0]}. Use one of: ${Object.keys(WINDOW_TYPES).map(t => t.toLowerCase()).join(', ')}`;
    }
    
    // Get the normalized window type
    const windowType = WINDOW_TYPES[requestedType] || requestedType;
    
    // Check if the transform function is provided in the context
    if (!context || typeof context.transformWindow !== 'function') {
      return 'Cannot transform window: Missing transform function in context';
    }
    
    // Check if the node ID is provided in the context
    if (!context.nodeId) {
      return 'Cannot transform window: Missing node ID in context';
    }
    
    // Transform the window
    context.transformWindow(context.nodeId, windowType);
    
    // This will be displayed only momentarily before the window transforms
    return `Transforming to ${windowType.toLowerCase()} window...`;
  }
  
  // Generate a list of available window types
  listWindowTypes() {
    return [
      'Available window types:',
      ...Object.keys(WINDOW_TYPES).map(type => `  ${type.toLowerCase()}`),
      '',
      'Usage: window <type>'
    ].join('\n');
  }
}

================
File: src/utils/terminal/executor.js
================
/**
 * Command Executor
 * Handles execution of parsed terminal commands
 */
import { registry } from './registry.js';
import { parse, validateArgs } from './parser/parser.js';

/**
 * Executes a command string with the provided terminal context
 * 
 * @param {string} commandString - Raw command string to execute
 * @param {Object} context - Terminal execution context
 * @returns {Promise<string|Array<string>>} - Command execution result
 */
export async function executeCommand(commandString, context) {
  if (!commandString || typeof commandString !== 'string') {
    return 'No command specified';
  }
  
  try {
    // Parse the command string
    const parsedCommand = parse(commandString);
    
    // Handle parsing errors
    if (parsedCommand.error) {
      return `Command parsing error: ${parsedCommand.error}`;
    }
    
    // Empty command
    if (!parsedCommand.command) {
      return '';
    }
    
    // Find the command in the registry
    const command = registry.findCommand(parsedCommand.command);
    
    // Command not found
    if (!command) {
      return `Unknown command: ${parsedCommand.command}`;
    }
    
    // Validate command arguments
    const validation = validateArgs(parsedCommand.args, command.args);
    if (!validation.valid) {
      return validation.error || `Invalid arguments for ${command.name}`;
    }
    
    // Execute the command
    const result = await command.execute(parsedCommand.args, context);
    return result;
  } catch (error) {
    console.error('Command execution error:', error);
    return `Error executing command: ${error.message}`;
  }
}

/**
 * Generate help text for all available commands or a specific command
 * 
 * @param {string} commandName - Optional command name to get help for
 * @returns {string} - Formatted help text
 */
export function generateHelp(commandName) {
  if (commandName) {
    const command = registry.findCommand(commandName);
    if (command) {
      return command.generateHelp();
    }
    return `Help not available: Unknown command "${commandName}"`;
  }
  
  // Generate help for all commands
  const allCommands = registry.getAllCommands();
  let helpText = 'Available commands:\n';
  
  // Group commands by category for better organization
  const categories = {};
  
  allCommands.forEach(cmd => {
    const category = cmd.category || 'General';
    if (!categories[category]) {
      categories[category] = [];
    }
    categories[category].push(cmd);
  });
  
  // Build the help text by category
  Object.keys(categories).sort().forEach(category => {
    helpText += `\n${category}:\n`;
    categories[category].sort((a, b) => a.name.localeCompare(b.name)).forEach(cmd => {
      helpText += `  ${cmd.name.padEnd(12)} - ${cmd.description}\n`;
    });
  });
  
  helpText += '\nType "help <command>" for more information on a specific command.';
  return helpText;
}

================
File: src/utils/terminal/parser/parser.js
================
/**
 * Terminal command parser
 * Parses and processes command input through multiple stages
 */
import { tokenize, parseCommand } from './tokenizer.js';

/**
 * Represents a parsed command with structured information
 */
export class ParsedCommand {
  constructor(input) {
    this.original = input || '';
    this.tokens = [];
    this.command = '';
    this.args = [];
    this.error = null;
  }
}

/**
 * Parse a command string into a structured ParsedCommand object
 * 
 * @param {string} input - Raw command input string
 * @returns {ParsedCommand} - Parsed command object
 */
export function parse(input) {
  const result = new ParsedCommand(input);
  
  try {
    // Stage 1: Tokenize the input
    result.tokens = tokenize(input);
    
    // Stage 2: Structure the tokens into command and args
    const parsed = parseCommand(result.tokens);
    result.command = parsed.command;
    result.args = parsed.args;
    
    // Stage 3: Variable expansion (if needed in the future)
    // This could expand environment variables, etc.
    // Currently a placeholder for future expansion
    
    // Stage 4: Path expansion (if needed in the future)
    // This could handle glob patterns or ~ expansion
    // Currently a placeholder for future expansion
  } catch (error) {
    result.error = error.message;
  }
  
  return result;
}

/**
 * Validates a command's arguments against its requirements
 * 
 * @param {Array} args - The command arguments
 * @param {Array} argDefs - The command's argument definitions
 * @returns {Object} - Validation result { valid, error }
 */
export function validateArgs(args, argDefs) {
  if (!argDefs || !argDefs.length) {
    return { valid: true };
  }
  
  // Check for required arguments
  const requiredArgs = argDefs.filter(arg => arg.required);
  
  if (args.length < requiredArgs.length) {
    const missingArgs = requiredArgs
      .slice(args.length)
      .map(arg => arg.name)
      .join(', ');
      
    return {
      valid: false,
      error: `Missing required argument(s): ${missingArgs}`
    };
  }
  
  // More advanced validation could be added here
  // such as type checking or value validation
  
  return { valid: true };
}

/**
 * Process quoted arguments in a special way (extract from quotes)
 * This is useful for commands that expect quoted text like announcement
 * 
 * @param {string} input - Original command input
 * @returns {Object|null} - Extracted quoted content or null if no quotes found
 */
export function extractQuotedText(input) {
  if (!input) return null;
  
  // Match text in quotes (single, double, or backticks)
  const match = input.match(/"([^"]*)"|'([^']*)'|`([^`]*)`/);
  if (!match) return null;
  
  // Return the matched quoted text (from whichever quote type was found)
  return {
    quoted: match[1] || match[2] || match[3],
    fullMatch: match[0]
  };
}

================
File: src/utils/terminal/parser/tokenizer.js
================
/**
 * Tokenizer for terminal command input
 * Breaks input into tokens while respecting quoted strings
 */

/**
 * Tokenize a command string into an array of tokens
 * Supports quotes (single, double, and backticks) for grouping arguments
 * 
 * @param {string} input - Raw command input string
 * @returns {Array<string>} - Array of tokens
 */
export function tokenize(input) {
  if (!input || typeof input !== 'string') {
    return [];
  }

  const tokens = [];
  let currentToken = '';
  let inQuote = false;
  let quoteChar = '';
  
  // Iterate through each character in the input
  for (let i = 0; i < input.length; i++) {
    const char = input[i];
    const nextChar = input[i + 1];
    
    // Handle quotes (single, double, or backtick)
    if ((char === '"' || char === "'" || char === '`') && 
        (!inQuote || char === quoteChar)) {
      if (inQuote) {
        // End of quoted string
        inQuote = false;
        
        // Add the complete token to our tokens list
        if (currentToken) {
          tokens.push(currentToken);
          currentToken = '';
        }
      } else {
        // Start of quoted string
        inQuote = true;
        quoteChar = char;
        
        // If we have accumulated a token before this quote, add it
        if (currentToken) {
          tokens.push(currentToken);
          currentToken = '';
        }
      }
    }
    // Handle spaces (token separators) when not in a quoted string
    else if (char === ' ' && !inQuote) {
      // Space outside quotes marks the end of a token
      if (currentToken) {
        tokens.push(currentToken);
        currentToken = '';
      }
    }
    // Handle escaped characters
    else if (char === '\\' && (nextChar === '"' || nextChar === "'" || nextChar === '`' || nextChar === '\\')) {
      // Skip the backslash and add the escaped character
      currentToken += nextChar;
      i++; // Skip the next character since we've already processed it
    }
    // Any other character gets added to the current token
    else {
      currentToken += char;
    }
  }
  
  // Add the last token if there is one
  if (currentToken) {
    tokens.push(currentToken);
  }
  
  return tokens;
}

/**
 * Parse a tokenized command into a structured command object
 * 
 * @param {Array<string>} tokens - Tokenized command array
 * @returns {Object} - Structured command object { command, args }
 */
export function parseCommand(tokens) {
  if (!tokens || !tokens.length) {
    return { command: '', args: [] };
  }
  
  // First token is the command, rest are args
  const command = tokens[0].toLowerCase();
  const args = tokens.slice(1);
  
  return { command, args };
}

================
File: src/utils/terminal/registry.js
================
/**
 * Command Registry
 * Manages the registration and lookup of terminal commands
 */
import { COMMAND_ALIASES } from '../commandAliases.js';

/**
 * Registry of all available terminal commands
 */
class CommandRegistry {
  constructor() {
    this.commands = new Map();
    this.aliases = new Map();
  }

  /**
   * Register a command with the registry
   * @param {Command} commandInstance - Instance of a Command class
   */
  register(commandInstance) {
    if (!commandInstance || !commandInstance.name) {
      console.error('Cannot register command: Invalid command instance');
      return;
    }

    // Register the main command name
    this.commands.set(commandInstance.name.toLowerCase(), commandInstance);
    
    // Register command aliases
    if (commandInstance.aliases && Array.isArray(commandInstance.aliases)) {
      commandInstance.aliases.forEach(alias => {
        this.aliases.set(alias.toLowerCase(), commandInstance.name.toLowerCase());
      });
    }
  }

  /**
   * Register multiple commands with the registry
   * @param {Array<Command>} commandInstances - Array of Command instances
   */
  registerAll(commandInstances) {
    if (!Array.isArray(commandInstances)) {
      console.error('Cannot register commands: Expected an array of commands');
      return;
    }

    commandInstances.forEach(command => this.register(command));
  }

  /**
   * Find a command by name or alias
   * @param {string} name - Command name or alias
   * @returns {Command|null} - Command instance or null if not found
   */
  findCommand(name) {
    if (!name) return null;
    
    const normalizedName = name.toLowerCase();
    
    // Check if it's a direct command name
    if (this.commands.has(normalizedName)) {
      return this.commands.get(normalizedName);
    }
    
    // Check if it's an alias
    if (this.aliases.has(normalizedName)) {
      const commandName = this.aliases.get(normalizedName);
      return this.commands.get(commandName);
    }
    
    // Check if it's in the legacy COMMAND_ALIASES from commandAliases.js
    if (COMMAND_ALIASES[normalizedName]) {
      const aliasTarget = COMMAND_ALIASES[normalizedName].toLowerCase();
      
      // The alias might point to another command or another alias
      return this.findCommand(aliasTarget);
    }
    
    return null;
  }

  /**
   * Get all registered commands
   * @returns {Array<Command>} - Array of all command instances
   */
  getAllCommands() {
    return Array.from(this.commands.values());
  }
}

// Create and export a singleton instance
export const registry = new CommandRegistry();

// Export the class for testing or specialized use cases
export default CommandRegistry;

================
File: src/utils/treeUtils.js
================
import { Node } from '../models/Node';

/**
 * Splits a window by ID, ensuring only the target window is affected
 * @param {Node} node - Current node in the tree
 * @param {string} targetId - ID of the window to split
 * @param {string} direction - Split direction ('vertical' or 'horizontal')
 * @param {Node} newWindow - New window to insert
 * @returns {Node} Updated tree structure
 */
export const findFirstWindowId = (node) => {
  if (!node) return null;
  if (node.type === 'window') return node.id;
  return findFirstWindowId(node.first) || findFirstWindowId(node.second);
};

/**
 * Creates a new split by ID, inserting a new window at the specified location
 */
export const splitNodeById = (node, targetId, direction, newWindow) => {
    if (!node) return null;
  
    // If this is the node we want to split
    if (node.id === targetId && node.type === 'window') {
      // Create a new split with the current window and new window
      return Node.createSplit(direction, node, newWindow);
    }
  
    // If this is a split node, recursively check its children
    if (node.type === 'split') {
      // Check if target is in first child
      if (findNodeById(node.first, targetId)) {
        return {
          ...node,
          first: splitNodeById(node.first, targetId, direction, newWindow)
        };
      }
      
      // Check if target is in second child
      if (findNodeById(node.second, targetId)) {
        return {
          ...node,
          second: splitNodeById(node.second, targetId, direction, newWindow)
        };
      }
    }
  
    // If we haven't found the target node, return the original node unchanged
    return node;
  };

export const removeNodeById = (node, targetId) => {
  if (!node) return null;

  if (node.type === 'split') {
    // Only remove if the child is a window node with matching ID
    if (node.first.type === 'window' && node.first.id === targetId) {
      return node.second;
    }
    if (node.second.type === 'window' && node.second.id === targetId) {
      return node.first;
    }

    const firstResult = removeNodeById(node.first, targetId);
    if (firstResult !== node.first) {
      node.first = firstResult;
      return node;
    }

    const secondResult = removeNodeById(node.second, targetId);
    if (secondResult !== node.second) {
      node.second = secondResult;
      return node;
    }
  }

  return node;
};

export const findNodeById = (node, targetId) => {
  if (!node) return null;
  
  if (node.id === targetId && node.type === 'window') return node;
  
  if (node.type === 'split') {
    const firstResult = findNodeById(node.first, targetId);
    if (firstResult) return firstResult;
    
    const secondResult = findNodeById(node.second, targetId);
    if (secondResult) return secondResult;
  }
  
  return null;
};

export const findAllWindowIds = (node) => {
  if (!node) return [];
  if (node.type === 'window') return [node.id];
  return [...findAllWindowIds(node.first), ...findAllWindowIds(node.second)];
};

export const updateSplitRatio = (node, splitId, newRatio) => {
  if (!node) return;

  if (node.type === 'split' && node.id === splitId) {
    node.splitRatio = Math.max(0.2, Math.min(0.8, newRatio));
    return;
  }

  if (node.type === 'split') {
    updateSplitRatio(node.first, splitId, newRatio);
    updateSplitRatio(node.second, splitId, newRatio);
  }
};

/**
 * Finds the sibling window ID of a given window ID
 * Used to determine which window should be active after closing a window
 * @param {Node} node - Current node in the tree
 * @param {string} targetId - ID of the window to find the sibling of
 * @returns {string|null} ID of the sibling window, or null if not found
 */
export const findSiblingWindowId = (node, targetId) => {
  if (!node) return null;
  
  if (node.type === 'split') {
    // Check if the target is a direct child of this split
    if (node.first.type === 'window' && node.first.id === targetId) {
      // Return the ID of the first window found in the second branch
      return node.second.type === 'window' 
        ? node.second.id 
        : findFirstWindowId(node.second);
    }
    if (node.second.type === 'window' && node.second.id === targetId) {
      // Return the ID of the first window found in the first branch
      return node.first.type === 'window' 
        ? node.first.id 
        : findFirstWindowId(node.first);
    }
    
    // Otherwise, recursively check both branches
    const firstResult = findSiblingWindowId(node.first, targetId);
    if (firstResult) return firstResult;
    
    return findSiblingWindowId(node.second, targetId);
  }
  
  return null;
};

================
File: src/utils/windowSizeConstants.js
================
/**
 * Constants for window size constraints
 * These values define the minimum sizes for windows to ensure they remain usable
 */

// Minimum window dimensions in percentage of screen size
export const MIN_WINDOW_WIDTH_PERCENT = 30; // 30% of screen width
export const MIN_WINDOW_HEIGHT_PERCENT = 30; // 30% of screen height

// Minimum window dimensions in pixels (used for absolute size checks)
export const MIN_WINDOW_WIDTH_PX = 300; // 300px minimum width
export const MIN_WINDOW_HEIGHT_PX = 200; // 200px minimum height

// Maximum number of windows total (regardless of arrangement)
export const MAX_HORIZONTAL_WINDOWS = 4; // Maximum windows total
export const MAX_VERTICAL_WINDOWS = 4;   // Maximum windows total

================
File: src/utils/windowTypes.js
================
// src/utils/windowTypes.js
import { FolderOpen, Code, Terminal as TerminalIcon, Eye, MessageSquare, Shield, Layout, Dices, Store, Users } from 'lucide-react';
import { WINDOW_TYPES } from './constants';

// Import individually to avoid circular dependency
import { 
  EnhancedTerminalWindow,
  EnhancedExplorerWindow,
  EnhancedChatWindow,
  EnhancedAdminWindow,
  EnhancedMarketplaceWindow
} from '../components/windows';
import GameWindow from '../components/windows/GameWindow';

export { WINDOW_TYPES };

export const WINDOW_CONTENT = {
  [WINDOW_TYPES.EXPLORER]: {
    title: 'File Explorer',
    icon: FolderOpen,
    component: EnhancedExplorerWindow
  },
  [WINDOW_TYPES.TERMINAL]: {
    title: 'Terminal',
    icon: TerminalIcon,
    component: EnhancedTerminalWindow
  },
  [WINDOW_TYPES.CHAT]: {
    title: 'Chat',
    icon: MessageSquare,
    component: EnhancedChatWindow
  },
  [WINDOW_TYPES.ADMIN]: {
    title: 'Admin Panel',
    icon: Shield,
    component: EnhancedAdminWindow
  },
  [WINDOW_TYPES.MARKETPLACE]: {
    title: 'Tileset Marketplace',
    icon: Store,
    component: EnhancedMarketplaceWindow
  },
  [WINDOW_TYPES.GAME]: {
    title: 'Game',
    icon: Users,
    component: GameWindow
  }
};

================
File: src/utils/windowUtils.js
================
/**
 * Contains utility functions for window-specific calculations and operations.
 * These functions focus on spatial relationships and window bounds rather than
 * tree structure manipulation.
 */

/**
 * Calculates the bounds of windows in the tree. Each window gets its position
 * and size as percentages of the available space.
 * 
 * @param {Node} node - The node to calculate bounds for
 * @param {Object} available - The available space in percentages
 * @returns {Array} Array of objects containing window IDs and their bounds
 */
export const getWindowBounds = (node, available = { x: 0, y: 0, width: 100, height: 100 }) => {
    if (node.type === 'window') {
      return [{
        id: node.id,
        bounds: {
          left: available.x,
          top: available.y,
          right: available.x + available.width,
          bottom: available.y + available.height,
          width: available.width,
          height: available.height,
          centerX: available.x + (available.width / 2),
          centerY: available.y + (available.height / 2)
        }
      }];
    }
  
    // For split nodes, recursively get bounds of children
    const bounds = [];
    
    if (node.direction === 'horizontal') {
      const firstHalf = {
        x: available.x,
        y: available.y,
        width: available.width * node.splitRatio,
        height: available.height
      };
      const secondHalf = {
        x: available.x + (available.width * node.splitRatio),
        y: available.y,
        width: available.width * (1 - node.splitRatio),
        height: available.height
      };
      bounds.push(...getWindowBounds(node.first, firstHalf));
      bounds.push(...getWindowBounds(node.second, secondHalf));
    } else {
      const firstHalf = {
        x: available.x,
        y: available.y,
        width: available.width,
        height: available.height * node.splitRatio
      };
      const secondHalf = {
        x: available.x,
        y: available.y + (available.height * node.splitRatio),
        width: available.width,
        height: available.height * (1 - node.splitRatio)
      };
      bounds.push(...getWindowBounds(node.first, firstHalf));
      bounds.push(...getWindowBounds(node.second, secondHalf));
    }
  
    return bounds;
  };
  
  /**
   * Determines if two windows are adjacent in a specific direction.
   * Uses a small tolerance value to account for floating-point calculations.
   * 
   * @param {Object} window1 - First window with bounds
   * @param {Object} window2 - Second window with bounds
   * @param {string} direction - Direction to check ('left', 'right', 'up', 'down')
   * @returns {boolean} Whether the windows are adjacent
   */
  export const areWindowsAdjacent = (window1, window2, direction) => {
    const tolerance = 0.01; // 1% tolerance for floating point comparisons
    
    switch (direction) {
      case 'left':
        return Math.abs(window1.bounds.left - window2.bounds.right) < tolerance &&
               !(window1.bounds.bottom < window2.bounds.top || window1.bounds.top > window2.bounds.bottom);
      case 'right':
        return Math.abs(window1.bounds.right - window2.bounds.left) < tolerance &&
               !(window1.bounds.bottom < window2.bounds.top || window1.bounds.top > window2.bounds.bottom);
      case 'up':
        return Math.abs(window1.bounds.top - window2.bounds.bottom) < tolerance &&
               !(window1.bounds.right < window2.bounds.left || window1.bounds.left > window2.bounds.right);
      case 'down':
        return Math.abs(window1.bounds.bottom - window2.bounds.top) < tolerance &&
               !(window1.bounds.right < window2.bounds.left || window1.bounds.left > window2.bounds.right);
      default:
        return false;
    }
  };
  
  /**
   * Finds the next window in a specified direction from the active window.
   * 
   * @param {Node} rootNode - The root node of the window tree
   * @param {string} activeNodeId - ID of the currently active window
   * @param {string} direction - Direction to look for the next window
   * @returns {string|null} ID of the next window, or null if none found
   */
  export const findNextWindow = (rootNode, activeNodeId, direction) => {
    const allWindows = getWindowBounds(rootNode);
    const activeWindow = allWindows.find(w => w.id === activeNodeId);
    if (!activeWindow) return null;
  
    const adjacentWindows = allWindows.filter(w => 
      w.id !== activeNodeId && areWindowsAdjacent(activeWindow, w, direction)
    );
  
    if (adjacentWindows.length === 0) return null;
  
    // Sort adjacent windows based on position and direction
    let nextWindow;
    switch (direction) {
      case 'left':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerX !== b.bounds.centerX
            ? b.bounds.centerX - a.bounds.centerX
            : a.bounds.centerY - b.bounds.centerY
        )[0];
        break;
      case 'right':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerX !== b.bounds.centerX
            ? a.bounds.centerX - b.bounds.centerX
            : a.bounds.centerY - b.bounds.centerY
        )[0];
        break;
      case 'up':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerY !== b.bounds.centerY
            ? b.bounds.centerY - a.bounds.centerY
            : a.bounds.centerX - b.bounds.centerX
        )[0];
        break;
      case 'down':
        nextWindow = adjacentWindows.sort((a, b) => 
          a.bounds.centerY !== b.bounds.centerY
            ? a.bounds.centerY - b.bounds.centerY
            : a.bounds.centerX - b.bounds.centerX
        )[0];
        break;
    }
  
    return nextWindow?.id || null;
  };

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import { nodePolyfills } from 'vite-plugin-node-polyfills'


// This configuration sets up Vite with both React and Tailwind CSS support
export default defineConfig({
  // Configure dev server with proxy for API requests
  server: {
    proxy: {
      '/api': {
        target: 'http://45.45.239.125:3001',
        changeOrigin: true,
        secure: false,
        configure: (proxy, _options) => {
          proxy.on('error', (err, _req, _res) => {
            console.log('proxy error', err);
          });
          proxy.on('proxyReq', (proxyReq, req, _res) => {
            console.log('Sending Request:', req.method, req.url);
          });
          proxy.on('proxyRes', (proxyRes, req, _res) => {
            console.log('Received Response:', proxyRes.statusCode, req.url);
          });
        }
      }
    }
  },
  plugins: [
    // The React plugin enables JSX processing and Fast Refresh
    react(),
    // The Tailwind plugin handles utility class generation
    tailwindcss(),
    // Configure Node.js polyfills for SimplePeer
    nodePolyfills({
      // Whether to polyfill specific Node.js globals
      globals: {
        Buffer: true,
        global: true,
        process: true,
      },
      // Whether to polyfill Node.js builtins
      protocolImports: true,
    }),
  ],
  resolve: {
    extensions: ['.js', '.jsx', '.json'],
    alias: {
      // Provide Node.js polyfills for browser environment
      buffer: 'buffer'
    }
  },
  define: {
    // Define global variables for browser environment
    global: 'window',
    'process.env': {}
  },
  optimizeDeps: {
    // Include Node.js modules that need to be pre-bundled
    include: ['buffer', 'simple-peer']
  },
  build: {
    // Configure Rollup to handle Node.js modules
    rollupOptions: {
      output: {
        manualChunks: {
          'simple-peer': ['simple-peer']
        }
      }
    },
    // Enable content hashing in filenames for cache busting
    assetsDir: 'assets',
    sourcemap: true,
    manifest: true,
    // Use content hashing to force cache invalidation when files change
    chunkFileNames: 'assets/js/[name]-[hash].js',
    entryFileNames: 'assets/js/[name]-[hash].js',
    assetFileNames: 'assets/[ext]/[name]-[hash].[ext]'
  }
})



================================================================
End of Codebase
================================================================
