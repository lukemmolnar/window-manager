# Window Manager - Resize Mode Documentation

## Overview

Resize Mode is a feature in the Window Manager application that allows users to adjust the size of windows using keyboard shortcuts. This document provides a comprehensive explanation of how Resize Mode works, its implementation details, and how it can be customized.

## User Guide

### Activating Resize Mode

- Press `Ctrl+Q` to toggle Resize Mode on/off
- When Resize Mode is active, the border of the active window changes from teal to yellow
- A debug message "Resize mode: true/false" is logged to the console when toggled

### Using Resize Mode

Once Resize Mode is active:

1. Use arrow keys to resize the active window:
   - `Left Arrow`: Shrink the window horizontally (decrease width)
   - `Right Arrow`: Grow the window horizontally (increase width)
   - `Up Arrow`: Shrink the window vertically (decrease height)
   - `Down Arrow`: Grow the window vertically (increase height)

2. The resize operation affects the active window and its adjacent windows
3. Each key press adjusts the size by 5% (0.05) in the corresponding direction
4. Window sizes are constrained between 10% and 90% to prevent windows from becoming too small

### Exiting Resize Mode

- Press `Ctrl+Q` again to exit Resize Mode
- The active window's border will return to teal color

## Technical Implementation

### Core Components

Resize Mode is implemented across several files:

1. `useWindowManager.js`: Contains the core resize state and logic
2. `useKeyboardShortcuts.js`: Handles keyboard events for resize mode
3. `WindowManager.jsx`: Renders windows with different border colors based on state
4. `Node.js`: Defines the window/split node structure with splitRatio property
5. `treeUtils.js`: Contains utility functions for tree manipulation
6. `windowUtils.js`: Calculates window bounds based on tree structure

### State Management

The resize mode state is managed in the `useWindowManager` hook:

```javascript
// From useWindowManager.js
const [isResizeMode, setIsResizeMode] = useState(false);

// Debug logging for resize mode
useEffect(() => {
  console.log('Resize mode:', isResizeMode);
}, [isResizeMode]);

// Exported in the return object
return {
  // ... other properties
  isResizeMode,
  setIsResizeMode,
  resizeActiveWindow
};
```

### Keyboard Shortcuts

Keyboard shortcuts for resize mode are handled in the `useKeyboardShortcuts` hook:

```javascript
// From useKeyboardShortcuts.js
// Handle resize mode toggle
if (e.ctrlKey && e.key === 'q') {
  e.preventDefault();
  setIsResizeMode(!isResizeMode);
  return;
}

// Handle resize mode arrow keys
if (isResizeMode && !e.ctrlKey) {
  switch (e.key) {
    case 'ArrowLeft':
      e.preventDefault();
      resizeActiveWindow('left');
      break;
    case 'ArrowRight':
      e.preventDefault();
      resizeActiveWindow('right');
      break;
    case 'ArrowUp':
      e.preventDefault();
      resizeActiveWindow('up');
      break;
    case 'ArrowDown':
      e.preventDefault();
      resizeActiveWindow('down');
      break;
  }
  return;
}
```

### Visual Feedback

The `WindowManager.jsx` component provides visual feedback for resize mode:

```javascript
// From WindowManager.jsx
<div
  className={`absolute overflow-hidden border-2 ${
    isActive ? (isResizeMode ? 'border-yellow-500' : 'border-teal-500') : 'border-stone-600'
  }`}
  // ... other props
>
```

## Resize Algorithm

The core resize functionality is implemented in the `resizeActiveWindow` function in `useWindowManager.js`:

```javascript
const resizeActiveWindow = useCallback((direction) => {
  if (!activeNodeId || !rootNode || !isResizeMode) return;

  updateWorkspace(workspace => {
    const newRoot = JSON.parse(JSON.stringify(workspace.root));
    
    // Helper function to find all affected splits
    const findAffectedSplits = (node, targetId) => {
      if (!node) return [];
      
      const splits = [];
      if (node.type === 'split') {
        const targetInFirst = findNodeById(node.first, targetId);
        const targetInSecond = findNodeById(node.second, targetId);
        
        if (targetInFirst || targetInSecond) {
          // Add this split if it matches our resize direction
          if ((direction === 'left' || direction === 'right') && node.direction === 'horizontal') {
            splits.push({ node, targetInFirst: !!targetInFirst });
          }
          if ((direction === 'up' || direction === 'down') && node.direction === 'vertical') {
            splits.push({ node, targetInFirst: !!targetInFirst });
          }
        }
        
        splits.push(...findAffectedSplits(node.first, targetId));
        splits.push(...findAffectedSplits(node.second, targetId));
      }
      
      return splits;
    };

    const affectedSplits = findAffectedSplits(newRoot, activeNodeId);
    const resizeStep = 0.05;

    // Apply resize to all affected splits
    affectedSplits.forEach(({ node, targetInFirst }) => {
      switch (direction) {
        case 'left': // Shrink width
          if (targetInFirst) {
            node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
          } else {
            node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
          }
          break;
          
        case 'right': // Grow width
          if (targetInFirst) {
            node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
          } else {
            node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
          }
          break;
          
        case 'up': // Shrink height
          if (targetInFirst) {
            node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
          } else {
            node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
          }
          break;
          
        case 'down': // Grow height
          if (targetInFirst) {
            node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep);
          } else {
            node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep);
          }
          break;
      }
    });

    return { ...workspace, root: newRoot };
  });
}, [activeNodeId, rootNode, isResizeMode, updateWorkspace]);
```

### How the Algorithm Works

1. **Finding Affected Splits**:
   - The algorithm traverses the window tree to find all split nodes that affect the active window
   - It only considers splits that match the resize direction (horizontal splits for left/right, vertical splits for up/down)
   - It tracks whether the active window is in the first or second child of each split

2. **Applying Resize**:
   - For each affected split, the algorithm adjusts the `splitRatio` property
   - The adjustment direction depends on:
     - The resize direction (left/right/up/down)
     - Whether the active window is in the first or second child of the split
   - The resize step is fixed at 0.05 (5%) per key press
   - The splitRatio is constrained between 0.1 (10%) and 0.9 (90%)

3. **Window Tree Structure**:
   - The window tree consists of nested split and window nodes
   - Split nodes have a direction (horizontal/vertical) and a splitRatio
   - The splitRatio determines how space is divided between the first and second child
   - Window nodes represent actual windows with content

## Customization Options

To customize the resize functionality, you can modify the following:

1. **Resize Step Size**:
   - Change the `resizeStep` value in `resizeActiveWindow` function (default: 0.05)
   ```javascript
   const resizeStep = 0.05; // Change this value to adjust resize speed
   ```

2. **Minimum/Maximum Window Size**:
   - Adjust the constraints in the resize logic (default: 0.1 to 0.9)
   ```javascript
   node.splitRatio = Math.max(0.1, node.splitRatio - resizeStep); // Change 0.1 to adjust minimum size
   node.splitRatio = Math.min(0.9, node.splitRatio + resizeStep); // Change 0.9 to adjust maximum size
   ```

3. **Keyboard Shortcut**:
   - Modify the key detection in `useKeyboardShortcuts.js`
   ```javascript
   if (e.ctrlKey && e.key === 'q') { // Change 'q' to another key
     e.preventDefault();
     setIsResizeMode(!isResizeMode);
     return;
   }
   ```

4. **Visual Feedback**:
   - Change the border colors in `WindowManager.jsx`
   ```javascript
   isActive ? (isResizeMode ? 'border-yellow-500' : 'border-teal-500') : 'border-stone-600'
   // Change 'border-yellow-500' to another color for resize mode
   ```

## Advanced Modifications

For more advanced modifications to the resize functionality:

1. **Adding Mouse Resize Support**:
   - The `WindowManager.jsx` already includes mouse resize functionality through the `handleResizeStart`, `handleResizeMove`, and `handleResizeEnd` functions
   - This allows users to drag the dividers between windows to resize them

2. **Adding Resize Indicators**:
   - You could add visual indicators showing the current size percentage when in resize mode
   - This would require adding a state variable to track the current size and rendering it in the UI

3. **Implementing Snap-to-Grid**:
   - Modify the resize algorithm to snap to predefined grid positions
   - This would make it easier to create evenly sized layouts

4. **Adding Presets**:
   - Implement preset layouts that users can switch between
   - This could include equal splits, golden ratio splits, etc.

## Troubleshooting

Common issues with resize mode:

1. **Resize Not Working**:
   - Ensure resize mode is active (yellow border)
   - Check that the window has an active split in the direction you're trying to resize
   - Verify keyboard events are being captured (not intercepted by browser or OS)

2. **Unexpected Resize Behavior**:
   - Complex window layouts may have multiple splits affecting a window
   - The algorithm tries to find all relevant splits, but may not behave as expected in all cases
   - Try simplifying your layout if you encounter issues

3. **Performance Issues**:
   - The resize algorithm creates a deep copy of the window tree on each key press
   - This could cause performance issues with very complex layouts
   - Consider optimizing the update logic for better performance
