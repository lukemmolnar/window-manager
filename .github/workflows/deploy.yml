name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create production environment file
      run: |
        echo "VITE_API_BASE_URL=/api" > .env.production
        echo "VITE_SOCKET_URL=" >> .env.production
      
    - name: Build project
      run: npm run build

    - name: Debug Secrets
      run: |
        if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "SSH_PRIVATE_KEY is set"
        else
          echo "SSH_PRIVATE_KEY is not set"
        fi
        
        if [ -n "${{ secrets.SERVER_USERNAME }}" ]; then
          echo "SERVER_USERNAME is set"
        else
          echo "SERVER_USERNAME is not set"
        fi
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add known hosts
        ssh-keyscan -p 8190 -H 45.45.239.125 >> ~/.ssh/known_hosts
        
        # Create SSH config
        echo "Host deployment-server" > ~/.ssh/config
        echo "    HostName 45.45.239.125" >> ~/.ssh/config
        echo "    Port 8190" >> ~/.ssh/config
        echo "    User ${{ secrets.SERVER_USERNAME }}" >> ~/.ssh/config
        echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
        echo "    StrictHostKeyChecking yes" >> ~/.ssh/config
        
    - name: Deploy with SSH
      run: |
        # Test SSH connection
        ssh deployment-server "echo SSH connection successful"
        
        # Create remote directory
        ssh deployment-server "mkdir -p /var/www/public_site"
        
        # Clear old files
        ssh deployment-server "rm -rf /var/www/public_site/*"
        
        # Copy files
        scp -r dist/* deployment-server:/var/www/public_site/
        
        # Set cache control headers for index.html
        ssh deployment-server "echo 'Cache-Control: no-cache, no-store, must-revalidate' > /var/www/public_site/.htaccess"
        ssh deployment-server "echo 'Pragma: no-cache' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo 'Expires: 0' >> /var/www/public_site/.htaccess"
        
        # Set long-term caching for hashed assets
        ssh deployment-server "echo '<FilesMatch \"\.([0-9a-f]{8,})\.((js|css|jpg|jpeg|png|gif|webp|svg|woff2))$\">' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo '  Header set Cache-Control \"public, max-age=31536000, immutable\"' >> /var/www/public_site/.htaccess"
        ssh deployment-server "echo '</FilesMatch>' >> /var/www/public_site/.htaccess"
