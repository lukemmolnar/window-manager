# IndexedDB Implementation Guide for Window Manager

## Table of Contents
1. Introduction to IndexedDB
2. Why IndexedDB for Window Manager
3. Setting Up IndexedDB
4. Implementation Plan for Window Manager
5. Code Examples
6. Testing and Debugging
7. Best Practices
8. Troubleshooting

## 1. Introduction to IndexedDB

IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. It's a NoSQL database that works with JavaScript objects and allows for high-performance searches using indexes.

Key features:
- Stores JavaScript objects (including complex nested objects)
- Transactional database operations
- Asynchronous API (doesn't block the main thread)
- Much larger storage capacity than localStorage
- Works offline
- Follows same-origin policy (data is tied to the domain)

## 2. Why IndexedDB for Window Manager

The window manager application needs to persist complex window layout structures across page refreshes. IndexedDB is ideal for this because:

1. **Complex Data Structures**: The window layout tree is a complex nested structure that IndexedDB can store natively
2. **Performance**: IndexedDB can handle larger amounts of data than localStorage without performance issues
3. **Storage Limits**: IndexedDB typically has a much higher storage limit (generally 50-100MB or more)
4. **Async Operations**: Saving window state won't block the UI thread
5. **Structured Queries**: Can efficiently query for specific workspaces or window configurations

## 3. Setting Up IndexedDB

### Basic Setup

```javascript
// db-config.js
const DB_NAME = 'WindowManagerDB';
const DB_VERSION = 1;
const STORES = {
  WORKSPACES: 'workspaces',
  WINDOW_STATES: 'windowStates'
};

export { DB_NAME, DB_VERSION, STORES };
```

### Database Initialization

```javascript
// db.js
import { DB_NAME, DB_VERSION, STORES } from './db-config';

export const initDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    
    request.onerror = (event) => {
      console.error('IndexedDB error:', event.target.error);
      reject('Error opening IndexedDB');
    };
    
    request.onsuccess = (event) => {
      const db = event.target.result;
      console.log('IndexedDB opened successfully');
      resolve(db);
    };
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      
      // Create object stores
      if (!db.objectStoreNames.contains(STORES.WORKSPACES)) {
        db.createObjectStore(STORES.WORKSPACES, { keyPath: 'id' });
      }
      
      if (!db.objectStoreNames.contains(STORES.WINDOW_STATES)) {
        db.createObjectStore(STORES.WINDOW_STATES, { keyPath: 'id' });
      }
    };
  });
};
```

### Basic CRUD Operations

```javascript
// db-operations.js
import { DB_NAME, STORES } from './db-config';

// Get database connection
const getDB = () => {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME);
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(event.target.result);
  });
};

// Save data to a store
export const saveData = async (storeName, data) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.put(data);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(event.target.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

// Get data from a store
export const getData = async (storeName, id) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.get(id);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(request.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

// Delete data from a store
export const deleteData = async (storeName, id) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.delete(id);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve();
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};

// Get all data from a store
export const getAllData = async (storeName) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.getAll();
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(request.result);
    
    // Close the database when the transaction is complete
    transaction.oncomplete = () => db.close();
  });
};
```

## 4. Implementation Plan for Window Manager

### Step 1: Create IndexedDB Service

Create a dedicated service for IndexedDB operations specific to the window manager:

```javascript
// services/indexedDBService.js
import { initDB } from '../db';
import { saveData, getData, getAllData, deleteData } from '../db-operations';
import { STORES } from '../db-config';

// Initialize the database when the service is first imported
let dbInitialized = false;
const ensureDBInitialized = async () => {
  if (!dbInitialized) {
    await initDB();
    dbInitialized = true;
  }
};

// Workspace operations
export const saveWorkspace = async (workspace) => {
  await ensureDBInitialized();
  return saveData(STORES.WORKSPACES, workspace);
};

export const getWorkspace = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.WORKSPACES, id);
};

export const getAllWorkspaces = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.WORKSPACES);
};

export const deleteWorkspace = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.WORKSPACES, id);
};

// Window state operations
export const saveWindowState = async (windowState) => {
  await ensureDBInitialized();
  return saveData(STORES.WINDOW_STATES, windowState);
};

export const getWindowState = async (id) => {
  await ensureDBInitialized();
  return getData(STORES.WINDOW_STATES, id);
};

export const getAllWindowStates = async () => {
  await ensureDBInitialized();
  return getAllData(STORES.WINDOW_STATES);
};

export const deleteWindowState = async (id) => {
  await ensureDBInitialized();
  return deleteData(STORES.WINDOW_STATES, id);
};

// Save all workspaces at once (for bulk operations)
export const saveAllWorkspaces = async (workspaces) => {
  await ensureDBInitialized();
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORES.WORKSPACES, 'readwrite');
    const store = transaction.objectStore(STORES.WORKSPACES);
    
    // Clear existing data
    store.clear();
    
    // Add all workspaces
    workspaces.forEach(workspace => {
      store.add(workspace);
    });
    
    transaction.onerror = (event) => reject(event.target.error);
    transaction.oncomplete = () => {
      db.close();
      resolve();
    };
  });
};
```

### Step 2: Modify WindowStateContext to Use IndexedDB

Replace localStorage with IndexedDB in the WindowStateContext:

```javascript
// context/WindowStateContext.jsx (modified)
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { 
  saveWindowState, 
  getWindowState, 
  getAllWindowStates, 
  deleteWindowState 
} from '../services/indexedDBService';

// Create context
const WindowStateContext = createContext();

// Initial state with different content types
const initialState = {
  windowStates: {}
};

// Context provider component
export function WindowStateProvider({ children }) {
  // Use a ref to store the state to avoid re-renders
  const stateRef = useRef(initialState);
  
  // Use useState just to trigger re-renders when needed
  const [, forceUpdate] = useState({});
  
  // Add a ref to track if we should update IndexedDB
  const isInitialMount = useRef(true);
  const saveTimeoutRef = useRef(null);

  // Load initial state from IndexedDB once on mount
  useEffect(() => {
    const loadFromIndexedDB = async () => {
      try {
        const windowStates = await getAllWindowStates();
        if (windowStates && windowStates.length > 0) {
          // Convert array to object with windowId as key
          const windowStatesObj = windowStates.reduce((acc, state) => {
            acc[state.id] = {
              type: state.type,
              content: state.content
            };
            return acc;
          }, {});
          
          // Update the state ref directly
          stateRef.current = {
            ...stateRef.current,
            windowStates: windowStatesObj
          };
          
          // Force a re-render
          forceUpdate({});
        }
        // Mark initial load as complete
        isInitialMount.current = false;
      } catch (error) {
        console.error('Failed to load window states from IndexedDB:', error);
        isInitialMount.current = false;
      }
    };
    
    loadFromIndexedDB();
  }, []); // Empty dependency array means this runs once on mount

  // Save to IndexedDB with debounce
  const saveToIndexedDB = useCallback(() => {
    // Skip saving on initial load
    if (isInitialMount.current) {
      return;
    }
    
    // Clear any existing timeout
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    // Set a new timeout to save the state after a delay
    saveTimeoutRef.current = setTimeout(async () => {
      try {
        // Convert window states object to array of objects with id
        const windowStates = Object.entries(stateRef.current.windowStates).map(
          ([id, state]) => ({
            id,
            type: state.type,
            content: state.content
          })
        );
        
        // Save each window state individually
        for (const state of windowStates) {
          await saveWindowState(state);
        }
      } catch (error) {
        console.error('Failed to save window states to IndexedDB:', error);
      }
    }, 500); // 500ms debounce
  }, []);

  // Action creators
  const setWindowState = useCallback((windowId, windowType, content) => {
    // Update the state ref directly
    stateRef.current = {
      ...stateRef.current,
      windowStates: {
        ...stateRef.current.windowStates,
        [windowId]: {
          type: windowType,
          content
        }
      }
    };
    
    // Save to IndexedDB
    saveToIndexedDB();
    
    // Force a re-render
    forceUpdate({});
  }, [saveToIndexedDB]);

  const removeWindowState = useCallback((windowId) => {
    // Create a new state object
    const newState = {
      ...stateRef.current,
      windowStates: { ...stateRef.current.windowStates }
    };
    
    // Delete the window state
    delete newState.windowStates[windowId];
    
    // Update the state ref
    stateRef.current = newState;
    
    // Delete from IndexedDB
    deleteWindowState(windowId).catch(error => {
      console.error('Failed to delete window state from IndexedDB:', error);
    });
    
    // Force a re-render
    forceUpdate({});
  }, []);

  const getWindowStateFromRef = useCallback((windowId) => {
    return stateRef.current.windowStates[windowId] || null;
  }, []);

  // Create a stable context value
  const contextValue = useMemo(() => ({
    windowStates: stateRef.current.windowStates,
    setWindowState,
    removeWindowState,
    getWindowState: getWindowStateFromRef
  }), [setWindowState, removeWindowState, getWindowStateFromRef]);

  return (
    <WindowStateContext.Provider value={contextValue}>
      {children}
    </WindowStateContext.Provider>
  );
}

// Custom hook to use the window state context
export function useWindowState() {
  const context = useContext(WindowStateContext);
  if (!context) {
    throw new Error('useWindowState must be used within a WindowStateProvider');
  }
  return context;
}
```

### Step 3: Create a WorkspaceContext to Persist Window Layout

Create a new context to manage workspace persistence:

```javascript
// context/WorkspaceContext.jsx
import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';
import { 
  saveWorkspace, 
  getWorkspace, 
  getAllWorkspaces, 
  saveAllWorkspaces 
} from '../services/indexedDBService';

// Create context
const WorkspaceContext = createContext();

// Initial workspaces
const initialWorkspaces = [
  { id: 1, name: 'Main', root: null, activeNodeId: null, terminalStates: {} },
  { id: 2, name: 'Code', root: null, activeNodeId: null, terminalStates: {} },
  { id: 3, name: 'Terminal', root: null, activeNodeId: null, terminalStates: {} },
  { id: 4, name: 'Preview', root: null, activeNodeId: null, terminalStates: {} }
];

export function WorkspaceProvider({ children }) {
  const [workspaces, setWorkspaces] = useState(initialWorkspaces);
  const [currentWorkspaceIndex, setCurrentWorkspaceIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  
  // Load workspaces from IndexedDB on mount
  useEffect(() => {
    const loadWorkspaces = async () => {
      try {
        setIsLoading(true);
        const savedWorkspaces = await getAllWorkspaces();
        
        if (savedWorkspaces && savedWorkspaces.length > 0) {
          setWorkspaces(savedWorkspaces);
        }
      } catch (error) {
        console.error('Failed to load workspaces from IndexedDB:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadWorkspaces();
  }, []);
  
  // Save workspaces to IndexedDB whenever they change
  useEffect(() => {
    if (isLoading) return; // Skip saving during initial load
    
    const saveWorkspaces = async () => {
      try {
        await saveAllWorkspaces(workspaces);
      } catch (error) {
        console.error('Failed to save workspaces to IndexedDB:', error);
      }
    };
    
    const timeoutId = setTimeout(saveWorkspaces, 500); // Debounce
    return () => clearTimeout(timeoutId);
  }, [workspaces, isLoading]);
  
  // Update a specific workspace
  const updateWorkspace = useCallback((index, updater) => {
    setWorkspaces(prev => {
      const updated = [...prev];
      if (typeof updater === 'function') {
        updated[index] = {
          ...updated[index],
          ...updater(updated[index])
        };
      } else {
        updated[index] = {
          ...updated[index],
          ...updater
        };
      }
      return updated;
    });
  }, []);
  
  // Switch to a different workspace
  const switchWorkspace = useCallback((target) => {
    if (typeof target === 'number' && target >= 0 && target < workspaces.length) {
      setCurrentWorkspaceIndex(target);
    } else if (target === 'right' || target === 'left') {
      setCurrentWorkspaceIndex(prev => {
        const newIndex = target === 'right' 
          ? (prev + 1) % workspaces.length 
          : prev - 1 < 0 ? workspaces.length - 1 : prev - 1;
        return newIndex;
      });
    }
  }, [workspaces.length]);
  
  // Context value
  const value = useMemo(() => ({
    workspaces,
    currentWorkspaceIndex,
    currentWorkspace: workspaces[currentWorkspaceIndex],
    updateWorkspace,
    switchWorkspace,
    isLoading
  }), [workspaces, currentWorkspaceIndex, updateWorkspace, switchWorkspace, isLoading]);
  
  return (
    <WorkspaceContext.Provider value={value}>
      {children}
    </WorkspaceContext.Provider>
  );
}

// Custom hook to use the workspace context
export function useWorkspace() {
  const context = useContext(WorkspaceContext);
  if (!context) {
    throw new Error('useWorkspace must be used within a WorkspaceProvider');
  }
  return context;
}
```

### Step 4: Modify useWindowManager to Use WorkspaceContext

Update the useWindowManager hook to use the WorkspaceContext:

```javascript
// hooks/useWindowManager.js (modified)
import { useCallback, useState, useEffect, useRef } from 'react';
import { Node } from '../models/Node';
import { WINDOW_TYPES } from '../utils/windowTypes';
import { 
  splitNodeById, 
  removeNodeById, 
  findNodeById, 
  findAllWindowIds,
  updateSplitRatio,
} from '../utils/treeUtils';
import { getWindowBounds } from '../utils/windowUtils';
import { useWindowState } from '../context/WindowStateContext';
import { useWorkspace } from '../context/WorkspaceContext';
import { 
  MIN_WINDOW_WIDTH_PX, 
  MIN_WINDOW_HEIGHT_PX 
} from '../utils/windowSizeConstants';

export const useWindowManager = ({ defaultLayout = null, onFlashBorder = null } = {}) => {
  // Get workspace state from context
  const { 
    currentWorkspace, 
    currentWorkspaceIndex, 
    updateWorkspace, 
    switchWorkspace 
  } = useWorkspace();
  
  // Extract current workspace data
  const rootNode = currentWorkspace.root;
  const activeNodeId = currentWorkspace.activeNodeId;
  const terminalStates = currentWorkspace.terminalStates;
  
  // Local state for resize and move modes
  const [isResizeMode, setIsResizeMode] = useState(false);
  const [isMoveMode, setIsMoveMode] = useState(false);
  const [moveSourceWindowId, setMoveSourceWindowId] = useState(null);

  // Create setActiveNodeId function that updates the workspace
  const setActiveNodeId = useCallback((nodeId) => {
    updateWorkspace(currentWorkspaceIndex, {
      activeNodeId: nodeId
    });
  }, [currentWorkspaceIndex, updateWorkspace]);

  // Get window state management functions
  const { getWindowState, setWindowState, removeWindowState } = useWindowState();

  // Rest of the hook implementation remains largely the same,
  // but replace all instances of setWorkspaces with updateWorkspace
  // and use currentWorkspace instead of workspaces[currentWorkspaceIndex]
  
  // For example, the createNewWindow function would be updated like this:
  const createNewWindow = useCallback((windowType) => {
    const newNode = Node.createWindow(Date.now(), windowType || WINDOW_TYPES.TERMINAL);
    
    // Initialize window state based on window type
    const initialContent = {};
    
    if (windowType === WINDOW_TYPES.TERMINAL) {
      // Initialize terminal state
      initialContent.history = ['Welcome to the Terminal! Type "help" for available commands.'];
      initialContent.commandHistory = [];
      
      updateWorkspace(currentWorkspaceIndex, workspace => ({
        ...workspace,
        terminalStates: {
          ...workspace.terminalStates,
          [newNode.id]: {
            history: initialContent.history,
            commandHistory: initialContent.commandHistory
          }
        }
      }));
    } else if (windowType === WINDOW_TYPES.EDITOR) {
      // Initialize editor state with default content
      initialContent.text = `function hello() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhello();`;
    } else if (windowType === WINDOW_TYPES.EXPLORER) {
      // Initialize explorer state
      initialContent.currentPath = '/';
      initialContent.selectedItem = null;
    }
    
    // Set the initial window state
    setWindowState(newNode.id, newNode.windowType, initialContent);
    
    if (!rootNode) {
      // First window, always allowed
      updateWorkspace(currentWorkspaceIndex, {
        root: newNode,
        activeNodeId: newNode.id
      });
      return;
    }
    
    // Rest of the function remains the same...
  }, [rootNode, activeNodeId, currentWorkspaceIndex, updateWorkspace, setActiveNodeId, setWindowState]);

  // Similarly update other functions that modify workspace state...

  return {
    rootNode,
    activeNodeId,
    setActiveNodeId,
    terminalStates,
    updateTerminalState,
    createNewWindow,
    splitWindow,
    closeWindow,
    transformWindow,
    handleCommand,
    navigateToWindow,
    hasActiveWindow: Boolean(activeNodeId),
    hasRootNode: Boolean(rootNode),
    currentWorkspaceIndex,
    workspaceCount: 4,
    switchWorkspace,
    isResizeMode,
    setIsResizeMode,
    resizeActiveWindow,
    isMoveMode,
    setIsMoveMode,
    moveSourceWindowId,
    setMoveSourceWindowId,
    swapWindows
  };
};
```

### Step 5: Update App.jsx to Include WorkspaceProvider

```javascript
// main.jsx (modified)
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles.css'
import './App.css'
import { WindowStateProvider } from './context/WindowStateContext'
import { AuthProvider } from './context/AuthContext'
import { WorkspaceProvider } from './context/WorkspaceContext'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthProvider>
      <WindowStateProvider>
        <WorkspaceProvider>
          <App />
        </WorkspaceProvider>
      </WindowStateProvider>
    </AuthProvider>
  </React.StrictMode>,
)
```

## 5. Code Examples

### Example: Handling Large Objects

When dealing with large objects, consider serializing/deserializing them:

```javascript
// Serialize before saving
const serializedData = JSON.stringify(complexObject);
await saveData(STORES.WORKSPACES, { id: 'workspace1', data: serializedData });

// Deserialize after loading
const result = await getData(STORES.WORKSPACES, 'workspace1');
const complexObject = JSON.parse(result.data);
```

### Example: Using Transactions for Multiple Operations

```javascript
const performBatchOperations = async () => {
  const db = await getDB();
  const transaction = db.transaction([STORES.WORKSPACES, STORES.WINDOW_STATES], 'readwrite');
  
  // Get object stores
  const workspaceStore = transaction.objectStore(STORES.WORKSPACES);
  const windowStateStore = transaction.objectStore(STORES.WINDOW_STATES);
  
  // Perform operations
  workspaceStore.put({ id: 'workspace1', name: 'Main Workspace' });
  windowStateStore.put({ id: 'window1', type: 'terminal', content: { history: [] } });
  
  // Return a promise that resolves when the transaction completes
  return new Promise((resolve, reject) => {
    transaction.oncomplete = () => {
      db.close();
      resolve();
    };
    transaction.onerror = (event) => {
      db.close();
      reject(event.target.error);
    };
  });
};
```

### Example: Using Indexes for Efficient Queries

```javascript
// During database initialization
request.onupgradeneeded = (event) => {
  const db = event.target.result;
  
  // Create object store with indexes
  const windowStore = db.createObjectStore(STORES.WINDOW_STATES, { keyPath: 'id' });
  windowStore.createIndex('byType', 'type', { unique: false });
};

// Query using an index
const getWindowsByType = async (type) => {
  const db = await getDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORES.WINDOW_STATES, 'readonly');
    const store = transaction.objectStore(STORES.WINDOW_STATES);
    const index = store.index('byType');
    const request = index.getAll(type);
    
    request.onerror = (event) => reject(event.target.error);
    request.onsuccess = (event) => resolve(request.result);
    
    transaction.oncomplete = () => db.close();
  });
};
```

## 6. Testing and Debugging

### Testing IndexedDB Implementation

1. **Browser DevTools**: Use the Application tab to inspect IndexedDB databases
2. **Console Logging**: Add strategic console logs for debugging
3. **Manual Testing**: Test page refreshes, logging in/out, and browser restarts

### Debugging Common Issues

1. **Version Mismatch**: If schema changes, increment DB_VERSION
2. **Transaction Timing**: Ensure transactions complete before closing the database
3. **Error Handling**: Always include error handlers for IndexedDB operations

## 7. Best Practices

1. **Use Promises**: Wrap IndexedDB's callback-based API in Promises for cleaner code
2. **Implement Versioning**: Use the version parameter to handle database schema upgrades
3. **Debounce Saves**: Avoid excessive writes by debouncing save operations
4. **Close Connections**: Always close database connections after transactions complete
5. **Handle Errors**: Implement robust error handling for all IndexedDB operations
6. **Consider Data Size**: Be mindful of the amount of data stored, especially for complex window layouts
7. **Implement Migrations**: Plan for data migrations when changing database schema

## 8. Troubleshooting

### Common Errors and Solutions

1. **"QuotaExceededError"**
   - Solution: Reduce the amount of data stored or request more storage using the Storage API

2. **"VersionError"**
   - Solution: Close all other tabs using the database before upgrading

3. **"InvalidStateError"**
   - Solution: Ensure you're not trying to use a closed database connection

4. **"TransactionInactiveError"**
   - Solution: Complete all operations before the transaction completes

5. **"DataCloneError"**
   - Solution: Ensure all objects being stored are cloneable (no functions, DOM nodes, etc.)

### Recovery Strategies

1. **Implement a fallback to localStorage** for critical data
2. **Add a "Reset Database" feature** for users to clear corrupted data
3. **Implement data validation** before saving to prevent corrupted states
4. **Create periodic backups** of important window layouts

## Implementation Checklist

1. [ ] Set up basic IndexedDB configuration
2. [ ] Create database initialization code
3. [ ] Implement CRUD operations for workspaces and window states
4. [ ] Create WorkspaceContext for managing workspace persistence
5. [ ] Modify WindowStateContext to use IndexedDB instead of localStorage
6. [ ] Update useWindowManager to use the new context
7. [ ] Update App.jsx to include the WorkspaceProvider
8. [ ] Test persistence across page refreshes
9. [ ] Test persistence across logout/login
10. [ ] Implement error handling and recovery strategies
